
Proyecto2.elf:     file format elf32-littlenios2
Proyecto2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0200022c

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001a9c0 memsz 0x0001ab40 flags rwx
    LOAD off    0x0001c000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  0001c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000147b0  0200022c  0200022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004418  020149dc  020149dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  02018df4  02018df4  00019df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  0201a9e0  0201a9e0  0001b9e0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0201ab60  0201ab60  0001c000  2**0
                  CONTENTS
  7 .epcs         00000000  04001020  04001020  0001c000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001c000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001018  00000000  00000000  0001c028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000281a1  00000000  00000000  0001d040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a142  00000000  00000000  000451e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ca49  00000000  00000000  0004f323  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027a8  00000000  00000000  0005bd6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003edc  00000000  00000000  0005e514  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ef7  00000000  00000000  000623f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000792e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a0  00000000  00000000  00079328  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e36e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007e371  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e374  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e375  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e376  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e37a  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e37e  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0007e382  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0007e386  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0007e38a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000005  00000000  00000000  0007e38e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  0007e393  2**0
                  CONTENTS, READONLY
 30 .jdi          000034fb  00000000  00000000  0007e3c1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000686c2  00000000  00000000  000818bc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
0200022c l    d  .text	00000000 .text
020149dc l    d  .rodata	00000000 .rodata
02018df4 l    d  .rwdata	00000000 .rwdata
0201a9e0 l    d  .bss	00000000 .bss
0201ab60 l    d  .sdram	00000000 .sdram
04001020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Proyecto2_bsp//obj/HAL/src/crt0.o
02000260 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 max7219.c
00000000 l    df *ABS*	00000000 impure.c
02018df4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
02018b2a l     O .rodata	00000010 zeroes.4255
02006504 l     F .text	000000bc __sbprintf
02018b3a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02006868 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200844c l     F .text	00000008 __fp_lock
02008454 l     F .text	00000008 __fp_unlock
02008468 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
02019238 l     O .rwdata	00000020 lc_ctype_charset
02019218 l     O .rwdata	00000020 lc_message_charset
02019258 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
02018b68 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200b7ac l     F .text	000000fc __sprint_r.part.0
02018c8c l     O .rodata	00000010 zeroes.4200
02018c9c l     O .rodata	00000010 blanks.4199
0200cbd4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0200e1b0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
02010b00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02010c28 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02010c54 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
02010f68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
02011064 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02011248 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201a9c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
02011698 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
020117e8 l     F .text	00000038 alt_dev_reg
02019840 l     O .rwdata	000000cc epcs
0201990c l     O .rwdata	00001060 jtag
0201a96c l     O .rwdata	0000002c parallel_port_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
020118cc l     F .text	00000038 alt_flash_device_register
02011958 l     F .text	000003f8 alt_epcs_flash_query
02011d50 l     F .text	000000e8 alt_epcs_flash_memcmp
02012124 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
020125ec l     F .text	00000204 altera_avalon_jtag_uart_irq
020127f0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02012e10 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
02012f68 l     F .text	00000038 epcs_test_wip
02012fa0 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020137d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02013d04 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
02013e5c l     F .text	00000050 alt_get_errno
02013eac l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0201aa34 g     O .bss	00000004 alt_instruction_exception_handler
0200ae24 g     F .text	00000074 _mprec_log10
02012098 g     F .text	0000008c alt_epcs_flash_get_info
0200af10 g     F .text	0000008c __any_on
0200d154 g     F .text	00000054 _isatty_r
02018b74 g     O .rodata	00000028 __mprec_tinytens
02011190 g     F .text	00000078 alt_main
02004268 g     F .text	000000a8 _puts_r
0201aa60 g     O .bss	00000100 alt_irq
0200d1a8 g     F .text	0000005c _lseek_r
0200f520 g     F .text	00000084 .hidden __eqdf2
02009264 g     F .text	00000058 _gettimeofday_r
0201ab60 g       *ABS*	00000000 __alt_heap_start
020040c0 g     F .text	0000003c printf
0200d260 g     F .text	0000009c _wcrtomb_r
0200b6a4 g     F .text	0000005c __sseek
020087ac g     F .text	00000010 __sinit
020065c0 g     F .text	00000138 __swbuf_r
020092bc g     F .text	0000007c _setlocale_r
02008604 g     F .text	00000078 __sfmoreglue
02011228 g     F .text	00000020 __malloc_unlock
0201a9e0 g     O .bss	00000004 j
02009de4 g     F .text	0000015c memmove
02008794 g     F .text	00000018 _cleanup
02003b60 g     F .text	00000044 Outputlow_clk
02009f40 g     F .text	000000a8 _Balloc
0200f5a4 g     F .text	000000e0 .hidden __gtdf2
02014100 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
02012fd8 g     F .text	000000f8 epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02003c28 g     F .text	00000040 OutputHigh_cs
0200d0fc g     F .text	00000058 _fstat_r
0201a9f0 g     O .bss	00000004 errno
0200b620 g     F .text	00000008 __seofread
0201aa20 g     O .bss	00000004 alt_argv
02022998 g       *ABS*	00000000 _gp
02011668 g     F .text	00000030 usleep
02003b1c g     F .text	00000044 Outputlow_Din
020196c0 g     O .rwdata	00000180 alt_fd_list
02013214 g     F .text	00000068 epcs_write_status_register
02014324 g     F .text	00000090 alt_find_dev
02003e38 g     F .text	00000138 memcpy
0200845c g     F .text	0000000c _cleanup_r
02010928 g     F .text	000000d0 .hidden __floatsidf
02003c68 g     F .text	00000050 max7219_int
02003adc g     F .text	00000040 OutputHigh_Din
02013de4 g     F .text	00000078 alt_io_redirect
0200f684 g     F .text	000000e0 .hidden __ltdf2
020149dc g       *ABS*	00000000 __DTOR_END__
02004310 g     F .text	00000014 puts
0201459c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0201222c g     F .text	00000100 alt_epcs_flash_write_block
0200b504 g     F .text	00000074 __fpclassifyd
0200ad80 g     F .text	000000a4 __ratio
0200cbb0 g     F .text	00000024 __vfiprintf_internal
020129ec g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02004094 g     F .text	0000002c _printf_r
0200e2cc g     F .text	00000008 .hidden __udivsi3
02010fb8 g     F .text	000000ac isatty
02003be4 g     F .text	00000044 Outputlow_cs
02018bc4 g     O .rodata	000000c8 __mprec_tens
02009338 g     F .text	0000000c __locale_charset
0201aa0c g     O .bss	00000008 alt_timezone
0201aa08 g     O .bss	00000004 __malloc_top_pad
0201a9a0 g     O .rwdata	00000004 __mb_cur_max
02009368 g     F .text	0000000c _localeconv_r
0200a374 g     F .text	0000003c __i2b
02008c10 g     F .text	000004cc __sfvwrite_r
0200b578 g     F .text	00000054 _sbrk_r
0200d204 g     F .text	0000005c _read_r
0201a9c0 g     O .rwdata	00000004 alt_max_fd
0200ce18 g     F .text	000000f0 _fclose_r
0200841c g     F .text	00000030 fflush
0201aa04 g     O .bss	00000004 __malloc_max_sbrked_mem
0200e304 g     F .text	0000089c .hidden __adddf3
020121b8 g     F .text	00000074 alt_epcs_flash_erase_block
0200ab28 g     F .text	0000011c __b2d
0200db94 g     F .text	0000061c .hidden __umoddi3
020110b4 g     F .text	000000dc lseek
0201a998 g     O .rwdata	00000004 _global_impure_ptr
020134dc g     F .text	0000005c epcs_exit_4_bytes_mode
0200af9c g     F .text	00000568 _realloc_r
0201ab60 g       *ABS*	00000000 __bss_end
02013c14 g     F .text	000000f0 alt_iic_isr_register
02011564 g     F .text	00000104 alt_tick
0200d554 g     F .text	00000640 .hidden __udivdi3
0200cf1c g     F .text	00000184 _fputwc_r
02018b9c g     O .rodata	00000028 __mprec_bigtens
0200a158 g     F .text	00000104 __s2b
020109f8 g     F .text	000000a4 .hidden __floatunsidf
0200a8d0 g     F .text	00000060 __mcmp
020087cc g     F .text	00000018 __fp_lock_all
02013bc8 g     F .text	0000004c alt_ic_irq_enabled
020114cc g     F .text	00000098 alt_alarm_stop
0201aa30 g     O .bss	00000004 alt_irq_active
020000fc g     F .exceptions	000000d0 alt_irq_handler
02019698 g     O .rwdata	00000028 alt_dev_null
0200a25c g     F .text	00000068 __hi0bits
020108a0 g     F .text	00000088 .hidden __fixdfsi
0201a9b8 g     O .rwdata	00000008 alt_dev_list
020116e8 g     F .text	00000100 write
020040fc g     F .text	000000a0 _putc_r
02010ca4 g     F .text	000000b8 fstat
0200f684 g     F .text	000000e0 .hidden __ledf2
0200a640 g     F .text	00000140 __pow5mult
0200b8c0 g     F .text	000012f0 ___vfiprintf_internal_r
0201a9fc g     O .bss	00000004 __nlocale_changed
0200e2d4 g     F .text	00000008 .hidden __umodsi3
02013398 g     F .text	00000068 epcs_read_electronic_signature
0201ab60 g       *ABS*	00000000 end
02012528 g     F .text	000000c4 altera_avalon_jtag_uart_init
0201a9e4 g     O .bss	00000004 i
020001cc g     F .exceptions	00000060 alt_instruction_exception_entry
020149dc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02012e84 g     F .text	00000088 alt_avalon_timer_sc_init
02010a9c g     F .text	00000064 .hidden __clzsi2
02012bf8 g     F .text	00000218 altera_avalon_jtag_uart_write
020087bc g     F .text	00000004 __sfp_lock_acquire
02009cfc g     F .text	000000e8 memchr
02004488 g     F .text	00002058 ___vfprintf_internal_r
02008920 g     F .text	000002f0 _free_r
02009344 g     F .text	00000010 __locale_mb_cur_max
02014814 g     F .text	00000194 __call_exitprocs
0201a9f8 g     O .bss	00000004 __mlocale_changed
0201a9a4 g     O .rwdata	00000004 __malloc_sbrk_base
0200022c g     F .text	00000038 _start
0201aa28 g     O .bss	00000004 _alt_tick_rate
0200433c g     F .text	00000064 rand
0200a780 g     F .text	00000150 __lshift
02014120 g     F .text	00000204 alt_avalon_spi_command
0201aa2c g     O .bss	00000004 _alt_nticks
02011298 g     F .text	00000104 read
02011854 g     F .text	00000078 alt_sys_init
02014700 g     F .text	00000114 __register_exitproc
0200a3b0 g     F .text	00000290 __multiply
02012898 g     F .text	00000068 altera_avalon_jtag_uart_close
0200e2dc g     F .text	00000028 .hidden __mulsi3
0201aa38 g     O .bss	00000028 __malloc_current_mallinfo
0200ac44 g     F .text	0000013c __d2b
02012f0c g     F .text	0000005c epcs_read_status_register
020123c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020144c8 g     F .text	000000d4 alt_get_fd
02013678 g     F .text	00000158 alt_busy_sleep
0200ccec g     F .text	00000054 _close_r
02003d34 g     F .text	00000104 sen_2_byte_info
02013400 g     F .text	00000080 epcs_read_device_id
02014684 g     F .text	0000007c memcmp
02012484 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0201ab60 g       *ABS*	00000000 __alt_stack_base
020124d4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02006714 g     F .text	00000154 __swsetup_r
0200eba0 g     F .text	00000980 .hidden __divdf3
0200867c g     F .text	00000118 __sfp
0200ae98 g     F .text	00000078 __copybits
02019290 g     O .rwdata	00000408 __malloc_av_
020087c8 g     F .text	00000004 __sinit_lock_release
0200f764 g     F .text	0000086c .hidden __muldf3
0200b5cc g     F .text	00000054 __sread
020143b4 g     F .text	00000114 alt_find_file
02013820 g     F .text	000000a4 alt_dev_llist_insert
02011208 g     F .text	00000020 __malloc_lock
0201141c g     F .text	000000b0 sbrk
020083c0 g     F .text	0000005c _fflush_r
0200cd40 g     F .text	000000d8 _calloc_r
0201a9d4 g     O .rwdata	00000008 alt_flash_dev_list
02010d5c g     F .text	0000020c gettimeofday
0201a9e0 g       *ABS*	00000000 __bss_start
02003f70 g     F .text	00000124 memset
02000264 g     F .text	00003878 main
0201aa24 g     O .bss	00000004 alt_envp
0201aa00 g     O .bss	00000004 __malloc_max_total_mem
02012424 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020066f8 g     F .text	0000001c __swbuf
02004324 g     F .text	00000018 srand
02003ba4 g     F .text	00000040 OutputHigh_clk
0200b700 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200cf08 g     F .text	00000014 fclose
02006a90 g     F .text	00001728 _dtoa_r
02009554 g     F .text	000007a8 _malloc_r
0200d3bc g     F .text	00000030 __ascii_wctomb
02004438 g     F .text	00000050 time
0201a9c4 g     O .rwdata	00000004 alt_errno
020090dc g     F .text	000000c4 _fwalk
0200419c g     F .text	000000cc putc
0200e21c g     F .text	00000054 .hidden __divsi3
020087fc g     F .text	00000124 _malloc_trim_r
020149dc g       *ABS*	00000000 __CTOR_END__
02011e38 g     F .text	00000260 alt_epcs_flash_write
0200b708 g     F .text	000000a4 strcmp
020149dc g       *ABS*	00000000 __DTOR_LIST__
0200f520 g     F .text	00000084 .hidden __nedf2
02011820 g     F .text	00000034 alt_irq_init
0201139c g     F .text	00000080 alt_release_fd
02018cac g     O .rodata	00000100 .hidden __clz_tab
0201a9f4 g     O .bss	00000004 _PathLocale
02014638 g     F .text	00000014 atexit
0200cc90 g     F .text	0000005c _write_r
02009374 g     F .text	0000001c setlocale
0201a99c g     O .rwdata	00000004 _impure_ptr
0201aa1c g     O .bss	00000004 alt_argc
020081b8 g     F .text	00000208 __sflush_r
02013920 g     F .text	0000005c _do_dtors
02009360 g     F .text	00000008 __locale_cjk_lang
02000020 g       .exceptions	00000000 alt_irq_entry
0200aac8 g     F .text	00000060 __ulp
020087e4 g     F .text	00000018 __fp_unlock_all
0201a9b0 g     O .rwdata	00000008 alt_fs_list
0201aa14 g     O .bss	00000008 alt_resettime
02009390 g     F .text	0000000c localeconv
020130d0 g     F .text	000000f4 epcs_read_buffer
02011904 g     F .text	00000054 alt_epcs_flash_init
02013a34 g     F .text	00000050 alt_ic_isr_register
0201a9e0 g       *ABS*	00000000 _edata
0201ab60 g       *ABS*	00000000 _end
0201397c g     F .text	00000068 alt_flash_open_dev
02012900 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
02013b24 g     F .text	000000a4 alt_ic_irq_disable
02013480 g     F .text	0000005c epcs_enter_4_bytes_mode
0200b628 g     F .text	0000007c __swrite
0201a9a8 g     O .rwdata	00000004 __malloc_trim_threshold
02009354 g     F .text	0000000c __locale_msgcharset
0201464c g     F .text	00000038 exit
020091a0 g     F .text	000000c4 _fwalk_reent
0200a930 g     F .text	00000198 __mdiff
020139e4 g     F .text	00000050 alt_flash_close_dev
0200e270 g     F .text	0000005c .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
020087c0 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02003cb8 g     F .text	0000007c max7219_senbit
020149a8 g     F .text	00000034 _exit
02013538 g     F .text	00000140 alt_alarm_start
0200d448 g     F .text	0000010c .hidden __muldi3
0200939c g     F .text	000001b8 __smakebuf_r
020043a0 g     F .text	00000098 strlen
020131c4 g     F .text	00000050 epcs_write_enable
02013fa0 g     F .text	00000160 open
0200f5a4 g     F .text	000000e0 .hidden __gedf2
0201a9ac g     O .rwdata	00000004 __wctomb
0200b8a8 g     F .text	00000018 __sprint_r
0201a9dc g     O .rwdata	00000004 alt_priority_mask
02013a84 g     F .text	000000a0 alt_ic_irq_enable
020064e0 g     F .text	00000024 __vfprintf_internal
04001000 g       *ABS*	00000000 __alt_mem_epcs
0200d3ec g     F .text	0000005c _wctomb_r
0200ffd0 g     F .text	000008d0 .hidden __subdf3
0201232c g     F .text	00000098 alt_epcs_flash_read
0200a2c4 g     F .text	000000b0 __lo0bits
0201a9cc g     O .rwdata	00000008 alt_alarm_list
020138c4 g     F .text	0000005c _do_ctors
0200d2fc g     F .text	000000c0 wcrtomb
02010b50 g     F .text	000000d8 close
0201a9e8 g     O .bss	00000007 matriz
0200d0a0 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
020087c4 g     F .text	00000004 __sinit_lock_acquire
0201327c g     F .text	0000011c epcs_write_buffer
0200a010 g     F .text	00000148 __multadd
02009fe8 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001cc0 	call	20001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	008080b4 	movhi	r2,514
 2000140:	10aa9804 	addi	r2,r2,-21920
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	008080b4 	movhi	r2,514
 2000158:	10aa9804 	addi	r2,r2,-21920
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	21000104 	addi	r4,r4,4
 2000168:	1105883a 	add	r2,r2,r4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	e037883a 	mov	sp,fp
 20001bc:	dfc00117 	ldw	ra,4(sp)
 20001c0:	df000017 	ldw	fp,0(sp)
 20001c4:	dec00204 	addi	sp,sp,8
 20001c8:	f800283a 	ret

020001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001cc:	defffb04 	addi	sp,sp,-20
 20001d0:	dfc00415 	stw	ra,16(sp)
 20001d4:	df000315 	stw	fp,12(sp)
 20001d8:	df000304 	addi	fp,sp,12
 20001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e0:	00bfffc4 	movi	r2,-1
 20001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001ec:	d0a02717 	ldw	r2,-32612(gp)
 20001f0:	10000726 	beq	r2,zero,2000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f4:	d0a02717 	ldw	r2,-32612(gp)
 20001f8:	e0fffd17 	ldw	r3,-12(fp)
 20001fc:	1809883a 	mov	r4,r3
 2000200:	e17fff17 	ldw	r5,-4(fp)
 2000204:	e1bffe17 	ldw	r6,-8(fp)
 2000208:	103ee83a 	callr	r2
 200020c:	00000206 	br	2000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000214:	0005883a 	mov	r2,zero
}
 2000218:	e037883a 	mov	sp,fp
 200021c:	dfc00117 	ldw	ra,4(sp)
 2000220:	df000017 	ldw	fp,0(sp)
 2000224:	dec00204 	addi	sp,sp,8
 2000228:	f800283a 	ret

Disassembly of section .text:

0200022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 200022c:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000234:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 2000238:	d68a6614 	ori	gp,gp,10648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 200023c:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000240:	10aa7814 	ori	r2,r2,43488

    movhi r3, %hi(__bss_end)
 2000244:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 2000248:	18ead814 	ori	r3,r3,43872

    beq r2, r3, 1f
 200024c:	10c00326 	beq	r2,r3,200025c <_start+0x30>

0:
    stw zero, (r2)
 2000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 2000258:	10fffd36 	bltu	r2,r3,2000250 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 200025c:	20111900 	call	2011190 <alt_main>

02000260 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000260:	003fff06 	br	2000260 <alt_after_alt_main>

02000264 <main>:

char matriz [7];
int i;
int j;
int main()
{	printf("Hello from Nios II!\n");
 2000264:	defffd04 	addi	sp,sp,-12
 2000268:	dfc00215 	stw	ra,8(sp)
 200026c:	df000115 	stw	fp,4(sp)
 2000270:	dc000015 	stw	r16,0(sp)
 2000274:	df000104 	addi	fp,sp,4
 2000278:	023ffff4 	movhi	r8,65535
 200027c:	421f7104 	addi	r8,r8,32196
 2000280:	da37883a 	add	sp,sp,r8
 2000284:	01008074 	movhi	r4,513
 2000288:	21127704 	addi	r4,r4,18908
 200028c:	20043100 	call	2004310 <puts>
	// variable para la salida en los pines del GPIO
	unsigned int portlog=0;
 2000290:	00bffff4 	movhi	r2,65535
 2000294:	109f7b04 	addi	r2,r2,32236
 2000298:	1705883a 	add	r2,r2,fp
 200029c:	10000015 	stw	zero,0(r2)
	// selecionar pines de salida
	IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DIRECTION, 0x0000000f);
 20002a0:	00c003c4 	movi	r3,15
 20002a4:	00810034 	movhi	r2,1024
 20002a8:	10881904 	addi	r2,r2,8292
 20002ac:	10c00035 	stwio	r3,0(r2)
	// programa para generar figura
	while(1)
	{
		  // envio de información:
		// inicio comunicacion
		max7219_int(portlog);
 20002b0:	00fffff4 	movhi	r3,65535
 20002b4:	18df7b04 	addi	r3,r3,32236
 20002b8:	1f07883a 	add	r3,r3,fp
 20002bc:	18800017 	ldw	r2,0(r3)
 20002c0:	1009883a 	mov	r4,r2
 20002c4:	2003c680 	call	2003c68 <max7219_int>
		// configuracion
		sen_2_byte_info(portlog,ADDR_SHUTDOWN,NORMAL_OPERATION);
 20002c8:	013ffff4 	movhi	r4,65535
 20002cc:	211f7b04 	addi	r4,r4,32236
 20002d0:	2709883a 	add	r4,r4,fp
 20002d4:	20800017 	ldw	r2,0(r4)
 20002d8:	1009883a 	mov	r4,r2
 20002dc:	01400304 	movi	r5,12
 20002e0:	01800044 	movi	r6,1
 20002e4:	2003d340 	call	2003d34 <sen_2_byte_info>
		sen_2_byte_info(portlog,ADDR_SCAN_LIMIT,DIS_DIG_0_7);
 20002e8:	017ffff4 	movhi	r5,65535
 20002ec:	295f7b04 	addi	r5,r5,32236
 20002f0:	2f0b883a 	add	r5,r5,fp
 20002f4:	28800017 	ldw	r2,0(r5)
 20002f8:	1009883a 	mov	r4,r2
 20002fc:	014002c4 	movi	r5,11
 2000300:	018001c4 	movi	r6,7
 2000304:	2003d340 	call	2003d34 <sen_2_byte_info>
		sen_2_byte_info(portlog,ADDR_INTENSITY,INTENSITY_21_32);
 2000308:	01bffff4 	movhi	r6,65535
 200030c:	319f7b04 	addi	r6,r6,32236
 2000310:	370d883a 	add	r6,r6,fp
 2000314:	30800017 	ldw	r2,0(r6)
 2000318:	1009883a 	mov	r4,r2
 200031c:	01400284 	movi	r5,10
 2000320:	01800284 	movi	r6,10
 2000324:	2003d340 	call	2003d34 <sen_2_byte_info>
		sen_2_byte_info(portlog,ADDR_DECODE_MODE,NO_DECODE_7_0);
 2000328:	00fffff4 	movhi	r3,65535
 200032c:	18df7b04 	addi	r3,r3,32236
 2000330:	1f07883a 	add	r3,r3,fp
 2000334:	18800017 	ldw	r2,0(r3)
 2000338:	1009883a 	mov	r4,r2
 200033c:	01400244 	movi	r5,9
 2000340:	000d883a 	mov	r6,zero
 2000344:	2003d340 	call	2003d34 <sen_2_byte_info>
		sen_2_byte_info(portlog,ADDR_DISPLAY_TEST,NORMAL_OPETAION_MODE);
 2000348:	013ffff4 	movhi	r4,65535
 200034c:	211f7b04 	addi	r4,r4,32236
 2000350:	2709883a 	add	r4,r4,fp
 2000354:	20800017 	ldw	r2,0(r4)
 2000358:	1009883a 	mov	r4,r2
 200035c:	014003c4 	movi	r5,15
 2000360:	000d883a 	mov	r6,zero
 2000364:	2003d340 	call	2003d34 <sen_2_byte_info>
		unsigned int moves[64][64]={{1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,}};
 2000368:	e0ef7f04 	addi	r3,fp,-16900
 200036c:	00900004 	movi	r2,16384
 2000370:	1809883a 	mov	r4,r3
 2000374:	000b883a 	mov	r5,zero
 2000378:	100d883a 	mov	r6,r2
 200037c:	2003f700 	call	2003f70 <memset>
 2000380:	00800044 	movi	r2,1
 2000384:	e0af7f15 	stw	r2,-16900(fp)
 2000388:	00800044 	movi	r2,1
 200038c:	e0af8015 	stw	r2,-16896(fp)
 2000390:	00800044 	movi	r2,1
 2000394:	e0af8715 	stw	r2,-16868(fp)
 2000398:	00800044 	movi	r2,1
 200039c:	e0afbf15 	stw	r2,-16644(fp)
 20003a0:	00800044 	movi	r2,1
 20003a4:	e0afc015 	stw	r2,-16640(fp)
 20003a8:	00800044 	movi	r2,1
 20003ac:	e0afc115 	stw	r2,-16636(fp)
 20003b0:	00800044 	movi	r2,1
 20003b4:	e0afc815 	stw	r2,-16608(fp)
 20003b8:	00800044 	movi	r2,1
 20003bc:	e0b00015 	stw	r2,-16384(fp)
 20003c0:	00800044 	movi	r2,1
 20003c4:	e0b00115 	stw	r2,-16380(fp)
 20003c8:	00800044 	movi	r2,1
 20003cc:	e0b00215 	stw	r2,-16376(fp)
 20003d0:	00800044 	movi	r2,1
 20003d4:	e0b00915 	stw	r2,-16348(fp)
 20003d8:	00800044 	movi	r2,1
 20003dc:	e0b04115 	stw	r2,-16124(fp)
 20003e0:	00800044 	movi	r2,1
 20003e4:	e0b04215 	stw	r2,-16120(fp)
 20003e8:	00800044 	movi	r2,1
 20003ec:	e0b04315 	stw	r2,-16116(fp)
 20003f0:	00800044 	movi	r2,1
 20003f4:	e0b04a15 	stw	r2,-16088(fp)
 20003f8:	00800044 	movi	r2,1
 20003fc:	e0b08215 	stw	r2,-15864(fp)
 2000400:	00800044 	movi	r2,1
 2000404:	e0b08315 	stw	r2,-15860(fp)
 2000408:	00800044 	movi	r2,1
 200040c:	e0b08415 	stw	r2,-15856(fp)
 2000410:	00800044 	movi	r2,1
 2000414:	e0b08b15 	stw	r2,-15828(fp)
 2000418:	00800044 	movi	r2,1
 200041c:	e0b0c315 	stw	r2,-15604(fp)
 2000420:	00800044 	movi	r2,1
 2000424:	e0b0c415 	stw	r2,-15600(fp)
 2000428:	00800044 	movi	r2,1
 200042c:	e0b0c515 	stw	r2,-15596(fp)
 2000430:	00800044 	movi	r2,1
 2000434:	e0b0cc15 	stw	r2,-15568(fp)
 2000438:	00800044 	movi	r2,1
 200043c:	e0b10415 	stw	r2,-15344(fp)
 2000440:	00800044 	movi	r2,1
 2000444:	e0b10515 	stw	r2,-15340(fp)
 2000448:	00800044 	movi	r2,1
 200044c:	e0b10615 	stw	r2,-15336(fp)
 2000450:	00800044 	movi	r2,1
 2000454:	e0b10d15 	stw	r2,-15308(fp)
 2000458:	00800044 	movi	r2,1
 200045c:	e0b14515 	stw	r2,-15084(fp)
 2000460:	00800044 	movi	r2,1
 2000464:	e0b14615 	stw	r2,-15080(fp)
 2000468:	00800044 	movi	r2,1
 200046c:	e0b14e15 	stw	r2,-15048(fp)
 2000470:	00800044 	movi	r2,1
 2000474:	e0b17f15 	stw	r2,-14852(fp)
 2000478:	00800044 	movi	r2,1
 200047c:	e0b18715 	stw	r2,-14820(fp)
 2000480:	00800044 	movi	r2,1
 2000484:	e0b18815 	stw	r2,-14816(fp)
 2000488:	00800044 	movi	r2,1
 200048c:	e0b18f15 	stw	r2,-14788(fp)
 2000490:	00800044 	movi	r2,1
 2000494:	e0b1c015 	stw	r2,-14592(fp)
 2000498:	00800044 	movi	r2,1
 200049c:	e0b1c715 	stw	r2,-14564(fp)
 20004a0:	00800044 	movi	r2,1
 20004a4:	e0b1c815 	stw	r2,-14560(fp)
 20004a8:	00800044 	movi	r2,1
 20004ac:	e0b1c915 	stw	r2,-14556(fp)
 20004b0:	00800044 	movi	r2,1
 20004b4:	e0b1d015 	stw	r2,-14528(fp)
 20004b8:	00800044 	movi	r2,1
 20004bc:	e0b20115 	stw	r2,-14332(fp)
 20004c0:	00800044 	movi	r2,1
 20004c4:	e0b20815 	stw	r2,-14304(fp)
 20004c8:	00800044 	movi	r2,1
 20004cc:	e0b20915 	stw	r2,-14300(fp)
 20004d0:	00800044 	movi	r2,1
 20004d4:	e0b20a15 	stw	r2,-14296(fp)
 20004d8:	00800044 	movi	r2,1
 20004dc:	e0b21115 	stw	r2,-14268(fp)
 20004e0:	00800044 	movi	r2,1
 20004e4:	e0b24215 	stw	r2,-14072(fp)
 20004e8:	00800044 	movi	r2,1
 20004ec:	e0b24915 	stw	r2,-14044(fp)
 20004f0:	00800044 	movi	r2,1
 20004f4:	e0b24a15 	stw	r2,-14040(fp)
 20004f8:	00800044 	movi	r2,1
 20004fc:	e0b24b15 	stw	r2,-14036(fp)
 2000500:	00800044 	movi	r2,1
 2000504:	e0b25215 	stw	r2,-14008(fp)
 2000508:	00800044 	movi	r2,1
 200050c:	e0b28315 	stw	r2,-13812(fp)
 2000510:	00800044 	movi	r2,1
 2000514:	e0b28a15 	stw	r2,-13784(fp)
 2000518:	00800044 	movi	r2,1
 200051c:	e0b28b15 	stw	r2,-13780(fp)
 2000520:	00800044 	movi	r2,1
 2000524:	e0b28c15 	stw	r2,-13776(fp)
 2000528:	00800044 	movi	r2,1
 200052c:	e0b29315 	stw	r2,-13748(fp)
 2000530:	00800044 	movi	r2,1
 2000534:	e0b2c415 	stw	r2,-13552(fp)
 2000538:	00800044 	movi	r2,1
 200053c:	e0b2cb15 	stw	r2,-13524(fp)
 2000540:	00800044 	movi	r2,1
 2000544:	e0b2cc15 	stw	r2,-13520(fp)
 2000548:	00800044 	movi	r2,1
 200054c:	e0b2cd15 	stw	r2,-13516(fp)
 2000550:	00800044 	movi	r2,1
 2000554:	e0b2d415 	stw	r2,-13488(fp)
 2000558:	00800044 	movi	r2,1
 200055c:	e0b30515 	stw	r2,-13292(fp)
 2000560:	00800044 	movi	r2,1
 2000564:	e0b30c15 	stw	r2,-13264(fp)
 2000568:	00800044 	movi	r2,1
 200056c:	e0b30d15 	stw	r2,-13260(fp)
 2000570:	00800044 	movi	r2,1
 2000574:	e0b30e15 	stw	r2,-13256(fp)
 2000578:	00800044 	movi	r2,1
 200057c:	e0b31515 	stw	r2,-13228(fp)
 2000580:	00800044 	movi	r2,1
 2000584:	e0b34615 	stw	r2,-13032(fp)
 2000588:	00800044 	movi	r2,1
 200058c:	e0b34d15 	stw	r2,-13004(fp)
 2000590:	00800044 	movi	r2,1
 2000594:	e0b34e15 	stw	r2,-13000(fp)
 2000598:	00800044 	movi	r2,1
 200059c:	e0b35615 	stw	r2,-12968(fp)
 20005a0:	00800044 	movi	r2,1
 20005a4:	e0b38715 	stw	r2,-12772(fp)
 20005a8:	00800044 	movi	r2,1
 20005ac:	e0b38f15 	stw	r2,-12740(fp)
 20005b0:	00800044 	movi	r2,1
 20005b4:	e0b39015 	stw	r2,-12736(fp)
 20005b8:	00800044 	movi	r2,1
 20005bc:	e0b39715 	stw	r2,-12708(fp)
 20005c0:	00800044 	movi	r2,1
 20005c4:	e0b3c815 	stw	r2,-12512(fp)
 20005c8:	00800044 	movi	r2,1
 20005cc:	e0b3cf15 	stw	r2,-12484(fp)
 20005d0:	00800044 	movi	r2,1
 20005d4:	e0b3d015 	stw	r2,-12480(fp)
 20005d8:	00800044 	movi	r2,1
 20005dc:	e0b3d115 	stw	r2,-12476(fp)
 20005e0:	00800044 	movi	r2,1
 20005e4:	e0b3d815 	stw	r2,-12448(fp)
 20005e8:	00800044 	movi	r2,1
 20005ec:	e0b40915 	stw	r2,-12252(fp)
 20005f0:	00800044 	movi	r2,1
 20005f4:	e0b41015 	stw	r2,-12224(fp)
 20005f8:	00800044 	movi	r2,1
 20005fc:	e0b41115 	stw	r2,-12220(fp)
 2000600:	00800044 	movi	r2,1
 2000604:	e0b41215 	stw	r2,-12216(fp)
 2000608:	00800044 	movi	r2,1
 200060c:	e0b41915 	stw	r2,-12188(fp)
 2000610:	00800044 	movi	r2,1
 2000614:	e0b44a15 	stw	r2,-11992(fp)
 2000618:	00800044 	movi	r2,1
 200061c:	e0b45115 	stw	r2,-11964(fp)
 2000620:	00800044 	movi	r2,1
 2000624:	e0b45215 	stw	r2,-11960(fp)
 2000628:	00800044 	movi	r2,1
 200062c:	e0b45315 	stw	r2,-11956(fp)
 2000630:	00800044 	movi	r2,1
 2000634:	e0b45a15 	stw	r2,-11928(fp)
 2000638:	00800044 	movi	r2,1
 200063c:	e0b48b15 	stw	r2,-11732(fp)
 2000640:	00800044 	movi	r2,1
 2000644:	e0b49215 	stw	r2,-11704(fp)
 2000648:	00800044 	movi	r2,1
 200064c:	e0b49315 	stw	r2,-11700(fp)
 2000650:	00800044 	movi	r2,1
 2000654:	e0b49415 	stw	r2,-11696(fp)
 2000658:	00800044 	movi	r2,1
 200065c:	e0b49b15 	stw	r2,-11668(fp)
 2000660:	00800044 	movi	r2,1
 2000664:	e0b4cc15 	stw	r2,-11472(fp)
 2000668:	00800044 	movi	r2,1
 200066c:	e0b4d315 	stw	r2,-11444(fp)
 2000670:	00800044 	movi	r2,1
 2000674:	e0b4d415 	stw	r2,-11440(fp)
 2000678:	00800044 	movi	r2,1
 200067c:	e0b4d515 	stw	r2,-11436(fp)
 2000680:	00800044 	movi	r2,1
 2000684:	e0b4dc15 	stw	r2,-11408(fp)
 2000688:	00800044 	movi	r2,1
 200068c:	e0b50d15 	stw	r2,-11212(fp)
 2000690:	00800044 	movi	r2,1
 2000694:	e0b51415 	stw	r2,-11184(fp)
 2000698:	00800044 	movi	r2,1
 200069c:	e0b51515 	stw	r2,-11180(fp)
 20006a0:	00800044 	movi	r2,1
 20006a4:	e0b51615 	stw	r2,-11176(fp)
 20006a8:	00800044 	movi	r2,1
 20006ac:	e0b51d15 	stw	r2,-11148(fp)
 20006b0:	00800044 	movi	r2,1
 20006b4:	e0b54e15 	stw	r2,-10952(fp)
 20006b8:	00800044 	movi	r2,1
 20006bc:	e0b55515 	stw	r2,-10924(fp)
 20006c0:	00800044 	movi	r2,1
 20006c4:	e0b55615 	stw	r2,-10920(fp)
 20006c8:	00800044 	movi	r2,1
 20006cc:	e0b55e15 	stw	r2,-10888(fp)
 20006d0:	00800044 	movi	r2,1
 20006d4:	e0b58f15 	stw	r2,-10692(fp)
 20006d8:	00800044 	movi	r2,1
 20006dc:	e0b59715 	stw	r2,-10660(fp)
 20006e0:	00800044 	movi	r2,1
 20006e4:	e0b59815 	stw	r2,-10656(fp)
 20006e8:	00800044 	movi	r2,1
 20006ec:	e0b59f15 	stw	r2,-10628(fp)
 20006f0:	00800044 	movi	r2,1
 20006f4:	e0b5d015 	stw	r2,-10432(fp)
 20006f8:	00800044 	movi	r2,1
 20006fc:	e0b5d715 	stw	r2,-10404(fp)
 2000700:	00800044 	movi	r2,1
 2000704:	e0b5d815 	stw	r2,-10400(fp)
 2000708:	00800044 	movi	r2,1
 200070c:	e0b5d915 	stw	r2,-10396(fp)
 2000710:	00800044 	movi	r2,1
 2000714:	e0b5e015 	stw	r2,-10368(fp)
 2000718:	00800044 	movi	r2,1
 200071c:	e0b61115 	stw	r2,-10172(fp)
 2000720:	00800044 	movi	r2,1
 2000724:	e0b61815 	stw	r2,-10144(fp)
 2000728:	00800044 	movi	r2,1
 200072c:	e0b61915 	stw	r2,-10140(fp)
 2000730:	00800044 	movi	r2,1
 2000734:	e0b61a15 	stw	r2,-10136(fp)
 2000738:	00800044 	movi	r2,1
 200073c:	e0b62115 	stw	r2,-10108(fp)
 2000740:	00800044 	movi	r2,1
 2000744:	e0b65215 	stw	r2,-9912(fp)
 2000748:	00800044 	movi	r2,1
 200074c:	e0b65915 	stw	r2,-9884(fp)
 2000750:	00800044 	movi	r2,1
 2000754:	e0b65a15 	stw	r2,-9880(fp)
 2000758:	00800044 	movi	r2,1
 200075c:	e0b65b15 	stw	r2,-9876(fp)
 2000760:	00800044 	movi	r2,1
 2000764:	e0b66215 	stw	r2,-9848(fp)
 2000768:	00800044 	movi	r2,1
 200076c:	e0b69315 	stw	r2,-9652(fp)
 2000770:	00800044 	movi	r2,1
 2000774:	e0b69a15 	stw	r2,-9624(fp)
 2000778:	00800044 	movi	r2,1
 200077c:	e0b69b15 	stw	r2,-9620(fp)
 2000780:	00800044 	movi	r2,1
 2000784:	e0b69c15 	stw	r2,-9616(fp)
 2000788:	00800044 	movi	r2,1
 200078c:	e0b6a315 	stw	r2,-9588(fp)
 2000790:	00800044 	movi	r2,1
 2000794:	e0b6d415 	stw	r2,-9392(fp)
 2000798:	00800044 	movi	r2,1
 200079c:	e0b6db15 	stw	r2,-9364(fp)
 20007a0:	00800044 	movi	r2,1
 20007a4:	e0b6dc15 	stw	r2,-9360(fp)
 20007a8:	00800044 	movi	r2,1
 20007ac:	e0b6dd15 	stw	r2,-9356(fp)
 20007b0:	00800044 	movi	r2,1
 20007b4:	e0b6e415 	stw	r2,-9328(fp)
 20007b8:	00800044 	movi	r2,1
 20007bc:	e0b71515 	stw	r2,-9132(fp)
 20007c0:	00800044 	movi	r2,1
 20007c4:	e0b71c15 	stw	r2,-9104(fp)
 20007c8:	00800044 	movi	r2,1
 20007cc:	e0b71d15 	stw	r2,-9100(fp)
 20007d0:	00800044 	movi	r2,1
 20007d4:	e0b71e15 	stw	r2,-9096(fp)
 20007d8:	00800044 	movi	r2,1
 20007dc:	e0b72515 	stw	r2,-9068(fp)
 20007e0:	00800044 	movi	r2,1
 20007e4:	e0b75615 	stw	r2,-8872(fp)
 20007e8:	00800044 	movi	r2,1
 20007ec:	e0b75d15 	stw	r2,-8844(fp)
 20007f0:	00800044 	movi	r2,1
 20007f4:	e0b75e15 	stw	r2,-8840(fp)
 20007f8:	00800044 	movi	r2,1
 20007fc:	e0b76615 	stw	r2,-8808(fp)
 2000800:	00800044 	movi	r2,1
 2000804:	e0b79715 	stw	r2,-8612(fp)
 2000808:	00800044 	movi	r2,1
 200080c:	e0b79f15 	stw	r2,-8580(fp)
 2000810:	00800044 	movi	r2,1
 2000814:	e0b7a015 	stw	r2,-8576(fp)
 2000818:	00800044 	movi	r2,1
 200081c:	e0b7a715 	stw	r2,-8548(fp)
 2000820:	00800044 	movi	r2,1
 2000824:	e0b7d815 	stw	r2,-8352(fp)
 2000828:	00800044 	movi	r2,1
 200082c:	e0b7df15 	stw	r2,-8324(fp)
 2000830:	00800044 	movi	r2,1
 2000834:	e0b7e015 	stw	r2,-8320(fp)
 2000838:	00800044 	movi	r2,1
 200083c:	e0b7e115 	stw	r2,-8316(fp)
 2000840:	00800044 	movi	r2,1
 2000844:	e0b7e815 	stw	r2,-8288(fp)
 2000848:	00800044 	movi	r2,1
 200084c:	e0b81915 	stw	r2,-8092(fp)
 2000850:	00800044 	movi	r2,1
 2000854:	e0b82015 	stw	r2,-8064(fp)
 2000858:	00800044 	movi	r2,1
 200085c:	e0b82115 	stw	r2,-8060(fp)
 2000860:	00800044 	movi	r2,1
 2000864:	e0b82215 	stw	r2,-8056(fp)
 2000868:	00800044 	movi	r2,1
 200086c:	e0b82915 	stw	r2,-8028(fp)
 2000870:	00800044 	movi	r2,1
 2000874:	e0b85a15 	stw	r2,-7832(fp)
 2000878:	00800044 	movi	r2,1
 200087c:	e0b86115 	stw	r2,-7804(fp)
 2000880:	00800044 	movi	r2,1
 2000884:	e0b86215 	stw	r2,-7800(fp)
 2000888:	00800044 	movi	r2,1
 200088c:	e0b86315 	stw	r2,-7796(fp)
 2000890:	00800044 	movi	r2,1
 2000894:	e0b86a15 	stw	r2,-7768(fp)
 2000898:	00800044 	movi	r2,1
 200089c:	e0b89b15 	stw	r2,-7572(fp)
 20008a0:	00800044 	movi	r2,1
 20008a4:	e0b8a215 	stw	r2,-7544(fp)
 20008a8:	00800044 	movi	r2,1
 20008ac:	e0b8a315 	stw	r2,-7540(fp)
 20008b0:	00800044 	movi	r2,1
 20008b4:	e0b8a415 	stw	r2,-7536(fp)
 20008b8:	00800044 	movi	r2,1
 20008bc:	e0b8ab15 	stw	r2,-7508(fp)
 20008c0:	00800044 	movi	r2,1
 20008c4:	e0b8dc15 	stw	r2,-7312(fp)
 20008c8:	00800044 	movi	r2,1
 20008cc:	e0b8e315 	stw	r2,-7284(fp)
 20008d0:	00800044 	movi	r2,1
 20008d4:	e0b8e415 	stw	r2,-7280(fp)
 20008d8:	00800044 	movi	r2,1
 20008dc:	e0b8e515 	stw	r2,-7276(fp)
 20008e0:	00800044 	movi	r2,1
 20008e4:	e0b8ec15 	stw	r2,-7248(fp)
 20008e8:	00800044 	movi	r2,1
 20008ec:	e0b91d15 	stw	r2,-7052(fp)
 20008f0:	00800044 	movi	r2,1
 20008f4:	e0b92415 	stw	r2,-7024(fp)
 20008f8:	00800044 	movi	r2,1
 20008fc:	e0b92515 	stw	r2,-7020(fp)
 2000900:	00800044 	movi	r2,1
 2000904:	e0b92615 	stw	r2,-7016(fp)
 2000908:	00800044 	movi	r2,1
 200090c:	e0b92d15 	stw	r2,-6988(fp)
 2000910:	00800044 	movi	r2,1
 2000914:	e0b95e15 	stw	r2,-6792(fp)
 2000918:	00800044 	movi	r2,1
 200091c:	e0b96515 	stw	r2,-6764(fp)
 2000920:	00800044 	movi	r2,1
 2000924:	e0b96615 	stw	r2,-6760(fp)
 2000928:	00800044 	movi	r2,1
 200092c:	e0b96e15 	stw	r2,-6728(fp)
 2000930:	00800044 	movi	r2,1
 2000934:	e0b99f15 	stw	r2,-6532(fp)
 2000938:	00800044 	movi	r2,1
 200093c:	e0b9a715 	stw	r2,-6500(fp)
 2000940:	00800044 	movi	r2,1
 2000944:	e0b9a815 	stw	r2,-6496(fp)
 2000948:	00800044 	movi	r2,1
 200094c:	e0b9af15 	stw	r2,-6468(fp)
 2000950:	00800044 	movi	r2,1
 2000954:	e0b9e015 	stw	r2,-6272(fp)
 2000958:	00800044 	movi	r2,1
 200095c:	e0b9e715 	stw	r2,-6244(fp)
 2000960:	00800044 	movi	r2,1
 2000964:	e0b9e815 	stw	r2,-6240(fp)
 2000968:	00800044 	movi	r2,1
 200096c:	e0b9e915 	stw	r2,-6236(fp)
 2000970:	00800044 	movi	r2,1
 2000974:	e0b9f015 	stw	r2,-6208(fp)
 2000978:	00800044 	movi	r2,1
 200097c:	e0ba2115 	stw	r2,-6012(fp)
 2000980:	00800044 	movi	r2,1
 2000984:	e0ba2815 	stw	r2,-5984(fp)
 2000988:	00800044 	movi	r2,1
 200098c:	e0ba2915 	stw	r2,-5980(fp)
 2000990:	00800044 	movi	r2,1
 2000994:	e0ba2a15 	stw	r2,-5976(fp)
 2000998:	00800044 	movi	r2,1
 200099c:	e0ba3115 	stw	r2,-5948(fp)
 20009a0:	00800044 	movi	r2,1
 20009a4:	e0ba6215 	stw	r2,-5752(fp)
 20009a8:	00800044 	movi	r2,1
 20009ac:	e0ba6915 	stw	r2,-5724(fp)
 20009b0:	00800044 	movi	r2,1
 20009b4:	e0ba6a15 	stw	r2,-5720(fp)
 20009b8:	00800044 	movi	r2,1
 20009bc:	e0ba6b15 	stw	r2,-5716(fp)
 20009c0:	00800044 	movi	r2,1
 20009c4:	e0ba7215 	stw	r2,-5688(fp)
 20009c8:	00800044 	movi	r2,1
 20009cc:	e0baa315 	stw	r2,-5492(fp)
 20009d0:	00800044 	movi	r2,1
 20009d4:	e0baaa15 	stw	r2,-5464(fp)
 20009d8:	00800044 	movi	r2,1
 20009dc:	e0baab15 	stw	r2,-5460(fp)
 20009e0:	00800044 	movi	r2,1
 20009e4:	e0baac15 	stw	r2,-5456(fp)
 20009e8:	00800044 	movi	r2,1
 20009ec:	e0bab315 	stw	r2,-5428(fp)
 20009f0:	00800044 	movi	r2,1
 20009f4:	e0bae415 	stw	r2,-5232(fp)
 20009f8:	00800044 	movi	r2,1
 20009fc:	e0baeb15 	stw	r2,-5204(fp)
 2000a00:	00800044 	movi	r2,1
 2000a04:	e0baec15 	stw	r2,-5200(fp)
 2000a08:	00800044 	movi	r2,1
 2000a0c:	e0baed15 	stw	r2,-5196(fp)
 2000a10:	00800044 	movi	r2,1
 2000a14:	e0baf415 	stw	r2,-5168(fp)
 2000a18:	00800044 	movi	r2,1
 2000a1c:	e0bb2515 	stw	r2,-4972(fp)
 2000a20:	00800044 	movi	r2,1
 2000a24:	e0bb2c15 	stw	r2,-4944(fp)
 2000a28:	00800044 	movi	r2,1
 2000a2c:	e0bb2d15 	stw	r2,-4940(fp)
 2000a30:	00800044 	movi	r2,1
 2000a34:	e0bb2e15 	stw	r2,-4936(fp)
 2000a38:	00800044 	movi	r2,1
 2000a3c:	e0bb3515 	stw	r2,-4908(fp)
 2000a40:	00800044 	movi	r2,1
 2000a44:	e0bb6615 	stw	r2,-4712(fp)
 2000a48:	00800044 	movi	r2,1
 2000a4c:	e0bb6d15 	stw	r2,-4684(fp)
 2000a50:	00800044 	movi	r2,1
 2000a54:	e0bb6e15 	stw	r2,-4680(fp)
 2000a58:	00800044 	movi	r2,1
 2000a5c:	e0bb7615 	stw	r2,-4648(fp)
 2000a60:	00800044 	movi	r2,1
 2000a64:	e0bba715 	stw	r2,-4452(fp)
 2000a68:	00800044 	movi	r2,1
 2000a6c:	e0bbaf15 	stw	r2,-4420(fp)
 2000a70:	00800044 	movi	r2,1
 2000a74:	e0bbb015 	stw	r2,-4416(fp)
 2000a78:	00800044 	movi	r2,1
 2000a7c:	e0bbb715 	stw	r2,-4388(fp)
 2000a80:	00800044 	movi	r2,1
 2000a84:	e0bbe815 	stw	r2,-4192(fp)
 2000a88:	00800044 	movi	r2,1
 2000a8c:	e0bbef15 	stw	r2,-4164(fp)
 2000a90:	00800044 	movi	r2,1
 2000a94:	e0bbf015 	stw	r2,-4160(fp)
 2000a98:	00800044 	movi	r2,1
 2000a9c:	e0bbf115 	stw	r2,-4156(fp)
 2000aa0:	00800044 	movi	r2,1
 2000aa4:	e0bbf815 	stw	r2,-4128(fp)
 2000aa8:	00800044 	movi	r2,1
 2000aac:	e0bc2915 	stw	r2,-3932(fp)
 2000ab0:	00800044 	movi	r2,1
 2000ab4:	e0bc3015 	stw	r2,-3904(fp)
 2000ab8:	00800044 	movi	r2,1
 2000abc:	e0bc3115 	stw	r2,-3900(fp)
 2000ac0:	00800044 	movi	r2,1
 2000ac4:	e0bc3215 	stw	r2,-3896(fp)
 2000ac8:	00800044 	movi	r2,1
 2000acc:	e0bc3915 	stw	r2,-3868(fp)
 2000ad0:	00800044 	movi	r2,1
 2000ad4:	e0bc6a15 	stw	r2,-3672(fp)
 2000ad8:	00800044 	movi	r2,1
 2000adc:	e0bc7115 	stw	r2,-3644(fp)
 2000ae0:	00800044 	movi	r2,1
 2000ae4:	e0bc7215 	stw	r2,-3640(fp)
 2000ae8:	00800044 	movi	r2,1
 2000aec:	e0bc7315 	stw	r2,-3636(fp)
 2000af0:	00800044 	movi	r2,1
 2000af4:	e0bc7a15 	stw	r2,-3608(fp)
 2000af8:	00800044 	movi	r2,1
 2000afc:	e0bcab15 	stw	r2,-3412(fp)
 2000b00:	00800044 	movi	r2,1
 2000b04:	e0bcb215 	stw	r2,-3384(fp)
 2000b08:	00800044 	movi	r2,1
 2000b0c:	e0bcb315 	stw	r2,-3380(fp)
 2000b10:	00800044 	movi	r2,1
 2000b14:	e0bcb415 	stw	r2,-3376(fp)
 2000b18:	00800044 	movi	r2,1
 2000b1c:	e0bcbb15 	stw	r2,-3348(fp)
 2000b20:	00800044 	movi	r2,1
 2000b24:	e0bcec15 	stw	r2,-3152(fp)
 2000b28:	00800044 	movi	r2,1
 2000b2c:	e0bcf315 	stw	r2,-3124(fp)
 2000b30:	00800044 	movi	r2,1
 2000b34:	e0bcf415 	stw	r2,-3120(fp)
 2000b38:	00800044 	movi	r2,1
 2000b3c:	e0bcf515 	stw	r2,-3116(fp)
 2000b40:	00800044 	movi	r2,1
 2000b44:	e0bcfc15 	stw	r2,-3088(fp)
 2000b48:	00800044 	movi	r2,1
 2000b4c:	e0bd2d15 	stw	r2,-2892(fp)
 2000b50:	00800044 	movi	r2,1
 2000b54:	e0bd3415 	stw	r2,-2864(fp)
 2000b58:	00800044 	movi	r2,1
 2000b5c:	e0bd3515 	stw	r2,-2860(fp)
 2000b60:	00800044 	movi	r2,1
 2000b64:	e0bd3615 	stw	r2,-2856(fp)
 2000b68:	00800044 	movi	r2,1
 2000b6c:	e0bd3d15 	stw	r2,-2828(fp)
 2000b70:	00800044 	movi	r2,1
 2000b74:	e0bd6e15 	stw	r2,-2632(fp)
 2000b78:	00800044 	movi	r2,1
 2000b7c:	e0bd7515 	stw	r2,-2604(fp)
 2000b80:	00800044 	movi	r2,1
 2000b84:	e0bd7615 	stw	r2,-2600(fp)
 2000b88:	00800044 	movi	r2,1
 2000b8c:	e0bd7e15 	stw	r2,-2568(fp)
 2000b90:	00800044 	movi	r2,1
 2000b94:	e0bdaf15 	stw	r2,-2372(fp)
 2000b98:	00800044 	movi	r2,1
 2000b9c:	e0bdb715 	stw	r2,-2340(fp)
 2000ba0:	00800044 	movi	r2,1
 2000ba4:	e0bdb815 	stw	r2,-2336(fp)
 2000ba8:	00800044 	movi	r2,1
 2000bac:	e0bdf015 	stw	r2,-2112(fp)
 2000bb0:	00800044 	movi	r2,1
 2000bb4:	e0bdf715 	stw	r2,-2084(fp)
 2000bb8:	00800044 	movi	r2,1
 2000bbc:	e0bdf815 	stw	r2,-2080(fp)
 2000bc0:	00800044 	movi	r2,1
 2000bc4:	e0bdf915 	stw	r2,-2076(fp)
 2000bc8:	00800044 	movi	r2,1
 2000bcc:	e0be3115 	stw	r2,-1852(fp)
 2000bd0:	00800044 	movi	r2,1
 2000bd4:	e0be3815 	stw	r2,-1824(fp)
 2000bd8:	00800044 	movi	r2,1
 2000bdc:	e0be3915 	stw	r2,-1820(fp)
 2000be0:	00800044 	movi	r2,1
 2000be4:	e0be3a15 	stw	r2,-1816(fp)
 2000be8:	00800044 	movi	r2,1
 2000bec:	e0be7215 	stw	r2,-1592(fp)
 2000bf0:	00800044 	movi	r2,1
 2000bf4:	e0be7915 	stw	r2,-1564(fp)
 2000bf8:	00800044 	movi	r2,1
 2000bfc:	e0be7a15 	stw	r2,-1560(fp)
 2000c00:	00800044 	movi	r2,1
 2000c04:	e0be7b15 	stw	r2,-1556(fp)
 2000c08:	00800044 	movi	r2,1
 2000c0c:	e0beb315 	stw	r2,-1332(fp)
 2000c10:	00800044 	movi	r2,1
 2000c14:	e0beba15 	stw	r2,-1304(fp)
 2000c18:	00800044 	movi	r2,1
 2000c1c:	e0bebb15 	stw	r2,-1300(fp)
 2000c20:	00800044 	movi	r2,1
 2000c24:	e0bebc15 	stw	r2,-1296(fp)
 2000c28:	00800044 	movi	r2,1
 2000c2c:	e0bef415 	stw	r2,-1072(fp)
 2000c30:	00800044 	movi	r2,1
 2000c34:	e0befb15 	stw	r2,-1044(fp)
 2000c38:	00800044 	movi	r2,1
 2000c3c:	e0befc15 	stw	r2,-1040(fp)
 2000c40:	00800044 	movi	r2,1
 2000c44:	e0befd15 	stw	r2,-1036(fp)
 2000c48:	00800044 	movi	r2,1
 2000c4c:	e0bf3515 	stw	r2,-812(fp)
 2000c50:	00800044 	movi	r2,1
 2000c54:	e0bf3c15 	stw	r2,-784(fp)
 2000c58:	00800044 	movi	r2,1
 2000c5c:	e0bf3d15 	stw	r2,-780(fp)
 2000c60:	00800044 	movi	r2,1
 2000c64:	e0bf3e15 	stw	r2,-776(fp)
 2000c68:	00a00614 	movui	r2,32792
 2000c6c:	017ffff4 	movhi	r5,65535
 2000c70:	295f7004 	addi	r5,r5,32192
 2000c74:	2f0b883a 	add	r5,r5,fp
 2000c78:	2885883a 	add	r2,r5,r2
 2000c7c:	00c00044 	movi	r3,1
 2000c80:	10c00015 	stw	r3,0(r2)
 2000c84:	00a00d14 	movui	r2,32820
 2000c88:	01bffff4 	movhi	r6,65535
 2000c8c:	319f7004 	addi	r6,r6,32192
 2000c90:	370d883a 	add	r6,r6,fp
 2000c94:	3085883a 	add	r2,r6,r2
 2000c98:	00c00044 	movi	r3,1
 2000c9c:	10c00015 	stw	r3,0(r2)
 2000ca0:	00a00e14 	movui	r2,32824
 2000ca4:	00fffff4 	movhi	r3,65535
 2000ca8:	18df7004 	addi	r3,r3,32192
 2000cac:	1f07883a 	add	r3,r3,fp
 2000cb0:	1885883a 	add	r2,r3,r2
 2000cb4:	00c00044 	movi	r3,1
 2000cb8:	10c00015 	stw	r3,0(r2)

		  unsigned int inverse[64][64]={{1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,},{1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,},{0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,},{1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,},{0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,},{0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,0,},{1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,},{0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,},{0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,},{1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,},{1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,},{0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,},{0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,},{0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,},{0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,},{0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,},{1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,1,},{1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,},{0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,},{0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,1,},{0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,},{0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,},{0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,},{0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,},{1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,},{0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,},{0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,},{0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,},{1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,},{1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,},{1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,},{1,0,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,},{0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,},{1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,},{0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,},{0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,},{0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,},{1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,},{1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,},{1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,},{1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,},{0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,},{0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,0,},{0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,1,0,},{1,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,},{0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,},{0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,},{0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,}};
 2000cbc:	00808074 	movhi	r2,513
 2000cc0:	1092b804 	addi	r2,r2,19168
 2000cc4:	013ffff4 	movhi	r4,65535
 2000cc8:	211f7f04 	addi	r4,r4,32252
 2000ccc:	e107883a 	add	r3,fp,r4
 2000cd0:	100b883a 	mov	r5,r2
 2000cd4:	00900004 	movi	r2,16384
 2000cd8:	1809883a 	mov	r4,r3
 2000cdc:	100d883a 	mov	r6,r2
 2000ce0:	2003e380 	call	2003e38 <memcpy>

		  unsigned int classic;

		  printf("If you wish to play in classic mode, press c. If not, press any other key\n");
 2000ce4:	01008074 	movhi	r4,513
 2000ce8:	21127c04 	addi	r4,r4,18928
 2000cec:	20043100 	call	2004310 <puts>
		  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 2000cf0:	00001606 	br	2000d4c <main+0xae8>
		    {
			  if(c!=0b0011)
 2000cf4:	017ffff4 	movhi	r5,65535
 2000cf8:	295f7c04 	addi	r5,r5,32240
 2000cfc:	2f0b883a 	add	r5,r5,fp
 2000d00:	28800007 	ldb	r2,0(r5)
 2000d04:	108000e0 	cmpeqi	r2,r2,3
 2000d08:	1000101e 	bne	r2,zero,2000d4c <main+0xae8>
			  {
		      if(c==0b1011)
 2000d0c:	01bffff4 	movhi	r6,65535
 2000d10:	319f7c04 	addi	r6,r6,32240
 2000d14:	370d883a 	add	r6,r6,fp
 2000d18:	30800007 	ldb	r2,0(r6)
 2000d1c:	108002d8 	cmpnei	r2,r2,11
 2000d20:	1000061e 	bne	r2,zero,2000d3c <main+0xad8>
			{
			  classic = 1;
 2000d24:	00800044 	movi	r2,1
 2000d28:	00fffff4 	movhi	r3,65535
 2000d2c:	18df7004 	addi	r3,r3,32192
 2000d30:	1f07883a 	add	r3,r3,fp
 2000d34:	18800015 	stw	r2,0(r3)
 2000d38:	00000406 	br	2000d4c <main+0xae8>
			}
		      else
			{
			  classic = 0;
 2000d3c:	013ffff4 	movhi	r4,65535
 2000d40:	211f7004 	addi	r4,r4,32192
 2000d44:	2709883a 	add	r4,r4,fp
 2000d48:	20000015 	stw	zero,0(r4)
		  unsigned int inverse[64][64]={{1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,0,0,},{1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,},{0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,},{1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,},{0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,},{0,0,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,0,},{1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,},{0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,},{0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,},{1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,},{1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,},{0,1,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,},{0,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,},{0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{0,0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,},{0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,},{0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,},{1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,1,},{1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,},{0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,},{0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,1,},{0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,},{0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,},{0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,},{0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,1,1,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,0,0,1,1,},{1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},{1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,},{0,1,1,0,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,},{0,0,0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,},{0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,},{1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,},{1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,},{1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,},{1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,},{1,0,1,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,},{0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,},{1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,},{0,0,0,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,},{0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,},{0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,},{1,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,},{1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,},{1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,},{1,1,1,0,0,0,1,1,0,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},{0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,},{0,0,1,1,0,1,1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,1,},{0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,1,0,0,},{0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,0,0,1,1,1,0,1,0,1,1,0,},{1,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,1,0,1,},{1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,},{0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,},{0,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,1,1,},{0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,}};

		  unsigned int classic;

		  printf("If you wish to play in classic mode, press c. If not, press any other key\n");
		  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 2000d4c:	00810034 	movhi	r2,1024
 2000d50:	10880804 	addi	r2,r2,8224
 2000d54:	10800037 	ldwio	r2,0(r2)
 2000d58:	017ffff4 	movhi	r5,65535
 2000d5c:	295f7c04 	addi	r5,r5,32240
 2000d60:	2f0b883a 	add	r5,r5,fp
 2000d64:	28800005 	stb	r2,0(r5)
 2000d68:	01bffff4 	movhi	r6,65535
 2000d6c:	319f7c04 	addi	r6,r6,32240
 2000d70:	370d883a 	add	r6,r6,fp
 2000d74:	30800007 	ldb	r2,0(r6)
 2000d78:	108003d8 	cmpnei	r2,r2,15
 2000d7c:	103fdd1e 	bne	r2,zero,2000cf4 <main+0xa90>
			  classic = 0;
			}
			  }
		    }

		  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
 2000d80:	0001883a 	nop
 2000d84:	00810034 	movhi	r2,1024
 2000d88:	10880804 	addi	r2,r2,8224
 2000d8c:	10800037 	ldwio	r2,0(r2)
 2000d90:	00fffff4 	movhi	r3,65535
 2000d94:	18df7c04 	addi	r3,r3,32240
 2000d98:	1f07883a 	add	r3,r3,fp
 2000d9c:	18800005 	stb	r2,0(r3)
 2000da0:	013ffff4 	movhi	r4,65535
 2000da4:	211f7c04 	addi	r4,r4,32240
 2000da8:	2709883a 	add	r4,r4,fp
 2000dac:	20800007 	ldb	r2,0(r4)
 2000db0:	108000d8 	cmpnei	r2,r2,3
 2000db4:	103ff31e 	bne	r2,zero,2000d84 <main+0xb20>
		  {
		  }

		  if(classic==0)
 2000db8:	017ffff4 	movhi	r5,65535
 2000dbc:	295f7004 	addi	r5,r5,32192
 2000dc0:	2f0b883a 	add	r5,r5,fp
 2000dc4:	28800017 	ldw	r2,0(r5)
 2000dc8:	10075a1e 	bne	r2,zero,2002b34 <main+0x28d0>
		    {
		      unsigned int pattern[64];
		      unsigned int solution[64];
		      time_t t;
		      srand((unsigned) time(&t));
 2000dcc:	01bffff4 	movhi	r6,65535
 2000dd0:	319f7d04 	addi	r6,r6,32244
 2000dd4:	e185883a 	add	r2,fp,r6
 2000dd8:	1009883a 	mov	r4,r2
 2000ddc:	20044380 	call	2004438 <time>
 2000de0:	1009883a 	mov	r4,r2
 2000de4:	20043240 	call	2004324 <srand>
		      for(i=0;i<64;i++)
 2000de8:	d0201315 	stw	zero,-32692(gp)
 2000dec:	00001806 	br	2000e50 <main+0xbec>
			{
			  pattern[i]=rand() % 2;
 2000df0:	d4201317 	ldw	r16,-32692(gp)
 2000df4:	200433c0 	call	200433c <rand>
 2000df8:	1007883a 	mov	r3,r2
 2000dfc:	00a00034 	movhi	r2,32768
 2000e00:	10800044 	addi	r2,r2,1
 2000e04:	1884703a 	and	r2,r3,r2
 2000e08:	1000040e 	bge	r2,zero,2000e1c <main+0xbb8>
 2000e0c:	10bfffc4 	addi	r2,r2,-1
 2000e10:	00ffff84 	movi	r3,-2
 2000e14:	10c4b03a 	or	r2,r2,r3
 2000e18:	10800044 	addi	r2,r2,1
 2000e1c:	1009883a 	mov	r4,r2
 2000e20:	00a04f14 	movui	r2,33084
 2000e24:	017ffff4 	movhi	r5,65535
 2000e28:	295f7004 	addi	r5,r5,32192
 2000e2c:	2f0b883a 	add	r5,r5,fp
 2000e30:	2887883a 	add	r3,r5,r2
 2000e34:	8405883a 	add	r2,r16,r16
 2000e38:	1085883a 	add	r2,r2,r2
 2000e3c:	1885883a 	add	r2,r3,r2
 2000e40:	11000015 	stw	r4,0(r2)
		    {
		      unsigned int pattern[64];
		      unsigned int solution[64];
		      time_t t;
		      srand((unsigned) time(&t));
		      for(i=0;i<64;i++)
 2000e44:	d0a01317 	ldw	r2,-32692(gp)
 2000e48:	10800044 	addi	r2,r2,1
 2000e4c:	d0a01315 	stw	r2,-32692(gp)
 2000e50:	d0a01317 	ldw	r2,-32692(gp)
 2000e54:	10801010 	cmplti	r2,r2,64
 2000e58:	103fe51e 	bne	r2,zero,2000df0 <main+0xb8c>
			{
			  pattern[i]=rand() % 2;
			  //pattern[i]=1;
			}

		      for(i=0;i<64;i++)
 2000e5c:	d0201315 	stw	zero,-32692(gp)
 2000e60:	00001106 	br	2000ea8 <main+0xc44>
			{
			      printf("\n%u",pattern[i]);
 2000e64:	d0a01317 	ldw	r2,-32692(gp)
 2000e68:	00e04f14 	movui	r3,33084
 2000e6c:	01bffff4 	movhi	r6,65535
 2000e70:	319f7004 	addi	r6,r6,32192
 2000e74:	370d883a 	add	r6,r6,fp
 2000e78:	30c7883a 	add	r3,r6,r3
 2000e7c:	1085883a 	add	r2,r2,r2
 2000e80:	1085883a 	add	r2,r2,r2
 2000e84:	1885883a 	add	r2,r3,r2
 2000e88:	10800017 	ldw	r2,0(r2)
 2000e8c:	01008074 	movhi	r4,513
 2000e90:	21128f04 	addi	r4,r4,19004
 2000e94:	100b883a 	mov	r5,r2
 2000e98:	20040c00 	call	20040c0 <printf>
			{
			  pattern[i]=rand() % 2;
			  //pattern[i]=1;
			}

		      for(i=0;i<64;i++)
 2000e9c:	d0a01317 	ldw	r2,-32692(gp)
 2000ea0:	10800044 	addi	r2,r2,1
 2000ea4:	d0a01315 	stw	r2,-32692(gp)
 2000ea8:	d0a01317 	ldw	r2,-32692(gp)
 2000eac:	10801010 	cmplti	r2,r2,64
 2000eb0:	103fec1e 	bne	r2,zero,2000e64 <main+0xc00>
			{
			      printf("\n%u",pattern[i]);
			      //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];
			 }
		      for(i=0;i<8;i++)
 2000eb4:	d0201315 	stw	zero,-32692(gp)
 2000eb8:	0000bd06 	br	20011b0 <main+0xf4c>
		      	{
		      	  matriz[i]=(pattern[8*i]<<1)|pattern[8*i+1];
 2000ebc:	d0e01317 	ldw	r3,-32692(gp)
 2000ec0:	d0a01317 	ldw	r2,-32692(gp)
 2000ec4:	100490fa 	slli	r2,r2,3
 2000ec8:	01204f14 	movui	r4,33084
 2000ecc:	017ffff4 	movhi	r5,65535
 2000ed0:	295f7004 	addi	r5,r5,32192
 2000ed4:	2f0b883a 	add	r5,r5,fp
 2000ed8:	2909883a 	add	r4,r5,r4
 2000edc:	1085883a 	add	r2,r2,r2
 2000ee0:	1085883a 	add	r2,r2,r2
 2000ee4:	2085883a 	add	r2,r4,r2
 2000ee8:	10800017 	ldw	r2,0(r2)
 2000eec:	1085883a 	add	r2,r2,r2
 2000ef0:	100b883a 	mov	r5,r2
 2000ef4:	d0a01317 	ldw	r2,-32692(gp)
 2000ef8:	100490fa 	slli	r2,r2,3
 2000efc:	10800044 	addi	r2,r2,1
 2000f00:	01204f14 	movui	r4,33084
 2000f04:	01bffff4 	movhi	r6,65535
 2000f08:	319f7004 	addi	r6,r6,32192
 2000f0c:	370d883a 	add	r6,r6,fp
 2000f10:	3109883a 	add	r4,r6,r4
 2000f14:	1085883a 	add	r2,r2,r2
 2000f18:	1085883a 	add	r2,r2,r2
 2000f1c:	2085883a 	add	r2,r4,r2
 2000f20:	10800017 	ldw	r2,0(r2)
 2000f24:	2884b03a 	or	r2,r5,r2
 2000f28:	1009883a 	mov	r4,r2
 2000f2c:	d0a01404 	addi	r2,gp,-32688
 2000f30:	1885883a 	add	r2,r3,r2
 2000f34:	11000005 	stb	r4,0(r2)
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+2];
 2000f38:	d0e01317 	ldw	r3,-32692(gp)
 2000f3c:	d1201317 	ldw	r4,-32692(gp)
 2000f40:	d0a01404 	addi	r2,gp,-32688
 2000f44:	2085883a 	add	r2,r4,r2
 2000f48:	10800003 	ldbu	r2,0(r2)
 2000f4c:	1085883a 	add	r2,r2,r2
 2000f50:	100b883a 	mov	r5,r2
 2000f54:	d0a01317 	ldw	r2,-32692(gp)
 2000f58:	100490fa 	slli	r2,r2,3
 2000f5c:	10800084 	addi	r2,r2,2
 2000f60:	01204f14 	movui	r4,33084
 2000f64:	01bffff4 	movhi	r6,65535
 2000f68:	319f7004 	addi	r6,r6,32192
 2000f6c:	370d883a 	add	r6,r6,fp
 2000f70:	3109883a 	add	r4,r6,r4
 2000f74:	1085883a 	add	r2,r2,r2
 2000f78:	1085883a 	add	r2,r2,r2
 2000f7c:	2085883a 	add	r2,r4,r2
 2000f80:	10800017 	ldw	r2,0(r2)
 2000f84:	2884b03a 	or	r2,r5,r2
 2000f88:	1009883a 	mov	r4,r2
 2000f8c:	d0a01404 	addi	r2,gp,-32688
 2000f90:	1885883a 	add	r2,r3,r2
 2000f94:	11000005 	stb	r4,0(r2)
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+3];
 2000f98:	d0e01317 	ldw	r3,-32692(gp)
 2000f9c:	d1201317 	ldw	r4,-32692(gp)
 2000fa0:	d0a01404 	addi	r2,gp,-32688
 2000fa4:	2085883a 	add	r2,r4,r2
 2000fa8:	10800003 	ldbu	r2,0(r2)
 2000fac:	1085883a 	add	r2,r2,r2
 2000fb0:	100b883a 	mov	r5,r2
 2000fb4:	d0a01317 	ldw	r2,-32692(gp)
 2000fb8:	100490fa 	slli	r2,r2,3
 2000fbc:	108000c4 	addi	r2,r2,3
 2000fc0:	01204f14 	movui	r4,33084
 2000fc4:	01bffff4 	movhi	r6,65535
 2000fc8:	319f7004 	addi	r6,r6,32192
 2000fcc:	370d883a 	add	r6,r6,fp
 2000fd0:	3109883a 	add	r4,r6,r4
 2000fd4:	1085883a 	add	r2,r2,r2
 2000fd8:	1085883a 	add	r2,r2,r2
 2000fdc:	2085883a 	add	r2,r4,r2
 2000fe0:	10800017 	ldw	r2,0(r2)
 2000fe4:	2884b03a 	or	r2,r5,r2
 2000fe8:	1009883a 	mov	r4,r2
 2000fec:	d0a01404 	addi	r2,gp,-32688
 2000ff0:	1885883a 	add	r2,r3,r2
 2000ff4:	11000005 	stb	r4,0(r2)
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+4];
 2000ff8:	d0e01317 	ldw	r3,-32692(gp)
 2000ffc:	d1201317 	ldw	r4,-32692(gp)
 2001000:	d0a01404 	addi	r2,gp,-32688
 2001004:	2085883a 	add	r2,r4,r2
 2001008:	10800003 	ldbu	r2,0(r2)
 200100c:	1085883a 	add	r2,r2,r2
 2001010:	100b883a 	mov	r5,r2
 2001014:	d0a01317 	ldw	r2,-32692(gp)
 2001018:	100490fa 	slli	r2,r2,3
 200101c:	10800104 	addi	r2,r2,4
 2001020:	01204f14 	movui	r4,33084
 2001024:	01bffff4 	movhi	r6,65535
 2001028:	319f7004 	addi	r6,r6,32192
 200102c:	370d883a 	add	r6,r6,fp
 2001030:	3109883a 	add	r4,r6,r4
 2001034:	1085883a 	add	r2,r2,r2
 2001038:	1085883a 	add	r2,r2,r2
 200103c:	2085883a 	add	r2,r4,r2
 2001040:	10800017 	ldw	r2,0(r2)
 2001044:	2884b03a 	or	r2,r5,r2
 2001048:	1009883a 	mov	r4,r2
 200104c:	d0a01404 	addi	r2,gp,-32688
 2001050:	1885883a 	add	r2,r3,r2
 2001054:	11000005 	stb	r4,0(r2)
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
 2001058:	d0e01317 	ldw	r3,-32692(gp)
 200105c:	d1201317 	ldw	r4,-32692(gp)
 2001060:	d0a01404 	addi	r2,gp,-32688
 2001064:	2085883a 	add	r2,r4,r2
 2001068:	10800003 	ldbu	r2,0(r2)
 200106c:	1085883a 	add	r2,r2,r2
 2001070:	100b883a 	mov	r5,r2
 2001074:	d0a01317 	ldw	r2,-32692(gp)
 2001078:	100490fa 	slli	r2,r2,3
 200107c:	10800144 	addi	r2,r2,5
 2001080:	01204f14 	movui	r4,33084
 2001084:	01bffff4 	movhi	r6,65535
 2001088:	319f7004 	addi	r6,r6,32192
 200108c:	370d883a 	add	r6,r6,fp
 2001090:	3109883a 	add	r4,r6,r4
 2001094:	1085883a 	add	r2,r2,r2
 2001098:	1085883a 	add	r2,r2,r2
 200109c:	2085883a 	add	r2,r4,r2
 20010a0:	10800017 	ldw	r2,0(r2)
 20010a4:	2884b03a 	or	r2,r5,r2
 20010a8:	1009883a 	mov	r4,r2
 20010ac:	d0a01404 	addi	r2,gp,-32688
 20010b0:	1885883a 	add	r2,r3,r2
 20010b4:	11000005 	stb	r4,0(r2)
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
 20010b8:	d0e01317 	ldw	r3,-32692(gp)
 20010bc:	d1201317 	ldw	r4,-32692(gp)
 20010c0:	d0a01404 	addi	r2,gp,-32688
 20010c4:	2085883a 	add	r2,r4,r2
 20010c8:	10800003 	ldbu	r2,0(r2)
 20010cc:	1085883a 	add	r2,r2,r2
 20010d0:	100b883a 	mov	r5,r2
 20010d4:	d0a01317 	ldw	r2,-32692(gp)
 20010d8:	100490fa 	slli	r2,r2,3
 20010dc:	10800184 	addi	r2,r2,6
 20010e0:	01204f14 	movui	r4,33084
 20010e4:	01bffff4 	movhi	r6,65535
 20010e8:	319f7004 	addi	r6,r6,32192
 20010ec:	370d883a 	add	r6,r6,fp
 20010f0:	3109883a 	add	r4,r6,r4
 20010f4:	1085883a 	add	r2,r2,r2
 20010f8:	1085883a 	add	r2,r2,r2
 20010fc:	2085883a 	add	r2,r4,r2
 2001100:	10800017 	ldw	r2,0(r2)
 2001104:	2884b03a 	or	r2,r5,r2
 2001108:	1009883a 	mov	r4,r2
 200110c:	d0a01404 	addi	r2,gp,-32688
 2001110:	1885883a 	add	r2,r3,r2
 2001114:	11000005 	stb	r4,0(r2)
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
 2001118:	d0e01317 	ldw	r3,-32692(gp)
 200111c:	d1201317 	ldw	r4,-32692(gp)
 2001120:	d0a01404 	addi	r2,gp,-32688
 2001124:	2085883a 	add	r2,r4,r2
 2001128:	10800003 	ldbu	r2,0(r2)
 200112c:	1085883a 	add	r2,r2,r2
 2001130:	100b883a 	mov	r5,r2
 2001134:	d0a01317 	ldw	r2,-32692(gp)
 2001138:	100490fa 	slli	r2,r2,3
 200113c:	108001c4 	addi	r2,r2,7
 2001140:	01204f14 	movui	r4,33084
 2001144:	01bffff4 	movhi	r6,65535
 2001148:	319f7004 	addi	r6,r6,32192
 200114c:	370d883a 	add	r6,r6,fp
 2001150:	3109883a 	add	r4,r6,r4
 2001154:	1085883a 	add	r2,r2,r2
 2001158:	1085883a 	add	r2,r2,r2
 200115c:	2085883a 	add	r2,r4,r2
 2001160:	10800017 	ldw	r2,0(r2)
 2001164:	2884b03a 	or	r2,r5,r2
 2001168:	1009883a 	mov	r4,r2
 200116c:	d0a01404 	addi	r2,gp,-32688
 2001170:	1885883a 	add	r2,r3,r2
 2001174:	11000005 	stb	r4,0(r2)
		      	  printf("\n%u",matriz[i]);
 2001178:	d0e01317 	ldw	r3,-32692(gp)
 200117c:	d0a01404 	addi	r2,gp,-32688
 2001180:	1885883a 	add	r2,r3,r2
 2001184:	10800003 	ldbu	r2,0(r2)
 2001188:	10803fcc 	andi	r2,r2,255
 200118c:	1080201c 	xori	r2,r2,128
 2001190:	10bfe004 	addi	r2,r2,-128
 2001194:	01008074 	movhi	r4,513
 2001198:	21128f04 	addi	r4,r4,19004
 200119c:	100b883a 	mov	r5,r2
 20011a0:	20040c00 	call	20040c0 <printf>
		      for(i=0;i<64;i++)
			{
			      printf("\n%u",pattern[i]);
			      //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];
			 }
		      for(i=0;i<8;i++)
 20011a4:	d0a01317 	ldw	r2,-32692(gp)
 20011a8:	10800044 	addi	r2,r2,1
 20011ac:	d0a01315 	stw	r2,-32692(gp)
 20011b0:	d0a01317 	ldw	r2,-32692(gp)
 20011b4:	10800210 	cmplti	r2,r2,8
 20011b8:	103f401e 	bne	r2,zero,2000ebc <main+0xc58>
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
		      	  matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
		      	  printf("\n%u",matriz[i]);
		      }
		      sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 20011bc:	00bffff4 	movhi	r2,65535
 20011c0:	109f7b04 	addi	r2,r2,32236
 20011c4:	1705883a 	add	r2,r2,fp
 20011c8:	10c00017 	ldw	r3,0(r2)
 20011cc:	d0a01403 	ldbu	r2,-32688(gp)
 20011d0:	10803fcc 	andi	r2,r2,255
 20011d4:	1080201c 	xori	r2,r2,128
 20011d8:	10bfe004 	addi	r2,r2,-128
 20011dc:	1809883a 	mov	r4,r3
 20011e0:	01400044 	movi	r5,1
 20011e4:	100d883a 	mov	r6,r2
 20011e8:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 20011ec:	013ffff4 	movhi	r4,65535
 20011f0:	211f7b04 	addi	r4,r4,32236
 20011f4:	2709883a 	add	r4,r4,fp
 20011f8:	20c00017 	ldw	r3,0(r4)
 20011fc:	d0a01444 	addi	r2,gp,-32687
 2001200:	10800003 	ldbu	r2,0(r2)
 2001204:	10803fcc 	andi	r2,r2,255
 2001208:	1080201c 	xori	r2,r2,128
 200120c:	10bfe004 	addi	r2,r2,-128
 2001210:	1809883a 	mov	r4,r3
 2001214:	01400084 	movi	r5,2
 2001218:	100d883a 	mov	r6,r2
 200121c:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 2001220:	017ffff4 	movhi	r5,65535
 2001224:	295f7b04 	addi	r5,r5,32236
 2001228:	2f0b883a 	add	r5,r5,fp
 200122c:	28c00017 	ldw	r3,0(r5)
 2001230:	d0a01484 	addi	r2,gp,-32686
 2001234:	10800003 	ldbu	r2,0(r2)
 2001238:	10803fcc 	andi	r2,r2,255
 200123c:	1080201c 	xori	r2,r2,128
 2001240:	10bfe004 	addi	r2,r2,-128
 2001244:	1809883a 	mov	r4,r3
 2001248:	014000c4 	movi	r5,3
 200124c:	100d883a 	mov	r6,r2
 2001250:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 2001254:	01bffff4 	movhi	r6,65535
 2001258:	319f7b04 	addi	r6,r6,32236
 200125c:	370d883a 	add	r6,r6,fp
 2001260:	30c00017 	ldw	r3,0(r6)
 2001264:	d0a014c4 	addi	r2,gp,-32685
 2001268:	10800003 	ldbu	r2,0(r2)
 200126c:	10803fcc 	andi	r2,r2,255
 2001270:	1080201c 	xori	r2,r2,128
 2001274:	10bfe004 	addi	r2,r2,-128
 2001278:	1809883a 	mov	r4,r3
 200127c:	01400104 	movi	r5,4
 2001280:	100d883a 	mov	r6,r2
 2001284:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 2001288:	00bffff4 	movhi	r2,65535
 200128c:	109f7b04 	addi	r2,r2,32236
 2001290:	1705883a 	add	r2,r2,fp
 2001294:	10c00017 	ldw	r3,0(r2)
 2001298:	d0a01504 	addi	r2,gp,-32684
 200129c:	10800003 	ldbu	r2,0(r2)
 20012a0:	10803fcc 	andi	r2,r2,255
 20012a4:	1080201c 	xori	r2,r2,128
 20012a8:	10bfe004 	addi	r2,r2,-128
 20012ac:	1809883a 	mov	r4,r3
 20012b0:	01400144 	movi	r5,5
 20012b4:	100d883a 	mov	r6,r2
 20012b8:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 20012bc:	013ffff4 	movhi	r4,65535
 20012c0:	211f7b04 	addi	r4,r4,32236
 20012c4:	2709883a 	add	r4,r4,fp
 20012c8:	20c00017 	ldw	r3,0(r4)
 20012cc:	d0a01544 	addi	r2,gp,-32683
 20012d0:	10800003 	ldbu	r2,0(r2)
 20012d4:	10803fcc 	andi	r2,r2,255
 20012d8:	1080201c 	xori	r2,r2,128
 20012dc:	10bfe004 	addi	r2,r2,-128
 20012e0:	1809883a 	mov	r4,r3
 20012e4:	01400184 	movi	r5,6
 20012e8:	100d883a 	mov	r6,r2
 20012ec:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 20012f0:	017ffff4 	movhi	r5,65535
 20012f4:	295f7b04 	addi	r5,r5,32236
 20012f8:	2f0b883a 	add	r5,r5,fp
 20012fc:	28c00017 	ldw	r3,0(r5)
 2001300:	d0a01584 	addi	r2,gp,-32682
 2001304:	10800003 	ldbu	r2,0(r2)
 2001308:	10803fcc 	andi	r2,r2,255
 200130c:	1080201c 	xori	r2,r2,128
 2001310:	10bfe004 	addi	r2,r2,-128
 2001314:	1809883a 	mov	r4,r3
 2001318:	014001c4 	movi	r5,7
 200131c:	100d883a 	mov	r6,r2
 2001320:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 2001324:	01bffff4 	movhi	r6,65535
 2001328:	319f7b04 	addi	r6,r6,32236
 200132c:	370d883a 	add	r6,r6,fp
 2001330:	30c00017 	ldw	r3,0(r6)
 2001334:	d0a015c4 	addi	r2,gp,-32681
 2001338:	10800003 	ldbu	r2,0(r2)
 200133c:	10803fcc 	andi	r2,r2,255
 2001340:	1080201c 	xori	r2,r2,128
 2001344:	10bfe004 	addi	r2,r2,-128
 2001348:	1809883a 	mov	r4,r3
 200134c:	01400204 	movi	r5,8
 2001350:	100d883a 	mov	r6,r2
 2001354:	2003d340 	call	2003d34 <sen_2_byte_info>
		      unsigned int win = 1;
 2001358:	00800044 	movi	r2,1
 200135c:	00fffff4 	movhi	r3,65535
 2001360:	18df7104 	addi	r3,r3,32196
 2001364:	1f07883a 	add	r3,r3,fp
 2001368:	18800015 	stw	r2,0(r3)
		      while(win==1)
 200136c:	0005e706 	br	2002b0c <main+0x28a8>
			{
			  unsigned int temp = 0;
 2001370:	013ffff4 	movhi	r4,65535
 2001374:	211f7204 	addi	r4,r4,32200
 2001378:	2709883a 	add	r4,r4,fp
 200137c:	20000015 	stw	zero,0(r4)
			  int help;
			  int row;

			  printf("\nDo you want help y/n?");
 2001380:	01008074 	movhi	r4,513
 2001384:	21129004 	addi	r4,r4,19008
 2001388:	20040c00 	call	20040c0 <printf>
			  while((c=IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 200138c:	00001606 	br	20013e8 <main+0x1184>
			    {
				  if(c!=0b0011)
 2001390:	017ffff4 	movhi	r5,65535
 2001394:	295f7c04 	addi	r5,r5,32240
 2001398:	2f0b883a 	add	r5,r5,fp
 200139c:	28800007 	ldb	r2,0(r5)
 20013a0:	108000e0 	cmpeqi	r2,r2,3
 20013a4:	1000101e 	bne	r2,zero,20013e8 <main+0x1184>
				  {
			      if(c==0b1100)
 20013a8:	01bffff4 	movhi	r6,65535
 20013ac:	319f7c04 	addi	r6,r6,32240
 20013b0:	370d883a 	add	r6,r6,fp
 20013b4:	30800007 	ldb	r2,0(r6)
 20013b8:	10800318 	cmpnei	r2,r2,12
 20013bc:	1000061e 	bne	r2,zero,20013d8 <main+0x1174>
				{
				  help = 1;
 20013c0:	00800044 	movi	r2,1
 20013c4:	00fffff4 	movhi	r3,65535
 20013c8:	18df7304 	addi	r3,r3,32204
 20013cc:	1f07883a 	add	r3,r3,fp
 20013d0:	18800015 	stw	r2,0(r3)
 20013d4:	00000406 	br	20013e8 <main+0x1184>
				}
			      else
				{
				  help = 0;
 20013d8:	013ffff4 	movhi	r4,65535
 20013dc:	211f7304 	addi	r4,r4,32204
 20013e0:	2709883a 	add	r4,r4,fp
 20013e4:	20000015 	stw	zero,0(r4)
			  unsigned int temp = 0;
			  int help;
			  int row;

			  printf("\nDo you want help y/n?");
			  while((c=IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 20013e8:	00810034 	movhi	r2,1024
 20013ec:	10880804 	addi	r2,r2,8224
 20013f0:	10800037 	ldwio	r2,0(r2)
 20013f4:	017ffff4 	movhi	r5,65535
 20013f8:	295f7c04 	addi	r5,r5,32240
 20013fc:	2f0b883a 	add	r5,r5,fp
 2001400:	28800005 	stb	r2,0(r5)
 2001404:	01bffff4 	movhi	r6,65535
 2001408:	319f7c04 	addi	r6,r6,32240
 200140c:	370d883a 	add	r6,r6,fp
 2001410:	30800007 	ldb	r2,0(r6)
 2001414:	108003d8 	cmpnei	r2,r2,15
 2001418:	103fdd1e 	bne	r2,zero,2001390 <main+0x112c>
				{
				  help = 0;
				}
				  }
			    }
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
 200141c:	0001883a 	nop
 2001420:	00810034 	movhi	r2,1024
 2001424:	10880804 	addi	r2,r2,8224
 2001428:	10800037 	ldwio	r2,0(r2)
 200142c:	00fffff4 	movhi	r3,65535
 2001430:	18df7c04 	addi	r3,r3,32240
 2001434:	1f07883a 	add	r3,r3,fp
 2001438:	18800005 	stb	r2,0(r3)
 200143c:	013ffff4 	movhi	r4,65535
 2001440:	211f7c04 	addi	r4,r4,32240
 2001444:	2709883a 	add	r4,r4,fp
 2001448:	20800007 	ldb	r2,0(r4)
 200144c:	108000d8 	cmpnei	r2,r2,3
 2001450:	103ff31e 	bne	r2,zero,2001420 <main+0x11bc>
			  		  {
			  		  }
			  if(help==1)
 2001454:	017ffff4 	movhi	r5,65535
 2001458:	295f7304 	addi	r5,r5,32204
 200145c:	2f0b883a 	add	r5,r5,fp
 2001460:	28800017 	ldw	r2,0(r5)
 2001464:	10800058 	cmpnei	r2,r2,1
 2001468:	10005b1e 	bne	r2,zero,20015d8 <main+0x1374>
			    {
			      printf("\npress this positions");
 200146c:	01008074 	movhi	r4,513
 2001470:	21129604 	addi	r4,r4,19032
 2001474:	20040c00 	call	20040c0 <printf>
			      for(i=0;i<64;i++)
 2001478:	d0201315 	stw	zero,-32692(gp)
 200147c:	00003d06 	br	2001574 <main+0x1310>
				{
				  unsigned int temp=0;
 2001480:	01bffff4 	movhi	r6,65535
 2001484:	319f7504 	addi	r6,r6,32212
 2001488:	370d883a 	add	r6,r6,fp
 200148c:	30000015 	stw	zero,0(r6)
				  for(j=0;j<64;j++)
 2001490:	d0201215 	stw	zero,-32696(gp)
 2001494:	00002306 	br	2001524 <main+0x12c0>
				    {
				      temp = temp^(inverse[i][j]&pattern[j]);
 2001498:	d0e01317 	ldw	r3,-32692(gp)
 200149c:	d0a01217 	ldw	r2,-32696(gp)
 20014a0:	180691ba 	slli	r3,r3,6
 20014a4:	1885883a 	add	r2,r3,r2
 20014a8:	1085883a 	add	r2,r2,r2
 20014ac:	1085883a 	add	r2,r2,r2
 20014b0:	00fffff4 	movhi	r3,65535
 20014b4:	18df7004 	addi	r3,r3,32192
 20014b8:	1f07883a 	add	r3,r3,fp
 20014bc:	1885883a 	add	r2,r3,r2
 20014c0:	10800f04 	addi	r2,r2,60
 20014c4:	10c00017 	ldw	r3,0(r2)
 20014c8:	d0a01217 	ldw	r2,-32696(gp)
 20014cc:	01204f14 	movui	r4,33084
 20014d0:	017ffff4 	movhi	r5,65535
 20014d4:	295f7004 	addi	r5,r5,32192
 20014d8:	2f0b883a 	add	r5,r5,fp
 20014dc:	2909883a 	add	r4,r5,r4
 20014e0:	1085883a 	add	r2,r2,r2
 20014e4:	1085883a 	add	r2,r2,r2
 20014e8:	2085883a 	add	r2,r4,r2
 20014ec:	10800017 	ldw	r2,0(r2)
 20014f0:	1884703a 	and	r2,r3,r2
 20014f4:	01bffff4 	movhi	r6,65535
 20014f8:	319f7504 	addi	r6,r6,32212
 20014fc:	370d883a 	add	r6,r6,fp
 2001500:	30c00017 	ldw	r3,0(r6)
 2001504:	1884f03a 	xor	r2,r3,r2
 2001508:	00fffff4 	movhi	r3,65535
 200150c:	18df7504 	addi	r3,r3,32212
 2001510:	1f07883a 	add	r3,r3,fp
 2001514:	18800015 	stw	r2,0(r3)
			    {
			      printf("\npress this positions");
			      for(i=0;i<64;i++)
				{
				  unsigned int temp=0;
				  for(j=0;j<64;j++)
 2001518:	d0a01217 	ldw	r2,-32696(gp)
 200151c:	10800044 	addi	r2,r2,1
 2001520:	d0a01215 	stw	r2,-32696(gp)
 2001524:	d0a01217 	ldw	r2,-32696(gp)
 2001528:	10801010 	cmplti	r2,r2,64
 200152c:	103fda1e 	bne	r2,zero,2001498 <main+0x1234>
				    {
				      temp = temp^(inverse[i][j]&pattern[j]);
				    }
				  solution[i]=temp;
 2001530:	d0a01317 	ldw	r2,-32692(gp)
 2001534:	00e00f14 	movui	r3,32828
 2001538:	013ffff4 	movhi	r4,65535
 200153c:	211f7004 	addi	r4,r4,32192
 2001540:	2709883a 	add	r4,r4,fp
 2001544:	20c7883a 	add	r3,r4,r3
 2001548:	1085883a 	add	r2,r2,r2
 200154c:	1085883a 	add	r2,r2,r2
 2001550:	1885883a 	add	r2,r3,r2
 2001554:	017ffff4 	movhi	r5,65535
 2001558:	295f7504 	addi	r5,r5,32212
 200155c:	2f0b883a 	add	r5,r5,fp
 2001560:	28c00017 	ldw	r3,0(r5)
 2001564:	10c00015 	stw	r3,0(r2)
			  		  {
			  		  }
			  if(help==1)
			    {
			      printf("\npress this positions");
			      for(i=0;i<64;i++)
 2001568:	d0a01317 	ldw	r2,-32692(gp)
 200156c:	10800044 	addi	r2,r2,1
 2001570:	d0a01315 	stw	r2,-32692(gp)
 2001574:	d0a01317 	ldw	r2,-32692(gp)
 2001578:	10801010 	cmplti	r2,r2,64
 200157c:	103fc01e 	bne	r2,zero,2001480 <main+0x121c>
				    {
				      temp = temp^(inverse[i][j]&pattern[j]);
				    }
				  solution[i]=temp;
				}
			      for(i=0;i<64;i++)
 2001580:	d0201315 	stw	zero,-32692(gp)
 2001584:	00001106 	br	20015cc <main+0x1368>
				{
				      printf("\n%u",solution[i]);
 2001588:	d0a01317 	ldw	r2,-32692(gp)
 200158c:	00e00f14 	movui	r3,32828
 2001590:	01bffff4 	movhi	r6,65535
 2001594:	319f7004 	addi	r6,r6,32192
 2001598:	370d883a 	add	r6,r6,fp
 200159c:	30c7883a 	add	r3,r6,r3
 20015a0:	1085883a 	add	r2,r2,r2
 20015a4:	1085883a 	add	r2,r2,r2
 20015a8:	1885883a 	add	r2,r3,r2
 20015ac:	10800017 	ldw	r2,0(r2)
 20015b0:	01008074 	movhi	r4,513
 20015b4:	21128f04 	addi	r4,r4,19004
 20015b8:	100b883a 	mov	r5,r2
 20015bc:	20040c00 	call	20040c0 <printf>
				    {
				      temp = temp^(inverse[i][j]&pattern[j]);
				    }
				  solution[i]=temp;
				}
			      for(i=0;i<64;i++)
 20015c0:	d0a01317 	ldw	r2,-32692(gp)
 20015c4:	10800044 	addi	r2,r2,1
 20015c8:	d0a01315 	stw	r2,-32692(gp)
 20015cc:	d0a01317 	ldw	r2,-32692(gp)
 20015d0:	10801010 	cmplti	r2,r2,64
 20015d4:	103fec1e 	bne	r2,zero,2001588 <main+0x1324>
				      printf("\n%u",solution[i]);
				      //matriz[i/8]=(((((((((((solution[i/8]<<1) | solution[i/8 +2])<<1) | solution[i/8 +3])<<1) | solution[i/8 +4])<<1) | solution[i/8 +5])<<1) | solution[i/8 +6])<<1) | solution[i/8+7];

				}
			    }
			  for(i=0;i<8;i++)
 20015d8:	d0201315 	stw	zero,-32692(gp)
 20015dc:	0000bd06 	br	20018d4 <main+0x1670>
				{
				  matriz[i]=(solution[8*i]<<1)|solution[8*i+1];
 20015e0:	d0e01317 	ldw	r3,-32692(gp)
 20015e4:	d0a01317 	ldw	r2,-32692(gp)
 20015e8:	100490fa 	slli	r2,r2,3
 20015ec:	01200f14 	movui	r4,32828
 20015f0:	017ffff4 	movhi	r5,65535
 20015f4:	295f7004 	addi	r5,r5,32192
 20015f8:	2f0b883a 	add	r5,r5,fp
 20015fc:	2909883a 	add	r4,r5,r4
 2001600:	1085883a 	add	r2,r2,r2
 2001604:	1085883a 	add	r2,r2,r2
 2001608:	2085883a 	add	r2,r4,r2
 200160c:	10800017 	ldw	r2,0(r2)
 2001610:	1085883a 	add	r2,r2,r2
 2001614:	100b883a 	mov	r5,r2
 2001618:	d0a01317 	ldw	r2,-32692(gp)
 200161c:	100490fa 	slli	r2,r2,3
 2001620:	10800044 	addi	r2,r2,1
 2001624:	01200f14 	movui	r4,32828
 2001628:	01bffff4 	movhi	r6,65535
 200162c:	319f7004 	addi	r6,r6,32192
 2001630:	370d883a 	add	r6,r6,fp
 2001634:	3109883a 	add	r4,r6,r4
 2001638:	1085883a 	add	r2,r2,r2
 200163c:	1085883a 	add	r2,r2,r2
 2001640:	2085883a 	add	r2,r4,r2
 2001644:	10800017 	ldw	r2,0(r2)
 2001648:	2884b03a 	or	r2,r5,r2
 200164c:	1009883a 	mov	r4,r2
 2001650:	d0a01404 	addi	r2,gp,-32688
 2001654:	1885883a 	add	r2,r3,r2
 2001658:	11000005 	stb	r4,0(r2)
				  matriz[i]=(matriz[i]<<1)|solution[8*i+2];
 200165c:	d0e01317 	ldw	r3,-32692(gp)
 2001660:	d1201317 	ldw	r4,-32692(gp)
 2001664:	d0a01404 	addi	r2,gp,-32688
 2001668:	2085883a 	add	r2,r4,r2
 200166c:	10800003 	ldbu	r2,0(r2)
 2001670:	1085883a 	add	r2,r2,r2
 2001674:	100b883a 	mov	r5,r2
 2001678:	d0a01317 	ldw	r2,-32692(gp)
 200167c:	100490fa 	slli	r2,r2,3
 2001680:	10800084 	addi	r2,r2,2
 2001684:	01200f14 	movui	r4,32828
 2001688:	01bffff4 	movhi	r6,65535
 200168c:	319f7004 	addi	r6,r6,32192
 2001690:	370d883a 	add	r6,r6,fp
 2001694:	3109883a 	add	r4,r6,r4
 2001698:	1085883a 	add	r2,r2,r2
 200169c:	1085883a 	add	r2,r2,r2
 20016a0:	2085883a 	add	r2,r4,r2
 20016a4:	10800017 	ldw	r2,0(r2)
 20016a8:	2884b03a 	or	r2,r5,r2
 20016ac:	1009883a 	mov	r4,r2
 20016b0:	d0a01404 	addi	r2,gp,-32688
 20016b4:	1885883a 	add	r2,r3,r2
 20016b8:	11000005 	stb	r4,0(r2)
				  matriz[i]=(matriz[i]<<1)|solution[8*i+3];
 20016bc:	d0e01317 	ldw	r3,-32692(gp)
 20016c0:	d1201317 	ldw	r4,-32692(gp)
 20016c4:	d0a01404 	addi	r2,gp,-32688
 20016c8:	2085883a 	add	r2,r4,r2
 20016cc:	10800003 	ldbu	r2,0(r2)
 20016d0:	1085883a 	add	r2,r2,r2
 20016d4:	100b883a 	mov	r5,r2
 20016d8:	d0a01317 	ldw	r2,-32692(gp)
 20016dc:	100490fa 	slli	r2,r2,3
 20016e0:	108000c4 	addi	r2,r2,3
 20016e4:	01200f14 	movui	r4,32828
 20016e8:	01bffff4 	movhi	r6,65535
 20016ec:	319f7004 	addi	r6,r6,32192
 20016f0:	370d883a 	add	r6,r6,fp
 20016f4:	3109883a 	add	r4,r6,r4
 20016f8:	1085883a 	add	r2,r2,r2
 20016fc:	1085883a 	add	r2,r2,r2
 2001700:	2085883a 	add	r2,r4,r2
 2001704:	10800017 	ldw	r2,0(r2)
 2001708:	2884b03a 	or	r2,r5,r2
 200170c:	1009883a 	mov	r4,r2
 2001710:	d0a01404 	addi	r2,gp,-32688
 2001714:	1885883a 	add	r2,r3,r2
 2001718:	11000005 	stb	r4,0(r2)
				  matriz[i]=(matriz[i]<<1)|solution[8*i+4];
 200171c:	d0e01317 	ldw	r3,-32692(gp)
 2001720:	d1201317 	ldw	r4,-32692(gp)
 2001724:	d0a01404 	addi	r2,gp,-32688
 2001728:	2085883a 	add	r2,r4,r2
 200172c:	10800003 	ldbu	r2,0(r2)
 2001730:	1085883a 	add	r2,r2,r2
 2001734:	100b883a 	mov	r5,r2
 2001738:	d0a01317 	ldw	r2,-32692(gp)
 200173c:	100490fa 	slli	r2,r2,3
 2001740:	10800104 	addi	r2,r2,4
 2001744:	01200f14 	movui	r4,32828
 2001748:	01bffff4 	movhi	r6,65535
 200174c:	319f7004 	addi	r6,r6,32192
 2001750:	370d883a 	add	r6,r6,fp
 2001754:	3109883a 	add	r4,r6,r4
 2001758:	1085883a 	add	r2,r2,r2
 200175c:	1085883a 	add	r2,r2,r2
 2001760:	2085883a 	add	r2,r4,r2
 2001764:	10800017 	ldw	r2,0(r2)
 2001768:	2884b03a 	or	r2,r5,r2
 200176c:	1009883a 	mov	r4,r2
 2001770:	d0a01404 	addi	r2,gp,-32688
 2001774:	1885883a 	add	r2,r3,r2
 2001778:	11000005 	stb	r4,0(r2)
				  matriz[i]=(matriz[i]<<1)|solution[8*i+5];
 200177c:	d0e01317 	ldw	r3,-32692(gp)
 2001780:	d1201317 	ldw	r4,-32692(gp)
 2001784:	d0a01404 	addi	r2,gp,-32688
 2001788:	2085883a 	add	r2,r4,r2
 200178c:	10800003 	ldbu	r2,0(r2)
 2001790:	1085883a 	add	r2,r2,r2
 2001794:	100b883a 	mov	r5,r2
 2001798:	d0a01317 	ldw	r2,-32692(gp)
 200179c:	100490fa 	slli	r2,r2,3
 20017a0:	10800144 	addi	r2,r2,5
 20017a4:	01200f14 	movui	r4,32828
 20017a8:	01bffff4 	movhi	r6,65535
 20017ac:	319f7004 	addi	r6,r6,32192
 20017b0:	370d883a 	add	r6,r6,fp
 20017b4:	3109883a 	add	r4,r6,r4
 20017b8:	1085883a 	add	r2,r2,r2
 20017bc:	1085883a 	add	r2,r2,r2
 20017c0:	2085883a 	add	r2,r4,r2
 20017c4:	10800017 	ldw	r2,0(r2)
 20017c8:	2884b03a 	or	r2,r5,r2
 20017cc:	1009883a 	mov	r4,r2
 20017d0:	d0a01404 	addi	r2,gp,-32688
 20017d4:	1885883a 	add	r2,r3,r2
 20017d8:	11000005 	stb	r4,0(r2)
				  matriz[i]=(matriz[i]<<1)|solution[8*i+6];
 20017dc:	d0e01317 	ldw	r3,-32692(gp)
 20017e0:	d1201317 	ldw	r4,-32692(gp)
 20017e4:	d0a01404 	addi	r2,gp,-32688
 20017e8:	2085883a 	add	r2,r4,r2
 20017ec:	10800003 	ldbu	r2,0(r2)
 20017f0:	1085883a 	add	r2,r2,r2
 20017f4:	100b883a 	mov	r5,r2
 20017f8:	d0a01317 	ldw	r2,-32692(gp)
 20017fc:	100490fa 	slli	r2,r2,3
 2001800:	10800184 	addi	r2,r2,6
 2001804:	01200f14 	movui	r4,32828
 2001808:	01bffff4 	movhi	r6,65535
 200180c:	319f7004 	addi	r6,r6,32192
 2001810:	370d883a 	add	r6,r6,fp
 2001814:	3109883a 	add	r4,r6,r4
 2001818:	1085883a 	add	r2,r2,r2
 200181c:	1085883a 	add	r2,r2,r2
 2001820:	2085883a 	add	r2,r4,r2
 2001824:	10800017 	ldw	r2,0(r2)
 2001828:	2884b03a 	or	r2,r5,r2
 200182c:	1009883a 	mov	r4,r2
 2001830:	d0a01404 	addi	r2,gp,-32688
 2001834:	1885883a 	add	r2,r3,r2
 2001838:	11000005 	stb	r4,0(r2)
				  matriz[i]=(matriz[i]<<1)|solution[8*i+7];
 200183c:	d0e01317 	ldw	r3,-32692(gp)
 2001840:	d1201317 	ldw	r4,-32692(gp)
 2001844:	d0a01404 	addi	r2,gp,-32688
 2001848:	2085883a 	add	r2,r4,r2
 200184c:	10800003 	ldbu	r2,0(r2)
 2001850:	1085883a 	add	r2,r2,r2
 2001854:	100b883a 	mov	r5,r2
 2001858:	d0a01317 	ldw	r2,-32692(gp)
 200185c:	100490fa 	slli	r2,r2,3
 2001860:	108001c4 	addi	r2,r2,7
 2001864:	01200f14 	movui	r4,32828
 2001868:	01bffff4 	movhi	r6,65535
 200186c:	319f7004 	addi	r6,r6,32192
 2001870:	370d883a 	add	r6,r6,fp
 2001874:	3109883a 	add	r4,r6,r4
 2001878:	1085883a 	add	r2,r2,r2
 200187c:	1085883a 	add	r2,r2,r2
 2001880:	2085883a 	add	r2,r4,r2
 2001884:	10800017 	ldw	r2,0(r2)
 2001888:	2884b03a 	or	r2,r5,r2
 200188c:	1009883a 	mov	r4,r2
 2001890:	d0a01404 	addi	r2,gp,-32688
 2001894:	1885883a 	add	r2,r3,r2
 2001898:	11000005 	stb	r4,0(r2)
				  printf("\n%u",matriz[i]);
 200189c:	d0e01317 	ldw	r3,-32692(gp)
 20018a0:	d0a01404 	addi	r2,gp,-32688
 20018a4:	1885883a 	add	r2,r3,r2
 20018a8:	10800003 	ldbu	r2,0(r2)
 20018ac:	10803fcc 	andi	r2,r2,255
 20018b0:	1080201c 	xori	r2,r2,128
 20018b4:	10bfe004 	addi	r2,r2,-128
 20018b8:	01008074 	movhi	r4,513
 20018bc:	21128f04 	addi	r4,r4,19004
 20018c0:	100b883a 	mov	r5,r2
 20018c4:	20040c00 	call	20040c0 <printf>
				      printf("\n%u",solution[i]);
				      //matriz[i/8]=(((((((((((solution[i/8]<<1) | solution[i/8 +2])<<1) | solution[i/8 +3])<<1) | solution[i/8 +4])<<1) | solution[i/8 +5])<<1) | solution[i/8 +6])<<1) | solution[i/8+7];

				}
			    }
			  for(i=0;i<8;i++)
 20018c8:	d0a01317 	ldw	r2,-32692(gp)
 20018cc:	10800044 	addi	r2,r2,1
 20018d0:	d0a01315 	stw	r2,-32692(gp)
 20018d4:	d0a01317 	ldw	r2,-32692(gp)
 20018d8:	10800210 	cmplti	r2,r2,8
 20018dc:	103f401e 	bne	r2,zero,20015e0 <main+0x137c>
				  matriz[i]=(matriz[i]<<1)|solution[8*i+5];
				  matriz[i]=(matriz[i]<<1)|solution[8*i+6];
				  matriz[i]=(matriz[i]<<1)|solution[8*i+7];
				  printf("\n%u",matriz[i]);
				}
			  sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 20018e0:	00bffff4 	movhi	r2,65535
 20018e4:	109f7b04 	addi	r2,r2,32236
 20018e8:	1705883a 	add	r2,r2,fp
 20018ec:	10c00017 	ldw	r3,0(r2)
 20018f0:	d0a01403 	ldbu	r2,-32688(gp)
 20018f4:	10803fcc 	andi	r2,r2,255
 20018f8:	1080201c 	xori	r2,r2,128
 20018fc:	10bfe004 	addi	r2,r2,-128
 2001900:	1809883a 	mov	r4,r3
 2001904:	01400044 	movi	r5,1
 2001908:	100d883a 	mov	r6,r2
 200190c:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 2001910:	013ffff4 	movhi	r4,65535
 2001914:	211f7b04 	addi	r4,r4,32236
 2001918:	2709883a 	add	r4,r4,fp
 200191c:	20c00017 	ldw	r3,0(r4)
 2001920:	d0a01444 	addi	r2,gp,-32687
 2001924:	10800003 	ldbu	r2,0(r2)
 2001928:	10803fcc 	andi	r2,r2,255
 200192c:	1080201c 	xori	r2,r2,128
 2001930:	10bfe004 	addi	r2,r2,-128
 2001934:	1809883a 	mov	r4,r3
 2001938:	01400084 	movi	r5,2
 200193c:	100d883a 	mov	r6,r2
 2001940:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 2001944:	017ffff4 	movhi	r5,65535
 2001948:	295f7b04 	addi	r5,r5,32236
 200194c:	2f0b883a 	add	r5,r5,fp
 2001950:	28c00017 	ldw	r3,0(r5)
 2001954:	d0a01484 	addi	r2,gp,-32686
 2001958:	10800003 	ldbu	r2,0(r2)
 200195c:	10803fcc 	andi	r2,r2,255
 2001960:	1080201c 	xori	r2,r2,128
 2001964:	10bfe004 	addi	r2,r2,-128
 2001968:	1809883a 	mov	r4,r3
 200196c:	014000c4 	movi	r5,3
 2001970:	100d883a 	mov	r6,r2
 2001974:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 2001978:	01bffff4 	movhi	r6,65535
 200197c:	319f7b04 	addi	r6,r6,32236
 2001980:	370d883a 	add	r6,r6,fp
 2001984:	30c00017 	ldw	r3,0(r6)
 2001988:	d0a014c4 	addi	r2,gp,-32685
 200198c:	10800003 	ldbu	r2,0(r2)
 2001990:	10803fcc 	andi	r2,r2,255
 2001994:	1080201c 	xori	r2,r2,128
 2001998:	10bfe004 	addi	r2,r2,-128
 200199c:	1809883a 	mov	r4,r3
 20019a0:	01400104 	movi	r5,4
 20019a4:	100d883a 	mov	r6,r2
 20019a8:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 20019ac:	00bffff4 	movhi	r2,65535
 20019b0:	109f7b04 	addi	r2,r2,32236
 20019b4:	1705883a 	add	r2,r2,fp
 20019b8:	10c00017 	ldw	r3,0(r2)
 20019bc:	d0a01504 	addi	r2,gp,-32684
 20019c0:	10800003 	ldbu	r2,0(r2)
 20019c4:	10803fcc 	andi	r2,r2,255
 20019c8:	1080201c 	xori	r2,r2,128
 20019cc:	10bfe004 	addi	r2,r2,-128
 20019d0:	1809883a 	mov	r4,r3
 20019d4:	01400144 	movi	r5,5
 20019d8:	100d883a 	mov	r6,r2
 20019dc:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 20019e0:	013ffff4 	movhi	r4,65535
 20019e4:	211f7b04 	addi	r4,r4,32236
 20019e8:	2709883a 	add	r4,r4,fp
 20019ec:	20c00017 	ldw	r3,0(r4)
 20019f0:	d0a01544 	addi	r2,gp,-32683
 20019f4:	10800003 	ldbu	r2,0(r2)
 20019f8:	10803fcc 	andi	r2,r2,255
 20019fc:	1080201c 	xori	r2,r2,128
 2001a00:	10bfe004 	addi	r2,r2,-128
 2001a04:	1809883a 	mov	r4,r3
 2001a08:	01400184 	movi	r5,6
 2001a0c:	100d883a 	mov	r6,r2
 2001a10:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 2001a14:	017ffff4 	movhi	r5,65535
 2001a18:	295f7b04 	addi	r5,r5,32236
 2001a1c:	2f0b883a 	add	r5,r5,fp
 2001a20:	28c00017 	ldw	r3,0(r5)
 2001a24:	d0a01584 	addi	r2,gp,-32682
 2001a28:	10800003 	ldbu	r2,0(r2)
 2001a2c:	10803fcc 	andi	r2,r2,255
 2001a30:	1080201c 	xori	r2,r2,128
 2001a34:	10bfe004 	addi	r2,r2,-128
 2001a38:	1809883a 	mov	r4,r3
 2001a3c:	014001c4 	movi	r5,7
 2001a40:	100d883a 	mov	r6,r2
 2001a44:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 2001a48:	01bffff4 	movhi	r6,65535
 2001a4c:	319f7b04 	addi	r6,r6,32236
 2001a50:	370d883a 	add	r6,r6,fp
 2001a54:	30c00017 	ldw	r3,0(r6)
 2001a58:	d0a015c4 	addi	r2,gp,-32681
 2001a5c:	10800003 	ldbu	r2,0(r2)
 2001a60:	10803fcc 	andi	r2,r2,255
 2001a64:	1080201c 	xori	r2,r2,128
 2001a68:	10bfe004 	addi	r2,r2,-128
 2001a6c:	1809883a 	mov	r4,r3
 2001a70:	01400204 	movi	r5,8
 2001a74:	100d883a 	mov	r6,r2
 2001a78:	2003d340 	call	2003d34 <sen_2_byte_info>
			  while((c=IORD(PORT_TECLADO_BASE,0)) != 0b1100)
 2001a7c:	0000af06 	br	2001d3c <main+0x1ad8>
			  {
				  sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 2001a80:	00bffff4 	movhi	r2,65535
 2001a84:	109f7b04 	addi	r2,r2,32236
 2001a88:	1705883a 	add	r2,r2,fp
 2001a8c:	10c00017 	ldw	r3,0(r2)
 2001a90:	d0a01403 	ldbu	r2,-32688(gp)
 2001a94:	10803fcc 	andi	r2,r2,255
 2001a98:	1080201c 	xori	r2,r2,128
 2001a9c:	10bfe004 	addi	r2,r2,-128
 2001aa0:	1809883a 	mov	r4,r3
 2001aa4:	01400044 	movi	r5,1
 2001aa8:	100d883a 	mov	r6,r2
 2001aac:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 2001ab0:	013ffff4 	movhi	r4,65535
 2001ab4:	211f7b04 	addi	r4,r4,32236
 2001ab8:	2709883a 	add	r4,r4,fp
 2001abc:	20c00017 	ldw	r3,0(r4)
 2001ac0:	d0a01444 	addi	r2,gp,-32687
 2001ac4:	10800003 	ldbu	r2,0(r2)
 2001ac8:	10803fcc 	andi	r2,r2,255
 2001acc:	1080201c 	xori	r2,r2,128
 2001ad0:	10bfe004 	addi	r2,r2,-128
 2001ad4:	1809883a 	mov	r4,r3
 2001ad8:	01400084 	movi	r5,2
 2001adc:	100d883a 	mov	r6,r2
 2001ae0:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 2001ae4:	017ffff4 	movhi	r5,65535
 2001ae8:	295f7b04 	addi	r5,r5,32236
 2001aec:	2f0b883a 	add	r5,r5,fp
 2001af0:	28c00017 	ldw	r3,0(r5)
 2001af4:	d0a01484 	addi	r2,gp,-32686
 2001af8:	10800003 	ldbu	r2,0(r2)
 2001afc:	10803fcc 	andi	r2,r2,255
 2001b00:	1080201c 	xori	r2,r2,128
 2001b04:	10bfe004 	addi	r2,r2,-128
 2001b08:	1809883a 	mov	r4,r3
 2001b0c:	014000c4 	movi	r5,3
 2001b10:	100d883a 	mov	r6,r2
 2001b14:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 2001b18:	01bffff4 	movhi	r6,65535
 2001b1c:	319f7b04 	addi	r6,r6,32236
 2001b20:	370d883a 	add	r6,r6,fp
 2001b24:	30c00017 	ldw	r3,0(r6)
 2001b28:	d0a014c4 	addi	r2,gp,-32685
 2001b2c:	10800003 	ldbu	r2,0(r2)
 2001b30:	10803fcc 	andi	r2,r2,255
 2001b34:	1080201c 	xori	r2,r2,128
 2001b38:	10bfe004 	addi	r2,r2,-128
 2001b3c:	1809883a 	mov	r4,r3
 2001b40:	01400104 	movi	r5,4
 2001b44:	100d883a 	mov	r6,r2
 2001b48:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 2001b4c:	00bffff4 	movhi	r2,65535
 2001b50:	109f7b04 	addi	r2,r2,32236
 2001b54:	1705883a 	add	r2,r2,fp
 2001b58:	10c00017 	ldw	r3,0(r2)
 2001b5c:	d0a01504 	addi	r2,gp,-32684
 2001b60:	10800003 	ldbu	r2,0(r2)
 2001b64:	10803fcc 	andi	r2,r2,255
 2001b68:	1080201c 	xori	r2,r2,128
 2001b6c:	10bfe004 	addi	r2,r2,-128
 2001b70:	1809883a 	mov	r4,r3
 2001b74:	01400144 	movi	r5,5
 2001b78:	100d883a 	mov	r6,r2
 2001b7c:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 2001b80:	013ffff4 	movhi	r4,65535
 2001b84:	211f7b04 	addi	r4,r4,32236
 2001b88:	2709883a 	add	r4,r4,fp
 2001b8c:	20c00017 	ldw	r3,0(r4)
 2001b90:	d0a01544 	addi	r2,gp,-32683
 2001b94:	10800003 	ldbu	r2,0(r2)
 2001b98:	10803fcc 	andi	r2,r2,255
 2001b9c:	1080201c 	xori	r2,r2,128
 2001ba0:	10bfe004 	addi	r2,r2,-128
 2001ba4:	1809883a 	mov	r4,r3
 2001ba8:	01400184 	movi	r5,6
 2001bac:	100d883a 	mov	r6,r2
 2001bb0:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 2001bb4:	017ffff4 	movhi	r5,65535
 2001bb8:	295f7b04 	addi	r5,r5,32236
 2001bbc:	2f0b883a 	add	r5,r5,fp
 2001bc0:	28c00017 	ldw	r3,0(r5)
 2001bc4:	d0a01584 	addi	r2,gp,-32682
 2001bc8:	10800003 	ldbu	r2,0(r2)
 2001bcc:	10803fcc 	andi	r2,r2,255
 2001bd0:	1080201c 	xori	r2,r2,128
 2001bd4:	10bfe004 	addi	r2,r2,-128
 2001bd8:	1809883a 	mov	r4,r3
 2001bdc:	014001c4 	movi	r5,7
 2001be0:	100d883a 	mov	r6,r2
 2001be4:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 2001be8:	01bffff4 	movhi	r6,65535
 2001bec:	319f7b04 	addi	r6,r6,32236
 2001bf0:	370d883a 	add	r6,r6,fp
 2001bf4:	30c00017 	ldw	r3,0(r6)
 2001bf8:	d0a015c4 	addi	r2,gp,-32681
 2001bfc:	10800003 	ldbu	r2,0(r2)
 2001c00:	10803fcc 	andi	r2,r2,255
 2001c04:	1080201c 	xori	r2,r2,128
 2001c08:	10bfe004 	addi	r2,r2,-128
 2001c0c:	1809883a 	mov	r4,r3
 2001c10:	01400204 	movi	r5,8
 2001c14:	100d883a 	mov	r6,r2
 2001c18:	2003d340 	call	2003d34 <sen_2_byte_info>
				  for(i=0;i<50000;i++)
 2001c1c:	d0201315 	stw	zero,-32692(gp)
 2001c20:	00000306 	br	2001c30 <main+0x19cc>
 2001c24:	d0a01317 	ldw	r2,-32692(gp)
 2001c28:	10800044 	addi	r2,r2,1
 2001c2c:	d0a01315 	stw	r2,-32692(gp)
 2001c30:	d0a01317 	ldw	r2,-32692(gp)
 2001c34:	00f0d3d4 	movui	r3,49999
 2001c38:	18bffa0e 	bge	r3,r2,2001c24 <main+0x19c0>
				  {

				  }
				  sen_2_byte_info(portlog,ADDR_DIG_0,0b00000000);
 2001c3c:	00fffff4 	movhi	r3,65535
 2001c40:	18df7b04 	addi	r3,r3,32236
 2001c44:	1f07883a 	add	r3,r3,fp
 2001c48:	18800017 	ldw	r2,0(r3)
 2001c4c:	1009883a 	mov	r4,r2
 2001c50:	01400044 	movi	r5,1
 2001c54:	000d883a 	mov	r6,zero
 2001c58:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_1,0b00000000);
 2001c5c:	013ffff4 	movhi	r4,65535
 2001c60:	211f7b04 	addi	r4,r4,32236
 2001c64:	2709883a 	add	r4,r4,fp
 2001c68:	20800017 	ldw	r2,0(r4)
 2001c6c:	1009883a 	mov	r4,r2
 2001c70:	01400084 	movi	r5,2
 2001c74:	000d883a 	mov	r6,zero
 2001c78:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_2,0b00000000);
 2001c7c:	017ffff4 	movhi	r5,65535
 2001c80:	295f7b04 	addi	r5,r5,32236
 2001c84:	2f0b883a 	add	r5,r5,fp
 2001c88:	28800017 	ldw	r2,0(r5)
 2001c8c:	1009883a 	mov	r4,r2
 2001c90:	014000c4 	movi	r5,3
 2001c94:	000d883a 	mov	r6,zero
 2001c98:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_3,0b00000000);
 2001c9c:	01bffff4 	movhi	r6,65535
 2001ca0:	319f7b04 	addi	r6,r6,32236
 2001ca4:	370d883a 	add	r6,r6,fp
 2001ca8:	30800017 	ldw	r2,0(r6)
 2001cac:	1009883a 	mov	r4,r2
 2001cb0:	01400104 	movi	r5,4
 2001cb4:	000d883a 	mov	r6,zero
 2001cb8:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_4,0b00000000);
 2001cbc:	00fffff4 	movhi	r3,65535
 2001cc0:	18df7b04 	addi	r3,r3,32236
 2001cc4:	1f07883a 	add	r3,r3,fp
 2001cc8:	18800017 	ldw	r2,0(r3)
 2001ccc:	1009883a 	mov	r4,r2
 2001cd0:	01400144 	movi	r5,5
 2001cd4:	000d883a 	mov	r6,zero
 2001cd8:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_5,0b00000000);
 2001cdc:	013ffff4 	movhi	r4,65535
 2001ce0:	211f7b04 	addi	r4,r4,32236
 2001ce4:	2709883a 	add	r4,r4,fp
 2001ce8:	20800017 	ldw	r2,0(r4)
 2001cec:	1009883a 	mov	r4,r2
 2001cf0:	01400184 	movi	r5,6
 2001cf4:	000d883a 	mov	r6,zero
 2001cf8:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_6,0b00000000);
 2001cfc:	017ffff4 	movhi	r5,65535
 2001d00:	295f7b04 	addi	r5,r5,32236
 2001d04:	2f0b883a 	add	r5,r5,fp
 2001d08:	28800017 	ldw	r2,0(r5)
 2001d0c:	1009883a 	mov	r4,r2
 2001d10:	014001c4 	movi	r5,7
 2001d14:	000d883a 	mov	r6,zero
 2001d18:	2003d340 	call	2003d34 <sen_2_byte_info>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_7,0b00000000);
 2001d1c:	01bffff4 	movhi	r6,65535
 2001d20:	319f7b04 	addi	r6,r6,32236
 2001d24:	370d883a 	add	r6,r6,fp
 2001d28:	30800017 	ldw	r2,0(r6)
 2001d2c:	1009883a 	mov	r4,r2
 2001d30:	01400204 	movi	r5,8
 2001d34:	000d883a 	mov	r6,zero
 2001d38:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
			  while((c=IORD(PORT_TECLADO_BASE,0)) != 0b1100)
 2001d3c:	00810034 	movhi	r2,1024
 2001d40:	10880804 	addi	r2,r2,8224
 2001d44:	10800037 	ldwio	r2,0(r2)
 2001d48:	00fffff4 	movhi	r3,65535
 2001d4c:	18df7c04 	addi	r3,r3,32240
 2001d50:	1f07883a 	add	r3,r3,fp
 2001d54:	18800005 	stb	r2,0(r3)
 2001d58:	013ffff4 	movhi	r4,65535
 2001d5c:	211f7c04 	addi	r4,r4,32240
 2001d60:	2709883a 	add	r4,r4,fp
 2001d64:	20800007 	ldb	r2,0(r4)
 2001d68:	10800318 	cmpnei	r2,r2,12
 2001d6c:	103f441e 	bne	r2,zero,2001a80 <main+0x181c>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_4,0b00000000);
				  			  	sen_2_byte_info(portlog,ADDR_DIG_5,0b00000000);
				  			  	sen_2_byte_info(portlog,ADDR_DIG_6,0b00000000);
				  			  	sen_2_byte_info(portlog,ADDR_DIG_7,0b00000000);
			  }
			  for(i=0;i<8;i++)
 2001d70:	d0201315 	stw	zero,-32692(gp)
 2001d74:	0000bd06 	br	200206c <main+0x1e08>
			  			  	    {
			  			  	      matriz[i]=(pattern[8*i]<<1)|pattern[8*i+1];
 2001d78:	d0e01317 	ldw	r3,-32692(gp)
 2001d7c:	d0a01317 	ldw	r2,-32692(gp)
 2001d80:	100490fa 	slli	r2,r2,3
 2001d84:	01204f14 	movui	r4,33084
 2001d88:	017ffff4 	movhi	r5,65535
 2001d8c:	295f7004 	addi	r5,r5,32192
 2001d90:	2f0b883a 	add	r5,r5,fp
 2001d94:	2909883a 	add	r4,r5,r4
 2001d98:	1085883a 	add	r2,r2,r2
 2001d9c:	1085883a 	add	r2,r2,r2
 2001da0:	2085883a 	add	r2,r4,r2
 2001da4:	10800017 	ldw	r2,0(r2)
 2001da8:	1085883a 	add	r2,r2,r2
 2001dac:	100b883a 	mov	r5,r2
 2001db0:	d0a01317 	ldw	r2,-32692(gp)
 2001db4:	100490fa 	slli	r2,r2,3
 2001db8:	10800044 	addi	r2,r2,1
 2001dbc:	01204f14 	movui	r4,33084
 2001dc0:	01bffff4 	movhi	r6,65535
 2001dc4:	319f7004 	addi	r6,r6,32192
 2001dc8:	370d883a 	add	r6,r6,fp
 2001dcc:	3109883a 	add	r4,r6,r4
 2001dd0:	1085883a 	add	r2,r2,r2
 2001dd4:	1085883a 	add	r2,r2,r2
 2001dd8:	2085883a 	add	r2,r4,r2
 2001ddc:	10800017 	ldw	r2,0(r2)
 2001de0:	2884b03a 	or	r2,r5,r2
 2001de4:	1009883a 	mov	r4,r2
 2001de8:	d0a01404 	addi	r2,gp,-32688
 2001dec:	1885883a 	add	r2,r3,r2
 2001df0:	11000005 	stb	r4,0(r2)
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+2];
 2001df4:	d0e01317 	ldw	r3,-32692(gp)
 2001df8:	d1201317 	ldw	r4,-32692(gp)
 2001dfc:	d0a01404 	addi	r2,gp,-32688
 2001e00:	2085883a 	add	r2,r4,r2
 2001e04:	10800003 	ldbu	r2,0(r2)
 2001e08:	1085883a 	add	r2,r2,r2
 2001e0c:	100b883a 	mov	r5,r2
 2001e10:	d0a01317 	ldw	r2,-32692(gp)
 2001e14:	100490fa 	slli	r2,r2,3
 2001e18:	10800084 	addi	r2,r2,2
 2001e1c:	01204f14 	movui	r4,33084
 2001e20:	01bffff4 	movhi	r6,65535
 2001e24:	319f7004 	addi	r6,r6,32192
 2001e28:	370d883a 	add	r6,r6,fp
 2001e2c:	3109883a 	add	r4,r6,r4
 2001e30:	1085883a 	add	r2,r2,r2
 2001e34:	1085883a 	add	r2,r2,r2
 2001e38:	2085883a 	add	r2,r4,r2
 2001e3c:	10800017 	ldw	r2,0(r2)
 2001e40:	2884b03a 	or	r2,r5,r2
 2001e44:	1009883a 	mov	r4,r2
 2001e48:	d0a01404 	addi	r2,gp,-32688
 2001e4c:	1885883a 	add	r2,r3,r2
 2001e50:	11000005 	stb	r4,0(r2)
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+3];
 2001e54:	d0e01317 	ldw	r3,-32692(gp)
 2001e58:	d1201317 	ldw	r4,-32692(gp)
 2001e5c:	d0a01404 	addi	r2,gp,-32688
 2001e60:	2085883a 	add	r2,r4,r2
 2001e64:	10800003 	ldbu	r2,0(r2)
 2001e68:	1085883a 	add	r2,r2,r2
 2001e6c:	100b883a 	mov	r5,r2
 2001e70:	d0a01317 	ldw	r2,-32692(gp)
 2001e74:	100490fa 	slli	r2,r2,3
 2001e78:	108000c4 	addi	r2,r2,3
 2001e7c:	01204f14 	movui	r4,33084
 2001e80:	01bffff4 	movhi	r6,65535
 2001e84:	319f7004 	addi	r6,r6,32192
 2001e88:	370d883a 	add	r6,r6,fp
 2001e8c:	3109883a 	add	r4,r6,r4
 2001e90:	1085883a 	add	r2,r2,r2
 2001e94:	1085883a 	add	r2,r2,r2
 2001e98:	2085883a 	add	r2,r4,r2
 2001e9c:	10800017 	ldw	r2,0(r2)
 2001ea0:	2884b03a 	or	r2,r5,r2
 2001ea4:	1009883a 	mov	r4,r2
 2001ea8:	d0a01404 	addi	r2,gp,-32688
 2001eac:	1885883a 	add	r2,r3,r2
 2001eb0:	11000005 	stb	r4,0(r2)
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+4];
 2001eb4:	d0e01317 	ldw	r3,-32692(gp)
 2001eb8:	d1201317 	ldw	r4,-32692(gp)
 2001ebc:	d0a01404 	addi	r2,gp,-32688
 2001ec0:	2085883a 	add	r2,r4,r2
 2001ec4:	10800003 	ldbu	r2,0(r2)
 2001ec8:	1085883a 	add	r2,r2,r2
 2001ecc:	100b883a 	mov	r5,r2
 2001ed0:	d0a01317 	ldw	r2,-32692(gp)
 2001ed4:	100490fa 	slli	r2,r2,3
 2001ed8:	10800104 	addi	r2,r2,4
 2001edc:	01204f14 	movui	r4,33084
 2001ee0:	01bffff4 	movhi	r6,65535
 2001ee4:	319f7004 	addi	r6,r6,32192
 2001ee8:	370d883a 	add	r6,r6,fp
 2001eec:	3109883a 	add	r4,r6,r4
 2001ef0:	1085883a 	add	r2,r2,r2
 2001ef4:	1085883a 	add	r2,r2,r2
 2001ef8:	2085883a 	add	r2,r4,r2
 2001efc:	10800017 	ldw	r2,0(r2)
 2001f00:	2884b03a 	or	r2,r5,r2
 2001f04:	1009883a 	mov	r4,r2
 2001f08:	d0a01404 	addi	r2,gp,-32688
 2001f0c:	1885883a 	add	r2,r3,r2
 2001f10:	11000005 	stb	r4,0(r2)
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
 2001f14:	d0e01317 	ldw	r3,-32692(gp)
 2001f18:	d1201317 	ldw	r4,-32692(gp)
 2001f1c:	d0a01404 	addi	r2,gp,-32688
 2001f20:	2085883a 	add	r2,r4,r2
 2001f24:	10800003 	ldbu	r2,0(r2)
 2001f28:	1085883a 	add	r2,r2,r2
 2001f2c:	100b883a 	mov	r5,r2
 2001f30:	d0a01317 	ldw	r2,-32692(gp)
 2001f34:	100490fa 	slli	r2,r2,3
 2001f38:	10800144 	addi	r2,r2,5
 2001f3c:	01204f14 	movui	r4,33084
 2001f40:	01bffff4 	movhi	r6,65535
 2001f44:	319f7004 	addi	r6,r6,32192
 2001f48:	370d883a 	add	r6,r6,fp
 2001f4c:	3109883a 	add	r4,r6,r4
 2001f50:	1085883a 	add	r2,r2,r2
 2001f54:	1085883a 	add	r2,r2,r2
 2001f58:	2085883a 	add	r2,r4,r2
 2001f5c:	10800017 	ldw	r2,0(r2)
 2001f60:	2884b03a 	or	r2,r5,r2
 2001f64:	1009883a 	mov	r4,r2
 2001f68:	d0a01404 	addi	r2,gp,-32688
 2001f6c:	1885883a 	add	r2,r3,r2
 2001f70:	11000005 	stb	r4,0(r2)
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
 2001f74:	d0e01317 	ldw	r3,-32692(gp)
 2001f78:	d1201317 	ldw	r4,-32692(gp)
 2001f7c:	d0a01404 	addi	r2,gp,-32688
 2001f80:	2085883a 	add	r2,r4,r2
 2001f84:	10800003 	ldbu	r2,0(r2)
 2001f88:	1085883a 	add	r2,r2,r2
 2001f8c:	100b883a 	mov	r5,r2
 2001f90:	d0a01317 	ldw	r2,-32692(gp)
 2001f94:	100490fa 	slli	r2,r2,3
 2001f98:	10800184 	addi	r2,r2,6
 2001f9c:	01204f14 	movui	r4,33084
 2001fa0:	01bffff4 	movhi	r6,65535
 2001fa4:	319f7004 	addi	r6,r6,32192
 2001fa8:	370d883a 	add	r6,r6,fp
 2001fac:	3109883a 	add	r4,r6,r4
 2001fb0:	1085883a 	add	r2,r2,r2
 2001fb4:	1085883a 	add	r2,r2,r2
 2001fb8:	2085883a 	add	r2,r4,r2
 2001fbc:	10800017 	ldw	r2,0(r2)
 2001fc0:	2884b03a 	or	r2,r5,r2
 2001fc4:	1009883a 	mov	r4,r2
 2001fc8:	d0a01404 	addi	r2,gp,-32688
 2001fcc:	1885883a 	add	r2,r3,r2
 2001fd0:	11000005 	stb	r4,0(r2)
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
 2001fd4:	d0e01317 	ldw	r3,-32692(gp)
 2001fd8:	d1201317 	ldw	r4,-32692(gp)
 2001fdc:	d0a01404 	addi	r2,gp,-32688
 2001fe0:	2085883a 	add	r2,r4,r2
 2001fe4:	10800003 	ldbu	r2,0(r2)
 2001fe8:	1085883a 	add	r2,r2,r2
 2001fec:	100b883a 	mov	r5,r2
 2001ff0:	d0a01317 	ldw	r2,-32692(gp)
 2001ff4:	100490fa 	slli	r2,r2,3
 2001ff8:	108001c4 	addi	r2,r2,7
 2001ffc:	01204f14 	movui	r4,33084
 2002000:	01bffff4 	movhi	r6,65535
 2002004:	319f7004 	addi	r6,r6,32192
 2002008:	370d883a 	add	r6,r6,fp
 200200c:	3109883a 	add	r4,r6,r4
 2002010:	1085883a 	add	r2,r2,r2
 2002014:	1085883a 	add	r2,r2,r2
 2002018:	2085883a 	add	r2,r4,r2
 200201c:	10800017 	ldw	r2,0(r2)
 2002020:	2884b03a 	or	r2,r5,r2
 2002024:	1009883a 	mov	r4,r2
 2002028:	d0a01404 	addi	r2,gp,-32688
 200202c:	1885883a 	add	r2,r3,r2
 2002030:	11000005 	stb	r4,0(r2)
			  			  	      printf("\n%u",matriz[i]);
 2002034:	d0e01317 	ldw	r3,-32692(gp)
 2002038:	d0a01404 	addi	r2,gp,-32688
 200203c:	1885883a 	add	r2,r3,r2
 2002040:	10800003 	ldbu	r2,0(r2)
 2002044:	10803fcc 	andi	r2,r2,255
 2002048:	1080201c 	xori	r2,r2,128
 200204c:	10bfe004 	addi	r2,r2,-128
 2002050:	01008074 	movhi	r4,513
 2002054:	21128f04 	addi	r4,r4,19004
 2002058:	100b883a 	mov	r5,r2
 200205c:	20040c00 	call	20040c0 <printf>
				  			  	sen_2_byte_info(portlog,ADDR_DIG_4,0b00000000);
				  			  	sen_2_byte_info(portlog,ADDR_DIG_5,0b00000000);
				  			  	sen_2_byte_info(portlog,ADDR_DIG_6,0b00000000);
				  			  	sen_2_byte_info(portlog,ADDR_DIG_7,0b00000000);
			  }
			  for(i=0;i<8;i++)
 2002060:	d0a01317 	ldw	r2,-32692(gp)
 2002064:	10800044 	addi	r2,r2,1
 2002068:	d0a01315 	stw	r2,-32692(gp)
 200206c:	d0a01317 	ldw	r2,-32692(gp)
 2002070:	10800210 	cmplti	r2,r2,8
 2002074:	103f401e 	bne	r2,zero,2001d78 <main+0x1b14>
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
			  			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
			  			  	      printf("\n%u",matriz[i]);
			  			  }
			  sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 2002078:	00bffff4 	movhi	r2,65535
 200207c:	109f7b04 	addi	r2,r2,32236
 2002080:	1705883a 	add	r2,r2,fp
 2002084:	10c00017 	ldw	r3,0(r2)
 2002088:	d0a01403 	ldbu	r2,-32688(gp)
 200208c:	10803fcc 	andi	r2,r2,255
 2002090:	1080201c 	xori	r2,r2,128
 2002094:	10bfe004 	addi	r2,r2,-128
 2002098:	1809883a 	mov	r4,r3
 200209c:	01400044 	movi	r5,1
 20020a0:	100d883a 	mov	r6,r2
 20020a4:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 20020a8:	013ffff4 	movhi	r4,65535
 20020ac:	211f7b04 	addi	r4,r4,32236
 20020b0:	2709883a 	add	r4,r4,fp
 20020b4:	20c00017 	ldw	r3,0(r4)
 20020b8:	d0a01444 	addi	r2,gp,-32687
 20020bc:	10800003 	ldbu	r2,0(r2)
 20020c0:	10803fcc 	andi	r2,r2,255
 20020c4:	1080201c 	xori	r2,r2,128
 20020c8:	10bfe004 	addi	r2,r2,-128
 20020cc:	1809883a 	mov	r4,r3
 20020d0:	01400084 	movi	r5,2
 20020d4:	100d883a 	mov	r6,r2
 20020d8:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 20020dc:	017ffff4 	movhi	r5,65535
 20020e0:	295f7b04 	addi	r5,r5,32236
 20020e4:	2f0b883a 	add	r5,r5,fp
 20020e8:	28c00017 	ldw	r3,0(r5)
 20020ec:	d0a01484 	addi	r2,gp,-32686
 20020f0:	10800003 	ldbu	r2,0(r2)
 20020f4:	10803fcc 	andi	r2,r2,255
 20020f8:	1080201c 	xori	r2,r2,128
 20020fc:	10bfe004 	addi	r2,r2,-128
 2002100:	1809883a 	mov	r4,r3
 2002104:	014000c4 	movi	r5,3
 2002108:	100d883a 	mov	r6,r2
 200210c:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 2002110:	01bffff4 	movhi	r6,65535
 2002114:	319f7b04 	addi	r6,r6,32236
 2002118:	370d883a 	add	r6,r6,fp
 200211c:	30c00017 	ldw	r3,0(r6)
 2002120:	d0a014c4 	addi	r2,gp,-32685
 2002124:	10800003 	ldbu	r2,0(r2)
 2002128:	10803fcc 	andi	r2,r2,255
 200212c:	1080201c 	xori	r2,r2,128
 2002130:	10bfe004 	addi	r2,r2,-128
 2002134:	1809883a 	mov	r4,r3
 2002138:	01400104 	movi	r5,4
 200213c:	100d883a 	mov	r6,r2
 2002140:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 2002144:	00bffff4 	movhi	r2,65535
 2002148:	109f7b04 	addi	r2,r2,32236
 200214c:	1705883a 	add	r2,r2,fp
 2002150:	10c00017 	ldw	r3,0(r2)
 2002154:	d0a01504 	addi	r2,gp,-32684
 2002158:	10800003 	ldbu	r2,0(r2)
 200215c:	10803fcc 	andi	r2,r2,255
 2002160:	1080201c 	xori	r2,r2,128
 2002164:	10bfe004 	addi	r2,r2,-128
 2002168:	1809883a 	mov	r4,r3
 200216c:	01400144 	movi	r5,5
 2002170:	100d883a 	mov	r6,r2
 2002174:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 2002178:	013ffff4 	movhi	r4,65535
 200217c:	211f7b04 	addi	r4,r4,32236
 2002180:	2709883a 	add	r4,r4,fp
 2002184:	20c00017 	ldw	r3,0(r4)
 2002188:	d0a01544 	addi	r2,gp,-32683
 200218c:	10800003 	ldbu	r2,0(r2)
 2002190:	10803fcc 	andi	r2,r2,255
 2002194:	1080201c 	xori	r2,r2,128
 2002198:	10bfe004 	addi	r2,r2,-128
 200219c:	1809883a 	mov	r4,r3
 20021a0:	01400184 	movi	r5,6
 20021a4:	100d883a 	mov	r6,r2
 20021a8:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 20021ac:	017ffff4 	movhi	r5,65535
 20021b0:	295f7b04 	addi	r5,r5,32236
 20021b4:	2f0b883a 	add	r5,r5,fp
 20021b8:	28c00017 	ldw	r3,0(r5)
 20021bc:	d0a01584 	addi	r2,gp,-32682
 20021c0:	10800003 	ldbu	r2,0(r2)
 20021c4:	10803fcc 	andi	r2,r2,255
 20021c8:	1080201c 	xori	r2,r2,128
 20021cc:	10bfe004 	addi	r2,r2,-128
 20021d0:	1809883a 	mov	r4,r3
 20021d4:	014001c4 	movi	r5,7
 20021d8:	100d883a 	mov	r6,r2
 20021dc:	2003d340 	call	2003d34 <sen_2_byte_info>
			  			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 20021e0:	01bffff4 	movhi	r6,65535
 20021e4:	319f7b04 	addi	r6,r6,32236
 20021e8:	370d883a 	add	r6,r6,fp
 20021ec:	30c00017 	ldw	r3,0(r6)
 20021f0:	d0a015c4 	addi	r2,gp,-32681
 20021f4:	10800003 	ldbu	r2,0(r2)
 20021f8:	10803fcc 	andi	r2,r2,255
 20021fc:	1080201c 	xori	r2,r2,128
 2002200:	10bfe004 	addi	r2,r2,-128
 2002204:	1809883a 	mov	r4,r3
 2002208:	01400204 	movi	r5,8
 200220c:	100d883a 	mov	r6,r2
 2002210:	2003d340 	call	2003d34 <sen_2_byte_info>
			  printf("\nEnter row:");
 2002214:	01008074 	movhi	r4,513
 2002218:	21129c04 	addi	r4,r4,19056
 200221c:	20040c00 	call	20040c0 <printf>
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 2002220:	00003406 	br	20022f4 <main+0x2090>
			    {
				  if(c!=0b0011)
 2002224:	00fffff4 	movhi	r3,65535
 2002228:	18df7c04 	addi	r3,r3,32240
 200222c:	1f07883a 	add	r3,r3,fp
 2002230:	18800007 	ldb	r2,0(r3)
 2002234:	108000e0 	cmpeqi	r2,r2,3
 2002238:	10002e1e 	bne	r2,zero,20022f4 <main+0x2090>
				  {
			      if(c<3)
 200223c:	013ffff4 	movhi	r4,65535
 2002240:	211f7c04 	addi	r4,r4,32240
 2002244:	2709883a 	add	r4,r4,fp
 2002248:	20800007 	ldb	r2,0(r4)
 200224c:	108000c8 	cmpgei	r2,r2,3
 2002250:	1000091e 	bne	r2,zero,2002278 <main+0x2014>
				  {
			    	  row = c;
 2002254:	017ffff4 	movhi	r5,65535
 2002258:	295f7c04 	addi	r5,r5,32240
 200225c:	2f0b883a 	add	r5,r5,fp
 2002260:	28800007 	ldb	r2,0(r5)
 2002264:	01bffff4 	movhi	r6,65535
 2002268:	319f7404 	addi	r6,r6,32208
 200226c:	370d883a 	add	r6,r6,fp
 2002270:	30800015 	stw	r2,0(r6)
 2002274:	00001f06 	br	20022f4 <main+0x2090>
				  }
			      else if(c>=3 && c<7)
 2002278:	00fffff4 	movhi	r3,65535
 200227c:	18df7c04 	addi	r3,r3,32240
 2002280:	1f07883a 	add	r3,r3,fp
 2002284:	18800007 	ldb	r2,0(r3)
 2002288:	108000d0 	cmplti	r2,r2,3
 200228c:	1000101e 	bne	r2,zero,20022d0 <main+0x206c>
 2002290:	013ffff4 	movhi	r4,65535
 2002294:	211f7c04 	addi	r4,r4,32240
 2002298:	2709883a 	add	r4,r4,fp
 200229c:	20800007 	ldb	r2,0(r4)
 20022a0:	108001c8 	cmpgei	r2,r2,7
 20022a4:	10000a1e 	bne	r2,zero,20022d0 <main+0x206c>
			      {
			    	 row=c-1;
 20022a8:	017ffff4 	movhi	r5,65535
 20022ac:	295f7c04 	addi	r5,r5,32240
 20022b0:	2f0b883a 	add	r5,r5,fp
 20022b4:	28800007 	ldb	r2,0(r5)
 20022b8:	10bfffc4 	addi	r2,r2,-1
 20022bc:	01bffff4 	movhi	r6,65535
 20022c0:	319f7404 	addi	r6,r6,32208
 20022c4:	370d883a 	add	r6,r6,fp
 20022c8:	30800015 	stw	r2,0(r6)
 20022cc:	00000906 	br	20022f4 <main+0x2090>
			      }
			      else
			      {
			    	  row=c-2;
 20022d0:	00fffff4 	movhi	r3,65535
 20022d4:	18df7c04 	addi	r3,r3,32240
 20022d8:	1f07883a 	add	r3,r3,fp
 20022dc:	18800007 	ldb	r2,0(r3)
 20022e0:	10bfff84 	addi	r2,r2,-2
 20022e4:	013ffff4 	movhi	r4,65535
 20022e8:	211f7404 	addi	r4,r4,32208
 20022ec:	2709883a 	add	r4,r4,fp
 20022f0:	20800015 	stw	r2,0(r4)
			  			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
			  			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
			  			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
			  			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
			  printf("\nEnter row:");
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 20022f4:	00810034 	movhi	r2,1024
 20022f8:	10880804 	addi	r2,r2,8224
 20022fc:	10800037 	ldwio	r2,0(r2)
 2002300:	017ffff4 	movhi	r5,65535
 2002304:	295f7c04 	addi	r5,r5,32240
 2002308:	2f0b883a 	add	r5,r5,fp
 200230c:	28800005 	stb	r2,0(r5)
 2002310:	01bffff4 	movhi	r6,65535
 2002314:	319f7c04 	addi	r6,r6,32240
 2002318:	370d883a 	add	r6,r6,fp
 200231c:	30800007 	ldb	r2,0(r6)
 2002320:	108003d8 	cmpnei	r2,r2,15
 2002324:	103fbf1e 	bne	r2,zero,2002224 <main+0x1fc0>
			      {
			    	  row=c-2;
			      }
				  }
			    }
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
 2002328:	0001883a 	nop
 200232c:	00810034 	movhi	r2,1024
 2002330:	10880804 	addi	r2,r2,8224
 2002334:	10800037 	ldwio	r2,0(r2)
 2002338:	00fffff4 	movhi	r3,65535
 200233c:	18df7c04 	addi	r3,r3,32240
 2002340:	1f07883a 	add	r3,r3,fp
 2002344:	18800005 	stb	r2,0(r3)
 2002348:	013ffff4 	movhi	r4,65535
 200234c:	211f7c04 	addi	r4,r4,32240
 2002350:	2709883a 	add	r4,r4,fp
 2002354:	20800007 	ldb	r2,0(r4)
 2002358:	108000d8 	cmpnei	r2,r2,3
 200235c:	103ff31e 	bne	r2,zero,200232c <main+0x20c8>
			  		  {
			  		  }

			  int column;
			  printf("\nEnter column:");
 2002360:	01008074 	movhi	r4,513
 2002364:	21129f04 	addi	r4,r4,19068
 2002368:	20040c00 	call	20040c0 <printf>
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 200236c:	00003406 	br	2002440 <main+0x21dc>
			    {
				  if(c!=0b0011)
 2002370:	017ffff4 	movhi	r5,65535
 2002374:	295f7c04 	addi	r5,r5,32240
 2002378:	2f0b883a 	add	r5,r5,fp
 200237c:	28800007 	ldb	r2,0(r5)
 2002380:	108000e0 	cmpeqi	r2,r2,3
 2002384:	10002e1e 	bne	r2,zero,2002440 <main+0x21dc>
				  {
				  if(c<3)
 2002388:	01bffff4 	movhi	r6,65535
 200238c:	319f7c04 	addi	r6,r6,32240
 2002390:	370d883a 	add	r6,r6,fp
 2002394:	30800007 	ldb	r2,0(r6)
 2002398:	108000c8 	cmpgei	r2,r2,3
 200239c:	1000091e 	bne	r2,zero,20023c4 <main+0x2160>
				  {
				  	  column = c;
 20023a0:	00fffff4 	movhi	r3,65535
 20023a4:	18df7c04 	addi	r3,r3,32240
 20023a8:	1f07883a 	add	r3,r3,fp
 20023ac:	18800007 	ldb	r2,0(r3)
 20023b0:	013ffff4 	movhi	r4,65535
 20023b4:	211f7604 	addi	r4,r4,32216
 20023b8:	2709883a 	add	r4,r4,fp
 20023bc:	20800015 	stw	r2,0(r4)
 20023c0:	00001f06 	br	2002440 <main+0x21dc>
				  }
				  else if(c>=3 && c<7)
 20023c4:	017ffff4 	movhi	r5,65535
 20023c8:	295f7c04 	addi	r5,r5,32240
 20023cc:	2f0b883a 	add	r5,r5,fp
 20023d0:	28800007 	ldb	r2,0(r5)
 20023d4:	108000d0 	cmplti	r2,r2,3
 20023d8:	1000101e 	bne	r2,zero,200241c <main+0x21b8>
 20023dc:	01bffff4 	movhi	r6,65535
 20023e0:	319f7c04 	addi	r6,r6,32240
 20023e4:	370d883a 	add	r6,r6,fp
 20023e8:	30800007 	ldb	r2,0(r6)
 20023ec:	108001c8 	cmpgei	r2,r2,7
 20023f0:	10000a1e 	bne	r2,zero,200241c <main+0x21b8>
				  {
				   	 column=c-1;
 20023f4:	00fffff4 	movhi	r3,65535
 20023f8:	18df7c04 	addi	r3,r3,32240
 20023fc:	1f07883a 	add	r3,r3,fp
 2002400:	18800007 	ldb	r2,0(r3)
 2002404:	10bfffc4 	addi	r2,r2,-1
 2002408:	013ffff4 	movhi	r4,65535
 200240c:	211f7604 	addi	r4,r4,32216
 2002410:	2709883a 	add	r4,r4,fp
 2002414:	20800015 	stw	r2,0(r4)
 2002418:	00000906 	br	2002440 <main+0x21dc>
				  }
				  else
				  {
				   	  column=c-2;
 200241c:	017ffff4 	movhi	r5,65535
 2002420:	295f7c04 	addi	r5,r5,32240
 2002424:	2f0b883a 	add	r5,r5,fp
 2002428:	28800007 	ldb	r2,0(r5)
 200242c:	10bfff84 	addi	r2,r2,-2
 2002430:	01bffff4 	movhi	r6,65535
 2002434:	319f7604 	addi	r6,r6,32216
 2002438:	370d883a 	add	r6,r6,fp
 200243c:	30800015 	stw	r2,0(r6)
			  		  {
			  		  }

			  int column;
			  printf("\nEnter column:");
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 2002440:	00810034 	movhi	r2,1024
 2002444:	10880804 	addi	r2,r2,8224
 2002448:	10800037 	ldwio	r2,0(r2)
 200244c:	00fffff4 	movhi	r3,65535
 2002450:	18df7c04 	addi	r3,r3,32240
 2002454:	1f07883a 	add	r3,r3,fp
 2002458:	18800005 	stb	r2,0(r3)
 200245c:	013ffff4 	movhi	r4,65535
 2002460:	211f7c04 	addi	r4,r4,32240
 2002464:	2709883a 	add	r4,r4,fp
 2002468:	20800007 	ldb	r2,0(r4)
 200246c:	108003d8 	cmpnei	r2,r2,15
 2002470:	103fbf1e 	bne	r2,zero,2002370 <main+0x210c>
				  {
				   	  column=c-2;
				  }
				  }
			    }
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
 2002474:	0001883a 	nop
 2002478:	00810034 	movhi	r2,1024
 200247c:	10880804 	addi	r2,r2,8224
 2002480:	10800037 	ldwio	r2,0(r2)
 2002484:	017ffff4 	movhi	r5,65535
 2002488:	295f7c04 	addi	r5,r5,32240
 200248c:	2f0b883a 	add	r5,r5,fp
 2002490:	28800005 	stb	r2,0(r5)
 2002494:	01bffff4 	movhi	r6,65535
 2002498:	319f7c04 	addi	r6,r6,32240
 200249c:	370d883a 	add	r6,r6,fp
 20024a0:	30800007 	ldb	r2,0(r6)
 20024a4:	108000d8 	cmpnei	r2,r2,3
 20024a8:	103ff31e 	bne	r2,zero,2002478 <main+0x2214>
			  		  {
			  		  }
			  printf("\ncolumn");
 20024ac:	01008074 	movhi	r4,513
 20024b0:	2112a304 	addi	r4,r4,19084
 20024b4:	20040c00 	call	20040c0 <printf>


			  for(i=0;i<64;i++)
 20024b8:	d0201315 	stw	zero,-32692(gp)
 20024bc:	00004406 	br	20025d0 <main+0x236c>
			    {
			      pattern[i] = pattern[i]^moves[8*row+column][i];
 20024c0:	d0a01317 	ldw	r2,-32692(gp)
 20024c4:	d0e01317 	ldw	r3,-32692(gp)
 20024c8:	01204f14 	movui	r4,33084
 20024cc:	017ffff4 	movhi	r5,65535
 20024d0:	295f7004 	addi	r5,r5,32192
 20024d4:	2f0b883a 	add	r5,r5,fp
 20024d8:	2909883a 	add	r4,r5,r4
 20024dc:	18c7883a 	add	r3,r3,r3
 20024e0:	18c7883a 	add	r3,r3,r3
 20024e4:	20c7883a 	add	r3,r4,r3
 20024e8:	19000017 	ldw	r4,0(r3)
 20024ec:	01bffff4 	movhi	r6,65535
 20024f0:	319f7404 	addi	r6,r6,32208
 20024f4:	370d883a 	add	r6,r6,fp
 20024f8:	30c00017 	ldw	r3,0(r6)
 20024fc:	180a90fa 	slli	r5,r3,3
 2002500:	01bffff4 	movhi	r6,65535
 2002504:	319f7604 	addi	r6,r6,32216
 2002508:	370d883a 	add	r6,r6,fp
 200250c:	30c00017 	ldw	r3,0(r6)
 2002510:	28cb883a 	add	r5,r5,r3
 2002514:	d0e01317 	ldw	r3,-32692(gp)
 2002518:	280a91ba 	slli	r5,r5,6
 200251c:	28c7883a 	add	r3,r5,r3
 2002520:	18c7883a 	add	r3,r3,r3
 2002524:	18c7883a 	add	r3,r3,r3
 2002528:	017ffff4 	movhi	r5,65535
 200252c:	295f7004 	addi	r5,r5,32192
 2002530:	2f0b883a 	add	r5,r5,fp
 2002534:	28c7883a 	add	r3,r5,r3
 2002538:	18d00f04 	addi	r3,r3,16444
 200253c:	18c00017 	ldw	r3,0(r3)
 2002540:	20c6f03a 	xor	r3,r4,r3
 2002544:	01204f14 	movui	r4,33084
 2002548:	01bffff4 	movhi	r6,65535
 200254c:	319f7004 	addi	r6,r6,32192
 2002550:	370d883a 	add	r6,r6,fp
 2002554:	3109883a 	add	r4,r6,r4
 2002558:	1085883a 	add	r2,r2,r2
 200255c:	1085883a 	add	r2,r2,r2
 2002560:	2085883a 	add	r2,r4,r2
 2002564:	10c00015 	stw	r3,0(r2)
			      temp = temp||pattern[i];
 2002568:	00fffff4 	movhi	r3,65535
 200256c:	18df7204 	addi	r3,r3,32200
 2002570:	1f07883a 	add	r3,r3,fp
 2002574:	18800017 	ldw	r2,0(r3)
 2002578:	10000b1e 	bne	r2,zero,20025a8 <main+0x2344>
 200257c:	d0a01317 	ldw	r2,-32692(gp)
 2002580:	00e04f14 	movui	r3,33084
 2002584:	013ffff4 	movhi	r4,65535
 2002588:	211f7004 	addi	r4,r4,32192
 200258c:	2709883a 	add	r4,r4,fp
 2002590:	20c7883a 	add	r3,r4,r3
 2002594:	1085883a 	add	r2,r2,r2
 2002598:	1085883a 	add	r2,r2,r2
 200259c:	1885883a 	add	r2,r3,r2
 20025a0:	10800017 	ldw	r2,0(r2)
 20025a4:	10000226 	beq	r2,zero,20025b0 <main+0x234c>
 20025a8:	00800044 	movi	r2,1
 20025ac:	00000106 	br	20025b4 <main+0x2350>
 20025b0:	0005883a 	mov	r2,zero
 20025b4:	017ffff4 	movhi	r5,65535
 20025b8:	295f7204 	addi	r5,r5,32200
 20025bc:	2f0b883a 	add	r5,r5,fp
 20025c0:	28800015 	stw	r2,0(r5)
			  		  {
			  		  }
			  printf("\ncolumn");


			  for(i=0;i<64;i++)
 20025c4:	d0a01317 	ldw	r2,-32692(gp)
 20025c8:	10800044 	addi	r2,r2,1
 20025cc:	d0a01315 	stw	r2,-32692(gp)
 20025d0:	d0a01317 	ldw	r2,-32692(gp)
 20025d4:	10801010 	cmplti	r2,r2,64
 20025d8:	103fb91e 	bne	r2,zero,20024c0 <main+0x225c>
			    {
			      pattern[i] = pattern[i]^moves[8*row+column][i];
			      temp = temp||pattern[i];
			    }
			  win = 0;
 20025dc:	01bffff4 	movhi	r6,65535
 20025e0:	319f7104 	addi	r6,r6,32196
 20025e4:	370d883a 	add	r6,r6,fp
 20025e8:	30000015 	stw	zero,0(r6)
			  for(i=0;i<64;i++)
 20025ec:	d0201315 	stw	zero,-32692(gp)
 20025f0:	00001a06 	br	200265c <main+0x23f8>
			    {
			      win = win||pattern[i];
 20025f4:	00fffff4 	movhi	r3,65535
 20025f8:	18df7104 	addi	r3,r3,32196
 20025fc:	1f07883a 	add	r3,r3,fp
 2002600:	18800017 	ldw	r2,0(r3)
 2002604:	10000b1e 	bne	r2,zero,2002634 <main+0x23d0>
 2002608:	d0a01317 	ldw	r2,-32692(gp)
 200260c:	00e04f14 	movui	r3,33084
 2002610:	013ffff4 	movhi	r4,65535
 2002614:	211f7004 	addi	r4,r4,32192
 2002618:	2709883a 	add	r4,r4,fp
 200261c:	20c7883a 	add	r3,r4,r3
 2002620:	1085883a 	add	r2,r2,r2
 2002624:	1085883a 	add	r2,r2,r2
 2002628:	1885883a 	add	r2,r3,r2
 200262c:	10800017 	ldw	r2,0(r2)
 2002630:	10000226 	beq	r2,zero,200263c <main+0x23d8>
 2002634:	00800044 	movi	r2,1
 2002638:	00000106 	br	2002640 <main+0x23dc>
 200263c:	0005883a 	mov	r2,zero
 2002640:	017ffff4 	movhi	r5,65535
 2002644:	295f7104 	addi	r5,r5,32196
 2002648:	2f0b883a 	add	r5,r5,fp
 200264c:	28800015 	stw	r2,0(r5)
			    {
			      pattern[i] = pattern[i]^moves[8*row+column][i];
			      temp = temp||pattern[i];
			    }
			  win = 0;
			  for(i=0;i<64;i++)
 2002650:	d0a01317 	ldw	r2,-32692(gp)
 2002654:	10800044 	addi	r2,r2,1
 2002658:	d0a01315 	stw	r2,-32692(gp)
 200265c:	d0a01317 	ldw	r2,-32692(gp)
 2002660:	10801010 	cmplti	r2,r2,64
 2002664:	103fe31e 	bne	r2,zero,20025f4 <main+0x2390>
			    {
			      win = win||pattern[i];
			      //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];
			    }
			  for(i=0;i<8;i++)
 2002668:	d0201315 	stw	zero,-32692(gp)
 200266c:	0000bd06 	br	2002964 <main+0x2700>
			  	    {
			  	      matriz[i]=(pattern[8*i]<<1)|pattern[8*i+1];
 2002670:	d0e01317 	ldw	r3,-32692(gp)
 2002674:	d0a01317 	ldw	r2,-32692(gp)
 2002678:	100490fa 	slli	r2,r2,3
 200267c:	01204f14 	movui	r4,33084
 2002680:	01bffff4 	movhi	r6,65535
 2002684:	319f7004 	addi	r6,r6,32192
 2002688:	370d883a 	add	r6,r6,fp
 200268c:	3109883a 	add	r4,r6,r4
 2002690:	1085883a 	add	r2,r2,r2
 2002694:	1085883a 	add	r2,r2,r2
 2002698:	2085883a 	add	r2,r4,r2
 200269c:	10800017 	ldw	r2,0(r2)
 20026a0:	1085883a 	add	r2,r2,r2
 20026a4:	100b883a 	mov	r5,r2
 20026a8:	d0a01317 	ldw	r2,-32692(gp)
 20026ac:	100490fa 	slli	r2,r2,3
 20026b0:	10800044 	addi	r2,r2,1
 20026b4:	01204f14 	movui	r4,33084
 20026b8:	01bffff4 	movhi	r6,65535
 20026bc:	319f7004 	addi	r6,r6,32192
 20026c0:	370d883a 	add	r6,r6,fp
 20026c4:	3109883a 	add	r4,r6,r4
 20026c8:	1085883a 	add	r2,r2,r2
 20026cc:	1085883a 	add	r2,r2,r2
 20026d0:	2085883a 	add	r2,r4,r2
 20026d4:	10800017 	ldw	r2,0(r2)
 20026d8:	2884b03a 	or	r2,r5,r2
 20026dc:	1009883a 	mov	r4,r2
 20026e0:	d0a01404 	addi	r2,gp,-32688
 20026e4:	1885883a 	add	r2,r3,r2
 20026e8:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+2];
 20026ec:	d0e01317 	ldw	r3,-32692(gp)
 20026f0:	d1201317 	ldw	r4,-32692(gp)
 20026f4:	d0a01404 	addi	r2,gp,-32688
 20026f8:	2085883a 	add	r2,r4,r2
 20026fc:	10800003 	ldbu	r2,0(r2)
 2002700:	1085883a 	add	r2,r2,r2
 2002704:	100b883a 	mov	r5,r2
 2002708:	d0a01317 	ldw	r2,-32692(gp)
 200270c:	100490fa 	slli	r2,r2,3
 2002710:	10800084 	addi	r2,r2,2
 2002714:	01204f14 	movui	r4,33084
 2002718:	01bffff4 	movhi	r6,65535
 200271c:	319f7004 	addi	r6,r6,32192
 2002720:	370d883a 	add	r6,r6,fp
 2002724:	3109883a 	add	r4,r6,r4
 2002728:	1085883a 	add	r2,r2,r2
 200272c:	1085883a 	add	r2,r2,r2
 2002730:	2085883a 	add	r2,r4,r2
 2002734:	10800017 	ldw	r2,0(r2)
 2002738:	2884b03a 	or	r2,r5,r2
 200273c:	1009883a 	mov	r4,r2
 2002740:	d0a01404 	addi	r2,gp,-32688
 2002744:	1885883a 	add	r2,r3,r2
 2002748:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+3];
 200274c:	d0e01317 	ldw	r3,-32692(gp)
 2002750:	d1201317 	ldw	r4,-32692(gp)
 2002754:	d0a01404 	addi	r2,gp,-32688
 2002758:	2085883a 	add	r2,r4,r2
 200275c:	10800003 	ldbu	r2,0(r2)
 2002760:	1085883a 	add	r2,r2,r2
 2002764:	100b883a 	mov	r5,r2
 2002768:	d0a01317 	ldw	r2,-32692(gp)
 200276c:	100490fa 	slli	r2,r2,3
 2002770:	108000c4 	addi	r2,r2,3
 2002774:	01204f14 	movui	r4,33084
 2002778:	01bffff4 	movhi	r6,65535
 200277c:	319f7004 	addi	r6,r6,32192
 2002780:	370d883a 	add	r6,r6,fp
 2002784:	3109883a 	add	r4,r6,r4
 2002788:	1085883a 	add	r2,r2,r2
 200278c:	1085883a 	add	r2,r2,r2
 2002790:	2085883a 	add	r2,r4,r2
 2002794:	10800017 	ldw	r2,0(r2)
 2002798:	2884b03a 	or	r2,r5,r2
 200279c:	1009883a 	mov	r4,r2
 20027a0:	d0a01404 	addi	r2,gp,-32688
 20027a4:	1885883a 	add	r2,r3,r2
 20027a8:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+4];
 20027ac:	d0e01317 	ldw	r3,-32692(gp)
 20027b0:	d1201317 	ldw	r4,-32692(gp)
 20027b4:	d0a01404 	addi	r2,gp,-32688
 20027b8:	2085883a 	add	r2,r4,r2
 20027bc:	10800003 	ldbu	r2,0(r2)
 20027c0:	1085883a 	add	r2,r2,r2
 20027c4:	100b883a 	mov	r5,r2
 20027c8:	d0a01317 	ldw	r2,-32692(gp)
 20027cc:	100490fa 	slli	r2,r2,3
 20027d0:	10800104 	addi	r2,r2,4
 20027d4:	01204f14 	movui	r4,33084
 20027d8:	01bffff4 	movhi	r6,65535
 20027dc:	319f7004 	addi	r6,r6,32192
 20027e0:	370d883a 	add	r6,r6,fp
 20027e4:	3109883a 	add	r4,r6,r4
 20027e8:	1085883a 	add	r2,r2,r2
 20027ec:	1085883a 	add	r2,r2,r2
 20027f0:	2085883a 	add	r2,r4,r2
 20027f4:	10800017 	ldw	r2,0(r2)
 20027f8:	2884b03a 	or	r2,r5,r2
 20027fc:	1009883a 	mov	r4,r2
 2002800:	d0a01404 	addi	r2,gp,-32688
 2002804:	1885883a 	add	r2,r3,r2
 2002808:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
 200280c:	d0e01317 	ldw	r3,-32692(gp)
 2002810:	d1201317 	ldw	r4,-32692(gp)
 2002814:	d0a01404 	addi	r2,gp,-32688
 2002818:	2085883a 	add	r2,r4,r2
 200281c:	10800003 	ldbu	r2,0(r2)
 2002820:	1085883a 	add	r2,r2,r2
 2002824:	100b883a 	mov	r5,r2
 2002828:	d0a01317 	ldw	r2,-32692(gp)
 200282c:	100490fa 	slli	r2,r2,3
 2002830:	10800144 	addi	r2,r2,5
 2002834:	01204f14 	movui	r4,33084
 2002838:	01bffff4 	movhi	r6,65535
 200283c:	319f7004 	addi	r6,r6,32192
 2002840:	370d883a 	add	r6,r6,fp
 2002844:	3109883a 	add	r4,r6,r4
 2002848:	1085883a 	add	r2,r2,r2
 200284c:	1085883a 	add	r2,r2,r2
 2002850:	2085883a 	add	r2,r4,r2
 2002854:	10800017 	ldw	r2,0(r2)
 2002858:	2884b03a 	or	r2,r5,r2
 200285c:	1009883a 	mov	r4,r2
 2002860:	d0a01404 	addi	r2,gp,-32688
 2002864:	1885883a 	add	r2,r3,r2
 2002868:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
 200286c:	d0e01317 	ldw	r3,-32692(gp)
 2002870:	d1201317 	ldw	r4,-32692(gp)
 2002874:	d0a01404 	addi	r2,gp,-32688
 2002878:	2085883a 	add	r2,r4,r2
 200287c:	10800003 	ldbu	r2,0(r2)
 2002880:	1085883a 	add	r2,r2,r2
 2002884:	100b883a 	mov	r5,r2
 2002888:	d0a01317 	ldw	r2,-32692(gp)
 200288c:	100490fa 	slli	r2,r2,3
 2002890:	10800184 	addi	r2,r2,6
 2002894:	01204f14 	movui	r4,33084
 2002898:	01bffff4 	movhi	r6,65535
 200289c:	319f7004 	addi	r6,r6,32192
 20028a0:	370d883a 	add	r6,r6,fp
 20028a4:	3109883a 	add	r4,r6,r4
 20028a8:	1085883a 	add	r2,r2,r2
 20028ac:	1085883a 	add	r2,r2,r2
 20028b0:	2085883a 	add	r2,r4,r2
 20028b4:	10800017 	ldw	r2,0(r2)
 20028b8:	2884b03a 	or	r2,r5,r2
 20028bc:	1009883a 	mov	r4,r2
 20028c0:	d0a01404 	addi	r2,gp,-32688
 20028c4:	1885883a 	add	r2,r3,r2
 20028c8:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
 20028cc:	d0e01317 	ldw	r3,-32692(gp)
 20028d0:	d1201317 	ldw	r4,-32692(gp)
 20028d4:	d0a01404 	addi	r2,gp,-32688
 20028d8:	2085883a 	add	r2,r4,r2
 20028dc:	10800003 	ldbu	r2,0(r2)
 20028e0:	1085883a 	add	r2,r2,r2
 20028e4:	100b883a 	mov	r5,r2
 20028e8:	d0a01317 	ldw	r2,-32692(gp)
 20028ec:	100490fa 	slli	r2,r2,3
 20028f0:	108001c4 	addi	r2,r2,7
 20028f4:	01204f14 	movui	r4,33084
 20028f8:	01bffff4 	movhi	r6,65535
 20028fc:	319f7004 	addi	r6,r6,32192
 2002900:	370d883a 	add	r6,r6,fp
 2002904:	3109883a 	add	r4,r6,r4
 2002908:	1085883a 	add	r2,r2,r2
 200290c:	1085883a 	add	r2,r2,r2
 2002910:	2085883a 	add	r2,r4,r2
 2002914:	10800017 	ldw	r2,0(r2)
 2002918:	2884b03a 	or	r2,r5,r2
 200291c:	1009883a 	mov	r4,r2
 2002920:	d0a01404 	addi	r2,gp,-32688
 2002924:	1885883a 	add	r2,r3,r2
 2002928:	11000005 	stb	r4,0(r2)
			  	      printf("\n%u",matriz[i]);
 200292c:	d0e01317 	ldw	r3,-32692(gp)
 2002930:	d0a01404 	addi	r2,gp,-32688
 2002934:	1885883a 	add	r2,r3,r2
 2002938:	10800003 	ldbu	r2,0(r2)
 200293c:	10803fcc 	andi	r2,r2,255
 2002940:	1080201c 	xori	r2,r2,128
 2002944:	10bfe004 	addi	r2,r2,-128
 2002948:	01008074 	movhi	r4,513
 200294c:	21128f04 	addi	r4,r4,19004
 2002950:	100b883a 	mov	r5,r2
 2002954:	20040c00 	call	20040c0 <printf>
			  for(i=0;i<64;i++)
			    {
			      win = win||pattern[i];
			      //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];
			    }
			  for(i=0;i<8;i++)
 2002958:	d0a01317 	ldw	r2,-32692(gp)
 200295c:	10800044 	addi	r2,r2,1
 2002960:	d0a01315 	stw	r2,-32692(gp)
 2002964:	d0a01317 	ldw	r2,-32692(gp)
 2002968:	10800210 	cmplti	r2,r2,8
 200296c:	103f401e 	bne	r2,zero,2002670 <main+0x240c>
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
			  	      printf("\n%u",matriz[i]);
			  }
			  sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 2002970:	00bffff4 	movhi	r2,65535
 2002974:	109f7b04 	addi	r2,r2,32236
 2002978:	1705883a 	add	r2,r2,fp
 200297c:	10c00017 	ldw	r3,0(r2)
 2002980:	d0a01403 	ldbu	r2,-32688(gp)
 2002984:	10803fcc 	andi	r2,r2,255
 2002988:	1080201c 	xori	r2,r2,128
 200298c:	10bfe004 	addi	r2,r2,-128
 2002990:	1809883a 	mov	r4,r3
 2002994:	01400044 	movi	r5,1
 2002998:	100d883a 	mov	r6,r2
 200299c:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 20029a0:	013ffff4 	movhi	r4,65535
 20029a4:	211f7b04 	addi	r4,r4,32236
 20029a8:	2709883a 	add	r4,r4,fp
 20029ac:	20c00017 	ldw	r3,0(r4)
 20029b0:	d0a01444 	addi	r2,gp,-32687
 20029b4:	10800003 	ldbu	r2,0(r2)
 20029b8:	10803fcc 	andi	r2,r2,255
 20029bc:	1080201c 	xori	r2,r2,128
 20029c0:	10bfe004 	addi	r2,r2,-128
 20029c4:	1809883a 	mov	r4,r3
 20029c8:	01400084 	movi	r5,2
 20029cc:	100d883a 	mov	r6,r2
 20029d0:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 20029d4:	017ffff4 	movhi	r5,65535
 20029d8:	295f7b04 	addi	r5,r5,32236
 20029dc:	2f0b883a 	add	r5,r5,fp
 20029e0:	28c00017 	ldw	r3,0(r5)
 20029e4:	d0a01484 	addi	r2,gp,-32686
 20029e8:	10800003 	ldbu	r2,0(r2)
 20029ec:	10803fcc 	andi	r2,r2,255
 20029f0:	1080201c 	xori	r2,r2,128
 20029f4:	10bfe004 	addi	r2,r2,-128
 20029f8:	1809883a 	mov	r4,r3
 20029fc:	014000c4 	movi	r5,3
 2002a00:	100d883a 	mov	r6,r2
 2002a04:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 2002a08:	01bffff4 	movhi	r6,65535
 2002a0c:	319f7b04 	addi	r6,r6,32236
 2002a10:	370d883a 	add	r6,r6,fp
 2002a14:	30c00017 	ldw	r3,0(r6)
 2002a18:	d0a014c4 	addi	r2,gp,-32685
 2002a1c:	10800003 	ldbu	r2,0(r2)
 2002a20:	10803fcc 	andi	r2,r2,255
 2002a24:	1080201c 	xori	r2,r2,128
 2002a28:	10bfe004 	addi	r2,r2,-128
 2002a2c:	1809883a 	mov	r4,r3
 2002a30:	01400104 	movi	r5,4
 2002a34:	100d883a 	mov	r6,r2
 2002a38:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 2002a3c:	00bffff4 	movhi	r2,65535
 2002a40:	109f7b04 	addi	r2,r2,32236
 2002a44:	1705883a 	add	r2,r2,fp
 2002a48:	10c00017 	ldw	r3,0(r2)
 2002a4c:	d0a01504 	addi	r2,gp,-32684
 2002a50:	10800003 	ldbu	r2,0(r2)
 2002a54:	10803fcc 	andi	r2,r2,255
 2002a58:	1080201c 	xori	r2,r2,128
 2002a5c:	10bfe004 	addi	r2,r2,-128
 2002a60:	1809883a 	mov	r4,r3
 2002a64:	01400144 	movi	r5,5
 2002a68:	100d883a 	mov	r6,r2
 2002a6c:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 2002a70:	013ffff4 	movhi	r4,65535
 2002a74:	211f7b04 	addi	r4,r4,32236
 2002a78:	2709883a 	add	r4,r4,fp
 2002a7c:	20c00017 	ldw	r3,0(r4)
 2002a80:	d0a01544 	addi	r2,gp,-32683
 2002a84:	10800003 	ldbu	r2,0(r2)
 2002a88:	10803fcc 	andi	r2,r2,255
 2002a8c:	1080201c 	xori	r2,r2,128
 2002a90:	10bfe004 	addi	r2,r2,-128
 2002a94:	1809883a 	mov	r4,r3
 2002a98:	01400184 	movi	r5,6
 2002a9c:	100d883a 	mov	r6,r2
 2002aa0:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 2002aa4:	017ffff4 	movhi	r5,65535
 2002aa8:	295f7b04 	addi	r5,r5,32236
 2002aac:	2f0b883a 	add	r5,r5,fp
 2002ab0:	28c00017 	ldw	r3,0(r5)
 2002ab4:	d0a01584 	addi	r2,gp,-32682
 2002ab8:	10800003 	ldbu	r2,0(r2)
 2002abc:	10803fcc 	andi	r2,r2,255
 2002ac0:	1080201c 	xori	r2,r2,128
 2002ac4:	10bfe004 	addi	r2,r2,-128
 2002ac8:	1809883a 	mov	r4,r3
 2002acc:	014001c4 	movi	r5,7
 2002ad0:	100d883a 	mov	r6,r2
 2002ad4:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 2002ad8:	01bffff4 	movhi	r6,65535
 2002adc:	319f7b04 	addi	r6,r6,32236
 2002ae0:	370d883a 	add	r6,r6,fp
 2002ae4:	30c00017 	ldw	r3,0(r6)
 2002ae8:	d0a015c4 	addi	r2,gp,-32681
 2002aec:	10800003 	ldbu	r2,0(r2)
 2002af0:	10803fcc 	andi	r2,r2,255
 2002af4:	1080201c 	xori	r2,r2,128
 2002af8:	10bfe004 	addi	r2,r2,-128
 2002afc:	1809883a 	mov	r4,r3
 2002b00:	01400204 	movi	r5,8
 2002b04:	100d883a 	mov	r6,r2
 2002b08:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
		      	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
		      	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
		      	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
		      unsigned int win = 1;
		      while(win==1)
 2002b0c:	00fffff4 	movhi	r3,65535
 2002b10:	18df7104 	addi	r3,r3,32196
 2002b14:	1f07883a 	add	r3,r3,fp
 2002b18:	18800017 	ldw	r2,0(r3)
 2002b1c:	10800060 	cmpeqi	r2,r2,1
 2002b20:	103a131e 	bne	r2,zero,2001370 <main+0x110c>
			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
			}
		      printf("\nCongrats!!! You won.");
 2002b24:	01008074 	movhi	r4,513
 2002b28:	2112a504 	addi	r4,r4,19092
 2002b2c:	20040c00 	call	20040c0 <printf>
 2002b30:	0003e906 	br	2003ad8 <main+0x3874>
		  else
		    {
		      unsigned int pattern[64];
		      unsigned int solution[64];
		      time_t t;
		      srand((unsigned) time(&t));
 2002b34:	013ffff4 	movhi	r4,65535
 2002b38:	211f7e04 	addi	r4,r4,32248
 2002b3c:	e105883a 	add	r2,fp,r4
 2002b40:	1009883a 	mov	r4,r2
 2002b44:	20044380 	call	2004438 <time>
 2002b48:	1009883a 	mov	r4,r2
 2002b4c:	20043240 	call	2004324 <srand>
		      for(i=0;i<64;i++)
 2002b50:	d0201315 	stw	zero,-32692(gp)
 2002b54:	00001806 	br	2002bb8 <main+0x2954>
			{
			  pattern[i]=rand() % 2;
 2002b58:	d4201317 	ldw	r16,-32692(gp)
 2002b5c:	200433c0 	call	200433c <rand>
 2002b60:	1007883a 	mov	r3,r2
 2002b64:	00a00034 	movhi	r2,32768
 2002b68:	10800044 	addi	r2,r2,1
 2002b6c:	1884703a 	and	r2,r3,r2
 2002b70:	1000040e 	bge	r2,zero,2002b84 <main+0x2920>
 2002b74:	10bfffc4 	addi	r2,r2,-1
 2002b78:	00ffff84 	movi	r3,-2
 2002b7c:	10c4b03a 	or	r2,r2,r3
 2002b80:	10800044 	addi	r2,r2,1
 2002b84:	1009883a 	mov	r4,r2
 2002b88:	00a00f14 	movui	r2,32828
 2002b8c:	017ffff4 	movhi	r5,65535
 2002b90:	295f7004 	addi	r5,r5,32192
 2002b94:	2f0b883a 	add	r5,r5,fp
 2002b98:	2887883a 	add	r3,r5,r2
 2002b9c:	8405883a 	add	r2,r16,r16
 2002ba0:	1085883a 	add	r2,r2,r2
 2002ba4:	1885883a 	add	r2,r3,r2
 2002ba8:	11000015 	stw	r4,0(r2)
		    {
		      unsigned int pattern[64];
		      unsigned int solution[64];
		      time_t t;
		      srand((unsigned) time(&t));
		      for(i=0;i<64;i++)
 2002bac:	d0a01317 	ldw	r2,-32692(gp)
 2002bb0:	10800044 	addi	r2,r2,1
 2002bb4:	d0a01315 	stw	r2,-32692(gp)
 2002bb8:	d0a01317 	ldw	r2,-32692(gp)
 2002bbc:	10801010 	cmplti	r2,r2,64
 2002bc0:	103fe51e 	bne	r2,zero,2002b58 <main+0x28f4>
			{
			  pattern[i]=rand() % 2;
			  //pattern[i]=1;
			}

		      for(i=0;i<64;i++)
 2002bc4:	d0201315 	stw	zero,-32692(gp)
 2002bc8:	00001106 	br	2002c10 <main+0x29ac>
			{
			  printf("\n%u",pattern[i]);
 2002bcc:	d0a01317 	ldw	r2,-32692(gp)
 2002bd0:	00e00f14 	movui	r3,32828
 2002bd4:	01bffff4 	movhi	r6,65535
 2002bd8:	319f7004 	addi	r6,r6,32192
 2002bdc:	370d883a 	add	r6,r6,fp
 2002be0:	30c7883a 	add	r3,r6,r3
 2002be4:	1085883a 	add	r2,r2,r2
 2002be8:	1085883a 	add	r2,r2,r2
 2002bec:	1885883a 	add	r2,r3,r2
 2002bf0:	10800017 	ldw	r2,0(r2)
 2002bf4:	01008074 	movhi	r4,513
 2002bf8:	21128f04 	addi	r4,r4,19004
 2002bfc:	100b883a 	mov	r5,r2
 2002c00:	20040c00 	call	20040c0 <printf>
			{
			  pattern[i]=rand() % 2;
			  //pattern[i]=1;
			}

		      for(i=0;i<64;i++)
 2002c04:	d0a01317 	ldw	r2,-32692(gp)
 2002c08:	10800044 	addi	r2,r2,1
 2002c0c:	d0a01315 	stw	r2,-32692(gp)
 2002c10:	d0a01317 	ldw	r2,-32692(gp)
 2002c14:	10801010 	cmplti	r2,r2,64
 2002c18:	103fec1e 	bne	r2,zero,2002bcc <main+0x2968>
			{
			  printf("\n%u",pattern[i]);
			  //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];

			}
		      for(i=0;i<8;i++)
 2002c1c:	d0201315 	stw	zero,-32692(gp)
 2002c20:	0000bd06 	br	2002f18 <main+0x2cb4>
		      	    {
		      	      matriz[i]=(pattern[8*i]<<1)|pattern[8*i+1];
 2002c24:	d0e01317 	ldw	r3,-32692(gp)
 2002c28:	d0a01317 	ldw	r2,-32692(gp)
 2002c2c:	100490fa 	slli	r2,r2,3
 2002c30:	01200f14 	movui	r4,32828
 2002c34:	017ffff4 	movhi	r5,65535
 2002c38:	295f7004 	addi	r5,r5,32192
 2002c3c:	2f0b883a 	add	r5,r5,fp
 2002c40:	2909883a 	add	r4,r5,r4
 2002c44:	1085883a 	add	r2,r2,r2
 2002c48:	1085883a 	add	r2,r2,r2
 2002c4c:	2085883a 	add	r2,r4,r2
 2002c50:	10800017 	ldw	r2,0(r2)
 2002c54:	1085883a 	add	r2,r2,r2
 2002c58:	100b883a 	mov	r5,r2
 2002c5c:	d0a01317 	ldw	r2,-32692(gp)
 2002c60:	100490fa 	slli	r2,r2,3
 2002c64:	10800044 	addi	r2,r2,1
 2002c68:	01200f14 	movui	r4,32828
 2002c6c:	01bffff4 	movhi	r6,65535
 2002c70:	319f7004 	addi	r6,r6,32192
 2002c74:	370d883a 	add	r6,r6,fp
 2002c78:	3109883a 	add	r4,r6,r4
 2002c7c:	1085883a 	add	r2,r2,r2
 2002c80:	1085883a 	add	r2,r2,r2
 2002c84:	2085883a 	add	r2,r4,r2
 2002c88:	10800017 	ldw	r2,0(r2)
 2002c8c:	2884b03a 	or	r2,r5,r2
 2002c90:	1009883a 	mov	r4,r2
 2002c94:	d0a01404 	addi	r2,gp,-32688
 2002c98:	1885883a 	add	r2,r3,r2
 2002c9c:	11000005 	stb	r4,0(r2)
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+2];
 2002ca0:	d0e01317 	ldw	r3,-32692(gp)
 2002ca4:	d1201317 	ldw	r4,-32692(gp)
 2002ca8:	d0a01404 	addi	r2,gp,-32688
 2002cac:	2085883a 	add	r2,r4,r2
 2002cb0:	10800003 	ldbu	r2,0(r2)
 2002cb4:	1085883a 	add	r2,r2,r2
 2002cb8:	100b883a 	mov	r5,r2
 2002cbc:	d0a01317 	ldw	r2,-32692(gp)
 2002cc0:	100490fa 	slli	r2,r2,3
 2002cc4:	10800084 	addi	r2,r2,2
 2002cc8:	01200f14 	movui	r4,32828
 2002ccc:	01bffff4 	movhi	r6,65535
 2002cd0:	319f7004 	addi	r6,r6,32192
 2002cd4:	370d883a 	add	r6,r6,fp
 2002cd8:	3109883a 	add	r4,r6,r4
 2002cdc:	1085883a 	add	r2,r2,r2
 2002ce0:	1085883a 	add	r2,r2,r2
 2002ce4:	2085883a 	add	r2,r4,r2
 2002ce8:	10800017 	ldw	r2,0(r2)
 2002cec:	2884b03a 	or	r2,r5,r2
 2002cf0:	1009883a 	mov	r4,r2
 2002cf4:	d0a01404 	addi	r2,gp,-32688
 2002cf8:	1885883a 	add	r2,r3,r2
 2002cfc:	11000005 	stb	r4,0(r2)
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+3];
 2002d00:	d0e01317 	ldw	r3,-32692(gp)
 2002d04:	d1201317 	ldw	r4,-32692(gp)
 2002d08:	d0a01404 	addi	r2,gp,-32688
 2002d0c:	2085883a 	add	r2,r4,r2
 2002d10:	10800003 	ldbu	r2,0(r2)
 2002d14:	1085883a 	add	r2,r2,r2
 2002d18:	100b883a 	mov	r5,r2
 2002d1c:	d0a01317 	ldw	r2,-32692(gp)
 2002d20:	100490fa 	slli	r2,r2,3
 2002d24:	108000c4 	addi	r2,r2,3
 2002d28:	01200f14 	movui	r4,32828
 2002d2c:	01bffff4 	movhi	r6,65535
 2002d30:	319f7004 	addi	r6,r6,32192
 2002d34:	370d883a 	add	r6,r6,fp
 2002d38:	3109883a 	add	r4,r6,r4
 2002d3c:	1085883a 	add	r2,r2,r2
 2002d40:	1085883a 	add	r2,r2,r2
 2002d44:	2085883a 	add	r2,r4,r2
 2002d48:	10800017 	ldw	r2,0(r2)
 2002d4c:	2884b03a 	or	r2,r5,r2
 2002d50:	1009883a 	mov	r4,r2
 2002d54:	d0a01404 	addi	r2,gp,-32688
 2002d58:	1885883a 	add	r2,r3,r2
 2002d5c:	11000005 	stb	r4,0(r2)
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+4];
 2002d60:	d0e01317 	ldw	r3,-32692(gp)
 2002d64:	d1201317 	ldw	r4,-32692(gp)
 2002d68:	d0a01404 	addi	r2,gp,-32688
 2002d6c:	2085883a 	add	r2,r4,r2
 2002d70:	10800003 	ldbu	r2,0(r2)
 2002d74:	1085883a 	add	r2,r2,r2
 2002d78:	100b883a 	mov	r5,r2
 2002d7c:	d0a01317 	ldw	r2,-32692(gp)
 2002d80:	100490fa 	slli	r2,r2,3
 2002d84:	10800104 	addi	r2,r2,4
 2002d88:	01200f14 	movui	r4,32828
 2002d8c:	01bffff4 	movhi	r6,65535
 2002d90:	319f7004 	addi	r6,r6,32192
 2002d94:	370d883a 	add	r6,r6,fp
 2002d98:	3109883a 	add	r4,r6,r4
 2002d9c:	1085883a 	add	r2,r2,r2
 2002da0:	1085883a 	add	r2,r2,r2
 2002da4:	2085883a 	add	r2,r4,r2
 2002da8:	10800017 	ldw	r2,0(r2)
 2002dac:	2884b03a 	or	r2,r5,r2
 2002db0:	1009883a 	mov	r4,r2
 2002db4:	d0a01404 	addi	r2,gp,-32688
 2002db8:	1885883a 	add	r2,r3,r2
 2002dbc:	11000005 	stb	r4,0(r2)
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
 2002dc0:	d0e01317 	ldw	r3,-32692(gp)
 2002dc4:	d1201317 	ldw	r4,-32692(gp)
 2002dc8:	d0a01404 	addi	r2,gp,-32688
 2002dcc:	2085883a 	add	r2,r4,r2
 2002dd0:	10800003 	ldbu	r2,0(r2)
 2002dd4:	1085883a 	add	r2,r2,r2
 2002dd8:	100b883a 	mov	r5,r2
 2002ddc:	d0a01317 	ldw	r2,-32692(gp)
 2002de0:	100490fa 	slli	r2,r2,3
 2002de4:	10800144 	addi	r2,r2,5
 2002de8:	01200f14 	movui	r4,32828
 2002dec:	01bffff4 	movhi	r6,65535
 2002df0:	319f7004 	addi	r6,r6,32192
 2002df4:	370d883a 	add	r6,r6,fp
 2002df8:	3109883a 	add	r4,r6,r4
 2002dfc:	1085883a 	add	r2,r2,r2
 2002e00:	1085883a 	add	r2,r2,r2
 2002e04:	2085883a 	add	r2,r4,r2
 2002e08:	10800017 	ldw	r2,0(r2)
 2002e0c:	2884b03a 	or	r2,r5,r2
 2002e10:	1009883a 	mov	r4,r2
 2002e14:	d0a01404 	addi	r2,gp,-32688
 2002e18:	1885883a 	add	r2,r3,r2
 2002e1c:	11000005 	stb	r4,0(r2)
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
 2002e20:	d0e01317 	ldw	r3,-32692(gp)
 2002e24:	d1201317 	ldw	r4,-32692(gp)
 2002e28:	d0a01404 	addi	r2,gp,-32688
 2002e2c:	2085883a 	add	r2,r4,r2
 2002e30:	10800003 	ldbu	r2,0(r2)
 2002e34:	1085883a 	add	r2,r2,r2
 2002e38:	100b883a 	mov	r5,r2
 2002e3c:	d0a01317 	ldw	r2,-32692(gp)
 2002e40:	100490fa 	slli	r2,r2,3
 2002e44:	10800184 	addi	r2,r2,6
 2002e48:	01200f14 	movui	r4,32828
 2002e4c:	01bffff4 	movhi	r6,65535
 2002e50:	319f7004 	addi	r6,r6,32192
 2002e54:	370d883a 	add	r6,r6,fp
 2002e58:	3109883a 	add	r4,r6,r4
 2002e5c:	1085883a 	add	r2,r2,r2
 2002e60:	1085883a 	add	r2,r2,r2
 2002e64:	2085883a 	add	r2,r4,r2
 2002e68:	10800017 	ldw	r2,0(r2)
 2002e6c:	2884b03a 	or	r2,r5,r2
 2002e70:	1009883a 	mov	r4,r2
 2002e74:	d0a01404 	addi	r2,gp,-32688
 2002e78:	1885883a 	add	r2,r3,r2
 2002e7c:	11000005 	stb	r4,0(r2)
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
 2002e80:	d0e01317 	ldw	r3,-32692(gp)
 2002e84:	d1201317 	ldw	r4,-32692(gp)
 2002e88:	d0a01404 	addi	r2,gp,-32688
 2002e8c:	2085883a 	add	r2,r4,r2
 2002e90:	10800003 	ldbu	r2,0(r2)
 2002e94:	1085883a 	add	r2,r2,r2
 2002e98:	100b883a 	mov	r5,r2
 2002e9c:	d0a01317 	ldw	r2,-32692(gp)
 2002ea0:	100490fa 	slli	r2,r2,3
 2002ea4:	108001c4 	addi	r2,r2,7
 2002ea8:	01200f14 	movui	r4,32828
 2002eac:	01bffff4 	movhi	r6,65535
 2002eb0:	319f7004 	addi	r6,r6,32192
 2002eb4:	370d883a 	add	r6,r6,fp
 2002eb8:	3109883a 	add	r4,r6,r4
 2002ebc:	1085883a 	add	r2,r2,r2
 2002ec0:	1085883a 	add	r2,r2,r2
 2002ec4:	2085883a 	add	r2,r4,r2
 2002ec8:	10800017 	ldw	r2,0(r2)
 2002ecc:	2884b03a 	or	r2,r5,r2
 2002ed0:	1009883a 	mov	r4,r2
 2002ed4:	d0a01404 	addi	r2,gp,-32688
 2002ed8:	1885883a 	add	r2,r3,r2
 2002edc:	11000005 	stb	r4,0(r2)
		      	      printf("\n%u",matriz[i]);
 2002ee0:	d0e01317 	ldw	r3,-32692(gp)
 2002ee4:	d0a01404 	addi	r2,gp,-32688
 2002ee8:	1885883a 	add	r2,r3,r2
 2002eec:	10800003 	ldbu	r2,0(r2)
 2002ef0:	10803fcc 	andi	r2,r2,255
 2002ef4:	1080201c 	xori	r2,r2,128
 2002ef8:	10bfe004 	addi	r2,r2,-128
 2002efc:	01008074 	movhi	r4,513
 2002f00:	21128f04 	addi	r4,r4,19004
 2002f04:	100b883a 	mov	r5,r2
 2002f08:	20040c00 	call	20040c0 <printf>
			{
			  printf("\n%u",pattern[i]);
			  //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];

			}
		      for(i=0;i<8;i++)
 2002f0c:	d0a01317 	ldw	r2,-32692(gp)
 2002f10:	10800044 	addi	r2,r2,1
 2002f14:	d0a01315 	stw	r2,-32692(gp)
 2002f18:	d0a01317 	ldw	r2,-32692(gp)
 2002f1c:	10800210 	cmplti	r2,r2,8
 2002f20:	103f401e 	bne	r2,zero,2002c24 <main+0x29c0>
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
		      	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
		      	      printf("\n%u",matriz[i]);
		      }
		      sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 2002f24:	00bffff4 	movhi	r2,65535
 2002f28:	109f7b04 	addi	r2,r2,32236
 2002f2c:	1705883a 	add	r2,r2,fp
 2002f30:	10c00017 	ldw	r3,0(r2)
 2002f34:	d0a01403 	ldbu	r2,-32688(gp)
 2002f38:	10803fcc 	andi	r2,r2,255
 2002f3c:	1080201c 	xori	r2,r2,128
 2002f40:	10bfe004 	addi	r2,r2,-128
 2002f44:	1809883a 	mov	r4,r3
 2002f48:	01400044 	movi	r5,1
 2002f4c:	100d883a 	mov	r6,r2
 2002f50:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 2002f54:	013ffff4 	movhi	r4,65535
 2002f58:	211f7b04 	addi	r4,r4,32236
 2002f5c:	2709883a 	add	r4,r4,fp
 2002f60:	20c00017 	ldw	r3,0(r4)
 2002f64:	d0a01444 	addi	r2,gp,-32687
 2002f68:	10800003 	ldbu	r2,0(r2)
 2002f6c:	10803fcc 	andi	r2,r2,255
 2002f70:	1080201c 	xori	r2,r2,128
 2002f74:	10bfe004 	addi	r2,r2,-128
 2002f78:	1809883a 	mov	r4,r3
 2002f7c:	01400084 	movi	r5,2
 2002f80:	100d883a 	mov	r6,r2
 2002f84:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 2002f88:	017ffff4 	movhi	r5,65535
 2002f8c:	295f7b04 	addi	r5,r5,32236
 2002f90:	2f0b883a 	add	r5,r5,fp
 2002f94:	28c00017 	ldw	r3,0(r5)
 2002f98:	d0a01484 	addi	r2,gp,-32686
 2002f9c:	10800003 	ldbu	r2,0(r2)
 2002fa0:	10803fcc 	andi	r2,r2,255
 2002fa4:	1080201c 	xori	r2,r2,128
 2002fa8:	10bfe004 	addi	r2,r2,-128
 2002fac:	1809883a 	mov	r4,r3
 2002fb0:	014000c4 	movi	r5,3
 2002fb4:	100d883a 	mov	r6,r2
 2002fb8:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 2002fbc:	01bffff4 	movhi	r6,65535
 2002fc0:	319f7b04 	addi	r6,r6,32236
 2002fc4:	370d883a 	add	r6,r6,fp
 2002fc8:	30c00017 	ldw	r3,0(r6)
 2002fcc:	d0a014c4 	addi	r2,gp,-32685
 2002fd0:	10800003 	ldbu	r2,0(r2)
 2002fd4:	10803fcc 	andi	r2,r2,255
 2002fd8:	1080201c 	xori	r2,r2,128
 2002fdc:	10bfe004 	addi	r2,r2,-128
 2002fe0:	1809883a 	mov	r4,r3
 2002fe4:	01400104 	movi	r5,4
 2002fe8:	100d883a 	mov	r6,r2
 2002fec:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 2002ff0:	00bffff4 	movhi	r2,65535
 2002ff4:	109f7b04 	addi	r2,r2,32236
 2002ff8:	1705883a 	add	r2,r2,fp
 2002ffc:	10c00017 	ldw	r3,0(r2)
 2003000:	d0a01504 	addi	r2,gp,-32684
 2003004:	10800003 	ldbu	r2,0(r2)
 2003008:	10803fcc 	andi	r2,r2,255
 200300c:	1080201c 	xori	r2,r2,128
 2003010:	10bfe004 	addi	r2,r2,-128
 2003014:	1809883a 	mov	r4,r3
 2003018:	01400144 	movi	r5,5
 200301c:	100d883a 	mov	r6,r2
 2003020:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 2003024:	013ffff4 	movhi	r4,65535
 2003028:	211f7b04 	addi	r4,r4,32236
 200302c:	2709883a 	add	r4,r4,fp
 2003030:	20c00017 	ldw	r3,0(r4)
 2003034:	d0a01544 	addi	r2,gp,-32683
 2003038:	10800003 	ldbu	r2,0(r2)
 200303c:	10803fcc 	andi	r2,r2,255
 2003040:	1080201c 	xori	r2,r2,128
 2003044:	10bfe004 	addi	r2,r2,-128
 2003048:	1809883a 	mov	r4,r3
 200304c:	01400184 	movi	r5,6
 2003050:	100d883a 	mov	r6,r2
 2003054:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 2003058:	017ffff4 	movhi	r5,65535
 200305c:	295f7b04 	addi	r5,r5,32236
 2003060:	2f0b883a 	add	r5,r5,fp
 2003064:	28c00017 	ldw	r3,0(r5)
 2003068:	d0a01584 	addi	r2,gp,-32682
 200306c:	10800003 	ldbu	r2,0(r2)
 2003070:	10803fcc 	andi	r2,r2,255
 2003074:	1080201c 	xori	r2,r2,128
 2003078:	10bfe004 	addi	r2,r2,-128
 200307c:	1809883a 	mov	r4,r3
 2003080:	014001c4 	movi	r5,7
 2003084:	100d883a 	mov	r6,r2
 2003088:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 200308c:	01bffff4 	movhi	r6,65535
 2003090:	319f7b04 	addi	r6,r6,32236
 2003094:	370d883a 	add	r6,r6,fp
 2003098:	30c00017 	ldw	r3,0(r6)
 200309c:	d0a015c4 	addi	r2,gp,-32681
 20030a0:	10800003 	ldbu	r2,0(r2)
 20030a4:	10803fcc 	andi	r2,r2,255
 20030a8:	1080201c 	xori	r2,r2,128
 20030ac:	10bfe004 	addi	r2,r2,-128
 20030b0:	1809883a 	mov	r4,r3
 20030b4:	01400204 	movi	r5,8
 20030b8:	100d883a 	mov	r6,r2
 20030bc:	2003d340 	call	2003d34 <sen_2_byte_info>
		      unsigned int win = 1;
 20030c0:	00800044 	movi	r2,1
 20030c4:	00fffff4 	movhi	r3,65535
 20030c8:	18df7704 	addi	r3,r3,32220
 20030cc:	1f07883a 	add	r3,r3,fp
 20030d0:	18800015 	stw	r2,0(r3)
		      while(win==1)
 20030d4:	00027706 	br	2003ab4 <main+0x3850>
			{
			  unsigned int temp = 0;
 20030d8:	013ffff4 	movhi	r4,65535
 20030dc:	211f7804 	addi	r4,r4,32224
 20030e0:	2709883a 	add	r4,r4,fp
 20030e4:	20000015 	stw	zero,0(r4)
			  int row;

			  printf("\nEnter row:");
 20030e8:	01008074 	movhi	r4,513
 20030ec:	21129c04 	addi	r4,r4,19056
 20030f0:	20040c00 	call	20040c0 <printf>
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 20030f4:	00004406 	br	2003208 <main+0x2fa4>
			    {
				  if(c!=0b0011)
 20030f8:	017ffff4 	movhi	r5,65535
 20030fc:	295f7c04 	addi	r5,r5,32240
 2003100:	2f0b883a 	add	r5,r5,fp
 2003104:	28800007 	ldb	r2,0(r5)
 2003108:	108000e0 	cmpeqi	r2,r2,3
 200310c:	10003e1e 	bne	r2,zero,2003208 <main+0x2fa4>
				  {
				  if(c<=0b0010)
 2003110:	01bffff4 	movhi	r6,65535
 2003114:	319f7c04 	addi	r6,r6,32240
 2003118:	370d883a 	add	r6,r6,fp
 200311c:	30800007 	ldb	r2,0(r6)
 2003120:	108000c8 	cmpgei	r2,r2,3
 2003124:	1000091e 	bne	r2,zero,200314c <main+0x2ee8>
				  {
				   	  row = c;
 2003128:	00fffff4 	movhi	r3,65535
 200312c:	18df7c04 	addi	r3,r3,32240
 2003130:	1f07883a 	add	r3,r3,fp
 2003134:	18800007 	ldb	r2,0(r3)
 2003138:	013ffff4 	movhi	r4,65535
 200313c:	211f7904 	addi	r4,r4,32228
 2003140:	2709883a 	add	r4,r4,fp
 2003144:	20800015 	stw	r2,0(r4)
 2003148:	00002f06 	br	2003208 <main+0x2fa4>
				  }
				  else if(c>=0b0100 && c<=0b0110)
 200314c:	017ffff4 	movhi	r5,65535
 2003150:	295f7c04 	addi	r5,r5,32240
 2003154:	2f0b883a 	add	r5,r5,fp
 2003158:	28800007 	ldb	r2,0(r5)
 200315c:	10800110 	cmplti	r2,r2,4
 2003160:	1000101e 	bne	r2,zero,20031a4 <main+0x2f40>
 2003164:	01bffff4 	movhi	r6,65535
 2003168:	319f7c04 	addi	r6,r6,32240
 200316c:	370d883a 	add	r6,r6,fp
 2003170:	30800007 	ldb	r2,0(r6)
 2003174:	108001c8 	cmpgei	r2,r2,7
 2003178:	10000a1e 	bne	r2,zero,20031a4 <main+0x2f40>
				  {
				  	 row=c-0b0001;
 200317c:	00fffff4 	movhi	r3,65535
 2003180:	18df7c04 	addi	r3,r3,32240
 2003184:	1f07883a 	add	r3,r3,fp
 2003188:	18800007 	ldb	r2,0(r3)
 200318c:	10bfffc4 	addi	r2,r2,-1
 2003190:	013ffff4 	movhi	r4,65535
 2003194:	211f7904 	addi	r4,r4,32228
 2003198:	2709883a 	add	r4,r4,fp
 200319c:	20800015 	stw	r2,0(r4)
 20031a0:	00001906 	br	2003208 <main+0x2fa4>
				  }
				  else if (c>=0b1000 && c<=0b1001)
 20031a4:	017ffff4 	movhi	r5,65535
 20031a8:	295f7c04 	addi	r5,r5,32240
 20031ac:	2f0b883a 	add	r5,r5,fp
 20031b0:	28800007 	ldb	r2,0(r5)
 20031b4:	10800210 	cmplti	r2,r2,8
 20031b8:	1000101e 	bne	r2,zero,20031fc <main+0x2f98>
 20031bc:	01bffff4 	movhi	r6,65535
 20031c0:	319f7c04 	addi	r6,r6,32240
 20031c4:	370d883a 	add	r6,r6,fp
 20031c8:	30800007 	ldb	r2,0(r6)
 20031cc:	10800288 	cmpgei	r2,r2,10
 20031d0:	10000a1e 	bne	r2,zero,20031fc <main+0x2f98>
				  {
					  row=c-0b0010;
 20031d4:	00fffff4 	movhi	r3,65535
 20031d8:	18df7c04 	addi	r3,r3,32240
 20031dc:	1f07883a 	add	r3,r3,fp
 20031e0:	18800007 	ldb	r2,0(r3)
 20031e4:	10bfff84 	addi	r2,r2,-2
 20031e8:	013ffff4 	movhi	r4,65535
 20031ec:	211f7904 	addi	r4,r4,32228
 20031f0:	2709883a 	add	r4,r4,fp
 20031f4:	20800015 	stw	r2,0(r4)
 20031f8:	00000306 	br	2003208 <main+0x2fa4>
				  }
				  else
				  {
					  printf("\nIngrese una tecla válida");
 20031fc:	01008074 	movhi	r4,513
 2003200:	2112ab04 	addi	r4,r4,19116
 2003204:	20040c00 	call	20040c0 <printf>
			{
			  unsigned int temp = 0;
			  int row;

			  printf("\nEnter row:");
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 2003208:	00810034 	movhi	r2,1024
 200320c:	10880804 	addi	r2,r2,8224
 2003210:	10800037 	ldwio	r2,0(r2)
 2003214:	017ffff4 	movhi	r5,65535
 2003218:	295f7c04 	addi	r5,r5,32240
 200321c:	2f0b883a 	add	r5,r5,fp
 2003220:	28800005 	stb	r2,0(r5)
 2003224:	01bffff4 	movhi	r6,65535
 2003228:	319f7c04 	addi	r6,r6,32240
 200322c:	370d883a 	add	r6,r6,fp
 2003230:	30800007 	ldb	r2,0(r6)
 2003234:	108003d8 	cmpnei	r2,r2,15
 2003238:	103faf1e 	bne	r2,zero,20030f8 <main+0x2e94>
				  {
					  printf("\nIngrese una tecla válida");
				  }
				  }
			    }
			  printf("\nrow: %u", row);
 200323c:	01008074 	movhi	r4,513
 2003240:	2112b204 	addi	r4,r4,19144
 2003244:	00bffff4 	movhi	r2,65535
 2003248:	109f7904 	addi	r2,r2,32228
 200324c:	1705883a 	add	r2,r2,fp
 2003250:	11400017 	ldw	r5,0(r2)
 2003254:	20040c00 	call	20040c0 <printf>

			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
 2003258:	0001883a 	nop
 200325c:	00810034 	movhi	r2,1024
 2003260:	10880804 	addi	r2,r2,8224
 2003264:	10800037 	ldwio	r2,0(r2)
 2003268:	00fffff4 	movhi	r3,65535
 200326c:	18df7c04 	addi	r3,r3,32240
 2003270:	1f07883a 	add	r3,r3,fp
 2003274:	18800005 	stb	r2,0(r3)
 2003278:	013ffff4 	movhi	r4,65535
 200327c:	211f7c04 	addi	r4,r4,32240
 2003280:	2709883a 	add	r4,r4,fp
 2003284:	20800007 	ldb	r2,0(r4)
 2003288:	108000d8 	cmpnei	r2,r2,3
 200328c:	103ff31e 	bne	r2,zero,200325c <main+0x2ff8>
			  		  {
			  		  }

			  int column;
			  printf("\nEnter column:");
 2003290:	01008074 	movhi	r4,513
 2003294:	21129f04 	addi	r4,r4,19068
 2003298:	20040c00 	call	20040c0 <printf>
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 200329c:	00004406 	br	20033b0 <main+0x314c>
			    {
				  if(c!=0b0011)
 20032a0:	017ffff4 	movhi	r5,65535
 20032a4:	295f7c04 	addi	r5,r5,32240
 20032a8:	2f0b883a 	add	r5,r5,fp
 20032ac:	28800007 	ldb	r2,0(r5)
 20032b0:	108000e0 	cmpeqi	r2,r2,3
 20032b4:	10003e1e 	bne	r2,zero,20033b0 <main+0x314c>
				   {
				  	  if(c<=0b0010)
 20032b8:	01bffff4 	movhi	r6,65535
 20032bc:	319f7c04 	addi	r6,r6,32240
 20032c0:	370d883a 	add	r6,r6,fp
 20032c4:	30800007 	ldb	r2,0(r6)
 20032c8:	108000c8 	cmpgei	r2,r2,3
 20032cc:	1000091e 	bne	r2,zero,20032f4 <main+0x3090>
				    {
				   	  column = c;
 20032d0:	00fffff4 	movhi	r3,65535
 20032d4:	18df7c04 	addi	r3,r3,32240
 20032d8:	1f07883a 	add	r3,r3,fp
 20032dc:	18800007 	ldb	r2,0(r3)
 20032e0:	013ffff4 	movhi	r4,65535
 20032e4:	211f7a04 	addi	r4,r4,32232
 20032e8:	2709883a 	add	r4,r4,fp
 20032ec:	20800015 	stw	r2,0(r4)
 20032f0:	00002f06 	br	20033b0 <main+0x314c>
				    }
				    else if(c>=0b0100 && c<=0b0110)
 20032f4:	017ffff4 	movhi	r5,65535
 20032f8:	295f7c04 	addi	r5,r5,32240
 20032fc:	2f0b883a 	add	r5,r5,fp
 2003300:	28800007 	ldb	r2,0(r5)
 2003304:	10800110 	cmplti	r2,r2,4
 2003308:	1000101e 	bne	r2,zero,200334c <main+0x30e8>
 200330c:	01bffff4 	movhi	r6,65535
 2003310:	319f7c04 	addi	r6,r6,32240
 2003314:	370d883a 	add	r6,r6,fp
 2003318:	30800007 	ldb	r2,0(r6)
 200331c:	108001c8 	cmpgei	r2,r2,7
 2003320:	10000a1e 	bne	r2,zero,200334c <main+0x30e8>
				  	 {
				  	 	column=c-0b0001;
 2003324:	00fffff4 	movhi	r3,65535
 2003328:	18df7c04 	addi	r3,r3,32240
 200332c:	1f07883a 	add	r3,r3,fp
 2003330:	18800007 	ldb	r2,0(r3)
 2003334:	10bfffc4 	addi	r2,r2,-1
 2003338:	013ffff4 	movhi	r4,65535
 200333c:	211f7a04 	addi	r4,r4,32232
 2003340:	2709883a 	add	r4,r4,fp
 2003344:	20800015 	stw	r2,0(r4)
 2003348:	00001906 	br	20033b0 <main+0x314c>
				  	  }
				  	else if (c>=0b1000 && c<=0b1001)
 200334c:	017ffff4 	movhi	r5,65535
 2003350:	295f7c04 	addi	r5,r5,32240
 2003354:	2f0b883a 	add	r5,r5,fp
 2003358:	28800007 	ldb	r2,0(r5)
 200335c:	10800210 	cmplti	r2,r2,8
 2003360:	1000101e 	bne	r2,zero,20033a4 <main+0x3140>
 2003364:	01bffff4 	movhi	r6,65535
 2003368:	319f7c04 	addi	r6,r6,32240
 200336c:	370d883a 	add	r6,r6,fp
 2003370:	30800007 	ldb	r2,0(r6)
 2003374:	10800288 	cmpgei	r2,r2,10
 2003378:	10000a1e 	bne	r2,zero,20033a4 <main+0x3140>
				  	 {
				  	  column=c-0b0010;
 200337c:	00fffff4 	movhi	r3,65535
 2003380:	18df7c04 	addi	r3,r3,32240
 2003384:	1f07883a 	add	r3,r3,fp
 2003388:	18800007 	ldb	r2,0(r3)
 200338c:	10bfff84 	addi	r2,r2,-2
 2003390:	013ffff4 	movhi	r4,65535
 2003394:	211f7a04 	addi	r4,r4,32232
 2003398:	2709883a 	add	r4,r4,fp
 200339c:	20800015 	stw	r2,0(r4)
 20033a0:	00000306 	br	20033b0 <main+0x314c>
				  	  }
				    else
				  	 {
				  	  printf("\nIngrese una tecla válida");
 20033a4:	01008074 	movhi	r4,513
 20033a8:	2112ab04 	addi	r4,r4,19116
 20033ac:	20040c00 	call	20040c0 <printf>
			  		  {
			  		  }

			  int column;
			  printf("\nEnter column:");
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b1111)
 20033b0:	00810034 	movhi	r2,1024
 20033b4:	10880804 	addi	r2,r2,8224
 20033b8:	10800037 	ldwio	r2,0(r2)
 20033bc:	017ffff4 	movhi	r5,65535
 20033c0:	295f7c04 	addi	r5,r5,32240
 20033c4:	2f0b883a 	add	r5,r5,fp
 20033c8:	28800005 	stb	r2,0(r5)
 20033cc:	01bffff4 	movhi	r6,65535
 20033d0:	319f7c04 	addi	r6,r6,32240
 20033d4:	370d883a 	add	r6,r6,fp
 20033d8:	30800007 	ldb	r2,0(r6)
 20033dc:	108003d8 	cmpnei	r2,r2,15
 20033e0:	103faf1e 	bne	r2,zero,20032a0 <main+0x303c>
				  	 {
				  	  printf("\nIngrese una tecla válida");
				  	 }
			    }
			    }
			  printf("\ncolumn: %u",column);
 20033e4:	01008074 	movhi	r4,513
 20033e8:	2112b504 	addi	r4,r4,19156
 20033ec:	00bffff4 	movhi	r2,65535
 20033f0:	109f7a04 	addi	r2,r2,32232
 20033f4:	1705883a 	add	r2,r2,fp
 20033f8:	11400017 	ldw	r5,0(r2)
 20033fc:	20040c00 	call	20040c0 <printf>

			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
 2003400:	0001883a 	nop
 2003404:	00810034 	movhi	r2,1024
 2003408:	10880804 	addi	r2,r2,8224
 200340c:	10800037 	ldwio	r2,0(r2)
 2003410:	00fffff4 	movhi	r3,65535
 2003414:	18df7c04 	addi	r3,r3,32240
 2003418:	1f07883a 	add	r3,r3,fp
 200341c:	18800005 	stb	r2,0(r3)
 2003420:	013ffff4 	movhi	r4,65535
 2003424:	211f7c04 	addi	r4,r4,32240
 2003428:	2709883a 	add	r4,r4,fp
 200342c:	20800007 	ldb	r2,0(r4)
 2003430:	108000d8 	cmpnei	r2,r2,3
 2003434:	103ff31e 	bne	r2,zero,2003404 <main+0x31a0>
			  		  {
			  		  }
			  putchar(column);
 2003438:	008080b4 	movhi	r2,514
 200343c:	10aa6704 	addi	r2,r2,-22116
 2003440:	10800017 	ldw	r2,0(r2)
 2003444:	10800217 	ldw	r2,8(r2)
 2003448:	017ffff4 	movhi	r5,65535
 200344c:	295f7a04 	addi	r5,r5,32232
 2003450:	2f0b883a 	add	r5,r5,fp
 2003454:	29000017 	ldw	r4,0(r5)
 2003458:	100b883a 	mov	r5,r2
 200345c:	200419c0 	call	200419c <putc>

			  for( i=0;i<64;i++)
 2003460:	d0201315 	stw	zero,-32692(gp)
 2003464:	00004406 	br	2003578 <main+0x3314>
			    {
			      pattern[i] = pattern[i]^moves[8*row+column][i];
 2003468:	d0a01317 	ldw	r2,-32692(gp)
 200346c:	d0e01317 	ldw	r3,-32692(gp)
 2003470:	01200f14 	movui	r4,32828
 2003474:	01bffff4 	movhi	r6,65535
 2003478:	319f7004 	addi	r6,r6,32192
 200347c:	370d883a 	add	r6,r6,fp
 2003480:	3109883a 	add	r4,r6,r4
 2003484:	18c7883a 	add	r3,r3,r3
 2003488:	18c7883a 	add	r3,r3,r3
 200348c:	20c7883a 	add	r3,r4,r3
 2003490:	19000017 	ldw	r4,0(r3)
 2003494:	017ffff4 	movhi	r5,65535
 2003498:	295f7904 	addi	r5,r5,32228
 200349c:	2f0b883a 	add	r5,r5,fp
 20034a0:	28c00017 	ldw	r3,0(r5)
 20034a4:	180a90fa 	slli	r5,r3,3
 20034a8:	01bffff4 	movhi	r6,65535
 20034ac:	319f7a04 	addi	r6,r6,32232
 20034b0:	370d883a 	add	r6,r6,fp
 20034b4:	30c00017 	ldw	r3,0(r6)
 20034b8:	28cb883a 	add	r5,r5,r3
 20034bc:	d0e01317 	ldw	r3,-32692(gp)
 20034c0:	280a91ba 	slli	r5,r5,6
 20034c4:	28c7883a 	add	r3,r5,r3
 20034c8:	18c7883a 	add	r3,r3,r3
 20034cc:	18c7883a 	add	r3,r3,r3
 20034d0:	017ffff4 	movhi	r5,65535
 20034d4:	295f7004 	addi	r5,r5,32192
 20034d8:	2f0b883a 	add	r5,r5,fp
 20034dc:	28c7883a 	add	r3,r5,r3
 20034e0:	18d00f04 	addi	r3,r3,16444
 20034e4:	18c00017 	ldw	r3,0(r3)
 20034e8:	20c6f03a 	xor	r3,r4,r3
 20034ec:	01200f14 	movui	r4,32828
 20034f0:	01bffff4 	movhi	r6,65535
 20034f4:	319f7004 	addi	r6,r6,32192
 20034f8:	370d883a 	add	r6,r6,fp
 20034fc:	3109883a 	add	r4,r6,r4
 2003500:	1085883a 	add	r2,r2,r2
 2003504:	1085883a 	add	r2,r2,r2
 2003508:	2085883a 	add	r2,r4,r2
 200350c:	10c00015 	stw	r3,0(r2)
			      temp = temp||pattern[i];
 2003510:	00fffff4 	movhi	r3,65535
 2003514:	18df7804 	addi	r3,r3,32224
 2003518:	1f07883a 	add	r3,r3,fp
 200351c:	18800017 	ldw	r2,0(r3)
 2003520:	10000b1e 	bne	r2,zero,2003550 <main+0x32ec>
 2003524:	d0a01317 	ldw	r2,-32692(gp)
 2003528:	00e00f14 	movui	r3,32828
 200352c:	013ffff4 	movhi	r4,65535
 2003530:	211f7004 	addi	r4,r4,32192
 2003534:	2709883a 	add	r4,r4,fp
 2003538:	20c7883a 	add	r3,r4,r3
 200353c:	1085883a 	add	r2,r2,r2
 2003540:	1085883a 	add	r2,r2,r2
 2003544:	1885883a 	add	r2,r3,r2
 2003548:	10800017 	ldw	r2,0(r2)
 200354c:	10000226 	beq	r2,zero,2003558 <main+0x32f4>
 2003550:	00800044 	movi	r2,1
 2003554:	00000106 	br	200355c <main+0x32f8>
 2003558:	0005883a 	mov	r2,zero
 200355c:	017ffff4 	movhi	r5,65535
 2003560:	295f7804 	addi	r5,r5,32224
 2003564:	2f0b883a 	add	r5,r5,fp
 2003568:	28800015 	stw	r2,0(r5)
			  while((c = IORD(PORT_TECLADO_BASE,0)) != 0b0011)
			  		  {
			  		  }
			  putchar(column);

			  for( i=0;i<64;i++)
 200356c:	d0a01317 	ldw	r2,-32692(gp)
 2003570:	10800044 	addi	r2,r2,1
 2003574:	d0a01315 	stw	r2,-32692(gp)
 2003578:	d0a01317 	ldw	r2,-32692(gp)
 200357c:	10801010 	cmplti	r2,r2,64
 2003580:	103fb91e 	bne	r2,zero,2003468 <main+0x3204>
			    {
			      pattern[i] = pattern[i]^moves[8*row+column][i];
			      temp = temp||pattern[i];
			    }
			  win = 0;
 2003584:	01bffff4 	movhi	r6,65535
 2003588:	319f7704 	addi	r6,r6,32220
 200358c:	370d883a 	add	r6,r6,fp
 2003590:	30000015 	stw	zero,0(r6)
			  for(i=0;i<64;i++)
 2003594:	d0201315 	stw	zero,-32692(gp)
 2003598:	00001a06 	br	2003604 <main+0x33a0>
			    {
			      win = win||pattern[i];
 200359c:	00fffff4 	movhi	r3,65535
 20035a0:	18df7704 	addi	r3,r3,32220
 20035a4:	1f07883a 	add	r3,r3,fp
 20035a8:	18800017 	ldw	r2,0(r3)
 20035ac:	10000b1e 	bne	r2,zero,20035dc <main+0x3378>
 20035b0:	d0a01317 	ldw	r2,-32692(gp)
 20035b4:	00e00f14 	movui	r3,32828
 20035b8:	013ffff4 	movhi	r4,65535
 20035bc:	211f7004 	addi	r4,r4,32192
 20035c0:	2709883a 	add	r4,r4,fp
 20035c4:	20c7883a 	add	r3,r4,r3
 20035c8:	1085883a 	add	r2,r2,r2
 20035cc:	1085883a 	add	r2,r2,r2
 20035d0:	1885883a 	add	r2,r3,r2
 20035d4:	10800017 	ldw	r2,0(r2)
 20035d8:	10000226 	beq	r2,zero,20035e4 <main+0x3380>
 20035dc:	00800044 	movi	r2,1
 20035e0:	00000106 	br	20035e8 <main+0x3384>
 20035e4:	0005883a 	mov	r2,zero
 20035e8:	017ffff4 	movhi	r5,65535
 20035ec:	295f7704 	addi	r5,r5,32220
 20035f0:	2f0b883a 	add	r5,r5,fp
 20035f4:	28800015 	stw	r2,0(r5)
			    {
			      pattern[i] = pattern[i]^moves[8*row+column][i];
			      temp = temp||pattern[i];
			    }
			  win = 0;
			  for(i=0;i<64;i++)
 20035f8:	d0a01317 	ldw	r2,-32692(gp)
 20035fc:	10800044 	addi	r2,r2,1
 2003600:	d0a01315 	stw	r2,-32692(gp)
 2003604:	d0a01317 	ldw	r2,-32692(gp)
 2003608:	10801010 	cmplti	r2,r2,64
 200360c:	103fe31e 	bne	r2,zero,200359c <main+0x3338>
			    {
			      win = win||pattern[i];
			      //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];

			    }
			  for(i=0;i<8;i++)
 2003610:	d0201315 	stw	zero,-32692(gp)
 2003614:	0000bd06 	br	200390c <main+0x36a8>
			  	    {
			  	      matriz[i]=(pattern[8*i]<<1)|pattern[8*i+1];
 2003618:	d0e01317 	ldw	r3,-32692(gp)
 200361c:	d0a01317 	ldw	r2,-32692(gp)
 2003620:	100490fa 	slli	r2,r2,3
 2003624:	01200f14 	movui	r4,32828
 2003628:	01bffff4 	movhi	r6,65535
 200362c:	319f7004 	addi	r6,r6,32192
 2003630:	370d883a 	add	r6,r6,fp
 2003634:	3109883a 	add	r4,r6,r4
 2003638:	1085883a 	add	r2,r2,r2
 200363c:	1085883a 	add	r2,r2,r2
 2003640:	2085883a 	add	r2,r4,r2
 2003644:	10800017 	ldw	r2,0(r2)
 2003648:	1085883a 	add	r2,r2,r2
 200364c:	100b883a 	mov	r5,r2
 2003650:	d0a01317 	ldw	r2,-32692(gp)
 2003654:	100490fa 	slli	r2,r2,3
 2003658:	10800044 	addi	r2,r2,1
 200365c:	01200f14 	movui	r4,32828
 2003660:	01bffff4 	movhi	r6,65535
 2003664:	319f7004 	addi	r6,r6,32192
 2003668:	370d883a 	add	r6,r6,fp
 200366c:	3109883a 	add	r4,r6,r4
 2003670:	1085883a 	add	r2,r2,r2
 2003674:	1085883a 	add	r2,r2,r2
 2003678:	2085883a 	add	r2,r4,r2
 200367c:	10800017 	ldw	r2,0(r2)
 2003680:	2884b03a 	or	r2,r5,r2
 2003684:	1009883a 	mov	r4,r2
 2003688:	d0a01404 	addi	r2,gp,-32688
 200368c:	1885883a 	add	r2,r3,r2
 2003690:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+2];
 2003694:	d0e01317 	ldw	r3,-32692(gp)
 2003698:	d1201317 	ldw	r4,-32692(gp)
 200369c:	d0a01404 	addi	r2,gp,-32688
 20036a0:	2085883a 	add	r2,r4,r2
 20036a4:	10800003 	ldbu	r2,0(r2)
 20036a8:	1085883a 	add	r2,r2,r2
 20036ac:	100b883a 	mov	r5,r2
 20036b0:	d0a01317 	ldw	r2,-32692(gp)
 20036b4:	100490fa 	slli	r2,r2,3
 20036b8:	10800084 	addi	r2,r2,2
 20036bc:	01200f14 	movui	r4,32828
 20036c0:	01bffff4 	movhi	r6,65535
 20036c4:	319f7004 	addi	r6,r6,32192
 20036c8:	370d883a 	add	r6,r6,fp
 20036cc:	3109883a 	add	r4,r6,r4
 20036d0:	1085883a 	add	r2,r2,r2
 20036d4:	1085883a 	add	r2,r2,r2
 20036d8:	2085883a 	add	r2,r4,r2
 20036dc:	10800017 	ldw	r2,0(r2)
 20036e0:	2884b03a 	or	r2,r5,r2
 20036e4:	1009883a 	mov	r4,r2
 20036e8:	d0a01404 	addi	r2,gp,-32688
 20036ec:	1885883a 	add	r2,r3,r2
 20036f0:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+3];
 20036f4:	d0e01317 	ldw	r3,-32692(gp)
 20036f8:	d1201317 	ldw	r4,-32692(gp)
 20036fc:	d0a01404 	addi	r2,gp,-32688
 2003700:	2085883a 	add	r2,r4,r2
 2003704:	10800003 	ldbu	r2,0(r2)
 2003708:	1085883a 	add	r2,r2,r2
 200370c:	100b883a 	mov	r5,r2
 2003710:	d0a01317 	ldw	r2,-32692(gp)
 2003714:	100490fa 	slli	r2,r2,3
 2003718:	108000c4 	addi	r2,r2,3
 200371c:	01200f14 	movui	r4,32828
 2003720:	01bffff4 	movhi	r6,65535
 2003724:	319f7004 	addi	r6,r6,32192
 2003728:	370d883a 	add	r6,r6,fp
 200372c:	3109883a 	add	r4,r6,r4
 2003730:	1085883a 	add	r2,r2,r2
 2003734:	1085883a 	add	r2,r2,r2
 2003738:	2085883a 	add	r2,r4,r2
 200373c:	10800017 	ldw	r2,0(r2)
 2003740:	2884b03a 	or	r2,r5,r2
 2003744:	1009883a 	mov	r4,r2
 2003748:	d0a01404 	addi	r2,gp,-32688
 200374c:	1885883a 	add	r2,r3,r2
 2003750:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+4];
 2003754:	d0e01317 	ldw	r3,-32692(gp)
 2003758:	d1201317 	ldw	r4,-32692(gp)
 200375c:	d0a01404 	addi	r2,gp,-32688
 2003760:	2085883a 	add	r2,r4,r2
 2003764:	10800003 	ldbu	r2,0(r2)
 2003768:	1085883a 	add	r2,r2,r2
 200376c:	100b883a 	mov	r5,r2
 2003770:	d0a01317 	ldw	r2,-32692(gp)
 2003774:	100490fa 	slli	r2,r2,3
 2003778:	10800104 	addi	r2,r2,4
 200377c:	01200f14 	movui	r4,32828
 2003780:	01bffff4 	movhi	r6,65535
 2003784:	319f7004 	addi	r6,r6,32192
 2003788:	370d883a 	add	r6,r6,fp
 200378c:	3109883a 	add	r4,r6,r4
 2003790:	1085883a 	add	r2,r2,r2
 2003794:	1085883a 	add	r2,r2,r2
 2003798:	2085883a 	add	r2,r4,r2
 200379c:	10800017 	ldw	r2,0(r2)
 20037a0:	2884b03a 	or	r2,r5,r2
 20037a4:	1009883a 	mov	r4,r2
 20037a8:	d0a01404 	addi	r2,gp,-32688
 20037ac:	1885883a 	add	r2,r3,r2
 20037b0:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
 20037b4:	d0e01317 	ldw	r3,-32692(gp)
 20037b8:	d1201317 	ldw	r4,-32692(gp)
 20037bc:	d0a01404 	addi	r2,gp,-32688
 20037c0:	2085883a 	add	r2,r4,r2
 20037c4:	10800003 	ldbu	r2,0(r2)
 20037c8:	1085883a 	add	r2,r2,r2
 20037cc:	100b883a 	mov	r5,r2
 20037d0:	d0a01317 	ldw	r2,-32692(gp)
 20037d4:	100490fa 	slli	r2,r2,3
 20037d8:	10800144 	addi	r2,r2,5
 20037dc:	01200f14 	movui	r4,32828
 20037e0:	01bffff4 	movhi	r6,65535
 20037e4:	319f7004 	addi	r6,r6,32192
 20037e8:	370d883a 	add	r6,r6,fp
 20037ec:	3109883a 	add	r4,r6,r4
 20037f0:	1085883a 	add	r2,r2,r2
 20037f4:	1085883a 	add	r2,r2,r2
 20037f8:	2085883a 	add	r2,r4,r2
 20037fc:	10800017 	ldw	r2,0(r2)
 2003800:	2884b03a 	or	r2,r5,r2
 2003804:	1009883a 	mov	r4,r2
 2003808:	d0a01404 	addi	r2,gp,-32688
 200380c:	1885883a 	add	r2,r3,r2
 2003810:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
 2003814:	d0e01317 	ldw	r3,-32692(gp)
 2003818:	d1201317 	ldw	r4,-32692(gp)
 200381c:	d0a01404 	addi	r2,gp,-32688
 2003820:	2085883a 	add	r2,r4,r2
 2003824:	10800003 	ldbu	r2,0(r2)
 2003828:	1085883a 	add	r2,r2,r2
 200382c:	100b883a 	mov	r5,r2
 2003830:	d0a01317 	ldw	r2,-32692(gp)
 2003834:	100490fa 	slli	r2,r2,3
 2003838:	10800184 	addi	r2,r2,6
 200383c:	01200f14 	movui	r4,32828
 2003840:	01bffff4 	movhi	r6,65535
 2003844:	319f7004 	addi	r6,r6,32192
 2003848:	370d883a 	add	r6,r6,fp
 200384c:	3109883a 	add	r4,r6,r4
 2003850:	1085883a 	add	r2,r2,r2
 2003854:	1085883a 	add	r2,r2,r2
 2003858:	2085883a 	add	r2,r4,r2
 200385c:	10800017 	ldw	r2,0(r2)
 2003860:	2884b03a 	or	r2,r5,r2
 2003864:	1009883a 	mov	r4,r2
 2003868:	d0a01404 	addi	r2,gp,-32688
 200386c:	1885883a 	add	r2,r3,r2
 2003870:	11000005 	stb	r4,0(r2)
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
 2003874:	d0e01317 	ldw	r3,-32692(gp)
 2003878:	d1201317 	ldw	r4,-32692(gp)
 200387c:	d0a01404 	addi	r2,gp,-32688
 2003880:	2085883a 	add	r2,r4,r2
 2003884:	10800003 	ldbu	r2,0(r2)
 2003888:	1085883a 	add	r2,r2,r2
 200388c:	100b883a 	mov	r5,r2
 2003890:	d0a01317 	ldw	r2,-32692(gp)
 2003894:	100490fa 	slli	r2,r2,3
 2003898:	108001c4 	addi	r2,r2,7
 200389c:	01200f14 	movui	r4,32828
 20038a0:	01bffff4 	movhi	r6,65535
 20038a4:	319f7004 	addi	r6,r6,32192
 20038a8:	370d883a 	add	r6,r6,fp
 20038ac:	3109883a 	add	r4,r6,r4
 20038b0:	1085883a 	add	r2,r2,r2
 20038b4:	1085883a 	add	r2,r2,r2
 20038b8:	2085883a 	add	r2,r4,r2
 20038bc:	10800017 	ldw	r2,0(r2)
 20038c0:	2884b03a 	or	r2,r5,r2
 20038c4:	1009883a 	mov	r4,r2
 20038c8:	d0a01404 	addi	r2,gp,-32688
 20038cc:	1885883a 	add	r2,r3,r2
 20038d0:	11000005 	stb	r4,0(r2)
			  	      printf("\n%u",matriz[i]);
 20038d4:	d0e01317 	ldw	r3,-32692(gp)
 20038d8:	d0a01404 	addi	r2,gp,-32688
 20038dc:	1885883a 	add	r2,r3,r2
 20038e0:	10800003 	ldbu	r2,0(r2)
 20038e4:	10803fcc 	andi	r2,r2,255
 20038e8:	1080201c 	xori	r2,r2,128
 20038ec:	10bfe004 	addi	r2,r2,-128
 20038f0:	01008074 	movhi	r4,513
 20038f4:	21128f04 	addi	r4,r4,19004
 20038f8:	100b883a 	mov	r5,r2
 20038fc:	20040c00 	call	20040c0 <printf>
			    {
			      win = win||pattern[i];
			      //matriz[i/8]=(((((((((((pattern[i/8]<<1) | pattern[i/8 +2])<<1) | pattern[i/8 +3])<<1) | pattern[i/8 +4])<<1) | pattern[i/8 +5])<<1) | pattern[i/8 +6])<<1) | pattern[i/8+7];

			    }
			  for(i=0;i<8;i++)
 2003900:	d0a01317 	ldw	r2,-32692(gp)
 2003904:	10800044 	addi	r2,r2,1
 2003908:	d0a01315 	stw	r2,-32692(gp)
 200390c:	d0a01317 	ldw	r2,-32692(gp)
 2003910:	10800210 	cmplti	r2,r2,8
 2003914:	103f401e 	bne	r2,zero,2003618 <main+0x33b4>
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+5];
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+6];
			  	      matriz[i]=(matriz[i]<<1)|pattern[8*i+7];
			  	      printf("\n%u",matriz[i]);
			  }
			  sen_2_byte_info(portlog,ADDR_DIG_0,matriz[0]);
 2003918:	00bffff4 	movhi	r2,65535
 200391c:	109f7b04 	addi	r2,r2,32236
 2003920:	1705883a 	add	r2,r2,fp
 2003924:	10c00017 	ldw	r3,0(r2)
 2003928:	d0a01403 	ldbu	r2,-32688(gp)
 200392c:	10803fcc 	andi	r2,r2,255
 2003930:	1080201c 	xori	r2,r2,128
 2003934:	10bfe004 	addi	r2,r2,-128
 2003938:	1809883a 	mov	r4,r3
 200393c:	01400044 	movi	r5,1
 2003940:	100d883a 	mov	r6,r2
 2003944:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_1,matriz[1]);
 2003948:	013ffff4 	movhi	r4,65535
 200394c:	211f7b04 	addi	r4,r4,32236
 2003950:	2709883a 	add	r4,r4,fp
 2003954:	20c00017 	ldw	r3,0(r4)
 2003958:	d0a01444 	addi	r2,gp,-32687
 200395c:	10800003 	ldbu	r2,0(r2)
 2003960:	10803fcc 	andi	r2,r2,255
 2003964:	1080201c 	xori	r2,r2,128
 2003968:	10bfe004 	addi	r2,r2,-128
 200396c:	1809883a 	mov	r4,r3
 2003970:	01400084 	movi	r5,2
 2003974:	100d883a 	mov	r6,r2
 2003978:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_2,matriz[2]);
 200397c:	017ffff4 	movhi	r5,65535
 2003980:	295f7b04 	addi	r5,r5,32236
 2003984:	2f0b883a 	add	r5,r5,fp
 2003988:	28c00017 	ldw	r3,0(r5)
 200398c:	d0a01484 	addi	r2,gp,-32686
 2003990:	10800003 	ldbu	r2,0(r2)
 2003994:	10803fcc 	andi	r2,r2,255
 2003998:	1080201c 	xori	r2,r2,128
 200399c:	10bfe004 	addi	r2,r2,-128
 20039a0:	1809883a 	mov	r4,r3
 20039a4:	014000c4 	movi	r5,3
 20039a8:	100d883a 	mov	r6,r2
 20039ac:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_3,matriz[3]);
 20039b0:	01bffff4 	movhi	r6,65535
 20039b4:	319f7b04 	addi	r6,r6,32236
 20039b8:	370d883a 	add	r6,r6,fp
 20039bc:	30c00017 	ldw	r3,0(r6)
 20039c0:	d0a014c4 	addi	r2,gp,-32685
 20039c4:	10800003 	ldbu	r2,0(r2)
 20039c8:	10803fcc 	andi	r2,r2,255
 20039cc:	1080201c 	xori	r2,r2,128
 20039d0:	10bfe004 	addi	r2,r2,-128
 20039d4:	1809883a 	mov	r4,r3
 20039d8:	01400104 	movi	r5,4
 20039dc:	100d883a 	mov	r6,r2
 20039e0:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
 20039e4:	00bffff4 	movhi	r2,65535
 20039e8:	109f7b04 	addi	r2,r2,32236
 20039ec:	1705883a 	add	r2,r2,fp
 20039f0:	10c00017 	ldw	r3,0(r2)
 20039f4:	d0a01504 	addi	r2,gp,-32684
 20039f8:	10800003 	ldbu	r2,0(r2)
 20039fc:	10803fcc 	andi	r2,r2,255
 2003a00:	1080201c 	xori	r2,r2,128
 2003a04:	10bfe004 	addi	r2,r2,-128
 2003a08:	1809883a 	mov	r4,r3
 2003a0c:	01400144 	movi	r5,5
 2003a10:	100d883a 	mov	r6,r2
 2003a14:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
 2003a18:	013ffff4 	movhi	r4,65535
 2003a1c:	211f7b04 	addi	r4,r4,32236
 2003a20:	2709883a 	add	r4,r4,fp
 2003a24:	20c00017 	ldw	r3,0(r4)
 2003a28:	d0a01544 	addi	r2,gp,-32683
 2003a2c:	10800003 	ldbu	r2,0(r2)
 2003a30:	10803fcc 	andi	r2,r2,255
 2003a34:	1080201c 	xori	r2,r2,128
 2003a38:	10bfe004 	addi	r2,r2,-128
 2003a3c:	1809883a 	mov	r4,r3
 2003a40:	01400184 	movi	r5,6
 2003a44:	100d883a 	mov	r6,r2
 2003a48:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
 2003a4c:	017ffff4 	movhi	r5,65535
 2003a50:	295f7b04 	addi	r5,r5,32236
 2003a54:	2f0b883a 	add	r5,r5,fp
 2003a58:	28c00017 	ldw	r3,0(r5)
 2003a5c:	d0a01584 	addi	r2,gp,-32682
 2003a60:	10800003 	ldbu	r2,0(r2)
 2003a64:	10803fcc 	andi	r2,r2,255
 2003a68:	1080201c 	xori	r2,r2,128
 2003a6c:	10bfe004 	addi	r2,r2,-128
 2003a70:	1809883a 	mov	r4,r3
 2003a74:	014001c4 	movi	r5,7
 2003a78:	100d883a 	mov	r6,r2
 2003a7c:	2003d340 	call	2003d34 <sen_2_byte_info>
			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
 2003a80:	01bffff4 	movhi	r6,65535
 2003a84:	319f7b04 	addi	r6,r6,32236
 2003a88:	370d883a 	add	r6,r6,fp
 2003a8c:	30c00017 	ldw	r3,0(r6)
 2003a90:	d0a015c4 	addi	r2,gp,-32681
 2003a94:	10800003 	ldbu	r2,0(r2)
 2003a98:	10803fcc 	andi	r2,r2,255
 2003a9c:	1080201c 	xori	r2,r2,128
 2003aa0:	10bfe004 	addi	r2,r2,-128
 2003aa4:	1809883a 	mov	r4,r3
 2003aa8:	01400204 	movi	r5,8
 2003aac:	100d883a 	mov	r6,r2
 2003ab0:	2003d340 	call	2003d34 <sen_2_byte_info>
		      	sen_2_byte_info(portlog,ADDR_DIG_4,matriz[4]);
		      	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
		      	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
		      	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);
		      unsigned int win = 1;
		      while(win==1)
 2003ab4:	00fffff4 	movhi	r3,65535
 2003ab8:	18df7704 	addi	r3,r3,32220
 2003abc:	1f07883a 	add	r3,r3,fp
 2003ac0:	18800017 	ldw	r2,0(r3)
 2003ac4:	10800060 	cmpeqi	r2,r2,1
 2003ac8:	103d831e 	bne	r2,zero,20030d8 <main+0x2e74>
			  	sen_2_byte_info(portlog,ADDR_DIG_5,matriz[5]);
			  	sen_2_byte_info(portlog,ADDR_DIG_6,matriz[6]);
			  	sen_2_byte_info(portlog,ADDR_DIG_7,matriz[7]);

			}
		      printf("\nCongrats!!! You won.");
 2003acc:	01008074 	movhi	r4,513
 2003ad0:	2112a504 	addi	r4,r4,19092
 2003ad4:	20040c00 	call	20040c0 <printf>





	}
 2003ad8:	0031f506 	br	20002b0 <main+0x4c>

02003adc <OutputHigh_Din>:
//adress: Direccion de escritura para configuracion o dato 8 bits
// data:  Informacion a enviar para la direccion (adress) seleccionda 8 bits


int OutputHigh_Din(int Portlog) // Salida en alto por el pin DIN enmascarado en  los 32 pines del GPIO
{
 2003adc:	defffe04 	addi	sp,sp,-8
 2003ae0:	df000115 	stw	fp,4(sp)
 2003ae4:	df000104 	addi	fp,sp,4
 2003ae8:	e13fff15 	stw	r4,-4(fp)
Portlog = Portlog | (1<<PIN_DIN_IDX);
 2003aec:	e0bfff17 	ldw	r2,-4(fp)
 2003af0:	10800114 	ori	r2,r2,4
 2003af4:	e0bfff15 	stw	r2,-4(fp)

IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DATA, Portlog); // funcion de la libreria io.h que permite escribir en la direccion del GPIO (PARALLEL_PORT_0_BASE), la informacion Portlog, ALT_UP_PARALLEL_PORT_DATA es parametro de dicha libreria.
 2003af8:	00810034 	movhi	r2,1024
 2003afc:	10881804 	addi	r2,r2,8288
 2003b00:	e0ffff17 	ldw	r3,-4(fp)
 2003b04:	10c00035 	stwio	r3,0(r2)
return (Portlog);
 2003b08:	e0bfff17 	ldw	r2,-4(fp)
}
 2003b0c:	e037883a 	mov	sp,fp
 2003b10:	df000017 	ldw	fp,0(sp)
 2003b14:	dec00104 	addi	sp,sp,4
 2003b18:	f800283a 	ret

02003b1c <Outputlow_Din>:


int Outputlow_Din(int Portlog)// Salida en bajo por el pin DIN enmascarado en  los 32 pines del GPIO
{
 2003b1c:	defffe04 	addi	sp,sp,-8
 2003b20:	df000115 	stw	fp,4(sp)
 2003b24:	df000104 	addi	fp,sp,4
 2003b28:	e13fff15 	stw	r4,-4(fp)
Portlog = Portlog & ~(1<<PIN_DIN_IDX);
 2003b2c:	e0ffff17 	ldw	r3,-4(fp)
 2003b30:	00bffec4 	movi	r2,-5
 2003b34:	1884703a 	and	r2,r3,r2
 2003b38:	e0bfff15 	stw	r2,-4(fp)

IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DATA, Portlog);
 2003b3c:	00810034 	movhi	r2,1024
 2003b40:	10881804 	addi	r2,r2,8288
 2003b44:	e0ffff17 	ldw	r3,-4(fp)
 2003b48:	10c00035 	stwio	r3,0(r2)
return (Portlog);
 2003b4c:	e0bfff17 	ldw	r2,-4(fp)
}
 2003b50:	e037883a 	mov	sp,fp
 2003b54:	df000017 	ldw	fp,0(sp)
 2003b58:	dec00104 	addi	sp,sp,4
 2003b5c:	f800283a 	ret

02003b60 <Outputlow_clk>:



int Outputlow_clk(int Portlog)
{
 2003b60:	defffe04 	addi	sp,sp,-8
 2003b64:	df000115 	stw	fp,4(sp)
 2003b68:	df000104 	addi	fp,sp,4
 2003b6c:	e13fff15 	stw	r4,-4(fp)
Portlog = Portlog & ~(1<<PIN_CLK_IDX);
 2003b70:	e0ffff17 	ldw	r3,-4(fp)
 2003b74:	00bfff84 	movi	r2,-2
 2003b78:	1884703a 	and	r2,r3,r2
 2003b7c:	e0bfff15 	stw	r2,-4(fp)

IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DATA, Portlog);
 2003b80:	00810034 	movhi	r2,1024
 2003b84:	10881804 	addi	r2,r2,8288
 2003b88:	e0ffff17 	ldw	r3,-4(fp)
 2003b8c:	10c00035 	stwio	r3,0(r2)
return (Portlog);
 2003b90:	e0bfff17 	ldw	r2,-4(fp)
}
 2003b94:	e037883a 	mov	sp,fp
 2003b98:	df000017 	ldw	fp,0(sp)
 2003b9c:	dec00104 	addi	sp,sp,4
 2003ba0:	f800283a 	ret

02003ba4 <OutputHigh_clk>:


int OutputHigh_clk(int Portlog)
{
 2003ba4:	defffe04 	addi	sp,sp,-8
 2003ba8:	df000115 	stw	fp,4(sp)
 2003bac:	df000104 	addi	fp,sp,4
 2003bb0:	e13fff15 	stw	r4,-4(fp)
Portlog = Portlog | (1<<PIN_CLK_IDX);
 2003bb4:	e0bfff17 	ldw	r2,-4(fp)
 2003bb8:	10800054 	ori	r2,r2,1
 2003bbc:	e0bfff15 	stw	r2,-4(fp)

IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DATA, Portlog);
 2003bc0:	00810034 	movhi	r2,1024
 2003bc4:	10881804 	addi	r2,r2,8288
 2003bc8:	e0ffff17 	ldw	r3,-4(fp)
 2003bcc:	10c00035 	stwio	r3,0(r2)
return (Portlog);
 2003bd0:	e0bfff17 	ldw	r2,-4(fp)
}
 2003bd4:	e037883a 	mov	sp,fp
 2003bd8:	df000017 	ldw	fp,0(sp)
 2003bdc:	dec00104 	addi	sp,sp,4
 2003be0:	f800283a 	ret

02003be4 <Outputlow_cs>:


int Outputlow_cs(int Portlog)
{
 2003be4:	defffe04 	addi	sp,sp,-8
 2003be8:	df000115 	stw	fp,4(sp)
 2003bec:	df000104 	addi	fp,sp,4
 2003bf0:	e13fff15 	stw	r4,-4(fp)
Portlog = Portlog & ~(1<<PIN_CS_IDX);
 2003bf4:	e0ffff17 	ldw	r3,-4(fp)
 2003bf8:	00bfff44 	movi	r2,-3
 2003bfc:	1884703a 	and	r2,r3,r2
 2003c00:	e0bfff15 	stw	r2,-4(fp)

IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DATA, Portlog);
 2003c04:	00810034 	movhi	r2,1024
 2003c08:	10881804 	addi	r2,r2,8288
 2003c0c:	e0ffff17 	ldw	r3,-4(fp)
 2003c10:	10c00035 	stwio	r3,0(r2)

return (Portlog);
 2003c14:	e0bfff17 	ldw	r2,-4(fp)
}
 2003c18:	e037883a 	mov	sp,fp
 2003c1c:	df000017 	ldw	fp,0(sp)
 2003c20:	dec00104 	addi	sp,sp,4
 2003c24:	f800283a 	ret

02003c28 <OutputHigh_cs>:
int OutputHigh_cs(int Portlog)
{
 2003c28:	defffe04 	addi	sp,sp,-8
 2003c2c:	df000115 	stw	fp,4(sp)
 2003c30:	df000104 	addi	fp,sp,4
 2003c34:	e13fff15 	stw	r4,-4(fp)
Portlog = Portlog | (1<<PIN_CS_IDX);
 2003c38:	e0bfff17 	ldw	r2,-4(fp)
 2003c3c:	10800094 	ori	r2,r2,2
 2003c40:	e0bfff15 	stw	r2,-4(fp)

IOWR(PARALLEL_PORT_0_BASE, ALT_UP_PARALLEL_PORT_DATA, Portlog);
 2003c44:	00810034 	movhi	r2,1024
 2003c48:	10881804 	addi	r2,r2,8288
 2003c4c:	e0ffff17 	ldw	r3,-4(fp)
 2003c50:	10c00035 	stwio	r3,0(r2)

return (Portlog);
 2003c54:	e0bfff17 	ldw	r2,-4(fp)
}
 2003c58:	e037883a 	mov	sp,fp
 2003c5c:	df000017 	ldw	fp,0(sp)
 2003c60:	dec00104 	addi	sp,sp,4
 2003c64:	f800283a 	ret

02003c68 <max7219_int>:



int max7219_int (int datalog) //Condiciones iniciales para empezar comunicacion.
{
 2003c68:	defffd04 	addi	sp,sp,-12
 2003c6c:	dfc00215 	stw	ra,8(sp)
 2003c70:	df000115 	stw	fp,4(sp)
 2003c74:	df000104 	addi	fp,sp,4
 2003c78:	e13fff15 	stw	r4,-4(fp)
datalog= Outputlow_clk(datalog);
 2003c7c:	e13fff17 	ldw	r4,-4(fp)
 2003c80:	2003b600 	call	2003b60 <Outputlow_clk>
 2003c84:	e0bfff15 	stw	r2,-4(fp)
datalog= Outputlow_Din(datalog);
 2003c88:	e13fff17 	ldw	r4,-4(fp)
 2003c8c:	2003b1c0 	call	2003b1c <Outputlow_Din>
 2003c90:	e0bfff15 	stw	r2,-4(fp)
datalog= OutputHigh_cs(datalog);
 2003c94:	e13fff17 	ldw	r4,-4(fp)
 2003c98:	2003c280 	call	2003c28 <OutputHigh_cs>
 2003c9c:	e0bfff15 	stw	r2,-4(fp)
return (datalog);
 2003ca0:	e0bfff17 	ldw	r2,-4(fp)
}
 2003ca4:	e037883a 	mov	sp,fp
 2003ca8:	dfc00117 	ldw	ra,4(sp)
 2003cac:	df000017 	ldw	fp,0(sp)
 2003cb0:	dec00204 	addi	sp,sp,8
 2003cb4:	f800283a 	ret

02003cb8 <max7219_senbit>:

int max7219_senbit (int portlog,char bitvalue) //Envio de informacion por pin DIN
{
 2003cb8:	defffc04 	addi	sp,sp,-16
 2003cbc:	dfc00315 	stw	ra,12(sp)
 2003cc0:	df000215 	stw	fp,8(sp)
 2003cc4:	df000204 	addi	fp,sp,8
 2003cc8:	e13ffe15 	stw	r4,-8(fp)
 2003ccc:	2805883a 	mov	r2,r5
 2003cd0:	e0bfff05 	stb	r2,-4(fp)
if(bitvalue==1)
 2003cd4:	e0bfff07 	ldb	r2,-4(fp)
 2003cd8:	10800058 	cmpnei	r2,r2,1
 2003cdc:	1000041e 	bne	r2,zero,2003cf0 <max7219_senbit+0x38>
	{
	portlog=OutputHigh_Din(portlog);
 2003ce0:	e13ffe17 	ldw	r4,-8(fp)
 2003ce4:	2003adc0 	call	2003adc <OutputHigh_Din>
 2003ce8:	e0bffe15 	stw	r2,-8(fp)
 2003cec:	00000306 	br	2003cfc <max7219_senbit+0x44>
	}
else
{
	portlog=Outputlow_Din(portlog);
 2003cf0:	e13ffe17 	ldw	r4,-8(fp)
 2003cf4:	2003b1c0 	call	2003b1c <Outputlow_Din>
 2003cf8:	e0bffe15 	stw	r2,-8(fp)
}
	usleep(1);
 2003cfc:	01000044 	movi	r4,1
 2003d00:	20116680 	call	2011668 <usleep>
	OutputHigh_clk(portlog); // Comportamiento de señal de Clock que determina el envio de informacion (1 bit).
 2003d04:	e13ffe17 	ldw	r4,-8(fp)
 2003d08:	2003ba40 	call	2003ba4 <OutputHigh_clk>
	usleep(1);
 2003d0c:	01000044 	movi	r4,1
 2003d10:	20116680 	call	2011668 <usleep>
	Outputlow_clk(portlog);
 2003d14:	e13ffe17 	ldw	r4,-8(fp)
 2003d18:	2003b600 	call	2003b60 <Outputlow_clk>

	return portlog;
 2003d1c:	e0bffe17 	ldw	r2,-8(fp)
}
 2003d20:	e037883a 	mov	sp,fp
 2003d24:	dfc00117 	ldw	ra,4(sp)
 2003d28:	df000017 	ldw	fp,0(sp)
 2003d2c:	dec00204 	addi	sp,sp,8
 2003d30:	f800283a 	ret

02003d34 <sen_2_byte_info>:

int  sen_2_byte_info(int portlog, char address, char data)//Envio de palabra de 16 bits, en la cual se encuentra la direccion y dato correspondiente
{
 2003d34:	defffa04 	addi	sp,sp,-24
 2003d38:	dfc00515 	stw	ra,20(sp)
 2003d3c:	df000415 	stw	fp,16(sp)
 2003d40:	df000404 	addi	fp,sp,16
 2003d44:	e13ffd15 	stw	r4,-12(fp)
 2003d48:	2807883a 	mov	r3,r5
 2003d4c:	3005883a 	mov	r2,r6
 2003d50:	e0fffe05 	stb	r3,-8(fp)
 2003d54:	e0bfff05 	stb	r2,-4(fp)
	char i;
	Outputlow_cs(portlog);
 2003d58:	e13ffd17 	ldw	r4,-12(fp)
 2003d5c:	2003be40 	call	2003be4 <Outputlow_cs>

	for (i=0;i<8;i++)
 2003d60:	e03ffc05 	stb	zero,-16(fp)
 2003d64:	00001106 	br	2003dac <sen_2_byte_info+0x78>
	{
		if ((address & (1<<(7-i))) != 0)
 2003d68:	e0fffe07 	ldb	r3,-8(fp)
 2003d6c:	e0bffc07 	ldb	r2,-16(fp)
 2003d70:	010001c4 	movi	r4,7
 2003d74:	2085c83a 	sub	r2,r4,r2
 2003d78:	1885d83a 	sra	r2,r3,r2
 2003d7c:	1080004c 	andi	r2,r2,1
 2003d80:	10000426 	beq	r2,zero,2003d94 <sen_2_byte_info+0x60>
		{
			max7219_senbit(portlog,1);
 2003d84:	e13ffd17 	ldw	r4,-12(fp)
 2003d88:	01400044 	movi	r5,1
 2003d8c:	2003cb80 	call	2003cb8 <max7219_senbit>
 2003d90:	00000306 	br	2003da0 <sen_2_byte_info+0x6c>
		}
		else
		{
			max7219_senbit(portlog,0);
 2003d94:	e13ffd17 	ldw	r4,-12(fp)
 2003d98:	000b883a 	mov	r5,zero
 2003d9c:	2003cb80 	call	2003cb8 <max7219_senbit>
int  sen_2_byte_info(int portlog, char address, char data)//Envio de palabra de 16 bits, en la cual se encuentra la direccion y dato correspondiente
{
	char i;
	Outputlow_cs(portlog);

	for (i=0;i<8;i++)
 2003da0:	e0bffc03 	ldbu	r2,-16(fp)
 2003da4:	10800044 	addi	r2,r2,1
 2003da8:	e0bffc05 	stb	r2,-16(fp)
 2003dac:	e0bffc07 	ldb	r2,-16(fp)
 2003db0:	10800210 	cmplti	r2,r2,8
 2003db4:	103fec1e 	bne	r2,zero,2003d68 <sen_2_byte_info+0x34>
		else
		{
			max7219_senbit(portlog,0);
		}
	}
	for (i=0;i<8;i++)
 2003db8:	e03ffc05 	stb	zero,-16(fp)
 2003dbc:	00001106 	br	2003e04 <sen_2_byte_info+0xd0>
		{
			if ((data & (1<<(7-i))) != 0)
 2003dc0:	e0ffff07 	ldb	r3,-4(fp)
 2003dc4:	e0bffc07 	ldb	r2,-16(fp)
 2003dc8:	010001c4 	movi	r4,7
 2003dcc:	2085c83a 	sub	r2,r4,r2
 2003dd0:	1885d83a 	sra	r2,r3,r2
 2003dd4:	1080004c 	andi	r2,r2,1
 2003dd8:	10000426 	beq	r2,zero,2003dec <sen_2_byte_info+0xb8>
			{
				max7219_senbit(portlog,1);
 2003ddc:	e13ffd17 	ldw	r4,-12(fp)
 2003de0:	01400044 	movi	r5,1
 2003de4:	2003cb80 	call	2003cb8 <max7219_senbit>
 2003de8:	00000306 	br	2003df8 <sen_2_byte_info+0xc4>
			}
			else
			{
				max7219_senbit(portlog,0);
 2003dec:	e13ffd17 	ldw	r4,-12(fp)
 2003df0:	000b883a 	mov	r5,zero
 2003df4:	2003cb80 	call	2003cb8 <max7219_senbit>
		else
		{
			max7219_senbit(portlog,0);
		}
	}
	for (i=0;i<8;i++)
 2003df8:	e0bffc03 	ldbu	r2,-16(fp)
 2003dfc:	10800044 	addi	r2,r2,1
 2003e00:	e0bffc05 	stb	r2,-16(fp)
 2003e04:	e0bffc07 	ldb	r2,-16(fp)
 2003e08:	10800210 	cmplti	r2,r2,8
 2003e0c:	103fec1e 	bne	r2,zero,2003dc0 <sen_2_byte_info+0x8c>
			{
				max7219_senbit(portlog,0);
			}

		}
	OutputHigh_cs(portlog);
 2003e10:	e13ffd17 	ldw	r4,-12(fp)
 2003e14:	2003c280 	call	2003c28 <OutputHigh_cs>
	usleep(1);
 2003e18:	01000044 	movi	r4,1
 2003e1c:	20116680 	call	2011668 <usleep>
	return portlog;
 2003e20:	e0bffd17 	ldw	r2,-12(fp)
}
 2003e24:	e037883a 	mov	sp,fp
 2003e28:	dfc00117 	ldw	ra,4(sp)
 2003e2c:	df000017 	ldw	fp,0(sp)
 2003e30:	dec00204 	addi	sp,sp,8
 2003e34:	f800283a 	ret

02003e38 <memcpy>:
 2003e38:	deffff04 	addi	sp,sp,-4
 2003e3c:	dc000015 	stw	r16,0(sp)
 2003e40:	00c003c4 	movi	r3,15
 2003e44:	2005883a 	mov	r2,r4
 2003e48:	1980432e 	bgeu	r3,r6,2003f58 <memcpy+0x120>
 2003e4c:	2146b03a 	or	r3,r4,r5
 2003e50:	18c000cc 	andi	r3,r3,3
 2003e54:	1800421e 	bne	r3,zero,2003f60 <memcpy+0x128>
 2003e58:	343ffc04 	addi	r16,r6,-16
 2003e5c:	8020d13a 	srli	r16,r16,4
 2003e60:	28c00104 	addi	r3,r5,4
 2003e64:	23400104 	addi	r13,r4,4
 2003e68:	801e913a 	slli	r15,r16,4
 2003e6c:	2b000204 	addi	r12,r5,8
 2003e70:	22c00204 	addi	r11,r4,8
 2003e74:	7bc00504 	addi	r15,r15,20
 2003e78:	2a800304 	addi	r10,r5,12
 2003e7c:	22400304 	addi	r9,r4,12
 2003e80:	2bdf883a 	add	r15,r5,r15
 2003e84:	2811883a 	mov	r8,r5
 2003e88:	200f883a 	mov	r7,r4
 2003e8c:	41000017 	ldw	r4,0(r8)
 2003e90:	39c00404 	addi	r7,r7,16
 2003e94:	18c00404 	addi	r3,r3,16
 2003e98:	393ffc15 	stw	r4,-16(r7)
 2003e9c:	1bbffc17 	ldw	r14,-16(r3)
 2003ea0:	6b400404 	addi	r13,r13,16
 2003ea4:	5ac00404 	addi	r11,r11,16
 2003ea8:	6bbffc15 	stw	r14,-16(r13)
 2003eac:	63800017 	ldw	r14,0(r12)
 2003eb0:	4a400404 	addi	r9,r9,16
 2003eb4:	42000404 	addi	r8,r8,16
 2003eb8:	5bbffc15 	stw	r14,-16(r11)
 2003ebc:	53800017 	ldw	r14,0(r10)
 2003ec0:	63000404 	addi	r12,r12,16
 2003ec4:	52800404 	addi	r10,r10,16
 2003ec8:	4bbffc15 	stw	r14,-16(r9)
 2003ecc:	1bffef1e 	bne	r3,r15,2003e8c <memcpy+0x54>
 2003ed0:	81c00044 	addi	r7,r16,1
 2003ed4:	380e913a 	slli	r7,r7,4
 2003ed8:	310003cc 	andi	r4,r6,15
 2003edc:	02c000c4 	movi	r11,3
 2003ee0:	11c7883a 	add	r3,r2,r7
 2003ee4:	29cb883a 	add	r5,r5,r7
 2003ee8:	59001f2e 	bgeu	r11,r4,2003f68 <memcpy+0x130>
 2003eec:	1813883a 	mov	r9,r3
 2003ef0:	2811883a 	mov	r8,r5
 2003ef4:	200f883a 	mov	r7,r4
 2003ef8:	42800017 	ldw	r10,0(r8)
 2003efc:	4a400104 	addi	r9,r9,4
 2003f00:	39ffff04 	addi	r7,r7,-4
 2003f04:	4abfff15 	stw	r10,-4(r9)
 2003f08:	42000104 	addi	r8,r8,4
 2003f0c:	59fffa36 	bltu	r11,r7,2003ef8 <memcpy+0xc0>
 2003f10:	213fff04 	addi	r4,r4,-4
 2003f14:	2008d0ba 	srli	r4,r4,2
 2003f18:	318000cc 	andi	r6,r6,3
 2003f1c:	21000044 	addi	r4,r4,1
 2003f20:	2109883a 	add	r4,r4,r4
 2003f24:	2109883a 	add	r4,r4,r4
 2003f28:	1907883a 	add	r3,r3,r4
 2003f2c:	290b883a 	add	r5,r5,r4
 2003f30:	30000626 	beq	r6,zero,2003f4c <memcpy+0x114>
 2003f34:	198d883a 	add	r6,r3,r6
 2003f38:	29c00003 	ldbu	r7,0(r5)
 2003f3c:	18c00044 	addi	r3,r3,1
 2003f40:	29400044 	addi	r5,r5,1
 2003f44:	19ffffc5 	stb	r7,-1(r3)
 2003f48:	19bffb1e 	bne	r3,r6,2003f38 <memcpy+0x100>
 2003f4c:	dc000017 	ldw	r16,0(sp)
 2003f50:	dec00104 	addi	sp,sp,4
 2003f54:	f800283a 	ret
 2003f58:	2007883a 	mov	r3,r4
 2003f5c:	003ff406 	br	2003f30 <memcpy+0xf8>
 2003f60:	2007883a 	mov	r3,r4
 2003f64:	003ff306 	br	2003f34 <memcpy+0xfc>
 2003f68:	200d883a 	mov	r6,r4
 2003f6c:	003ff006 	br	2003f30 <memcpy+0xf8>

02003f70 <memset>:
 2003f70:	20c000cc 	andi	r3,r4,3
 2003f74:	2005883a 	mov	r2,r4
 2003f78:	18004326 	beq	r3,zero,2004088 <memset+0x118>
 2003f7c:	31ffffc4 	addi	r7,r6,-1
 2003f80:	30004026 	beq	r6,zero,2004084 <memset+0x114>
 2003f84:	2813883a 	mov	r9,r5
 2003f88:	200d883a 	mov	r6,r4
 2003f8c:	2007883a 	mov	r3,r4
 2003f90:	00000406 	br	2003fa4 <memset+0x34>
 2003f94:	3a3fffc4 	addi	r8,r7,-1
 2003f98:	31800044 	addi	r6,r6,1
 2003f9c:	38003926 	beq	r7,zero,2004084 <memset+0x114>
 2003fa0:	400f883a 	mov	r7,r8
 2003fa4:	18c00044 	addi	r3,r3,1
 2003fa8:	32400005 	stb	r9,0(r6)
 2003fac:	1a0000cc 	andi	r8,r3,3
 2003fb0:	403ff81e 	bne	r8,zero,2003f94 <memset+0x24>
 2003fb4:	010000c4 	movi	r4,3
 2003fb8:	21c02d2e 	bgeu	r4,r7,2004070 <memset+0x100>
 2003fbc:	29803fcc 	andi	r6,r5,255
 2003fc0:	3008923a 	slli	r4,r6,8
 2003fc4:	218cb03a 	or	r6,r4,r6
 2003fc8:	3008943a 	slli	r4,r6,16
 2003fcc:	218cb03a 	or	r6,r4,r6
 2003fd0:	010003c4 	movi	r4,15
 2003fd4:	21c0182e 	bgeu	r4,r7,2004038 <memset+0xc8>
 2003fd8:	3b3ffc04 	addi	r12,r7,-16
 2003fdc:	6018d13a 	srli	r12,r12,4
 2003fe0:	1a000104 	addi	r8,r3,4
 2003fe4:	1ac00204 	addi	r11,r3,8
 2003fe8:	6008913a 	slli	r4,r12,4
 2003fec:	1a800304 	addi	r10,r3,12
 2003ff0:	1813883a 	mov	r9,r3
 2003ff4:	21000504 	addi	r4,r4,20
 2003ff8:	1909883a 	add	r4,r3,r4
 2003ffc:	49800015 	stw	r6,0(r9)
 2004000:	41800015 	stw	r6,0(r8)
 2004004:	59800015 	stw	r6,0(r11)
 2004008:	51800015 	stw	r6,0(r10)
 200400c:	42000404 	addi	r8,r8,16
 2004010:	4a400404 	addi	r9,r9,16
 2004014:	5ac00404 	addi	r11,r11,16
 2004018:	52800404 	addi	r10,r10,16
 200401c:	413ff71e 	bne	r8,r4,2003ffc <memset+0x8c>
 2004020:	63000044 	addi	r12,r12,1
 2004024:	6018913a 	slli	r12,r12,4
 2004028:	39c003cc 	andi	r7,r7,15
 200402c:	010000c4 	movi	r4,3
 2004030:	1b07883a 	add	r3,r3,r12
 2004034:	21c00e2e 	bgeu	r4,r7,2004070 <memset+0x100>
 2004038:	1813883a 	mov	r9,r3
 200403c:	3811883a 	mov	r8,r7
 2004040:	010000c4 	movi	r4,3
 2004044:	49800015 	stw	r6,0(r9)
 2004048:	423fff04 	addi	r8,r8,-4
 200404c:	4a400104 	addi	r9,r9,4
 2004050:	223ffc36 	bltu	r4,r8,2004044 <memset+0xd4>
 2004054:	393fff04 	addi	r4,r7,-4
 2004058:	2008d0ba 	srli	r4,r4,2
 200405c:	39c000cc 	andi	r7,r7,3
 2004060:	21000044 	addi	r4,r4,1
 2004064:	2109883a 	add	r4,r4,r4
 2004068:	2109883a 	add	r4,r4,r4
 200406c:	1907883a 	add	r3,r3,r4
 2004070:	38000426 	beq	r7,zero,2004084 <memset+0x114>
 2004074:	19cf883a 	add	r7,r3,r7
 2004078:	19400005 	stb	r5,0(r3)
 200407c:	18c00044 	addi	r3,r3,1
 2004080:	19fffd1e 	bne	r3,r7,2004078 <memset+0x108>
 2004084:	f800283a 	ret
 2004088:	2007883a 	mov	r3,r4
 200408c:	300f883a 	mov	r7,r6
 2004090:	003fc806 	br	2003fb4 <memset+0x44>

02004094 <_printf_r>:
 2004094:	defffd04 	addi	sp,sp,-12
 2004098:	dfc00015 	stw	ra,0(sp)
 200409c:	d9800115 	stw	r6,4(sp)
 20040a0:	d9c00215 	stw	r7,8(sp)
 20040a4:	280d883a 	mov	r6,r5
 20040a8:	21400217 	ldw	r5,8(r4)
 20040ac:	d9c00104 	addi	r7,sp,4
 20040b0:	20044880 	call	2004488 <___vfprintf_internal_r>
 20040b4:	dfc00017 	ldw	ra,0(sp)
 20040b8:	dec00304 	addi	sp,sp,12
 20040bc:	f800283a 	ret

020040c0 <printf>:
 20040c0:	defffc04 	addi	sp,sp,-16
 20040c4:	dfc00015 	stw	ra,0(sp)
 20040c8:	d9400115 	stw	r5,4(sp)
 20040cc:	d9800215 	stw	r6,8(sp)
 20040d0:	d9c00315 	stw	r7,12(sp)
 20040d4:	008080b4 	movhi	r2,514
 20040d8:	10aa6704 	addi	r2,r2,-22116
 20040dc:	10800017 	ldw	r2,0(r2)
 20040e0:	200b883a 	mov	r5,r4
 20040e4:	d9800104 	addi	r6,sp,4
 20040e8:	11000217 	ldw	r4,8(r2)
 20040ec:	20064e00 	call	20064e0 <__vfprintf_internal>
 20040f0:	dfc00017 	ldw	ra,0(sp)
 20040f4:	dec00404 	addi	sp,sp,16
 20040f8:	f800283a 	ret

020040fc <_putc_r>:
 20040fc:	defffc04 	addi	sp,sp,-16
 2004100:	dc000215 	stw	r16,8(sp)
 2004104:	dfc00315 	stw	ra,12(sp)
 2004108:	2021883a 	mov	r16,r4
 200410c:	20000226 	beq	r4,zero,2004118 <_putc_r+0x1c>
 2004110:	20800e17 	ldw	r2,56(r4)
 2004114:	10001b26 	beq	r2,zero,2004184 <_putc_r+0x88>
 2004118:	30800217 	ldw	r2,8(r6)
 200411c:	10bfffc4 	addi	r2,r2,-1
 2004120:	30800215 	stw	r2,8(r6)
 2004124:	10000a16 	blt	r2,zero,2004150 <_putc_r+0x54>
 2004128:	30800017 	ldw	r2,0(r6)
 200412c:	11400005 	stb	r5,0(r2)
 2004130:	30800017 	ldw	r2,0(r6)
 2004134:	10c00044 	addi	r3,r2,1
 2004138:	30c00015 	stw	r3,0(r6)
 200413c:	10800003 	ldbu	r2,0(r2)
 2004140:	dfc00317 	ldw	ra,12(sp)
 2004144:	dc000217 	ldw	r16,8(sp)
 2004148:	dec00404 	addi	sp,sp,16
 200414c:	f800283a 	ret
 2004150:	30c00617 	ldw	r3,24(r6)
 2004154:	10c00616 	blt	r2,r3,2004170 <_putc_r+0x74>
 2004158:	30800017 	ldw	r2,0(r6)
 200415c:	00c00284 	movi	r3,10
 2004160:	11400005 	stb	r5,0(r2)
 2004164:	30800017 	ldw	r2,0(r6)
 2004168:	11400003 	ldbu	r5,0(r2)
 200416c:	28fff11e 	bne	r5,r3,2004134 <_putc_r+0x38>
 2004170:	8009883a 	mov	r4,r16
 2004174:	dfc00317 	ldw	ra,12(sp)
 2004178:	dc000217 	ldw	r16,8(sp)
 200417c:	dec00404 	addi	sp,sp,16
 2004180:	20065c01 	jmpi	20065c0 <__swbuf_r>
 2004184:	d9400015 	stw	r5,0(sp)
 2004188:	d9800115 	stw	r6,4(sp)
 200418c:	20087ac0 	call	20087ac <__sinit>
 2004190:	d9800117 	ldw	r6,4(sp)
 2004194:	d9400017 	ldw	r5,0(sp)
 2004198:	003fdf06 	br	2004118 <_putc_r+0x1c>

0200419c <putc>:
 200419c:	008080b4 	movhi	r2,514
 20041a0:	defffc04 	addi	sp,sp,-16
 20041a4:	10aa6704 	addi	r2,r2,-22116
 20041a8:	dc400115 	stw	r17,4(sp)
 20041ac:	14400017 	ldw	r17,0(r2)
 20041b0:	dc800215 	stw	r18,8(sp)
 20041b4:	dc000015 	stw	r16,0(sp)
 20041b8:	dfc00315 	stw	ra,12(sp)
 20041bc:	2025883a 	mov	r18,r4
 20041c0:	2821883a 	mov	r16,r5
 20041c4:	88000226 	beq	r17,zero,20041d0 <putc+0x34>
 20041c8:	88800e17 	ldw	r2,56(r17)
 20041cc:	10001a26 	beq	r2,zero,2004238 <putc+0x9c>
 20041d0:	80800217 	ldw	r2,8(r16)
 20041d4:	10bfffc4 	addi	r2,r2,-1
 20041d8:	80800215 	stw	r2,8(r16)
 20041dc:	10000c16 	blt	r2,zero,2004210 <putc+0x74>
 20041e0:	80800017 	ldw	r2,0(r16)
 20041e4:	14800005 	stb	r18,0(r2)
 20041e8:	80800017 	ldw	r2,0(r16)
 20041ec:	10c00044 	addi	r3,r2,1
 20041f0:	80c00015 	stw	r3,0(r16)
 20041f4:	10800003 	ldbu	r2,0(r2)
 20041f8:	dfc00317 	ldw	ra,12(sp)
 20041fc:	dc800217 	ldw	r18,8(sp)
 2004200:	dc400117 	ldw	r17,4(sp)
 2004204:	dc000017 	ldw	r16,0(sp)
 2004208:	dec00404 	addi	sp,sp,16
 200420c:	f800283a 	ret
 2004210:	80c00617 	ldw	r3,24(r16)
 2004214:	10c00b16 	blt	r2,r3,2004244 <putc+0xa8>
 2004218:	80800017 	ldw	r2,0(r16)
 200421c:	00c00284 	movi	r3,10
 2004220:	14800005 	stb	r18,0(r2)
 2004224:	80800017 	ldw	r2,0(r16)
 2004228:	11400003 	ldbu	r5,0(r2)
 200422c:	28ffef1e 	bne	r5,r3,20041ec <putc+0x50>
 2004230:	8809883a 	mov	r4,r17
 2004234:	00000506 	br	200424c <putc+0xb0>
 2004238:	8809883a 	mov	r4,r17
 200423c:	20087ac0 	call	20087ac <__sinit>
 2004240:	003fe306 	br	20041d0 <putc+0x34>
 2004244:	8809883a 	mov	r4,r17
 2004248:	900b883a 	mov	r5,r18
 200424c:	800d883a 	mov	r6,r16
 2004250:	dfc00317 	ldw	ra,12(sp)
 2004254:	dc800217 	ldw	r18,8(sp)
 2004258:	dc400117 	ldw	r17,4(sp)
 200425c:	dc000017 	ldw	r16,0(sp)
 2004260:	dec00404 	addi	sp,sp,16
 2004264:	20065c01 	jmpi	20065c0 <__swbuf_r>

02004268 <_puts_r>:
 2004268:	defff604 	addi	sp,sp,-40
 200426c:	dc000715 	stw	r16,28(sp)
 2004270:	2021883a 	mov	r16,r4
 2004274:	2809883a 	mov	r4,r5
 2004278:	dc400815 	stw	r17,32(sp)
 200427c:	dfc00915 	stw	ra,36(sp)
 2004280:	2823883a 	mov	r17,r5
 2004284:	20043a00 	call	20043a0 <strlen>
 2004288:	81400217 	ldw	r5,8(r16)
 200428c:	11000044 	addi	r4,r2,1
 2004290:	d8800115 	stw	r2,4(sp)
 2004294:	008080b4 	movhi	r2,514
 2004298:	2980030b 	ldhu	r6,12(r5)
 200429c:	10a2b904 	addi	r2,r2,-29980
 20042a0:	d8800215 	stw	r2,8(sp)
 20042a4:	00800044 	movi	r2,1
 20042a8:	d8800315 	stw	r2,12(sp)
 20042ac:	00800084 	movi	r2,2
 20042b0:	d8800515 	stw	r2,20(sp)
 20042b4:	dc400015 	stw	r17,0(sp)
 20042b8:	d9000615 	stw	r4,24(sp)
 20042bc:	dec00415 	stw	sp,16(sp)
 20042c0:	3088000c 	andi	r2,r6,8192
 20042c4:	1000061e 	bne	r2,zero,20042e0 <_puts_r+0x78>
 20042c8:	29001917 	ldw	r4,100(r5)
 20042cc:	00b7ffc4 	movi	r2,-8193
 20042d0:	31880014 	ori	r6,r6,8192
 20042d4:	2084703a 	and	r2,r4,r2
 20042d8:	2980030d 	sth	r6,12(r5)
 20042dc:	28801915 	stw	r2,100(r5)
 20042e0:	8009883a 	mov	r4,r16
 20042e4:	d9800404 	addi	r6,sp,16
 20042e8:	2008c100 	call	2008c10 <__sfvwrite_r>
 20042ec:	1000061e 	bne	r2,zero,2004308 <_puts_r+0xa0>
 20042f0:	00800284 	movi	r2,10
 20042f4:	dfc00917 	ldw	ra,36(sp)
 20042f8:	dc400817 	ldw	r17,32(sp)
 20042fc:	dc000717 	ldw	r16,28(sp)
 2004300:	dec00a04 	addi	sp,sp,40
 2004304:	f800283a 	ret
 2004308:	00bfffc4 	movi	r2,-1
 200430c:	003ff906 	br	20042f4 <_puts_r+0x8c>

02004310 <puts>:
 2004310:	008080b4 	movhi	r2,514
 2004314:	10aa6704 	addi	r2,r2,-22116
 2004318:	200b883a 	mov	r5,r4
 200431c:	11000017 	ldw	r4,0(r2)
 2004320:	20042681 	jmpi	2004268 <_puts_r>

02004324 <srand>:
 2004324:	008080b4 	movhi	r2,514
 2004328:	10aa6704 	addi	r2,r2,-22116
 200432c:	10800017 	ldw	r2,0(r2)
 2004330:	11002915 	stw	r4,164(r2)
 2004334:	10002a15 	stw	zero,168(r2)
 2004338:	f800283a 	ret

0200433c <rand>:
 200433c:	008080b4 	movhi	r2,514
 2004340:	defffe04 	addi	sp,sp,-8
 2004344:	10aa6704 	addi	r2,r2,-22116
 2004348:	dc000015 	stw	r16,0(sp)
 200434c:	14000017 	ldw	r16,0(r2)
 2004350:	dfc00115 	stw	ra,4(sp)
 2004354:	01932574 	movhi	r6,19605
 2004358:	81002917 	ldw	r4,164(r16)
 200435c:	81402a17 	ldw	r5,168(r16)
 2004360:	01d614b4 	movhi	r7,22610
 2004364:	319fcb44 	addi	r6,r6,32557
 2004368:	39fd0b44 	addi	r7,r7,-3027
 200436c:	200d4480 	call	200d448 <__muldi3>
 2004370:	11000044 	addi	r4,r2,1
 2004374:	2085803a 	cmpltu	r2,r4,r2
 2004378:	10c7883a 	add	r3,r2,r3
 200437c:	00a00034 	movhi	r2,32768
 2004380:	10bfffc4 	addi	r2,r2,-1
 2004384:	1884703a 	and	r2,r3,r2
 2004388:	81002915 	stw	r4,164(r16)
 200438c:	80c02a15 	stw	r3,168(r16)
 2004390:	dfc00117 	ldw	ra,4(sp)
 2004394:	dc000017 	ldw	r16,0(sp)
 2004398:	dec00204 	addi	sp,sp,8
 200439c:	f800283a 	ret

020043a0 <strlen>:
 20043a0:	208000cc 	andi	r2,r4,3
 20043a4:	10002026 	beq	r2,zero,2004428 <strlen+0x88>
 20043a8:	20800007 	ldb	r2,0(r4)
 20043ac:	10002026 	beq	r2,zero,2004430 <strlen+0x90>
 20043b0:	2005883a 	mov	r2,r4
 20043b4:	00000206 	br	20043c0 <strlen+0x20>
 20043b8:	10c00007 	ldb	r3,0(r2)
 20043bc:	18001826 	beq	r3,zero,2004420 <strlen+0x80>
 20043c0:	10800044 	addi	r2,r2,1
 20043c4:	10c000cc 	andi	r3,r2,3
 20043c8:	183ffb1e 	bne	r3,zero,20043b8 <strlen+0x18>
 20043cc:	10c00017 	ldw	r3,0(r2)
 20043d0:	01ffbff4 	movhi	r7,65279
 20043d4:	39ffbfc4 	addi	r7,r7,-257
 20043d8:	00ca303a 	nor	r5,zero,r3
 20043dc:	01a02074 	movhi	r6,32897
 20043e0:	19c7883a 	add	r3,r3,r7
 20043e4:	31a02004 	addi	r6,r6,-32640
 20043e8:	1946703a 	and	r3,r3,r5
 20043ec:	1986703a 	and	r3,r3,r6
 20043f0:	1800091e 	bne	r3,zero,2004418 <strlen+0x78>
 20043f4:	10800104 	addi	r2,r2,4
 20043f8:	10c00017 	ldw	r3,0(r2)
 20043fc:	19cb883a 	add	r5,r3,r7
 2004400:	00c6303a 	nor	r3,zero,r3
 2004404:	28c6703a 	and	r3,r5,r3
 2004408:	1986703a 	and	r3,r3,r6
 200440c:	183ff926 	beq	r3,zero,20043f4 <strlen+0x54>
 2004410:	00000106 	br	2004418 <strlen+0x78>
 2004414:	10800044 	addi	r2,r2,1
 2004418:	10c00007 	ldb	r3,0(r2)
 200441c:	183ffd1e 	bne	r3,zero,2004414 <strlen+0x74>
 2004420:	1105c83a 	sub	r2,r2,r4
 2004424:	f800283a 	ret
 2004428:	2005883a 	mov	r2,r4
 200442c:	003fe706 	br	20043cc <strlen+0x2c>
 2004430:	0005883a 	mov	r2,zero
 2004434:	f800283a 	ret

02004438 <time>:
 2004438:	008080b4 	movhi	r2,514
 200443c:	defffc04 	addi	sp,sp,-16
 2004440:	10aa6704 	addi	r2,r2,-22116
 2004444:	dc000215 	stw	r16,8(sp)
 2004448:	2021883a 	mov	r16,r4
 200444c:	11000017 	ldw	r4,0(r2)
 2004450:	d80b883a 	mov	r5,sp
 2004454:	000d883a 	mov	r6,zero
 2004458:	dfc00315 	stw	ra,12(sp)
 200445c:	20092640 	call	2009264 <_gettimeofday_r>
 2004460:	10000716 	blt	r2,zero,2004480 <time+0x48>
 2004464:	d8800017 	ldw	r2,0(sp)
 2004468:	80000126 	beq	r16,zero,2004470 <time+0x38>
 200446c:	80800015 	stw	r2,0(r16)
 2004470:	dfc00317 	ldw	ra,12(sp)
 2004474:	dc000217 	ldw	r16,8(sp)
 2004478:	dec00404 	addi	sp,sp,16
 200447c:	f800283a 	ret
 2004480:	00bfffc4 	movi	r2,-1
 2004484:	003ffa06 	br	2004470 <time+0x38>

02004488 <___vfprintf_internal_r>:
 2004488:	deffb604 	addi	sp,sp,-296
 200448c:	dfc04915 	stw	ra,292(sp)
 2004490:	ddc04715 	stw	r23,284(sp)
 2004494:	dd804615 	stw	r22,280(sp)
 2004498:	202f883a 	mov	r23,r4
 200449c:	282d883a 	mov	r22,r5
 20044a0:	d9802a15 	stw	r6,168(sp)
 20044a4:	d9c02d15 	stw	r7,180(sp)
 20044a8:	df004815 	stw	fp,288(sp)
 20044ac:	dd404515 	stw	r21,276(sp)
 20044b0:	dd004415 	stw	r20,272(sp)
 20044b4:	dcc04315 	stw	r19,268(sp)
 20044b8:	dc804215 	stw	r18,264(sp)
 20044bc:	dc404115 	stw	r17,260(sp)
 20044c0:	dc004015 	stw	r16,256(sp)
 20044c4:	20093680 	call	2009368 <_localeconv_r>
 20044c8:	10800017 	ldw	r2,0(r2)
 20044cc:	1009883a 	mov	r4,r2
 20044d0:	d8803515 	stw	r2,212(sp)
 20044d4:	20043a00 	call	20043a0 <strlen>
 20044d8:	d8803815 	stw	r2,224(sp)
 20044dc:	b8000226 	beq	r23,zero,20044e8 <___vfprintf_internal_r+0x60>
 20044e0:	b8800e17 	ldw	r2,56(r23)
 20044e4:	1000e226 	beq	r2,zero,2004870 <___vfprintf_internal_r+0x3e8>
 20044e8:	b080030b 	ldhu	r2,12(r22)
 20044ec:	10c8000c 	andi	r3,r2,8192
 20044f0:	1800061e 	bne	r3,zero,200450c <___vfprintf_internal_r+0x84>
 20044f4:	b1001917 	ldw	r4,100(r22)
 20044f8:	00f7ffc4 	movi	r3,-8193
 20044fc:	10880014 	ori	r2,r2,8192
 2004500:	20c6703a 	and	r3,r4,r3
 2004504:	b080030d 	sth	r2,12(r22)
 2004508:	b0c01915 	stw	r3,100(r22)
 200450c:	10c0020c 	andi	r3,r2,8
 2004510:	1800a826 	beq	r3,zero,20047b4 <___vfprintf_internal_r+0x32c>
 2004514:	b0c00417 	ldw	r3,16(r22)
 2004518:	1800a626 	beq	r3,zero,20047b4 <___vfprintf_internal_r+0x32c>
 200451c:	1080068c 	andi	r2,r2,26
 2004520:	00c00284 	movi	r3,10
 2004524:	10c0ab26 	beq	r2,r3,20047d4 <___vfprintf_internal_r+0x34c>
 2004528:	d8801e04 	addi	r2,sp,120
 200452c:	d8c01dc4 	addi	r3,sp,119
 2004530:	d9000404 	addi	r4,sp,16
 2004534:	050080b4 	movhi	r20,514
 2004538:	10cbc83a 	sub	r5,r2,r3
 200453c:	a522ca84 	addi	r20,r20,-29910
 2004540:	d8802815 	stw	r2,160(sp)
 2004544:	d8c02915 	stw	r3,164(sp)
 2004548:	d9001e15 	stw	r4,120(sp)
 200454c:	d8002015 	stw	zero,128(sp)
 2004550:	d8001f15 	stw	zero,124(sp)
 2004554:	d8003315 	stw	zero,204(sp)
 2004558:	d8003715 	stw	zero,220(sp)
 200455c:	d8003915 	stw	zero,228(sp)
 2004560:	2011883a 	mov	r8,r4
 2004564:	d8003b15 	stw	zero,236(sp)
 2004568:	d8003a15 	stw	zero,232(sp)
 200456c:	d8002f15 	stw	zero,188(sp)
 2004570:	d9403c15 	stw	r5,240(sp)
 2004574:	d8c02a17 	ldw	r3,168(sp)
 2004578:	18800007 	ldb	r2,0(r3)
 200457c:	1001f226 	beq	r2,zero,2004d48 <___vfprintf_internal_r+0x8c0>
 2004580:	00c00944 	movi	r3,37
 2004584:	dc002a17 	ldw	r16,168(sp)
 2004588:	10c0021e 	bne	r2,r3,2004594 <___vfprintf_internal_r+0x10c>
 200458c:	00001606 	br	20045e8 <___vfprintf_internal_r+0x160>
 2004590:	10c08526 	beq	r2,r3,20047a8 <___vfprintf_internal_r+0x320>
 2004594:	84000044 	addi	r16,r16,1
 2004598:	80800007 	ldb	r2,0(r16)
 200459c:	103ffc1e 	bne	r2,zero,2004590 <___vfprintf_internal_r+0x108>
 20045a0:	d9002a17 	ldw	r4,168(sp)
 20045a4:	8123c83a 	sub	r17,r16,r4
 20045a8:	88000f26 	beq	r17,zero,20045e8 <___vfprintf_internal_r+0x160>
 20045ac:	d8802a17 	ldw	r2,168(sp)
 20045b0:	d8c02017 	ldw	r3,128(sp)
 20045b4:	44400115 	stw	r17,4(r8)
 20045b8:	40800015 	stw	r2,0(r8)
 20045bc:	d8801f17 	ldw	r2,124(sp)
 20045c0:	1c47883a 	add	r3,r3,r17
 20045c4:	d8c02015 	stw	r3,128(sp)
 20045c8:	10800044 	addi	r2,r2,1
 20045cc:	d8801f15 	stw	r2,124(sp)
 20045d0:	00c001c4 	movi	r3,7
 20045d4:	18809416 	blt	r3,r2,2004828 <___vfprintf_internal_r+0x3a0>
 20045d8:	42000204 	addi	r8,r8,8
 20045dc:	d8c02f17 	ldw	r3,188(sp)
 20045e0:	1c47883a 	add	r3,r3,r17
 20045e4:	d8c02f15 	stw	r3,188(sp)
 20045e8:	80800007 	ldb	r2,0(r16)
 20045ec:	10009526 	beq	r2,zero,2004844 <___vfprintf_internal_r+0x3bc>
 20045f0:	80800044 	addi	r2,r16,1
 20045f4:	84000047 	ldb	r16,1(r16)
 20045f8:	0027883a 	mov	r19,zero
 20045fc:	0039883a 	mov	fp,zero
 2004600:	dcc02b05 	stb	r19,172(sp)
 2004604:	d8002785 	stb	zero,158(sp)
 2004608:	027fffc4 	movi	r9,-1
 200460c:	d8002e15 	stw	zero,184(sp)
 2004610:	04401604 	movi	r17,88
 2004614:	04800244 	movi	r18,9
 2004618:	da002a15 	stw	r8,168(sp)
 200461c:	e027883a 	mov	r19,fp
 2004620:	17000044 	addi	fp,r2,1
 2004624:	80bff804 	addi	r2,r16,-32
 2004628:	8882ed36 	bltu	r17,r2,20051e0 <___vfprintf_internal_r+0xd58>
 200462c:	100490ba 	slli	r2,r2,2
 2004630:	01008034 	movhi	r4,512
 2004634:	21119104 	addi	r4,r4,17988
 2004638:	1105883a 	add	r2,r2,r4
 200463c:	10800017 	ldw	r2,0(r2)
 2004640:	1000683a 	jmp	r2
 2004644:	02005028 	cmpgeui	r8,zero,320
 2004648:	020051e0 	cmpeqi	r8,zero,327
 200464c:	020051e0 	cmpeqi	r8,zero,327
 2004650:	02005044 	movi	r8,321
 2004654:	020051e0 	cmpeqi	r8,zero,327
 2004658:	020051e0 	cmpeqi	r8,zero,327
 200465c:	020051e0 	cmpeqi	r8,zero,327
 2004660:	020051e0 	cmpeqi	r8,zero,327
 2004664:	020051e0 	cmpeqi	r8,zero,327
 2004668:	020051e0 	cmpeqi	r8,zero,327
 200466c:	02005054 	movui	r8,321
 2004670:	0200507c 	xorhi	r8,zero,321
 2004674:	020051e0 	cmpeqi	r8,zero,327
 2004678:	0200487c 	xorhi	r8,zero,289
 200467c:	0200488c 	andi	r8,zero,290
 2004680:	020051e0 	cmpeqi	r8,zero,327
 2004684:	020048dc 	xori	r8,zero,291
 2004688:	020048ec 	andhi	r8,zero,291
 200468c:	020048ec 	andhi	r8,zero,291
 2004690:	020048ec 	andhi	r8,zero,291
 2004694:	020048ec 	andhi	r8,zero,291
 2004698:	020048ec 	andhi	r8,zero,291
 200469c:	020048ec 	andhi	r8,zero,291
 20046a0:	020048ec 	andhi	r8,zero,291
 20046a4:	020048ec 	andhi	r8,zero,291
 20046a8:	020048ec 	andhi	r8,zero,291
 20046ac:	020051e0 	cmpeqi	r8,zero,327
 20046b0:	020051e0 	cmpeqi	r8,zero,327
 20046b4:	020051e0 	cmpeqi	r8,zero,327
 20046b8:	020051e0 	cmpeqi	r8,zero,327
 20046bc:	020051e0 	cmpeqi	r8,zero,327
 20046c0:	020051e0 	cmpeqi	r8,zero,327
 20046c4:	020051e0 	cmpeqi	r8,zero,327
 20046c8:	020051e0 	cmpeqi	r8,zero,327
 20046cc:	020051e0 	cmpeqi	r8,zero,327
 20046d0:	020051e0 	cmpeqi	r8,zero,327
 20046d4:	02004930 	cmpltui	r8,zero,292
 20046d8:	02004d50 	cmplti	r8,zero,309
 20046dc:	020051e0 	cmpeqi	r8,zero,327
 20046e0:	02004d50 	cmplti	r8,zero,309
 20046e4:	020051e0 	cmpeqi	r8,zero,327
 20046e8:	020051e0 	cmpeqi	r8,zero,327
 20046ec:	020051e0 	cmpeqi	r8,zero,327
 20046f0:	020051e0 	cmpeqi	r8,zero,327
 20046f4:	02004df8 	rdprs	r8,zero,311
 20046f8:	020051e0 	cmpeqi	r8,zero,327
 20046fc:	020051e0 	cmpeqi	r8,zero,327
 2004700:	02004e08 	cmpgei	r8,zero,312
 2004704:	020051e0 	cmpeqi	r8,zero,327
 2004708:	020051e0 	cmpeqi	r8,zero,327
 200470c:	020051e0 	cmpeqi	r8,zero,327
 2004710:	020051e0 	cmpeqi	r8,zero,327
 2004714:	020051e0 	cmpeqi	r8,zero,327
 2004718:	02004e48 	cmpgei	r8,zero,313
 200471c:	020051e0 	cmpeqi	r8,zero,327
 2004720:	020051e0 	cmpeqi	r8,zero,327
 2004724:	02004f74 	movhi	r8,317
 2004728:	020051e0 	cmpeqi	r8,zero,327
 200472c:	020051e0 	cmpeqi	r8,zero,327
 2004730:	020051e0 	cmpeqi	r8,zero,327
 2004734:	020051e0 	cmpeqi	r8,zero,327
 2004738:	020051e0 	cmpeqi	r8,zero,327
 200473c:	020051e0 	cmpeqi	r8,zero,327
 2004740:	020051e0 	cmpeqi	r8,zero,327
 2004744:	020051e0 	cmpeqi	r8,zero,327
 2004748:	020051e0 	cmpeqi	r8,zero,327
 200474c:	020051e0 	cmpeqi	r8,zero,327
 2004750:	02004fdc 	xori	r8,zero,319
 2004754:	02004ec8 	cmpgei	r8,zero,315
 2004758:	02004d50 	cmplti	r8,zero,309
 200475c:	02004d50 	cmplti	r8,zero,309
 2004760:	02004d50 	cmplti	r8,zero,309
 2004764:	02004f0c 	andi	r8,zero,316
 2004768:	02004ec8 	cmpgei	r8,zero,315
 200476c:	020051e0 	cmpeqi	r8,zero,327
 2004770:	020051e0 	cmpeqi	r8,zero,327
 2004774:	02004f1c 	xori	r8,zero,316
 2004778:	020051e0 	cmpeqi	r8,zero,327
 200477c:	02004f34 	movhi	r8,316
 2004780:	020051a4 	muli	r8,zero,326
 2004784:	02004e7c 	xorhi	r8,zero,313
 2004788:	02005158 	cmpnei	r8,zero,325
 200478c:	020051e0 	cmpeqi	r8,zero,327
 2004790:	02005090 	cmplti	r8,zero,322
 2004794:	020051e0 	cmpeqi	r8,zero,327
 2004798:	02005168 	cmpgeui	r8,zero,325
 200479c:	020051e0 	cmpeqi	r8,zero,327
 20047a0:	020051e0 	cmpeqi	r8,zero,327
 20047a4:	0200510c 	andi	r8,zero,324
 20047a8:	d9402a17 	ldw	r5,168(sp)
 20047ac:	8163c83a 	sub	r17,r16,r5
 20047b0:	003f7d06 	br	20045a8 <___vfprintf_internal_r+0x120>
 20047b4:	b809883a 	mov	r4,r23
 20047b8:	b00b883a 	mov	r5,r22
 20047bc:	20067140 	call	2006714 <__swsetup_r>
 20047c0:	10000c1e 	bne	r2,zero,20047f4 <___vfprintf_internal_r+0x36c>
 20047c4:	b080030b 	ldhu	r2,12(r22)
 20047c8:	00c00284 	movi	r3,10
 20047cc:	1080068c 	andi	r2,r2,26
 20047d0:	10ff551e 	bne	r2,r3,2004528 <___vfprintf_internal_r+0xa0>
 20047d4:	b080038f 	ldh	r2,14(r22)
 20047d8:	103f5316 	blt	r2,zero,2004528 <___vfprintf_internal_r+0xa0>
 20047dc:	d9802a17 	ldw	r6,168(sp)
 20047e0:	d9c02d17 	ldw	r7,180(sp)
 20047e4:	b809883a 	mov	r4,r23
 20047e8:	b00b883a 	mov	r5,r22
 20047ec:	20065040 	call	2006504 <__sbprintf>
 20047f0:	00000106 	br	20047f8 <___vfprintf_internal_r+0x370>
 20047f4:	00bfffc4 	movi	r2,-1
 20047f8:	dfc04917 	ldw	ra,292(sp)
 20047fc:	df004817 	ldw	fp,288(sp)
 2004800:	ddc04717 	ldw	r23,284(sp)
 2004804:	dd804617 	ldw	r22,280(sp)
 2004808:	dd404517 	ldw	r21,276(sp)
 200480c:	dd004417 	ldw	r20,272(sp)
 2004810:	dcc04317 	ldw	r19,268(sp)
 2004814:	dc804217 	ldw	r18,264(sp)
 2004818:	dc404117 	ldw	r17,260(sp)
 200481c:	dc004017 	ldw	r16,256(sp)
 2004820:	dec04a04 	addi	sp,sp,296
 2004824:	f800283a 	ret
 2004828:	b809883a 	mov	r4,r23
 200482c:	b00b883a 	mov	r5,r22
 2004830:	d9801e04 	addi	r6,sp,120
 2004834:	200b8a80 	call	200b8a8 <__sprint_r>
 2004838:	1000081e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200483c:	da000404 	addi	r8,sp,16
 2004840:	003f6606 	br	20045dc <___vfprintf_internal_r+0x154>
 2004844:	d8802017 	ldw	r2,128(sp)
 2004848:	10000426 	beq	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200484c:	b809883a 	mov	r4,r23
 2004850:	b00b883a 	mov	r5,r22
 2004854:	d9801e04 	addi	r6,sp,120
 2004858:	200b8a80 	call	200b8a8 <__sprint_r>
 200485c:	b080030b 	ldhu	r2,12(r22)
 2004860:	1080100c 	andi	r2,r2,64
 2004864:	103fe31e 	bne	r2,zero,20047f4 <___vfprintf_internal_r+0x36c>
 2004868:	d8802f17 	ldw	r2,188(sp)
 200486c:	003fe206 	br	20047f8 <___vfprintf_internal_r+0x370>
 2004870:	b809883a 	mov	r4,r23
 2004874:	20087ac0 	call	20087ac <__sinit>
 2004878:	003f1b06 	br	20044e8 <___vfprintf_internal_r+0x60>
 200487c:	e005883a 	mov	r2,fp
 2004880:	9cc00114 	ori	r19,r19,4
 2004884:	e4000007 	ldb	r16,0(fp)
 2004888:	003f6506 	br	2004620 <___vfprintf_internal_r+0x198>
 200488c:	e4000007 	ldb	r16,0(fp)
 2004890:	01000a84 	movi	r4,42
 2004894:	e0800044 	addi	r2,fp,1
 2004898:	8106ff26 	beq	r16,r4,2006498 <___vfprintf_internal_r+0x2010>
 200489c:	857ff404 	addi	r21,r16,-48
 20048a0:	1039883a 	mov	fp,r2
 20048a4:	0013883a 	mov	r9,zero
 20048a8:	957f5e36 	bltu	r18,r21,2004624 <___vfprintf_internal_r+0x19c>
 20048ac:	0009883a 	mov	r4,zero
 20048b0:	01400284 	movi	r5,10
 20048b4:	200e2dc0 	call	200e2dc <__mulsi3>
 20048b8:	e4000007 	ldb	r16,0(fp)
 20048bc:	a889883a 	add	r4,r21,r2
 20048c0:	e7000044 	addi	fp,fp,1
 20048c4:	857ff404 	addi	r21,r16,-48
 20048c8:	957ff92e 	bgeu	r18,r21,20048b0 <___vfprintf_internal_r+0x428>
 20048cc:	2013883a 	mov	r9,r4
 20048d0:	203f540e 	bge	r4,zero,2004624 <___vfprintf_internal_r+0x19c>
 20048d4:	027fffc4 	movi	r9,-1
 20048d8:	003f5206 	br	2004624 <___vfprintf_internal_r+0x19c>
 20048dc:	9cc02014 	ori	r19,r19,128
 20048e0:	e005883a 	mov	r2,fp
 20048e4:	e4000007 	ldb	r16,0(fp)
 20048e8:	003f4d06 	br	2004620 <___vfprintf_internal_r+0x198>
 20048ec:	857ff404 	addi	r21,r16,-48
 20048f0:	d8002e15 	stw	zero,184(sp)
 20048f4:	0009883a 	mov	r4,zero
 20048f8:	da402c15 	stw	r9,176(sp)
 20048fc:	e021883a 	mov	r16,fp
 2004900:	01400284 	movi	r5,10
 2004904:	200e2dc0 	call	200e2dc <__mulsi3>
 2004908:	81400007 	ldb	r5,0(r16)
 200490c:	1549883a 	add	r4,r2,r21
 2004910:	e7000044 	addi	fp,fp,1
 2004914:	2d7ff404 	addi	r21,r5,-48
 2004918:	e021883a 	mov	r16,fp
 200491c:	957ff82e 	bgeu	r18,r21,2004900 <___vfprintf_internal_r+0x478>
 2004920:	2821883a 	mov	r16,r5
 2004924:	d9002e15 	stw	r4,184(sp)
 2004928:	da402c17 	ldw	r9,176(sp)
 200492c:	003f3d06 	br	2004624 <___vfprintf_internal_r+0x19c>
 2004930:	da002a17 	ldw	r8,168(sp)
 2004934:	df002a15 	stw	fp,168(sp)
 2004938:	9839883a 	mov	fp,r19
 200493c:	dcc02b03 	ldbu	r19,172(sp)
 2004940:	e7000414 	ori	fp,fp,16
 2004944:	e080080c 	andi	r2,fp,32
 2004948:	dcc02785 	stb	r19,158(sp)
 200494c:	d8c02d17 	ldw	r3,180(sp)
 2004950:	10016526 	beq	r2,zero,2004ee8 <___vfprintf_internal_r+0xa60>
 2004954:	d9002d17 	ldw	r4,180(sp)
 2004958:	18800117 	ldw	r2,4(r3)
 200495c:	1c800017 	ldw	r18,0(r3)
 2004960:	21000204 	addi	r4,r4,8
 2004964:	d9002d15 	stw	r4,180(sp)
 2004968:	102b883a 	mov	r21,r2
 200496c:	10044516 	blt	r2,zero,2005a84 <___vfprintf_internal_r+0x15fc>
 2004970:	dcc02783 	ldbu	r19,158(sp)
 2004974:	da403215 	stw	r9,200(sp)
 2004978:	00800044 	movi	r2,1
 200497c:	9546b03a 	or	r3,r18,r21
 2004980:	48000216 	blt	r9,zero,200498c <___vfprintf_internal_r+0x504>
 2004984:	013fdfc4 	movi	r4,-129
 2004988:	e138703a 	and	fp,fp,r4
 200498c:	1802211e 	bne	r3,zero,2005214 <___vfprintf_internal_r+0xd8c>
 2004990:	48031326 	beq	r9,zero,20055e0 <___vfprintf_internal_r+0x1158>
 2004994:	10803fcc 	andi	r2,r2,255
 2004998:	00c00044 	movi	r3,1
 200499c:	10c24126 	beq	r2,r3,20052a4 <___vfprintf_internal_r+0xe1c>
 20049a0:	00c00084 	movi	r3,2
 20049a4:	10c33426 	beq	r2,r3,2005678 <___vfprintf_internal_r+0x11f0>
 20049a8:	d8c01e04 	addi	r3,sp,120
 20049ac:	9008d0fa 	srli	r4,r18,3
 20049b0:	a80a977a 	slli	r5,r21,29
 20049b4:	a82ad0fa 	srli	r21,r21,3
 20049b8:	948001cc 	andi	r18,r18,7
 20049bc:	90800c04 	addi	r2,r18,48
 20049c0:	18ffffc4 	addi	r3,r3,-1
 20049c4:	2924b03a 	or	r18,r5,r4
 20049c8:	18800005 	stb	r2,0(r3)
 20049cc:	9548b03a 	or	r4,r18,r21
 20049d0:	203ff61e 	bne	r4,zero,20049ac <___vfprintf_internal_r+0x524>
 20049d4:	e100004c 	andi	r4,fp,1
 20049d8:	d8c03115 	stw	r3,196(sp)
 20049dc:	2003961e 	bne	r4,zero,2005838 <___vfprintf_internal_r+0x13b0>
 20049e0:	d8802817 	ldw	r2,160(sp)
 20049e4:	10e3c83a 	sub	r17,r2,r3
 20049e8:	8805883a 	mov	r2,r17
 20049ec:	8a40010e 	bge	r17,r9,20049f4 <___vfprintf_internal_r+0x56c>
 20049f0:	4805883a 	mov	r2,r9
 20049f4:	d8802b15 	stw	r2,172(sp)
 20049f8:	d8003415 	stw	zero,208(sp)
 20049fc:	98803fcc 	andi	r2,r19,255
 2004a00:	1080201c 	xori	r2,r2,128
 2004a04:	10bfe004 	addi	r2,r2,-128
 2004a08:	10000326 	beq	r2,zero,2004a18 <___vfprintf_internal_r+0x590>
 2004a0c:	d8c02b17 	ldw	r3,172(sp)
 2004a10:	18c00044 	addi	r3,r3,1
 2004a14:	d8c02b15 	stw	r3,172(sp)
 2004a18:	e0c0008c 	andi	r3,fp,2
 2004a1c:	d8c02c15 	stw	r3,176(sp)
 2004a20:	18000326 	beq	r3,zero,2004a30 <___vfprintf_internal_r+0x5a8>
 2004a24:	d8c02b17 	ldw	r3,172(sp)
 2004a28:	18c00084 	addi	r3,r3,2
 2004a2c:	d8c02b15 	stw	r3,172(sp)
 2004a30:	e0c0210c 	andi	r3,fp,132
 2004a34:	d8c03015 	stw	r3,192(sp)
 2004a38:	1801f41e 	bne	r3,zero,200520c <___vfprintf_internal_r+0xd84>
 2004a3c:	d9002e17 	ldw	r4,184(sp)
 2004a40:	d8c02b17 	ldw	r3,172(sp)
 2004a44:	20ebc83a 	sub	r21,r4,r3
 2004a48:	0541f00e 	bge	zero,r21,200520c <___vfprintf_internal_r+0xd84>
 2004a4c:	02400404 	movi	r9,16
 2004a50:	d8c02017 	ldw	r3,128(sp)
 2004a54:	d8801f17 	ldw	r2,124(sp)
 2004a58:	4d45710e 	bge	r9,r21,2006020 <___vfprintf_internal_r+0x1b98>
 2004a5c:	014080b4 	movhi	r5,514
 2004a60:	2962ce84 	addi	r5,r5,-29894
 2004a64:	d9403615 	stw	r5,216(sp)
 2004a68:	4827883a 	mov	r19,r9
 2004a6c:	048001c4 	movi	r18,7
 2004a70:	00000306 	br	2004a80 <___vfprintf_internal_r+0x5f8>
 2004a74:	ad7ffc04 	addi	r21,r21,-16
 2004a78:	42000204 	addi	r8,r8,8
 2004a7c:	9d40130e 	bge	r19,r21,2004acc <___vfprintf_internal_r+0x644>
 2004a80:	010080b4 	movhi	r4,514
 2004a84:	18c00404 	addi	r3,r3,16
 2004a88:	10800044 	addi	r2,r2,1
 2004a8c:	2122ce84 	addi	r4,r4,-29894
 2004a90:	41000015 	stw	r4,0(r8)
 2004a94:	44c00115 	stw	r19,4(r8)
 2004a98:	d8c02015 	stw	r3,128(sp)
 2004a9c:	d8801f15 	stw	r2,124(sp)
 2004aa0:	90bff40e 	bge	r18,r2,2004a74 <___vfprintf_internal_r+0x5ec>
 2004aa4:	b809883a 	mov	r4,r23
 2004aa8:	b00b883a 	mov	r5,r22
 2004aac:	d9801e04 	addi	r6,sp,120
 2004ab0:	200b8a80 	call	200b8a8 <__sprint_r>
 2004ab4:	103f691e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2004ab8:	ad7ffc04 	addi	r21,r21,-16
 2004abc:	d8c02017 	ldw	r3,128(sp)
 2004ac0:	d8801f17 	ldw	r2,124(sp)
 2004ac4:	da000404 	addi	r8,sp,16
 2004ac8:	9d7fed16 	blt	r19,r21,2004a80 <___vfprintf_internal_r+0x5f8>
 2004acc:	d9403617 	ldw	r5,216(sp)
 2004ad0:	a8c7883a 	add	r3,r21,r3
 2004ad4:	10800044 	addi	r2,r2,1
 2004ad8:	41400015 	stw	r5,0(r8)
 2004adc:	45400115 	stw	r21,4(r8)
 2004ae0:	d8c02015 	stw	r3,128(sp)
 2004ae4:	d8801f15 	stw	r2,124(sp)
 2004ae8:	010001c4 	movi	r4,7
 2004aec:	20832716 	blt	r4,r2,200578c <___vfprintf_internal_r+0x1304>
 2004af0:	d8802787 	ldb	r2,158(sp)
 2004af4:	42000204 	addi	r8,r8,8
 2004af8:	10000c26 	beq	r2,zero,2004b2c <___vfprintf_internal_r+0x6a4>
 2004afc:	d8801f17 	ldw	r2,124(sp)
 2004b00:	d9002784 	addi	r4,sp,158
 2004b04:	18c00044 	addi	r3,r3,1
 2004b08:	10800044 	addi	r2,r2,1
 2004b0c:	41000015 	stw	r4,0(r8)
 2004b10:	01000044 	movi	r4,1
 2004b14:	41000115 	stw	r4,4(r8)
 2004b18:	d8c02015 	stw	r3,128(sp)
 2004b1c:	d8801f15 	stw	r2,124(sp)
 2004b20:	010001c4 	movi	r4,7
 2004b24:	2082c016 	blt	r4,r2,2005628 <___vfprintf_internal_r+0x11a0>
 2004b28:	42000204 	addi	r8,r8,8
 2004b2c:	d8802c17 	ldw	r2,176(sp)
 2004b30:	10000c26 	beq	r2,zero,2004b64 <___vfprintf_internal_r+0x6dc>
 2004b34:	d8801f17 	ldw	r2,124(sp)
 2004b38:	d9002704 	addi	r4,sp,156
 2004b3c:	18c00084 	addi	r3,r3,2
 2004b40:	10800044 	addi	r2,r2,1
 2004b44:	41000015 	stw	r4,0(r8)
 2004b48:	01000084 	movi	r4,2
 2004b4c:	41000115 	stw	r4,4(r8)
 2004b50:	d8c02015 	stw	r3,128(sp)
 2004b54:	d8801f15 	stw	r2,124(sp)
 2004b58:	010001c4 	movi	r4,7
 2004b5c:	2082ba16 	blt	r4,r2,2005648 <___vfprintf_internal_r+0x11c0>
 2004b60:	42000204 	addi	r8,r8,8
 2004b64:	d9003017 	ldw	r4,192(sp)
 2004b68:	00802004 	movi	r2,128
 2004b6c:	20821c26 	beq	r4,r2,20053e0 <___vfprintf_internal_r+0xf58>
 2004b70:	d9403217 	ldw	r5,200(sp)
 2004b74:	2c67c83a 	sub	r19,r5,r17
 2004b78:	04c0260e 	bge	zero,r19,2004c14 <___vfprintf_internal_r+0x78c>
 2004b7c:	05400404 	movi	r21,16
 2004b80:	d8801f17 	ldw	r2,124(sp)
 2004b84:	acc46e0e 	bge	r21,r19,2005d40 <___vfprintf_internal_r+0x18b8>
 2004b88:	014080b4 	movhi	r5,514
 2004b8c:	2962ca84 	addi	r5,r5,-29910
 2004b90:	d9402c15 	stw	r5,176(sp)
 2004b94:	048001c4 	movi	r18,7
 2004b98:	00000306 	br	2004ba8 <___vfprintf_internal_r+0x720>
 2004b9c:	9cfffc04 	addi	r19,r19,-16
 2004ba0:	42000204 	addi	r8,r8,8
 2004ba4:	acc0110e 	bge	r21,r19,2004bec <___vfprintf_internal_r+0x764>
 2004ba8:	18c00404 	addi	r3,r3,16
 2004bac:	10800044 	addi	r2,r2,1
 2004bb0:	45000015 	stw	r20,0(r8)
 2004bb4:	45400115 	stw	r21,4(r8)
 2004bb8:	d8c02015 	stw	r3,128(sp)
 2004bbc:	d8801f15 	stw	r2,124(sp)
 2004bc0:	90bff60e 	bge	r18,r2,2004b9c <___vfprintf_internal_r+0x714>
 2004bc4:	b809883a 	mov	r4,r23
 2004bc8:	b00b883a 	mov	r5,r22
 2004bcc:	d9801e04 	addi	r6,sp,120
 2004bd0:	200b8a80 	call	200b8a8 <__sprint_r>
 2004bd4:	103f211e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2004bd8:	9cfffc04 	addi	r19,r19,-16
 2004bdc:	d8c02017 	ldw	r3,128(sp)
 2004be0:	d8801f17 	ldw	r2,124(sp)
 2004be4:	da000404 	addi	r8,sp,16
 2004be8:	acffef16 	blt	r21,r19,2004ba8 <___vfprintf_internal_r+0x720>
 2004bec:	d9002c17 	ldw	r4,176(sp)
 2004bf0:	1cc7883a 	add	r3,r3,r19
 2004bf4:	10800044 	addi	r2,r2,1
 2004bf8:	41000015 	stw	r4,0(r8)
 2004bfc:	44c00115 	stw	r19,4(r8)
 2004c00:	d8c02015 	stw	r3,128(sp)
 2004c04:	d8801f15 	stw	r2,124(sp)
 2004c08:	010001c4 	movi	r4,7
 2004c0c:	20827e16 	blt	r4,r2,2005608 <___vfprintf_internal_r+0x1180>
 2004c10:	42000204 	addi	r8,r8,8
 2004c14:	e080400c 	andi	r2,fp,256
 2004c18:	1001a81e 	bne	r2,zero,20052bc <___vfprintf_internal_r+0xe34>
 2004c1c:	d8801f17 	ldw	r2,124(sp)
 2004c20:	d9403117 	ldw	r5,196(sp)
 2004c24:	1c47883a 	add	r3,r3,r17
 2004c28:	10800044 	addi	r2,r2,1
 2004c2c:	41400015 	stw	r5,0(r8)
 2004c30:	44400115 	stw	r17,4(r8)
 2004c34:	d8c02015 	stw	r3,128(sp)
 2004c38:	d8801f15 	stw	r2,124(sp)
 2004c3c:	010001c4 	movi	r4,7
 2004c40:	20825916 	blt	r4,r2,20055a8 <___vfprintf_internal_r+0x1120>
 2004c44:	42000204 	addi	r8,r8,8
 2004c48:	e080010c 	andi	r2,fp,4
 2004c4c:	10003126 	beq	r2,zero,2004d14 <___vfprintf_internal_r+0x88c>
 2004c50:	d8802e17 	ldw	r2,184(sp)
 2004c54:	d9002b17 	ldw	r4,172(sp)
 2004c58:	1121c83a 	sub	r16,r2,r4
 2004c5c:	04002d0e 	bge	zero,r16,2004d14 <___vfprintf_internal_r+0x88c>
 2004c60:	04400404 	movi	r17,16
 2004c64:	d8801f17 	ldw	r2,124(sp)
 2004c68:	8c053f0e 	bge	r17,r16,2006168 <___vfprintf_internal_r+0x1ce0>
 2004c6c:	010080b4 	movhi	r4,514
 2004c70:	2122ce84 	addi	r4,r4,-29894
 2004c74:	d9003615 	stw	r4,216(sp)
 2004c78:	048001c4 	movi	r18,7
 2004c7c:	00000306 	br	2004c8c <___vfprintf_internal_r+0x804>
 2004c80:	843ffc04 	addi	r16,r16,-16
 2004c84:	42000204 	addi	r8,r8,8
 2004c88:	8c00130e 	bge	r17,r16,2004cd8 <___vfprintf_internal_r+0x850>
 2004c8c:	014080b4 	movhi	r5,514
 2004c90:	18c00404 	addi	r3,r3,16
 2004c94:	10800044 	addi	r2,r2,1
 2004c98:	2962ce84 	addi	r5,r5,-29894
 2004c9c:	41400015 	stw	r5,0(r8)
 2004ca0:	44400115 	stw	r17,4(r8)
 2004ca4:	d8c02015 	stw	r3,128(sp)
 2004ca8:	d8801f15 	stw	r2,124(sp)
 2004cac:	90bff40e 	bge	r18,r2,2004c80 <___vfprintf_internal_r+0x7f8>
 2004cb0:	b809883a 	mov	r4,r23
 2004cb4:	b00b883a 	mov	r5,r22
 2004cb8:	d9801e04 	addi	r6,sp,120
 2004cbc:	200b8a80 	call	200b8a8 <__sprint_r>
 2004cc0:	103ee61e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2004cc4:	843ffc04 	addi	r16,r16,-16
 2004cc8:	d8c02017 	ldw	r3,128(sp)
 2004ccc:	d8801f17 	ldw	r2,124(sp)
 2004cd0:	da000404 	addi	r8,sp,16
 2004cd4:	8c3fed16 	blt	r17,r16,2004c8c <___vfprintf_internal_r+0x804>
 2004cd8:	d9003617 	ldw	r4,216(sp)
 2004cdc:	1c07883a 	add	r3,r3,r16
 2004ce0:	10800044 	addi	r2,r2,1
 2004ce4:	41000015 	stw	r4,0(r8)
 2004ce8:	44000115 	stw	r16,4(r8)
 2004cec:	d8c02015 	stw	r3,128(sp)
 2004cf0:	d8801f15 	stw	r2,124(sp)
 2004cf4:	010001c4 	movi	r4,7
 2004cf8:	2080060e 	bge	r4,r2,2004d14 <___vfprintf_internal_r+0x88c>
 2004cfc:	b809883a 	mov	r4,r23
 2004d00:	b00b883a 	mov	r5,r22
 2004d04:	d9801e04 	addi	r6,sp,120
 2004d08:	200b8a80 	call	200b8a8 <__sprint_r>
 2004d0c:	103ed31e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2004d10:	d8c02017 	ldw	r3,128(sp)
 2004d14:	df002b17 	ldw	fp,172(sp)
 2004d18:	d9402e17 	ldw	r5,184(sp)
 2004d1c:	e140010e 	bge	fp,r5,2004d24 <___vfprintf_internal_r+0x89c>
 2004d20:	2839883a 	mov	fp,r5
 2004d24:	d8802f17 	ldw	r2,188(sp)
 2004d28:	1705883a 	add	r2,r2,fp
 2004d2c:	d8802f15 	stw	r2,188(sp)
 2004d30:	1802251e 	bne	r3,zero,20055c8 <___vfprintf_internal_r+0x1140>
 2004d34:	d8c02a17 	ldw	r3,168(sp)
 2004d38:	d8001f15 	stw	zero,124(sp)
 2004d3c:	da000404 	addi	r8,sp,16
 2004d40:	18800007 	ldb	r2,0(r3)
 2004d44:	103e0e1e 	bne	r2,zero,2004580 <___vfprintf_internal_r+0xf8>
 2004d48:	dc002a17 	ldw	r16,168(sp)
 2004d4c:	003e2606 	br	20045e8 <___vfprintf_internal_r+0x160>
 2004d50:	d9002d17 	ldw	r4,180(sp)
 2004d54:	d9402d17 	ldw	r5,180(sp)
 2004d58:	da002a17 	ldw	r8,168(sp)
 2004d5c:	21000017 	ldw	r4,0(r4)
 2004d60:	29400117 	ldw	r5,4(r5)
 2004d64:	df002a15 	stw	fp,168(sp)
 2004d68:	9839883a 	mov	fp,r19
 2004d6c:	dcc02b03 	ldbu	r19,172(sp)
 2004d70:	d9003715 	stw	r4,220(sp)
 2004d74:	d9403915 	stw	r5,228(sp)
 2004d78:	da003f15 	stw	r8,252(sp)
 2004d7c:	da403e15 	stw	r9,248(sp)
 2004d80:	dcc02785 	stb	r19,158(sp)
 2004d84:	200b5040 	call	200b504 <__fpclassifyd>
 2004d88:	d8c02d17 	ldw	r3,180(sp)
 2004d8c:	04400044 	movi	r17,1
 2004d90:	da003f17 	ldw	r8,252(sp)
 2004d94:	1c800204 	addi	r18,r3,8
 2004d98:	da403e17 	ldw	r9,248(sp)
 2004d9c:	d9003717 	ldw	r4,220(sp)
 2004da0:	d9403917 	ldw	r5,228(sp)
 2004da4:	1443411e 	bne	r2,r17,2005aac <___vfprintf_internal_r+0x1624>
 2004da8:	000d883a 	mov	r6,zero
 2004dac:	000f883a 	mov	r7,zero
 2004db0:	200f6840 	call	200f684 <__ledf2>
 2004db4:	da003f17 	ldw	r8,252(sp)
 2004db8:	10050d16 	blt	r2,zero,20061f0 <___vfprintf_internal_r+0x1d68>
 2004dbc:	dcc02783 	ldbu	r19,158(sp)
 2004dc0:	008011c4 	movi	r2,71
 2004dc4:	1404590e 	bge	r2,r16,2005f2c <___vfprintf_internal_r+0x1aa4>
 2004dc8:	014080b4 	movhi	r5,514
 2004dcc:	2962bb04 	addi	r5,r5,-29972
 2004dd0:	d9403115 	stw	r5,196(sp)
 2004dd4:	00c000c4 	movi	r3,3
 2004dd8:	00bfdfc4 	movi	r2,-129
 2004ddc:	d8c02b15 	stw	r3,172(sp)
 2004de0:	e0b8703a 	and	fp,fp,r2
 2004de4:	dc802d15 	stw	r18,180(sp)
 2004de8:	1823883a 	mov	r17,r3
 2004dec:	d8003215 	stw	zero,200(sp)
 2004df0:	d8003415 	stw	zero,208(sp)
 2004df4:	003f0106 	br	20049fc <___vfprintf_internal_r+0x574>
 2004df8:	9cc00214 	ori	r19,r19,8
 2004dfc:	e005883a 	mov	r2,fp
 2004e00:	e4000007 	ldb	r16,0(fp)
 2004e04:	003e0606 	br	2004620 <___vfprintf_internal_r+0x198>
 2004e08:	da002a17 	ldw	r8,168(sp)
 2004e0c:	df002a15 	stw	fp,168(sp)
 2004e10:	9f000414 	ori	fp,r19,16
 2004e14:	e080080c 	andi	r2,fp,32
 2004e18:	1000e726 	beq	r2,zero,20051b8 <___vfprintf_internal_r+0xd30>
 2004e1c:	d9402d17 	ldw	r5,180(sp)
 2004e20:	0005883a 	mov	r2,zero
 2004e24:	2c800017 	ldw	r18,0(r5)
 2004e28:	2d400117 	ldw	r21,4(r5)
 2004e2c:	29400204 	addi	r5,r5,8
 2004e30:	d9402d15 	stw	r5,180(sp)
 2004e34:	9546b03a 	or	r3,r18,r21
 2004e38:	d8002785 	stb	zero,158(sp)
 2004e3c:	da403215 	stw	r9,200(sp)
 2004e40:	0027883a 	mov	r19,zero
 2004e44:	003ece06 	br	2004980 <___vfprintf_internal_r+0x4f8>
 2004e48:	da002a17 	ldw	r8,168(sp)
 2004e4c:	df002a15 	stw	fp,168(sp)
 2004e50:	9f000414 	ori	fp,r19,16
 2004e54:	e080080c 	andi	r2,fp,32
 2004e58:	1000c826 	beq	r2,zero,200517c <___vfprintf_internal_r+0xcf4>
 2004e5c:	d9002d17 	ldw	r4,180(sp)
 2004e60:	00800044 	movi	r2,1
 2004e64:	24800017 	ldw	r18,0(r4)
 2004e68:	25400117 	ldw	r21,4(r4)
 2004e6c:	21000204 	addi	r4,r4,8
 2004e70:	d9002d15 	stw	r4,180(sp)
 2004e74:	9546b03a 	or	r3,r18,r21
 2004e78:	003fef06 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2004e7c:	d9402d17 	ldw	r5,180(sp)
 2004e80:	00800c04 	movi	r2,48
 2004e84:	d8802705 	stb	r2,156(sp)
 2004e88:	2c800017 	ldw	r18,0(r5)
 2004e8c:	00801e04 	movi	r2,120
 2004e90:	d8802745 	stb	r2,157(sp)
 2004e94:	008080b4 	movhi	r2,514
 2004e98:	10a2c304 	addi	r2,r2,-29940
 2004e9c:	29400104 	addi	r5,r5,4
 2004ea0:	da002a17 	ldw	r8,168(sp)
 2004ea4:	d8803b15 	stw	r2,236(sp)
 2004ea8:	df002a15 	stw	fp,168(sp)
 2004eac:	002b883a 	mov	r21,zero
 2004eb0:	9f000094 	ori	fp,r19,2
 2004eb4:	d9402d15 	stw	r5,180(sp)
 2004eb8:	00800084 	movi	r2,2
 2004ebc:	04001e04 	movi	r16,120
 2004ec0:	9007883a 	mov	r3,r18
 2004ec4:	003fdc06 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2004ec8:	da002a17 	ldw	r8,168(sp)
 2004ecc:	df002a15 	stw	fp,168(sp)
 2004ed0:	9839883a 	mov	fp,r19
 2004ed4:	dcc02b03 	ldbu	r19,172(sp)
 2004ed8:	e080080c 	andi	r2,fp,32
 2004edc:	d8c02d17 	ldw	r3,180(sp)
 2004ee0:	dcc02785 	stb	r19,158(sp)
 2004ee4:	103e9b1e 	bne	r2,zero,2004954 <___vfprintf_internal_r+0x4cc>
 2004ee8:	e080040c 	andi	r2,fp,16
 2004eec:	10036626 	beq	r2,zero,2005c88 <___vfprintf_internal_r+0x1800>
 2004ef0:	1c800017 	ldw	r18,0(r3)
 2004ef4:	d9402d17 	ldw	r5,180(sp)
 2004ef8:	902bd7fa 	srai	r21,r18,31
 2004efc:	29400104 	addi	r5,r5,4
 2004f00:	d9402d15 	stw	r5,180(sp)
 2004f04:	a805883a 	mov	r2,r21
 2004f08:	003e9806 	br	200496c <___vfprintf_internal_r+0x4e4>
 2004f0c:	9cc01014 	ori	r19,r19,64
 2004f10:	e005883a 	mov	r2,fp
 2004f14:	e4000007 	ldb	r16,0(fp)
 2004f18:	003dc106 	br	2004620 <___vfprintf_internal_r+0x198>
 2004f1c:	e4000007 	ldb	r16,0(fp)
 2004f20:	00801b04 	movi	r2,108
 2004f24:	80841426 	beq	r16,r2,2005f78 <___vfprintf_internal_r+0x1af0>
 2004f28:	9cc00414 	ori	r19,r19,16
 2004f2c:	e005883a 	mov	r2,fp
 2004f30:	003dbb06 	br	2004620 <___vfprintf_internal_r+0x198>
 2004f34:	da002a17 	ldw	r8,168(sp)
 2004f38:	df002a15 	stw	fp,168(sp)
 2004f3c:	9839883a 	mov	fp,r19
 2004f40:	dcc02b03 	ldbu	r19,172(sp)
 2004f44:	e080080c 	andi	r2,fp,32
 2004f48:	dcc02785 	stb	r19,158(sp)
 2004f4c:	10036126 	beq	r2,zero,2005cd4 <___vfprintf_internal_r+0x184c>
 2004f50:	d9402d17 	ldw	r5,180(sp)
 2004f54:	d9002f17 	ldw	r4,188(sp)
 2004f58:	28800017 	ldw	r2,0(r5)
 2004f5c:	2007d7fa 	srai	r3,r4,31
 2004f60:	29400104 	addi	r5,r5,4
 2004f64:	d9402d15 	stw	r5,180(sp)
 2004f68:	11000015 	stw	r4,0(r2)
 2004f6c:	10c00115 	stw	r3,4(r2)
 2004f70:	003d8006 	br	2004574 <___vfprintf_internal_r+0xec>
 2004f74:	da002a17 	ldw	r8,168(sp)
 2004f78:	df002a15 	stw	fp,168(sp)
 2004f7c:	9839883a 	mov	fp,r19
 2004f80:	dcc02b03 	ldbu	r19,172(sp)
 2004f84:	014080b4 	movhi	r5,514
 2004f88:	2962be04 	addi	r5,r5,-29960
 2004f8c:	dcc02785 	stb	r19,158(sp)
 2004f90:	d9403b15 	stw	r5,236(sp)
 2004f94:	e0c0080c 	andi	r3,fp,32
 2004f98:	d8802d17 	ldw	r2,180(sp)
 2004f9c:	18006626 	beq	r3,zero,2005138 <___vfprintf_internal_r+0xcb0>
 2004fa0:	d9402d17 	ldw	r5,180(sp)
 2004fa4:	14800017 	ldw	r18,0(r2)
 2004fa8:	15400117 	ldw	r21,4(r2)
 2004fac:	29400204 	addi	r5,r5,8
 2004fb0:	d9402d15 	stw	r5,180(sp)
 2004fb4:	e080004c 	andi	r2,fp,1
 2004fb8:	1001fd26 	beq	r2,zero,20057b0 <___vfprintf_internal_r+0x1328>
 2004fbc:	9546b03a 	or	r3,r18,r21
 2004fc0:	18034f26 	beq	r3,zero,2005d00 <___vfprintf_internal_r+0x1878>
 2004fc4:	00800c04 	movi	r2,48
 2004fc8:	d8802705 	stb	r2,156(sp)
 2004fcc:	dc002745 	stb	r16,157(sp)
 2004fd0:	e7000094 	ori	fp,fp,2
 2004fd4:	00800084 	movi	r2,2
 2004fd8:	003f9706 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2004fdc:	d8c02d17 	ldw	r3,180(sp)
 2004fe0:	d9002d17 	ldw	r4,180(sp)
 2004fe4:	da002a17 	ldw	r8,168(sp)
 2004fe8:	18800017 	ldw	r2,0(r3)
 2004fec:	21000104 	addi	r4,r4,4
 2004ff0:	00c00044 	movi	r3,1
 2004ff4:	df002a15 	stw	fp,168(sp)
 2004ff8:	d8c02b15 	stw	r3,172(sp)
 2004ffc:	9839883a 	mov	fp,r19
 2005000:	d8002785 	stb	zero,158(sp)
 2005004:	d8801405 	stb	r2,80(sp)
 2005008:	d9002d15 	stw	r4,180(sp)
 200500c:	1823883a 	mov	r17,r3
 2005010:	d8c01404 	addi	r3,sp,80
 2005014:	d8003215 	stw	zero,200(sp)
 2005018:	d8003415 	stw	zero,208(sp)
 200501c:	d8c03115 	stw	r3,196(sp)
 2005020:	0005883a 	mov	r2,zero
 2005024:	003e7c06 	br	2004a18 <___vfprintf_internal_r+0x590>
 2005028:	d8802b07 	ldb	r2,172(sp)
 200502c:	1003011e 	bne	r2,zero,2005c34 <___vfprintf_internal_r+0x17ac>
 2005030:	00c00804 	movi	r3,32
 2005034:	d8c02b05 	stb	r3,172(sp)
 2005038:	e005883a 	mov	r2,fp
 200503c:	e4000007 	ldb	r16,0(fp)
 2005040:	003d7706 	br	2004620 <___vfprintf_internal_r+0x198>
 2005044:	9cc00054 	ori	r19,r19,1
 2005048:	e005883a 	mov	r2,fp
 200504c:	e4000007 	ldb	r16,0(fp)
 2005050:	003d7306 	br	2004620 <___vfprintf_internal_r+0x198>
 2005054:	d9002d17 	ldw	r4,180(sp)
 2005058:	d9402d17 	ldw	r5,180(sp)
 200505c:	21000017 	ldw	r4,0(r4)
 2005060:	28c00104 	addi	r3,r5,4
 2005064:	d9002e15 	stw	r4,184(sp)
 2005068:	2003bd16 	blt	r4,zero,2005f60 <___vfprintf_internal_r+0x1ad8>
 200506c:	d8c02d15 	stw	r3,180(sp)
 2005070:	e005883a 	mov	r2,fp
 2005074:	e4000007 	ldb	r16,0(fp)
 2005078:	003d6906 	br	2004620 <___vfprintf_internal_r+0x198>
 200507c:	00c00ac4 	movi	r3,43
 2005080:	d8c02b05 	stb	r3,172(sp)
 2005084:	e005883a 	mov	r2,fp
 2005088:	e4000007 	ldb	r16,0(fp)
 200508c:	003d6406 	br	2004620 <___vfprintf_internal_r+0x198>
 2005090:	d8c02d17 	ldw	r3,180(sp)
 2005094:	d9002d17 	ldw	r4,180(sp)
 2005098:	da002a17 	ldw	r8,168(sp)
 200509c:	18c00017 	ldw	r3,0(r3)
 20050a0:	df002a15 	stw	fp,168(sp)
 20050a4:	d8002785 	stb	zero,158(sp)
 20050a8:	d8c03115 	stw	r3,196(sp)
 20050ac:	9839883a 	mov	fp,r19
 20050b0:	24800104 	addi	r18,r4,4
 20050b4:	18041b26 	beq	r3,zero,2006124 <___vfprintf_internal_r+0x1c9c>
 20050b8:	d9003117 	ldw	r4,196(sp)
 20050bc:	4803be16 	blt	r9,zero,2005fb8 <___vfprintf_internal_r+0x1b30>
 20050c0:	480d883a 	mov	r6,r9
 20050c4:	000b883a 	mov	r5,zero
 20050c8:	da003f15 	stw	r8,252(sp)
 20050cc:	da403e15 	stw	r9,248(sp)
 20050d0:	2009cfc0 	call	2009cfc <memchr>
 20050d4:	da003f17 	ldw	r8,252(sp)
 20050d8:	da403e17 	ldw	r9,248(sp)
 20050dc:	10045426 	beq	r2,zero,2006230 <___vfprintf_internal_r+0x1da8>
 20050e0:	d8c03117 	ldw	r3,196(sp)
 20050e4:	10e3c83a 	sub	r17,r2,r3
 20050e8:	4c436a16 	blt	r9,r17,2005e94 <___vfprintf_internal_r+0x1a0c>
 20050ec:	8805883a 	mov	r2,r17
 20050f0:	8803b616 	blt	r17,zero,2005fcc <___vfprintf_internal_r+0x1b44>
 20050f4:	dcc02783 	ldbu	r19,158(sp)
 20050f8:	d8802b15 	stw	r2,172(sp)
 20050fc:	dc802d15 	stw	r18,180(sp)
 2005100:	d8003215 	stw	zero,200(sp)
 2005104:	d8003415 	stw	zero,208(sp)
 2005108:	003e3c06 	br	20049fc <___vfprintf_internal_r+0x574>
 200510c:	da002a17 	ldw	r8,168(sp)
 2005110:	df002a15 	stw	fp,168(sp)
 2005114:	9839883a 	mov	fp,r19
 2005118:	dcc02b03 	ldbu	r19,172(sp)
 200511c:	010080b4 	movhi	r4,514
 2005120:	2122c304 	addi	r4,r4,-29940
 2005124:	d9003b15 	stw	r4,236(sp)
 2005128:	dcc02785 	stb	r19,158(sp)
 200512c:	e0c0080c 	andi	r3,fp,32
 2005130:	d8802d17 	ldw	r2,180(sp)
 2005134:	183f9a1e 	bne	r3,zero,2004fa0 <___vfprintf_internal_r+0xb18>
 2005138:	e0c0040c 	andi	r3,fp,16
 200513c:	1802c026 	beq	r3,zero,2005c40 <___vfprintf_internal_r+0x17b8>
 2005140:	d8c02d17 	ldw	r3,180(sp)
 2005144:	14800017 	ldw	r18,0(r2)
 2005148:	002b883a 	mov	r21,zero
 200514c:	18c00104 	addi	r3,r3,4
 2005150:	d8c02d15 	stw	r3,180(sp)
 2005154:	003f9706 	br	2004fb4 <___vfprintf_internal_r+0xb2c>
 2005158:	9cc00814 	ori	r19,r19,32
 200515c:	e005883a 	mov	r2,fp
 2005160:	e4000007 	ldb	r16,0(fp)
 2005164:	003d2e06 	br	2004620 <___vfprintf_internal_r+0x198>
 2005168:	da002a17 	ldw	r8,168(sp)
 200516c:	df002a15 	stw	fp,168(sp)
 2005170:	9839883a 	mov	fp,r19
 2005174:	e080080c 	andi	r2,fp,32
 2005178:	103f381e 	bne	r2,zero,2004e5c <___vfprintf_internal_r+0x9d4>
 200517c:	e080040c 	andi	r2,fp,16
 2005180:	1002b726 	beq	r2,zero,2005c60 <___vfprintf_internal_r+0x17d8>
 2005184:	d9402d17 	ldw	r5,180(sp)
 2005188:	002b883a 	mov	r21,zero
 200518c:	00800044 	movi	r2,1
 2005190:	2c800017 	ldw	r18,0(r5)
 2005194:	29400104 	addi	r5,r5,4
 2005198:	d9402d15 	stw	r5,180(sp)
 200519c:	9007883a 	mov	r3,r18
 20051a0:	003f2506 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 20051a4:	da002a17 	ldw	r8,168(sp)
 20051a8:	df002a15 	stw	fp,168(sp)
 20051ac:	9839883a 	mov	fp,r19
 20051b0:	e080080c 	andi	r2,fp,32
 20051b4:	103f191e 	bne	r2,zero,2004e1c <___vfprintf_internal_r+0x994>
 20051b8:	e080040c 	andi	r2,fp,16
 20051bc:	1002bb26 	beq	r2,zero,2005cac <___vfprintf_internal_r+0x1824>
 20051c0:	d8802d17 	ldw	r2,180(sp)
 20051c4:	002b883a 	mov	r21,zero
 20051c8:	14800017 	ldw	r18,0(r2)
 20051cc:	10800104 	addi	r2,r2,4
 20051d0:	d8802d15 	stw	r2,180(sp)
 20051d4:	9007883a 	mov	r3,r18
 20051d8:	0005883a 	mov	r2,zero
 20051dc:	003f1606 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 20051e0:	da002a17 	ldw	r8,168(sp)
 20051e4:	df002a15 	stw	fp,168(sp)
 20051e8:	9839883a 	mov	fp,r19
 20051ec:	dcc02b03 	ldbu	r19,172(sp)
 20051f0:	dcc02785 	stb	r19,158(sp)
 20051f4:	803d9326 	beq	r16,zero,2004844 <___vfprintf_internal_r+0x3bc>
 20051f8:	00c00044 	movi	r3,1
 20051fc:	d8c02b15 	stw	r3,172(sp)
 2005200:	dc001405 	stb	r16,80(sp)
 2005204:	d8002785 	stb	zero,158(sp)
 2005208:	003f8006 	br	200500c <___vfprintf_internal_r+0xb84>
 200520c:	d8c02017 	ldw	r3,128(sp)
 2005210:	003e3906 	br	2004af8 <___vfprintf_internal_r+0x670>
 2005214:	10803fcc 	andi	r2,r2,255
 2005218:	00c00044 	movi	r3,1
 200521c:	10fde01e 	bne	r2,r3,20049a0 <___vfprintf_internal_r+0x518>
 2005220:	a800021e 	bne	r21,zero,200522c <___vfprintf_internal_r+0xda4>
 2005224:	00800244 	movi	r2,9
 2005228:	14801e2e 	bgeu	r2,r18,20052a4 <___vfprintf_internal_r+0xe1c>
 200522c:	dc002b15 	stw	r16,172(sp)
 2005230:	dc401e04 	addi	r17,sp,120
 2005234:	9021883a 	mov	r16,r18
 2005238:	da402c15 	stw	r9,176(sp)
 200523c:	a825883a 	mov	r18,r21
 2005240:	402b883a 	mov	r21,r8
 2005244:	8009883a 	mov	r4,r16
 2005248:	900b883a 	mov	r5,r18
 200524c:	01800284 	movi	r6,10
 2005250:	000f883a 	mov	r7,zero
 2005254:	200db940 	call	200db94 <__umoddi3>
 2005258:	10800c04 	addi	r2,r2,48
 200525c:	8c7fffc4 	addi	r17,r17,-1
 2005260:	8009883a 	mov	r4,r16
 2005264:	900b883a 	mov	r5,r18
 2005268:	01800284 	movi	r6,10
 200526c:	000f883a 	mov	r7,zero
 2005270:	88800005 	stb	r2,0(r17)
 2005274:	200d5540 	call	200d554 <__udivdi3>
 2005278:	1021883a 	mov	r16,r2
 200527c:	10c4b03a 	or	r2,r2,r3
 2005280:	1825883a 	mov	r18,r3
 2005284:	103fef1e 	bne	r2,zero,2005244 <___vfprintf_internal_r+0xdbc>
 2005288:	d9002817 	ldw	r4,160(sp)
 200528c:	dc403115 	stw	r17,196(sp)
 2005290:	dc002b17 	ldw	r16,172(sp)
 2005294:	da402c17 	ldw	r9,176(sp)
 2005298:	a811883a 	mov	r8,r21
 200529c:	2463c83a 	sub	r17,r4,r17
 20052a0:	003dd106 	br	20049e8 <___vfprintf_internal_r+0x560>
 20052a4:	94800c04 	addi	r18,r18,48
 20052a8:	d8c01dc4 	addi	r3,sp,119
 20052ac:	dc801dc5 	stb	r18,119(sp)
 20052b0:	dc403c17 	ldw	r17,240(sp)
 20052b4:	d8c03115 	stw	r3,196(sp)
 20052b8:	003dcb06 	br	20049e8 <___vfprintf_internal_r+0x560>
 20052bc:	00801944 	movi	r2,101
 20052c0:	1400720e 	bge	r2,r16,200548c <___vfprintf_internal_r+0x1004>
 20052c4:	d9003717 	ldw	r4,220(sp)
 20052c8:	d9403917 	ldw	r5,228(sp)
 20052cc:	000d883a 	mov	r6,zero
 20052d0:	000f883a 	mov	r7,zero
 20052d4:	d8c03d15 	stw	r3,244(sp)
 20052d8:	da003f15 	stw	r8,252(sp)
 20052dc:	200f5200 	call	200f520 <__eqdf2>
 20052e0:	d8c03d17 	ldw	r3,244(sp)
 20052e4:	da003f17 	ldw	r8,252(sp)
 20052e8:	1000f41e 	bne	r2,zero,20056bc <___vfprintf_internal_r+0x1234>
 20052ec:	d8801f17 	ldw	r2,124(sp)
 20052f0:	010080b4 	movhi	r4,514
 20052f4:	2122ca04 	addi	r4,r4,-29912
 20052f8:	18c00044 	addi	r3,r3,1
 20052fc:	10800044 	addi	r2,r2,1
 2005300:	41000015 	stw	r4,0(r8)
 2005304:	01000044 	movi	r4,1
 2005308:	41000115 	stw	r4,4(r8)
 200530c:	d8c02015 	stw	r3,128(sp)
 2005310:	d8801f15 	stw	r2,124(sp)
 2005314:	010001c4 	movi	r4,7
 2005318:	20828d16 	blt	r4,r2,2005d50 <___vfprintf_internal_r+0x18c8>
 200531c:	42000204 	addi	r8,r8,8
 2005320:	d8802617 	ldw	r2,152(sp)
 2005324:	d9403317 	ldw	r5,204(sp)
 2005328:	11400216 	blt	r2,r5,2005334 <___vfprintf_internal_r+0xeac>
 200532c:	e080004c 	andi	r2,fp,1
 2005330:	103e4526 	beq	r2,zero,2004c48 <___vfprintf_internal_r+0x7c0>
 2005334:	d8803817 	ldw	r2,224(sp)
 2005338:	d9003517 	ldw	r4,212(sp)
 200533c:	d9403817 	ldw	r5,224(sp)
 2005340:	1887883a 	add	r3,r3,r2
 2005344:	d8801f17 	ldw	r2,124(sp)
 2005348:	41000015 	stw	r4,0(r8)
 200534c:	41400115 	stw	r5,4(r8)
 2005350:	10800044 	addi	r2,r2,1
 2005354:	d8c02015 	stw	r3,128(sp)
 2005358:	d8801f15 	stw	r2,124(sp)
 200535c:	010001c4 	movi	r4,7
 2005360:	20830916 	blt	r4,r2,2005f88 <___vfprintf_internal_r+0x1b00>
 2005364:	42000204 	addi	r8,r8,8
 2005368:	d8803317 	ldw	r2,204(sp)
 200536c:	143fffc4 	addi	r16,r2,-1
 2005370:	043e350e 	bge	zero,r16,2004c48 <___vfprintf_internal_r+0x7c0>
 2005374:	04400404 	movi	r17,16
 2005378:	d8801f17 	ldw	r2,124(sp)
 200537c:	8c007e0e 	bge	r17,r16,2005578 <___vfprintf_internal_r+0x10f0>
 2005380:	014080b4 	movhi	r5,514
 2005384:	2962ca84 	addi	r5,r5,-29910
 2005388:	d9402c15 	stw	r5,176(sp)
 200538c:	04c001c4 	movi	r19,7
 2005390:	00000306 	br	20053a0 <___vfprintf_internal_r+0xf18>
 2005394:	42000204 	addi	r8,r8,8
 2005398:	843ffc04 	addi	r16,r16,-16
 200539c:	8c00790e 	bge	r17,r16,2005584 <___vfprintf_internal_r+0x10fc>
 20053a0:	18c00404 	addi	r3,r3,16
 20053a4:	10800044 	addi	r2,r2,1
 20053a8:	45000015 	stw	r20,0(r8)
 20053ac:	44400115 	stw	r17,4(r8)
 20053b0:	d8c02015 	stw	r3,128(sp)
 20053b4:	d8801f15 	stw	r2,124(sp)
 20053b8:	98bff60e 	bge	r19,r2,2005394 <___vfprintf_internal_r+0xf0c>
 20053bc:	b809883a 	mov	r4,r23
 20053c0:	b00b883a 	mov	r5,r22
 20053c4:	d9801e04 	addi	r6,sp,120
 20053c8:	200b8a80 	call	200b8a8 <__sprint_r>
 20053cc:	103d231e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 20053d0:	d8c02017 	ldw	r3,128(sp)
 20053d4:	d8801f17 	ldw	r2,124(sp)
 20053d8:	da000404 	addi	r8,sp,16
 20053dc:	003fee06 	br	2005398 <___vfprintf_internal_r+0xf10>
 20053e0:	d9402e17 	ldw	r5,184(sp)
 20053e4:	d8802b17 	ldw	r2,172(sp)
 20053e8:	28a7c83a 	sub	r19,r5,r2
 20053ec:	04fde00e 	bge	zero,r19,2004b70 <___vfprintf_internal_r+0x6e8>
 20053f0:	05400404 	movi	r21,16
 20053f4:	d8801f17 	ldw	r2,124(sp)
 20053f8:	acc3870e 	bge	r21,r19,2006218 <___vfprintf_internal_r+0x1d90>
 20053fc:	014080b4 	movhi	r5,514
 2005400:	2962ca84 	addi	r5,r5,-29910
 2005404:	d9402c15 	stw	r5,176(sp)
 2005408:	048001c4 	movi	r18,7
 200540c:	00000306 	br	200541c <___vfprintf_internal_r+0xf94>
 2005410:	9cfffc04 	addi	r19,r19,-16
 2005414:	42000204 	addi	r8,r8,8
 2005418:	acc0110e 	bge	r21,r19,2005460 <___vfprintf_internal_r+0xfd8>
 200541c:	18c00404 	addi	r3,r3,16
 2005420:	10800044 	addi	r2,r2,1
 2005424:	45000015 	stw	r20,0(r8)
 2005428:	45400115 	stw	r21,4(r8)
 200542c:	d8c02015 	stw	r3,128(sp)
 2005430:	d8801f15 	stw	r2,124(sp)
 2005434:	90bff60e 	bge	r18,r2,2005410 <___vfprintf_internal_r+0xf88>
 2005438:	b809883a 	mov	r4,r23
 200543c:	b00b883a 	mov	r5,r22
 2005440:	d9801e04 	addi	r6,sp,120
 2005444:	200b8a80 	call	200b8a8 <__sprint_r>
 2005448:	103d041e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200544c:	9cfffc04 	addi	r19,r19,-16
 2005450:	d8c02017 	ldw	r3,128(sp)
 2005454:	d8801f17 	ldw	r2,124(sp)
 2005458:	da000404 	addi	r8,sp,16
 200545c:	acffef16 	blt	r21,r19,200541c <___vfprintf_internal_r+0xf94>
 2005460:	d9002c17 	ldw	r4,176(sp)
 2005464:	1cc7883a 	add	r3,r3,r19
 2005468:	10800044 	addi	r2,r2,1
 200546c:	41000015 	stw	r4,0(r8)
 2005470:	44c00115 	stw	r19,4(r8)
 2005474:	d8c02015 	stw	r3,128(sp)
 2005478:	d8801f15 	stw	r2,124(sp)
 200547c:	010001c4 	movi	r4,7
 2005480:	20817816 	blt	r4,r2,2005a64 <___vfprintf_internal_r+0x15dc>
 2005484:	42000204 	addi	r8,r8,8
 2005488:	003db906 	br	2004b70 <___vfprintf_internal_r+0x6e8>
 200548c:	d9403317 	ldw	r5,204(sp)
 2005490:	00800044 	movi	r2,1
 2005494:	18c00044 	addi	r3,r3,1
 2005498:	11413e0e 	bge	r2,r5,2005994 <___vfprintf_internal_r+0x150c>
 200549c:	dc001f17 	ldw	r16,124(sp)
 20054a0:	d8803117 	ldw	r2,196(sp)
 20054a4:	d8c02015 	stw	r3,128(sp)
 20054a8:	84000044 	addi	r16,r16,1
 20054ac:	40800015 	stw	r2,0(r8)
 20054b0:	00800044 	movi	r2,1
 20054b4:	40800115 	stw	r2,4(r8)
 20054b8:	dc001f15 	stw	r16,124(sp)
 20054bc:	008001c4 	movi	r2,7
 20054c0:	14015616 	blt	r2,r16,2005a1c <___vfprintf_internal_r+0x1594>
 20054c4:	42000204 	addi	r8,r8,8
 20054c8:	d9003817 	ldw	r4,224(sp)
 20054cc:	d9403517 	ldw	r5,212(sp)
 20054d0:	84000044 	addi	r16,r16,1
 20054d4:	1907883a 	add	r3,r3,r4
 20054d8:	41400015 	stw	r5,0(r8)
 20054dc:	41000115 	stw	r4,4(r8)
 20054e0:	d8c02015 	stw	r3,128(sp)
 20054e4:	dc001f15 	stw	r16,124(sp)
 20054e8:	008001c4 	movi	r2,7
 20054ec:	14015416 	blt	r2,r16,2005a40 <___vfprintf_internal_r+0x15b8>
 20054f0:	44400204 	addi	r17,r8,8
 20054f4:	d9003717 	ldw	r4,220(sp)
 20054f8:	d9403917 	ldw	r5,228(sp)
 20054fc:	000d883a 	mov	r6,zero
 2005500:	000f883a 	mov	r7,zero
 2005504:	d8c03d15 	stw	r3,244(sp)
 2005508:	200f5200 	call	200f520 <__eqdf2>
 200550c:	d8c03d17 	ldw	r3,244(sp)
 2005510:	1000aa26 	beq	r2,zero,20057bc <___vfprintf_internal_r+0x1334>
 2005514:	d9003317 	ldw	r4,204(sp)
 2005518:	d9403117 	ldw	r5,196(sp)
 200551c:	84000044 	addi	r16,r16,1
 2005520:	20bfffc4 	addi	r2,r4,-1
 2005524:	1887883a 	add	r3,r3,r2
 2005528:	29000044 	addi	r4,r5,1
 200552c:	88800115 	stw	r2,4(r17)
 2005530:	89000015 	stw	r4,0(r17)
 2005534:	d8c02015 	stw	r3,128(sp)
 2005538:	dc001f15 	stw	r16,124(sp)
 200553c:	008001c4 	movi	r2,7
 2005540:	14012d16 	blt	r2,r16,20059f8 <___vfprintf_internal_r+0x1570>
 2005544:	8c400204 	addi	r17,r17,8
 2005548:	d9403a17 	ldw	r5,232(sp)
 200554c:	dcc022c4 	addi	r19,sp,139
 2005550:	84000044 	addi	r16,r16,1
 2005554:	1947883a 	add	r3,r3,r5
 2005558:	8cc00015 	stw	r19,0(r17)
 200555c:	89400115 	stw	r5,4(r17)
 2005560:	d8c02015 	stw	r3,128(sp)
 2005564:	dc001f15 	stw	r16,124(sp)
 2005568:	008001c4 	movi	r2,7
 200556c:	14000e16 	blt	r2,r16,20055a8 <___vfprintf_internal_r+0x1120>
 2005570:	8a000204 	addi	r8,r17,8
 2005574:	003db406 	br	2004c48 <___vfprintf_internal_r+0x7c0>
 2005578:	010080b4 	movhi	r4,514
 200557c:	2122ca84 	addi	r4,r4,-29910
 2005580:	d9002c15 	stw	r4,176(sp)
 2005584:	d9002c17 	ldw	r4,176(sp)
 2005588:	1c07883a 	add	r3,r3,r16
 200558c:	44000115 	stw	r16,4(r8)
 2005590:	41000015 	stw	r4,0(r8)
 2005594:	10800044 	addi	r2,r2,1
 2005598:	d8c02015 	stw	r3,128(sp)
 200559c:	d8801f15 	stw	r2,124(sp)
 20055a0:	010001c4 	movi	r4,7
 20055a4:	20bda70e 	bge	r4,r2,2004c44 <___vfprintf_internal_r+0x7bc>
 20055a8:	b809883a 	mov	r4,r23
 20055ac:	b00b883a 	mov	r5,r22
 20055b0:	d9801e04 	addi	r6,sp,120
 20055b4:	200b8a80 	call	200b8a8 <__sprint_r>
 20055b8:	103ca81e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 20055bc:	d8c02017 	ldw	r3,128(sp)
 20055c0:	da000404 	addi	r8,sp,16
 20055c4:	003da006 	br	2004c48 <___vfprintf_internal_r+0x7c0>
 20055c8:	b809883a 	mov	r4,r23
 20055cc:	b00b883a 	mov	r5,r22
 20055d0:	d9801e04 	addi	r6,sp,120
 20055d4:	200b8a80 	call	200b8a8 <__sprint_r>
 20055d8:	103dd626 	beq	r2,zero,2004d34 <___vfprintf_internal_r+0x8ac>
 20055dc:	003c9f06 	br	200485c <___vfprintf_internal_r+0x3d4>
 20055e0:	10803fcc 	andi	r2,r2,255
 20055e4:	1000201e 	bne	r2,zero,2005668 <___vfprintf_internal_r+0x11e0>
 20055e8:	e080004c 	andi	r2,fp,1
 20055ec:	10001e26 	beq	r2,zero,2005668 <___vfprintf_internal_r+0x11e0>
 20055f0:	00800c04 	movi	r2,48
 20055f4:	d8c01dc4 	addi	r3,sp,119
 20055f8:	d8801dc5 	stb	r2,119(sp)
 20055fc:	dc403c17 	ldw	r17,240(sp)
 2005600:	d8c03115 	stw	r3,196(sp)
 2005604:	003cf806 	br	20049e8 <___vfprintf_internal_r+0x560>
 2005608:	b809883a 	mov	r4,r23
 200560c:	b00b883a 	mov	r5,r22
 2005610:	d9801e04 	addi	r6,sp,120
 2005614:	200b8a80 	call	200b8a8 <__sprint_r>
 2005618:	103c901e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200561c:	d8c02017 	ldw	r3,128(sp)
 2005620:	da000404 	addi	r8,sp,16
 2005624:	003d7b06 	br	2004c14 <___vfprintf_internal_r+0x78c>
 2005628:	b809883a 	mov	r4,r23
 200562c:	b00b883a 	mov	r5,r22
 2005630:	d9801e04 	addi	r6,sp,120
 2005634:	200b8a80 	call	200b8a8 <__sprint_r>
 2005638:	103c881e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200563c:	d8c02017 	ldw	r3,128(sp)
 2005640:	da000404 	addi	r8,sp,16
 2005644:	003d3906 	br	2004b2c <___vfprintf_internal_r+0x6a4>
 2005648:	b809883a 	mov	r4,r23
 200564c:	b00b883a 	mov	r5,r22
 2005650:	d9801e04 	addi	r6,sp,120
 2005654:	200b8a80 	call	200b8a8 <__sprint_r>
 2005658:	103c801e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200565c:	d8c02017 	ldw	r3,128(sp)
 2005660:	da000404 	addi	r8,sp,16
 2005664:	003d3f06 	br	2004b64 <___vfprintf_internal_r+0x6dc>
 2005668:	d8c01e04 	addi	r3,sp,120
 200566c:	0023883a 	mov	r17,zero
 2005670:	d8c03115 	stw	r3,196(sp)
 2005674:	003cdc06 	br	20049e8 <___vfprintf_internal_r+0x560>
 2005678:	d9403b17 	ldw	r5,236(sp)
 200567c:	d8c01e04 	addi	r3,sp,120
 2005680:	908003cc 	andi	r2,r18,15
 2005684:	a808973a 	slli	r4,r21,28
 2005688:	2885883a 	add	r2,r5,r2
 200568c:	9024d13a 	srli	r18,r18,4
 2005690:	10800003 	ldbu	r2,0(r2)
 2005694:	a82ad13a 	srli	r21,r21,4
 2005698:	18ffffc4 	addi	r3,r3,-1
 200569c:	24a4b03a 	or	r18,r4,r18
 20056a0:	18800005 	stb	r2,0(r3)
 20056a4:	9544b03a 	or	r2,r18,r21
 20056a8:	103ff51e 	bne	r2,zero,2005680 <___vfprintf_internal_r+0x11f8>
 20056ac:	d9402817 	ldw	r5,160(sp)
 20056b0:	d8c03115 	stw	r3,196(sp)
 20056b4:	28e3c83a 	sub	r17,r5,r3
 20056b8:	003ccb06 	br	20049e8 <___vfprintf_internal_r+0x560>
 20056bc:	dc002617 	ldw	r16,152(sp)
 20056c0:	0401ab0e 	bge	zero,r16,2005d70 <___vfprintf_internal_r+0x18e8>
 20056c4:	d8803317 	ldw	r2,204(sp)
 20056c8:	d9403117 	ldw	r5,196(sp)
 20056cc:	d9003417 	ldw	r4,208(sp)
 20056d0:	1023883a 	mov	r17,r2
 20056d4:	28a1883a 	add	r16,r5,r2
 20056d8:	2080010e 	bge	r4,r2,20056e0 <___vfprintf_internal_r+0x1258>
 20056dc:	2023883a 	mov	r17,r4
 20056e0:	04400b0e 	bge	zero,r17,2005710 <___vfprintf_internal_r+0x1288>
 20056e4:	d8801f17 	ldw	r2,124(sp)
 20056e8:	d9403117 	ldw	r5,196(sp)
 20056ec:	1c47883a 	add	r3,r3,r17
 20056f0:	10800044 	addi	r2,r2,1
 20056f4:	41400015 	stw	r5,0(r8)
 20056f8:	44400115 	stw	r17,4(r8)
 20056fc:	d8c02015 	stw	r3,128(sp)
 2005700:	d8801f15 	stw	r2,124(sp)
 2005704:	010001c4 	movi	r4,7
 2005708:	20826716 	blt	r4,r2,20060a8 <___vfprintf_internal_r+0x1c20>
 200570c:	42000204 	addi	r8,r8,8
 2005710:	88026316 	blt	r17,zero,20060a0 <___vfprintf_internal_r+0x1c18>
 2005714:	d8803417 	ldw	r2,208(sp)
 2005718:	1463c83a 	sub	r17,r2,r17
 200571c:	0440590e 	bge	zero,r17,2005884 <___vfprintf_internal_r+0x13fc>
 2005720:	04c00404 	movi	r19,16
 2005724:	d8801f17 	ldw	r2,124(sp)
 2005728:	9c41770e 	bge	r19,r17,2005d08 <___vfprintf_internal_r+0x1880>
 200572c:	014080b4 	movhi	r5,514
 2005730:	2962ca84 	addi	r5,r5,-29910
 2005734:	d9402c15 	stw	r5,176(sp)
 2005738:	054001c4 	movi	r21,7
 200573c:	00000306 	br	200574c <___vfprintf_internal_r+0x12c4>
 2005740:	42000204 	addi	r8,r8,8
 2005744:	8c7ffc04 	addi	r17,r17,-16
 2005748:	9c41720e 	bge	r19,r17,2005d14 <___vfprintf_internal_r+0x188c>
 200574c:	18c00404 	addi	r3,r3,16
 2005750:	10800044 	addi	r2,r2,1
 2005754:	45000015 	stw	r20,0(r8)
 2005758:	44c00115 	stw	r19,4(r8)
 200575c:	d8c02015 	stw	r3,128(sp)
 2005760:	d8801f15 	stw	r2,124(sp)
 2005764:	a8bff60e 	bge	r21,r2,2005740 <___vfprintf_internal_r+0x12b8>
 2005768:	b809883a 	mov	r4,r23
 200576c:	b00b883a 	mov	r5,r22
 2005770:	d9801e04 	addi	r6,sp,120
 2005774:	200b8a80 	call	200b8a8 <__sprint_r>
 2005778:	103c381e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200577c:	d8c02017 	ldw	r3,128(sp)
 2005780:	d8801f17 	ldw	r2,124(sp)
 2005784:	da000404 	addi	r8,sp,16
 2005788:	003fee06 	br	2005744 <___vfprintf_internal_r+0x12bc>
 200578c:	b809883a 	mov	r4,r23
 2005790:	b00b883a 	mov	r5,r22
 2005794:	d9801e04 	addi	r6,sp,120
 2005798:	200b8a80 	call	200b8a8 <__sprint_r>
 200579c:	103c2f1e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 20057a0:	d8c02017 	ldw	r3,128(sp)
 20057a4:	d8802787 	ldb	r2,158(sp)
 20057a8:	da000404 	addi	r8,sp,16
 20057ac:	003cd206 	br	2004af8 <___vfprintf_internal_r+0x670>
 20057b0:	00800084 	movi	r2,2
 20057b4:	9546b03a 	or	r3,r18,r21
 20057b8:	003d9f06 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 20057bc:	d8803317 	ldw	r2,204(sp)
 20057c0:	14ffffc4 	addi	r19,r2,-1
 20057c4:	04ff600e 	bge	zero,r19,2005548 <___vfprintf_internal_r+0x10c0>
 20057c8:	05400404 	movi	r21,16
 20057cc:	acc07e0e 	bge	r21,r19,20059c8 <___vfprintf_internal_r+0x1540>
 20057d0:	014080b4 	movhi	r5,514
 20057d4:	2962ca84 	addi	r5,r5,-29910
 20057d8:	d9402c15 	stw	r5,176(sp)
 20057dc:	01c001c4 	movi	r7,7
 20057e0:	00000306 	br	20057f0 <___vfprintf_internal_r+0x1368>
 20057e4:	8c400204 	addi	r17,r17,8
 20057e8:	9cfffc04 	addi	r19,r19,-16
 20057ec:	acc0790e 	bge	r21,r19,20059d4 <___vfprintf_internal_r+0x154c>
 20057f0:	18c00404 	addi	r3,r3,16
 20057f4:	84000044 	addi	r16,r16,1
 20057f8:	8d000015 	stw	r20,0(r17)
 20057fc:	8d400115 	stw	r21,4(r17)
 2005800:	d8c02015 	stw	r3,128(sp)
 2005804:	dc001f15 	stw	r16,124(sp)
 2005808:	3c3ff60e 	bge	r7,r16,20057e4 <___vfprintf_internal_r+0x135c>
 200580c:	b809883a 	mov	r4,r23
 2005810:	b00b883a 	mov	r5,r22
 2005814:	d9801e04 	addi	r6,sp,120
 2005818:	d9c03d15 	stw	r7,244(sp)
 200581c:	200b8a80 	call	200b8a8 <__sprint_r>
 2005820:	d9c03d17 	ldw	r7,244(sp)
 2005824:	103c0d1e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005828:	d8c02017 	ldw	r3,128(sp)
 200582c:	dc001f17 	ldw	r16,124(sp)
 2005830:	dc400404 	addi	r17,sp,16
 2005834:	003fec06 	br	20057e8 <___vfprintf_internal_r+0x1360>
 2005838:	10803fcc 	andi	r2,r2,255
 200583c:	1080201c 	xori	r2,r2,128
 2005840:	10bfe004 	addi	r2,r2,-128
 2005844:	01000c04 	movi	r4,48
 2005848:	1101d726 	beq	r2,r4,2005fa8 <___vfprintf_internal_r+0x1b20>
 200584c:	d9403117 	ldw	r5,196(sp)
 2005850:	d8802817 	ldw	r2,160(sp)
 2005854:	193fffc5 	stb	r4,-1(r3)
 2005858:	297fffc4 	addi	r5,r5,-1
 200585c:	d9403115 	stw	r5,196(sp)
 2005860:	1163c83a 	sub	r17,r2,r5
 2005864:	003c6006 	br	20049e8 <___vfprintf_internal_r+0x560>
 2005868:	b809883a 	mov	r4,r23
 200586c:	b00b883a 	mov	r5,r22
 2005870:	d9801e04 	addi	r6,sp,120
 2005874:	200b8a80 	call	200b8a8 <__sprint_r>
 2005878:	103bf81e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200587c:	d8c02017 	ldw	r3,128(sp)
 2005880:	da000404 	addi	r8,sp,16
 2005884:	d9403117 	ldw	r5,196(sp)
 2005888:	d9003417 	ldw	r4,208(sp)
 200588c:	d8802617 	ldw	r2,152(sp)
 2005890:	2923883a 	add	r17,r5,r4
 2005894:	d9403317 	ldw	r5,204(sp)
 2005898:	11400216 	blt	r2,r5,20058a4 <___vfprintf_internal_r+0x141c>
 200589c:	e100004c 	andi	r4,fp,1
 20058a0:	20000d26 	beq	r4,zero,20058d8 <___vfprintf_internal_r+0x1450>
 20058a4:	d9003817 	ldw	r4,224(sp)
 20058a8:	d9403517 	ldw	r5,212(sp)
 20058ac:	1907883a 	add	r3,r3,r4
 20058b0:	d9001f17 	ldw	r4,124(sp)
 20058b4:	41400015 	stw	r5,0(r8)
 20058b8:	d9403817 	ldw	r5,224(sp)
 20058bc:	21000044 	addi	r4,r4,1
 20058c0:	d8c02015 	stw	r3,128(sp)
 20058c4:	41400115 	stw	r5,4(r8)
 20058c8:	d9001f15 	stw	r4,124(sp)
 20058cc:	014001c4 	movi	r5,7
 20058d0:	2901fd16 	blt	r5,r4,20060c8 <___vfprintf_internal_r+0x1c40>
 20058d4:	42000204 	addi	r8,r8,8
 20058d8:	d9003317 	ldw	r4,204(sp)
 20058dc:	2085c83a 	sub	r2,r4,r2
 20058e0:	8449c83a 	sub	r4,r16,r17
 20058e4:	1021883a 	mov	r16,r2
 20058e8:	2080010e 	bge	r4,r2,20058f0 <___vfprintf_internal_r+0x1468>
 20058ec:	2021883a 	mov	r16,r4
 20058f0:	04000a0e 	bge	zero,r16,200591c <___vfprintf_internal_r+0x1494>
 20058f4:	d9001f17 	ldw	r4,124(sp)
 20058f8:	1c07883a 	add	r3,r3,r16
 20058fc:	44400015 	stw	r17,0(r8)
 2005900:	21000044 	addi	r4,r4,1
 2005904:	44000115 	stw	r16,4(r8)
 2005908:	d8c02015 	stw	r3,128(sp)
 200590c:	d9001f15 	stw	r4,124(sp)
 2005910:	014001c4 	movi	r5,7
 2005914:	29021816 	blt	r5,r4,2006178 <___vfprintf_internal_r+0x1cf0>
 2005918:	42000204 	addi	r8,r8,8
 200591c:	80021016 	blt	r16,zero,2006160 <___vfprintf_internal_r+0x1cd8>
 2005920:	1421c83a 	sub	r16,r2,r16
 2005924:	043cc80e 	bge	zero,r16,2004c48 <___vfprintf_internal_r+0x7c0>
 2005928:	04400404 	movi	r17,16
 200592c:	d8801f17 	ldw	r2,124(sp)
 2005930:	8c3f110e 	bge	r17,r16,2005578 <___vfprintf_internal_r+0x10f0>
 2005934:	014080b4 	movhi	r5,514
 2005938:	2962ca84 	addi	r5,r5,-29910
 200593c:	d9402c15 	stw	r5,176(sp)
 2005940:	04c001c4 	movi	r19,7
 2005944:	00000306 	br	2005954 <___vfprintf_internal_r+0x14cc>
 2005948:	42000204 	addi	r8,r8,8
 200594c:	843ffc04 	addi	r16,r16,-16
 2005950:	8c3f0c0e 	bge	r17,r16,2005584 <___vfprintf_internal_r+0x10fc>
 2005954:	18c00404 	addi	r3,r3,16
 2005958:	10800044 	addi	r2,r2,1
 200595c:	45000015 	stw	r20,0(r8)
 2005960:	44400115 	stw	r17,4(r8)
 2005964:	d8c02015 	stw	r3,128(sp)
 2005968:	d8801f15 	stw	r2,124(sp)
 200596c:	98bff60e 	bge	r19,r2,2005948 <___vfprintf_internal_r+0x14c0>
 2005970:	b809883a 	mov	r4,r23
 2005974:	b00b883a 	mov	r5,r22
 2005978:	d9801e04 	addi	r6,sp,120
 200597c:	200b8a80 	call	200b8a8 <__sprint_r>
 2005980:	103bb61e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005984:	d8c02017 	ldw	r3,128(sp)
 2005988:	d8801f17 	ldw	r2,124(sp)
 200598c:	da000404 	addi	r8,sp,16
 2005990:	003fee06 	br	200594c <___vfprintf_internal_r+0x14c4>
 2005994:	e088703a 	and	r4,fp,r2
 2005998:	203ec01e 	bne	r4,zero,200549c <___vfprintf_internal_r+0x1014>
 200599c:	dc001f17 	ldw	r16,124(sp)
 20059a0:	d9003117 	ldw	r4,196(sp)
 20059a4:	40800115 	stw	r2,4(r8)
 20059a8:	84000044 	addi	r16,r16,1
 20059ac:	41000015 	stw	r4,0(r8)
 20059b0:	d8c02015 	stw	r3,128(sp)
 20059b4:	dc001f15 	stw	r16,124(sp)
 20059b8:	008001c4 	movi	r2,7
 20059bc:	14000e16 	blt	r2,r16,20059f8 <___vfprintf_internal_r+0x1570>
 20059c0:	44400204 	addi	r17,r8,8
 20059c4:	003ee006 	br	2005548 <___vfprintf_internal_r+0x10c0>
 20059c8:	010080b4 	movhi	r4,514
 20059cc:	2122ca84 	addi	r4,r4,-29910
 20059d0:	d9002c15 	stw	r4,176(sp)
 20059d4:	d8802c17 	ldw	r2,176(sp)
 20059d8:	1cc7883a 	add	r3,r3,r19
 20059dc:	84000044 	addi	r16,r16,1
 20059e0:	88800015 	stw	r2,0(r17)
 20059e4:	8cc00115 	stw	r19,4(r17)
 20059e8:	d8c02015 	stw	r3,128(sp)
 20059ec:	dc001f15 	stw	r16,124(sp)
 20059f0:	008001c4 	movi	r2,7
 20059f4:	143ed30e 	bge	r2,r16,2005544 <___vfprintf_internal_r+0x10bc>
 20059f8:	b809883a 	mov	r4,r23
 20059fc:	b00b883a 	mov	r5,r22
 2005a00:	d9801e04 	addi	r6,sp,120
 2005a04:	200b8a80 	call	200b8a8 <__sprint_r>
 2005a08:	103b941e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005a0c:	d8c02017 	ldw	r3,128(sp)
 2005a10:	dc001f17 	ldw	r16,124(sp)
 2005a14:	dc400404 	addi	r17,sp,16
 2005a18:	003ecb06 	br	2005548 <___vfprintf_internal_r+0x10c0>
 2005a1c:	b809883a 	mov	r4,r23
 2005a20:	b00b883a 	mov	r5,r22
 2005a24:	d9801e04 	addi	r6,sp,120
 2005a28:	200b8a80 	call	200b8a8 <__sprint_r>
 2005a2c:	103b8b1e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005a30:	d8c02017 	ldw	r3,128(sp)
 2005a34:	dc001f17 	ldw	r16,124(sp)
 2005a38:	da000404 	addi	r8,sp,16
 2005a3c:	003ea206 	br	20054c8 <___vfprintf_internal_r+0x1040>
 2005a40:	b809883a 	mov	r4,r23
 2005a44:	b00b883a 	mov	r5,r22
 2005a48:	d9801e04 	addi	r6,sp,120
 2005a4c:	200b8a80 	call	200b8a8 <__sprint_r>
 2005a50:	103b821e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005a54:	d8c02017 	ldw	r3,128(sp)
 2005a58:	dc001f17 	ldw	r16,124(sp)
 2005a5c:	dc400404 	addi	r17,sp,16
 2005a60:	003ea406 	br	20054f4 <___vfprintf_internal_r+0x106c>
 2005a64:	b809883a 	mov	r4,r23
 2005a68:	b00b883a 	mov	r5,r22
 2005a6c:	d9801e04 	addi	r6,sp,120
 2005a70:	200b8a80 	call	200b8a8 <__sprint_r>
 2005a74:	103b791e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005a78:	d8c02017 	ldw	r3,128(sp)
 2005a7c:	da000404 	addi	r8,sp,16
 2005a80:	003c3b06 	br	2004b70 <___vfprintf_internal_r+0x6e8>
 2005a84:	04a5c83a 	sub	r18,zero,r18
 2005a88:	9004c03a 	cmpne	r2,r18,zero
 2005a8c:	056bc83a 	sub	r21,zero,r21
 2005a90:	a8abc83a 	sub	r21,r21,r2
 2005a94:	04c00b44 	movi	r19,45
 2005a98:	dcc02785 	stb	r19,158(sp)
 2005a9c:	da403215 	stw	r9,200(sp)
 2005aa0:	00800044 	movi	r2,1
 2005aa4:	9546b03a 	or	r3,r18,r21
 2005aa8:	003bb506 	br	2004980 <___vfprintf_internal_r+0x4f8>
 2005aac:	da003f15 	stw	r8,252(sp)
 2005ab0:	da403e15 	stw	r9,248(sp)
 2005ab4:	200b5040 	call	200b504 <__fpclassifyd>
 2005ab8:	da003f17 	ldw	r8,252(sp)
 2005abc:	da403e17 	ldw	r9,248(sp)
 2005ac0:	1000e526 	beq	r2,zero,2005e58 <___vfprintf_internal_r+0x19d0>
 2005ac4:	04fff7c4 	movi	r19,-33
 2005ac8:	00bfffc4 	movi	r2,-1
 2005acc:	84e6703a 	and	r19,r16,r19
 2005ad0:	48822526 	beq	r9,r2,2006368 <___vfprintf_internal_r+0x1ee0>
 2005ad4:	008011c4 	movi	r2,71
 2005ad8:	98821626 	beq	r19,r2,2006334 <___vfprintf_internal_r+0x1eac>
 2005adc:	d9003917 	ldw	r4,228(sp)
 2005ae0:	e0c04014 	ori	r3,fp,256
 2005ae4:	d8c02d15 	stw	r3,180(sp)
 2005ae8:	20022116 	blt	r4,zero,2006370 <___vfprintf_internal_r+0x1ee8>
 2005aec:	dc403917 	ldw	r17,228(sp)
 2005af0:	d8002b05 	stb	zero,172(sp)
 2005af4:	00801984 	movi	r2,102
 2005af8:	80814d26 	beq	r16,r2,2006030 <___vfprintf_internal_r+0x1ba8>
 2005afc:	00801184 	movi	r2,70
 2005b00:	80814b26 	beq	r16,r2,2006030 <___vfprintf_internal_r+0x1ba8>
 2005b04:	00801144 	movi	r2,69
 2005b08:	98822626 	beq	r19,r2,20063a4 <___vfprintf_internal_r+0x1f1c>
 2005b0c:	482b883a 	mov	r21,r9
 2005b10:	d8802604 	addi	r2,sp,152
 2005b14:	d8800115 	stw	r2,4(sp)
 2005b18:	d9403717 	ldw	r5,220(sp)
 2005b1c:	d8802504 	addi	r2,sp,148
 2005b20:	d8800215 	stw	r2,8(sp)
 2005b24:	d8802104 	addi	r2,sp,132
 2005b28:	dd400015 	stw	r21,0(sp)
 2005b2c:	d8800315 	stw	r2,12(sp)
 2005b30:	b809883a 	mov	r4,r23
 2005b34:	880d883a 	mov	r6,r17
 2005b38:	01c00084 	movi	r7,2
 2005b3c:	da003f15 	stw	r8,252(sp)
 2005b40:	da403e15 	stw	r9,248(sp)
 2005b44:	2006a900 	call	2006a90 <_dtoa_r>
 2005b48:	d8803115 	stw	r2,196(sp)
 2005b4c:	008019c4 	movi	r2,103
 2005b50:	da003f17 	ldw	r8,252(sp)
 2005b54:	da403e17 	ldw	r9,248(sp)
 2005b58:	80800226 	beq	r16,r2,2005b64 <___vfprintf_internal_r+0x16dc>
 2005b5c:	008011c4 	movi	r2,71
 2005b60:	8081451e 	bne	r16,r2,2006078 <___vfprintf_internal_r+0x1bf0>
 2005b64:	e080004c 	andi	r2,fp,1
 2005b68:	10021e26 	beq	r2,zero,20063e4 <___vfprintf_internal_r+0x1f5c>
 2005b6c:	d8c03117 	ldw	r3,196(sp)
 2005b70:	1d55883a 	add	r10,r3,r21
 2005b74:	d9003717 	ldw	r4,220(sp)
 2005b78:	880b883a 	mov	r5,r17
 2005b7c:	000d883a 	mov	r6,zero
 2005b80:	000f883a 	mov	r7,zero
 2005b84:	da003f15 	stw	r8,252(sp)
 2005b88:	da403e15 	stw	r9,248(sp)
 2005b8c:	da803d15 	stw	r10,244(sp)
 2005b90:	200f5200 	call	200f520 <__eqdf2>
 2005b94:	da003f17 	ldw	r8,252(sp)
 2005b98:	da403e17 	ldw	r9,248(sp)
 2005b9c:	da803d17 	ldw	r10,244(sp)
 2005ba0:	1001a126 	beq	r2,zero,2006228 <___vfprintf_internal_r+0x1da0>
 2005ba4:	d8802117 	ldw	r2,132(sp)
 2005ba8:	1280062e 	bgeu	r2,r10,2005bc4 <___vfprintf_internal_r+0x173c>
 2005bac:	01000c04 	movi	r4,48
 2005bb0:	10c00044 	addi	r3,r2,1
 2005bb4:	d8c02115 	stw	r3,132(sp)
 2005bb8:	11000005 	stb	r4,0(r2)
 2005bbc:	d8802117 	ldw	r2,132(sp)
 2005bc0:	12bffb36 	bltu	r2,r10,2005bb0 <___vfprintf_internal_r+0x1728>
 2005bc4:	d8c03117 	ldw	r3,196(sp)
 2005bc8:	10c5c83a 	sub	r2,r2,r3
 2005bcc:	d8803315 	stw	r2,204(sp)
 2005bd0:	008011c4 	movi	r2,71
 2005bd4:	98817f26 	beq	r19,r2,20061d4 <___vfprintf_internal_r+0x1d4c>
 2005bd8:	00801944 	movi	r2,101
 2005bdc:	14023e0e 	bge	r2,r16,20064d8 <___vfprintf_internal_r+0x2050>
 2005be0:	d8c02617 	ldw	r3,152(sp)
 2005be4:	00801984 	movi	r2,102
 2005be8:	d8c03415 	stw	r3,208(sp)
 2005bec:	8081f326 	beq	r16,r2,20063bc <___vfprintf_internal_r+0x1f34>
 2005bf0:	d8c03417 	ldw	r3,208(sp)
 2005bf4:	d9003317 	ldw	r4,204(sp)
 2005bf8:	1901e116 	blt	r3,r4,2006380 <___vfprintf_internal_r+0x1ef8>
 2005bfc:	e080004c 	andi	r2,fp,1
 2005c00:	1001ea26 	beq	r2,zero,20063ac <___vfprintf_internal_r+0x1f24>
 2005c04:	d8c03417 	ldw	r3,208(sp)
 2005c08:	1c400044 	addi	r17,r3,1
 2005c0c:	8839883a 	mov	fp,r17
 2005c10:	8801e216 	blt	r17,zero,200639c <___vfprintf_internal_r+0x1f14>
 2005c14:	dd402b07 	ldb	r21,172(sp)
 2005c18:	a801661e 	bne	r21,zero,20061b4 <___vfprintf_internal_r+0x1d2c>
 2005c1c:	df002b15 	stw	fp,172(sp)
 2005c20:	dcc02783 	ldbu	r19,158(sp)
 2005c24:	df002d17 	ldw	fp,180(sp)
 2005c28:	d8003215 	stw	zero,200(sp)
 2005c2c:	dc802d15 	stw	r18,180(sp)
 2005c30:	003b7206 	br	20049fc <___vfprintf_internal_r+0x574>
 2005c34:	e4000007 	ldb	r16,0(fp)
 2005c38:	e005883a 	mov	r2,fp
 2005c3c:	003a7806 	br	2004620 <___vfprintf_internal_r+0x198>
 2005c40:	e0c0100c 	andi	r3,fp,64
 2005c44:	1800b326 	beq	r3,zero,2005f14 <___vfprintf_internal_r+0x1a8c>
 2005c48:	d9002d17 	ldw	r4,180(sp)
 2005c4c:	1480000b 	ldhu	r18,0(r2)
 2005c50:	002b883a 	mov	r21,zero
 2005c54:	21000104 	addi	r4,r4,4
 2005c58:	d9002d15 	stw	r4,180(sp)
 2005c5c:	003cd506 	br	2004fb4 <___vfprintf_internal_r+0xb2c>
 2005c60:	e080100c 	andi	r2,fp,64
 2005c64:	1000a326 	beq	r2,zero,2005ef4 <___vfprintf_internal_r+0x1a6c>
 2005c68:	d8802d17 	ldw	r2,180(sp)
 2005c6c:	002b883a 	mov	r21,zero
 2005c70:	1480000b 	ldhu	r18,0(r2)
 2005c74:	10800104 	addi	r2,r2,4
 2005c78:	d8802d15 	stw	r2,180(sp)
 2005c7c:	9007883a 	mov	r3,r18
 2005c80:	00800044 	movi	r2,1
 2005c84:	003c6c06 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2005c88:	e080100c 	andi	r2,fp,64
 2005c8c:	10009226 	beq	r2,zero,2005ed8 <___vfprintf_internal_r+0x1a50>
 2005c90:	1c80000f 	ldh	r18,0(r3)
 2005c94:	d8802d17 	ldw	r2,180(sp)
 2005c98:	902bd7fa 	srai	r21,r18,31
 2005c9c:	10800104 	addi	r2,r2,4
 2005ca0:	d8802d15 	stw	r2,180(sp)
 2005ca4:	a805883a 	mov	r2,r21
 2005ca8:	003b3006 	br	200496c <___vfprintf_internal_r+0x4e4>
 2005cac:	e080100c 	andi	r2,fp,64
 2005cb0:	10008126 	beq	r2,zero,2005eb8 <___vfprintf_internal_r+0x1a30>
 2005cb4:	d8c02d17 	ldw	r3,180(sp)
 2005cb8:	002b883a 	mov	r21,zero
 2005cbc:	0005883a 	mov	r2,zero
 2005cc0:	1c80000b 	ldhu	r18,0(r3)
 2005cc4:	18c00104 	addi	r3,r3,4
 2005cc8:	d8c02d15 	stw	r3,180(sp)
 2005ccc:	9007883a 	mov	r3,r18
 2005cd0:	003c5906 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2005cd4:	e080040c 	andi	r2,fp,16
 2005cd8:	1000701e 	bne	r2,zero,2005e9c <___vfprintf_internal_r+0x1a14>
 2005cdc:	e080100c 	andi	r2,fp,64
 2005ce0:	10014626 	beq	r2,zero,20061fc <___vfprintf_internal_r+0x1d74>
 2005ce4:	d9002d17 	ldw	r4,180(sp)
 2005ce8:	d9402f17 	ldw	r5,188(sp)
 2005cec:	20800017 	ldw	r2,0(r4)
 2005cf0:	21000104 	addi	r4,r4,4
 2005cf4:	d9002d15 	stw	r4,180(sp)
 2005cf8:	1140000d 	sth	r5,0(r2)
 2005cfc:	003a1d06 	br	2004574 <___vfprintf_internal_r+0xec>
 2005d00:	00800084 	movi	r2,2
 2005d04:	003c4c06 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2005d08:	010080b4 	movhi	r4,514
 2005d0c:	2122ca84 	addi	r4,r4,-29910
 2005d10:	d9002c15 	stw	r4,176(sp)
 2005d14:	d9002c17 	ldw	r4,176(sp)
 2005d18:	1c47883a 	add	r3,r3,r17
 2005d1c:	10800044 	addi	r2,r2,1
 2005d20:	41000015 	stw	r4,0(r8)
 2005d24:	44400115 	stw	r17,4(r8)
 2005d28:	d8c02015 	stw	r3,128(sp)
 2005d2c:	d8801f15 	stw	r2,124(sp)
 2005d30:	010001c4 	movi	r4,7
 2005d34:	20becc16 	blt	r4,r2,2005868 <___vfprintf_internal_r+0x13e0>
 2005d38:	42000204 	addi	r8,r8,8
 2005d3c:	003ed106 	br	2005884 <___vfprintf_internal_r+0x13fc>
 2005d40:	010080b4 	movhi	r4,514
 2005d44:	2122ca84 	addi	r4,r4,-29910
 2005d48:	d9002c15 	stw	r4,176(sp)
 2005d4c:	003ba706 	br	2004bec <___vfprintf_internal_r+0x764>
 2005d50:	b809883a 	mov	r4,r23
 2005d54:	b00b883a 	mov	r5,r22
 2005d58:	d9801e04 	addi	r6,sp,120
 2005d5c:	200b8a80 	call	200b8a8 <__sprint_r>
 2005d60:	103abe1e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005d64:	d8c02017 	ldw	r3,128(sp)
 2005d68:	da000404 	addi	r8,sp,16
 2005d6c:	003d6c06 	br	2005320 <___vfprintf_internal_r+0xe98>
 2005d70:	d8801f17 	ldw	r2,124(sp)
 2005d74:	014080b4 	movhi	r5,514
 2005d78:	01000044 	movi	r4,1
 2005d7c:	18c00044 	addi	r3,r3,1
 2005d80:	10800044 	addi	r2,r2,1
 2005d84:	2962ca04 	addi	r5,r5,-29912
 2005d88:	41000115 	stw	r4,4(r8)
 2005d8c:	41400015 	stw	r5,0(r8)
 2005d90:	d8c02015 	stw	r3,128(sp)
 2005d94:	d8801f15 	stw	r2,124(sp)
 2005d98:	010001c4 	movi	r4,7
 2005d9c:	20806716 	blt	r4,r2,2005f3c <___vfprintf_internal_r+0x1ab4>
 2005da0:	42000204 	addi	r8,r8,8
 2005da4:	8000041e 	bne	r16,zero,2005db8 <___vfprintf_internal_r+0x1930>
 2005da8:	d8803317 	ldw	r2,204(sp)
 2005dac:	1000021e 	bne	r2,zero,2005db8 <___vfprintf_internal_r+0x1930>
 2005db0:	e080004c 	andi	r2,fp,1
 2005db4:	103ba426 	beq	r2,zero,2004c48 <___vfprintf_internal_r+0x7c0>
 2005db8:	d9003817 	ldw	r4,224(sp)
 2005dbc:	d8801f17 	ldw	r2,124(sp)
 2005dc0:	d9403517 	ldw	r5,212(sp)
 2005dc4:	1907883a 	add	r3,r3,r4
 2005dc8:	10800044 	addi	r2,r2,1
 2005dcc:	41000115 	stw	r4,4(r8)
 2005dd0:	41400015 	stw	r5,0(r8)
 2005dd4:	d8c02015 	stw	r3,128(sp)
 2005dd8:	d8801f15 	stw	r2,124(sp)
 2005ddc:	010001c4 	movi	r4,7
 2005de0:	20815716 	blt	r4,r2,2006340 <___vfprintf_internal_r+0x1eb8>
 2005de4:	42000204 	addi	r8,r8,8
 2005de8:	0421c83a 	sub	r16,zero,r16
 2005dec:	0400810e 	bge	zero,r16,2005ff4 <___vfprintf_internal_r+0x1b6c>
 2005df0:	04400404 	movi	r17,16
 2005df4:	8c00bd0e 	bge	r17,r16,20060ec <___vfprintf_internal_r+0x1c64>
 2005df8:	014080b4 	movhi	r5,514
 2005dfc:	2962ca84 	addi	r5,r5,-29910
 2005e00:	d9402c15 	stw	r5,176(sp)
 2005e04:	04c001c4 	movi	r19,7
 2005e08:	00000306 	br	2005e18 <___vfprintf_internal_r+0x1990>
 2005e0c:	42000204 	addi	r8,r8,8
 2005e10:	843ffc04 	addi	r16,r16,-16
 2005e14:	8c00b80e 	bge	r17,r16,20060f8 <___vfprintf_internal_r+0x1c70>
 2005e18:	18c00404 	addi	r3,r3,16
 2005e1c:	10800044 	addi	r2,r2,1
 2005e20:	45000015 	stw	r20,0(r8)
 2005e24:	44400115 	stw	r17,4(r8)
 2005e28:	d8c02015 	stw	r3,128(sp)
 2005e2c:	d8801f15 	stw	r2,124(sp)
 2005e30:	98bff60e 	bge	r19,r2,2005e0c <___vfprintf_internal_r+0x1984>
 2005e34:	b809883a 	mov	r4,r23
 2005e38:	b00b883a 	mov	r5,r22
 2005e3c:	d9801e04 	addi	r6,sp,120
 2005e40:	200b8a80 	call	200b8a8 <__sprint_r>
 2005e44:	103a851e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005e48:	d8c02017 	ldw	r3,128(sp)
 2005e4c:	d8801f17 	ldw	r2,124(sp)
 2005e50:	da000404 	addi	r8,sp,16
 2005e54:	003fee06 	br	2005e10 <___vfprintf_internal_r+0x1988>
 2005e58:	008011c4 	movi	r2,71
 2005e5c:	1400d116 	blt	r2,r16,20061a4 <___vfprintf_internal_r+0x1d1c>
 2005e60:	010080b4 	movhi	r4,514
 2005e64:	2122bc04 	addi	r4,r4,-29968
 2005e68:	d9003115 	stw	r4,196(sp)
 2005e6c:	00c000c4 	movi	r3,3
 2005e70:	00bfdfc4 	movi	r2,-129
 2005e74:	d8c02b15 	stw	r3,172(sp)
 2005e78:	e0b8703a 	and	fp,fp,r2
 2005e7c:	dcc02783 	ldbu	r19,158(sp)
 2005e80:	dc802d15 	stw	r18,180(sp)
 2005e84:	1823883a 	mov	r17,r3
 2005e88:	d8003215 	stw	zero,200(sp)
 2005e8c:	d8003415 	stw	zero,208(sp)
 2005e90:	003ada06 	br	20049fc <___vfprintf_internal_r+0x574>
 2005e94:	4823883a 	mov	r17,r9
 2005e98:	003c9406 	br	20050ec <___vfprintf_internal_r+0xc64>
 2005e9c:	d9402d17 	ldw	r5,180(sp)
 2005ea0:	d8c02f17 	ldw	r3,188(sp)
 2005ea4:	28800017 	ldw	r2,0(r5)
 2005ea8:	29400104 	addi	r5,r5,4
 2005eac:	d9402d15 	stw	r5,180(sp)
 2005eb0:	10c00015 	stw	r3,0(r2)
 2005eb4:	0039af06 	br	2004574 <___vfprintf_internal_r+0xec>
 2005eb8:	d9002d17 	ldw	r4,180(sp)
 2005ebc:	002b883a 	mov	r21,zero
 2005ec0:	0005883a 	mov	r2,zero
 2005ec4:	24800017 	ldw	r18,0(r4)
 2005ec8:	21000104 	addi	r4,r4,4
 2005ecc:	d9002d15 	stw	r4,180(sp)
 2005ed0:	9007883a 	mov	r3,r18
 2005ed4:	003bd806 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2005ed8:	1c800017 	ldw	r18,0(r3)
 2005edc:	d8c02d17 	ldw	r3,180(sp)
 2005ee0:	902bd7fa 	srai	r21,r18,31
 2005ee4:	18c00104 	addi	r3,r3,4
 2005ee8:	d8c02d15 	stw	r3,180(sp)
 2005eec:	a805883a 	mov	r2,r21
 2005ef0:	003a9e06 	br	200496c <___vfprintf_internal_r+0x4e4>
 2005ef4:	d8c02d17 	ldw	r3,180(sp)
 2005ef8:	002b883a 	mov	r21,zero
 2005efc:	00800044 	movi	r2,1
 2005f00:	1c800017 	ldw	r18,0(r3)
 2005f04:	18c00104 	addi	r3,r3,4
 2005f08:	d8c02d15 	stw	r3,180(sp)
 2005f0c:	9007883a 	mov	r3,r18
 2005f10:	003bc906 	br	2004e38 <___vfprintf_internal_r+0x9b0>
 2005f14:	d9402d17 	ldw	r5,180(sp)
 2005f18:	14800017 	ldw	r18,0(r2)
 2005f1c:	002b883a 	mov	r21,zero
 2005f20:	29400104 	addi	r5,r5,4
 2005f24:	d9402d15 	stw	r5,180(sp)
 2005f28:	003c2206 	br	2004fb4 <___vfprintf_internal_r+0xb2c>
 2005f2c:	010080b4 	movhi	r4,514
 2005f30:	2122ba04 	addi	r4,r4,-29976
 2005f34:	d9003115 	stw	r4,196(sp)
 2005f38:	003ba606 	br	2004dd4 <___vfprintf_internal_r+0x94c>
 2005f3c:	b809883a 	mov	r4,r23
 2005f40:	b00b883a 	mov	r5,r22
 2005f44:	d9801e04 	addi	r6,sp,120
 2005f48:	200b8a80 	call	200b8a8 <__sprint_r>
 2005f4c:	103a431e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005f50:	dc002617 	ldw	r16,152(sp)
 2005f54:	d8c02017 	ldw	r3,128(sp)
 2005f58:	da000404 	addi	r8,sp,16
 2005f5c:	003f9106 	br	2005da4 <___vfprintf_internal_r+0x191c>
 2005f60:	d8802e17 	ldw	r2,184(sp)
 2005f64:	d8c02d15 	stw	r3,180(sp)
 2005f68:	0085c83a 	sub	r2,zero,r2
 2005f6c:	d8802e15 	stw	r2,184(sp)
 2005f70:	e005883a 	mov	r2,fp
 2005f74:	003a4206 	br	2004880 <___vfprintf_internal_r+0x3f8>
 2005f78:	e0800044 	addi	r2,fp,1
 2005f7c:	9cc00814 	ori	r19,r19,32
 2005f80:	e4000047 	ldb	r16,1(fp)
 2005f84:	0039a606 	br	2004620 <___vfprintf_internal_r+0x198>
 2005f88:	b809883a 	mov	r4,r23
 2005f8c:	b00b883a 	mov	r5,r22
 2005f90:	d9801e04 	addi	r6,sp,120
 2005f94:	200b8a80 	call	200b8a8 <__sprint_r>
 2005f98:	103a301e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005f9c:	d8c02017 	ldw	r3,128(sp)
 2005fa0:	da000404 	addi	r8,sp,16
 2005fa4:	003cf006 	br	2005368 <___vfprintf_internal_r+0xee0>
 2005fa8:	d8c02817 	ldw	r3,160(sp)
 2005fac:	d9003117 	ldw	r4,196(sp)
 2005fb0:	1923c83a 	sub	r17,r3,r4
 2005fb4:	003a8c06 	br	20049e8 <___vfprintf_internal_r+0x560>
 2005fb8:	da003f15 	stw	r8,252(sp)
 2005fbc:	20043a00 	call	20043a0 <strlen>
 2005fc0:	1023883a 	mov	r17,r2
 2005fc4:	da003f17 	ldw	r8,252(sp)
 2005fc8:	883c4a0e 	bge	r17,zero,20050f4 <___vfprintf_internal_r+0xc6c>
 2005fcc:	0005883a 	mov	r2,zero
 2005fd0:	003c4806 	br	20050f4 <___vfprintf_internal_r+0xc6c>
 2005fd4:	b809883a 	mov	r4,r23
 2005fd8:	b00b883a 	mov	r5,r22
 2005fdc:	d9801e04 	addi	r6,sp,120
 2005fe0:	200b8a80 	call	200b8a8 <__sprint_r>
 2005fe4:	103a1d1e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2005fe8:	d8c02017 	ldw	r3,128(sp)
 2005fec:	d8801f17 	ldw	r2,124(sp)
 2005ff0:	da000404 	addi	r8,sp,16
 2005ff4:	d9403317 	ldw	r5,204(sp)
 2005ff8:	d9003117 	ldw	r4,196(sp)
 2005ffc:	10800044 	addi	r2,r2,1
 2006000:	1947883a 	add	r3,r3,r5
 2006004:	41000015 	stw	r4,0(r8)
 2006008:	41400115 	stw	r5,4(r8)
 200600c:	d8c02015 	stw	r3,128(sp)
 2006010:	d8801f15 	stw	r2,124(sp)
 2006014:	010001c4 	movi	r4,7
 2006018:	20bb0a0e 	bge	r4,r2,2004c44 <___vfprintf_internal_r+0x7bc>
 200601c:	003d6206 	br	20055a8 <___vfprintf_internal_r+0x1120>
 2006020:	010080b4 	movhi	r4,514
 2006024:	2122ce84 	addi	r4,r4,-29894
 2006028:	d9003615 	stw	r4,216(sp)
 200602c:	003aa706 	br	2004acc <___vfprintf_internal_r+0x644>
 2006030:	d8802604 	addi	r2,sp,152
 2006034:	d8800115 	stw	r2,4(sp)
 2006038:	d9403717 	ldw	r5,220(sp)
 200603c:	d8802504 	addi	r2,sp,148
 2006040:	d8800215 	stw	r2,8(sp)
 2006044:	d8802104 	addi	r2,sp,132
 2006048:	da400015 	stw	r9,0(sp)
 200604c:	d8800315 	stw	r2,12(sp)
 2006050:	b809883a 	mov	r4,r23
 2006054:	880d883a 	mov	r6,r17
 2006058:	01c000c4 	movi	r7,3
 200605c:	da003f15 	stw	r8,252(sp)
 2006060:	da403e15 	stw	r9,248(sp)
 2006064:	2006a900 	call	2006a90 <_dtoa_r>
 2006068:	da403e17 	ldw	r9,248(sp)
 200606c:	da003f17 	ldw	r8,252(sp)
 2006070:	d8803115 	stw	r2,196(sp)
 2006074:	482b883a 	mov	r21,r9
 2006078:	d8c03117 	ldw	r3,196(sp)
 200607c:	00801184 	movi	r2,70
 2006080:	1d55883a 	add	r10,r3,r21
 2006084:	98bebb1e 	bne	r19,r2,2005b74 <___vfprintf_internal_r+0x16ec>
 2006088:	19000007 	ldb	r4,0(r3)
 200608c:	00800c04 	movi	r2,48
 2006090:	2080df26 	beq	r4,r2,2006410 <___vfprintf_internal_r+0x1f88>
 2006094:	d8c02617 	ldw	r3,152(sp)
 2006098:	50d5883a 	add	r10,r10,r3
 200609c:	003eb506 	br	2005b74 <___vfprintf_internal_r+0x16ec>
 20060a0:	0023883a 	mov	r17,zero
 20060a4:	003d9b06 	br	2005714 <___vfprintf_internal_r+0x128c>
 20060a8:	b809883a 	mov	r4,r23
 20060ac:	b00b883a 	mov	r5,r22
 20060b0:	d9801e04 	addi	r6,sp,120
 20060b4:	200b8a80 	call	200b8a8 <__sprint_r>
 20060b8:	1039e81e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 20060bc:	d8c02017 	ldw	r3,128(sp)
 20060c0:	da000404 	addi	r8,sp,16
 20060c4:	003d9206 	br	2005710 <___vfprintf_internal_r+0x1288>
 20060c8:	b809883a 	mov	r4,r23
 20060cc:	b00b883a 	mov	r5,r22
 20060d0:	d9801e04 	addi	r6,sp,120
 20060d4:	200b8a80 	call	200b8a8 <__sprint_r>
 20060d8:	1039e01e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 20060dc:	d8802617 	ldw	r2,152(sp)
 20060e0:	d8c02017 	ldw	r3,128(sp)
 20060e4:	da000404 	addi	r8,sp,16
 20060e8:	003dfb06 	br	20058d8 <___vfprintf_internal_r+0x1450>
 20060ec:	010080b4 	movhi	r4,514
 20060f0:	2122ca84 	addi	r4,r4,-29910
 20060f4:	d9002c15 	stw	r4,176(sp)
 20060f8:	d9002c17 	ldw	r4,176(sp)
 20060fc:	1c07883a 	add	r3,r3,r16
 2006100:	10800044 	addi	r2,r2,1
 2006104:	41000015 	stw	r4,0(r8)
 2006108:	44000115 	stw	r16,4(r8)
 200610c:	d8c02015 	stw	r3,128(sp)
 2006110:	d8801f15 	stw	r2,124(sp)
 2006114:	010001c4 	movi	r4,7
 2006118:	20bfae16 	blt	r4,r2,2005fd4 <___vfprintf_internal_r+0x1b4c>
 200611c:	42000204 	addi	r8,r8,8
 2006120:	003fb406 	br	2005ff4 <___vfprintf_internal_r+0x1b6c>
 2006124:	00800184 	movi	r2,6
 2006128:	1240012e 	bgeu	r2,r9,2006130 <___vfprintf_internal_r+0x1ca8>
 200612c:	1013883a 	mov	r9,r2
 2006130:	4823883a 	mov	r17,r9
 2006134:	4805883a 	mov	r2,r9
 2006138:	4800ac16 	blt	r9,zero,20063ec <___vfprintf_internal_r+0x1f64>
 200613c:	014080b4 	movhi	r5,514
 2006140:	2962c804 	addi	r5,r5,-29920
 2006144:	d8802b15 	stw	r2,172(sp)
 2006148:	dc802d15 	stw	r18,180(sp)
 200614c:	d8003215 	stw	zero,200(sp)
 2006150:	d8003415 	stw	zero,208(sp)
 2006154:	d9403115 	stw	r5,196(sp)
 2006158:	0005883a 	mov	r2,zero
 200615c:	003a2e06 	br	2004a18 <___vfprintf_internal_r+0x590>
 2006160:	0021883a 	mov	r16,zero
 2006164:	003dee06 	br	2005920 <___vfprintf_internal_r+0x1498>
 2006168:	014080b4 	movhi	r5,514
 200616c:	2962ce84 	addi	r5,r5,-29894
 2006170:	d9403615 	stw	r5,216(sp)
 2006174:	003ad806 	br	2004cd8 <___vfprintf_internal_r+0x850>
 2006178:	b809883a 	mov	r4,r23
 200617c:	b00b883a 	mov	r5,r22
 2006180:	d9801e04 	addi	r6,sp,120
 2006184:	200b8a80 	call	200b8a8 <__sprint_r>
 2006188:	1039b41e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 200618c:	d8802617 	ldw	r2,152(sp)
 2006190:	d9403317 	ldw	r5,204(sp)
 2006194:	d8c02017 	ldw	r3,128(sp)
 2006198:	da000404 	addi	r8,sp,16
 200619c:	2885c83a 	sub	r2,r5,r2
 20061a0:	003dde06 	br	200591c <___vfprintf_internal_r+0x1494>
 20061a4:	014080b4 	movhi	r5,514
 20061a8:	2962bd04 	addi	r5,r5,-29964
 20061ac:	d9403115 	stw	r5,196(sp)
 20061b0:	003f2e06 	br	2005e6c <___vfprintf_internal_r+0x19e4>
 20061b4:	00800b44 	movi	r2,45
 20061b8:	d8802785 	stb	r2,158(sp)
 20061bc:	df002b15 	stw	fp,172(sp)
 20061c0:	d8003215 	stw	zero,200(sp)
 20061c4:	df002d17 	ldw	fp,180(sp)
 20061c8:	00800b44 	movi	r2,45
 20061cc:	dc802d15 	stw	r18,180(sp)
 20061d0:	003a0e06 	br	2004a0c <___vfprintf_internal_r+0x584>
 20061d4:	d8c02617 	ldw	r3,152(sp)
 20061d8:	00bfff44 	movi	r2,-3
 20061dc:	18801b16 	blt	r3,r2,200624c <___vfprintf_internal_r+0x1dc4>
 20061e0:	48c01a16 	blt	r9,r3,200624c <___vfprintf_internal_r+0x1dc4>
 20061e4:	d8c03415 	stw	r3,208(sp)
 20061e8:	040019c4 	movi	r16,103
 20061ec:	003e8006 	br	2005bf0 <___vfprintf_internal_r+0x1768>
 20061f0:	04c00b44 	movi	r19,45
 20061f4:	dcc02785 	stb	r19,158(sp)
 20061f8:	003af106 	br	2004dc0 <___vfprintf_internal_r+0x938>
 20061fc:	d8c02d17 	ldw	r3,180(sp)
 2006200:	d9002f17 	ldw	r4,188(sp)
 2006204:	18800017 	ldw	r2,0(r3)
 2006208:	18c00104 	addi	r3,r3,4
 200620c:	d8c02d15 	stw	r3,180(sp)
 2006210:	11000015 	stw	r4,0(r2)
 2006214:	0038d706 	br	2004574 <___vfprintf_internal_r+0xec>
 2006218:	010080b4 	movhi	r4,514
 200621c:	2122ca84 	addi	r4,r4,-29910
 2006220:	d9002c15 	stw	r4,176(sp)
 2006224:	003c8e06 	br	2005460 <___vfprintf_internal_r+0xfd8>
 2006228:	5005883a 	mov	r2,r10
 200622c:	003e6506 	br	2005bc4 <___vfprintf_internal_r+0x173c>
 2006230:	da402b15 	stw	r9,172(sp)
 2006234:	dcc02783 	ldbu	r19,158(sp)
 2006238:	4823883a 	mov	r17,r9
 200623c:	dc802d15 	stw	r18,180(sp)
 2006240:	d8003215 	stw	zero,200(sp)
 2006244:	d8003415 	stw	zero,208(sp)
 2006248:	0039ec06 	br	20049fc <___vfprintf_internal_r+0x574>
 200624c:	843fff84 	addi	r16,r16,-2
 2006250:	1d7fffc4 	addi	r21,r3,-1
 2006254:	dd402615 	stw	r21,152(sp)
 2006258:	dc0022c5 	stb	r16,139(sp)
 200625c:	a8009616 	blt	r21,zero,20064b8 <___vfprintf_internal_r+0x2030>
 2006260:	00800ac4 	movi	r2,43
 2006264:	d8802305 	stb	r2,140(sp)
 2006268:	00800244 	movi	r2,9
 200626c:	1540610e 	bge	r2,r21,20063f4 <___vfprintf_internal_r+0x1f6c>
 2006270:	dcc022c4 	addi	r19,sp,139
 2006274:	dc002c15 	stw	r16,176(sp)
 2006278:	4023883a 	mov	r17,r8
 200627c:	9821883a 	mov	r16,r19
 2006280:	a809883a 	mov	r4,r21
 2006284:	01400284 	movi	r5,10
 2006288:	200e2700 	call	200e270 <__modsi3>
 200628c:	10800c04 	addi	r2,r2,48
 2006290:	843fffc4 	addi	r16,r16,-1
 2006294:	a809883a 	mov	r4,r21
 2006298:	01400284 	movi	r5,10
 200629c:	80800005 	stb	r2,0(r16)
 20062a0:	200e21c0 	call	200e21c <__divsi3>
 20062a4:	01000244 	movi	r4,9
 20062a8:	102b883a 	mov	r21,r2
 20062ac:	20bff416 	blt	r4,r2,2006280 <___vfprintf_internal_r+0x1df8>
 20062b0:	8811883a 	mov	r8,r17
 20062b4:	10800c04 	addi	r2,r2,48
 20062b8:	8023883a 	mov	r17,r16
 20062bc:	897fffc4 	addi	r5,r17,-1
 20062c0:	88bfffc5 	stb	r2,-1(r17)
 20062c4:	dc002c17 	ldw	r16,176(sp)
 20062c8:	2cc07f2e 	bgeu	r5,r19,20064c8 <___vfprintf_internal_r+0x2040>
 20062cc:	d9802384 	addi	r6,sp,142
 20062d0:	344dc83a 	sub	r6,r6,r17
 20062d4:	d9002344 	addi	r4,sp,141
 20062d8:	998d883a 	add	r6,r19,r6
 20062dc:	00000106 	br	20062e4 <___vfprintf_internal_r+0x1e5c>
 20062e0:	28800003 	ldbu	r2,0(r5)
 20062e4:	20800005 	stb	r2,0(r4)
 20062e8:	21000044 	addi	r4,r4,1
 20062ec:	29400044 	addi	r5,r5,1
 20062f0:	21bffb1e 	bne	r4,r6,20062e0 <___vfprintf_internal_r+0x1e58>
 20062f4:	d8802304 	addi	r2,sp,140
 20062f8:	1445c83a 	sub	r2,r2,r17
 20062fc:	d9402344 	addi	r5,sp,141
 2006300:	2885883a 	add	r2,r5,r2
 2006304:	14e7c83a 	sub	r19,r2,r19
 2006308:	d8803317 	ldw	r2,204(sp)
 200630c:	d8c03317 	ldw	r3,204(sp)
 2006310:	dcc03a15 	stw	r19,232(sp)
 2006314:	14e3883a 	add	r17,r2,r19
 2006318:	00800044 	movi	r2,1
 200631c:	10c04e0e 	bge	r2,r3,2006458 <___vfprintf_internal_r+0x1fd0>
 2006320:	8c400044 	addi	r17,r17,1
 2006324:	8839883a 	mov	fp,r17
 2006328:	88004916 	blt	r17,zero,2006450 <___vfprintf_internal_r+0x1fc8>
 200632c:	d8003415 	stw	zero,208(sp)
 2006330:	003e3806 	br	2005c14 <___vfprintf_internal_r+0x178c>
 2006334:	483de91e 	bne	r9,zero,2005adc <___vfprintf_internal_r+0x1654>
 2006338:	8813883a 	mov	r9,r17
 200633c:	003de706 	br	2005adc <___vfprintf_internal_r+0x1654>
 2006340:	b809883a 	mov	r4,r23
 2006344:	b00b883a 	mov	r5,r22
 2006348:	d9801e04 	addi	r6,sp,120
 200634c:	200b8a80 	call	200b8a8 <__sprint_r>
 2006350:	1039421e 	bne	r2,zero,200485c <___vfprintf_internal_r+0x3d4>
 2006354:	dc002617 	ldw	r16,152(sp)
 2006358:	d8c02017 	ldw	r3,128(sp)
 200635c:	d8801f17 	ldw	r2,124(sp)
 2006360:	da000404 	addi	r8,sp,16
 2006364:	003ea006 	br	2005de8 <___vfprintf_internal_r+0x1960>
 2006368:	02400184 	movi	r9,6
 200636c:	003ddb06 	br	2005adc <___vfprintf_internal_r+0x1654>
 2006370:	00c00b44 	movi	r3,45
 2006374:	2460003c 	xorhi	r17,r4,32768
 2006378:	d8c02b05 	stb	r3,172(sp)
 200637c:	003ddd06 	br	2005af4 <___vfprintf_internal_r+0x166c>
 2006380:	d8c03417 	ldw	r3,208(sp)
 2006384:	00c03d0e 	bge	zero,r3,200647c <___vfprintf_internal_r+0x1ff4>
 2006388:	04400044 	movi	r17,1
 200638c:	d9003317 	ldw	r4,204(sp)
 2006390:	8923883a 	add	r17,r17,r4
 2006394:	8839883a 	mov	fp,r17
 2006398:	883e1e0e 	bge	r17,zero,2005c14 <___vfprintf_internal_r+0x178c>
 200639c:	0039883a 	mov	fp,zero
 20063a0:	003e1c06 	br	2005c14 <___vfprintf_internal_r+0x178c>
 20063a4:	4d400044 	addi	r21,r9,1
 20063a8:	003dd906 	br	2005b10 <___vfprintf_internal_r+0x1688>
 20063ac:	1839883a 	mov	fp,r3
 20063b0:	18004716 	blt	r3,zero,20064d0 <___vfprintf_internal_r+0x2048>
 20063b4:	dc403417 	ldw	r17,208(sp)
 20063b8:	003e1606 	br	2005c14 <___vfprintf_internal_r+0x178c>
 20063bc:	00c0290e 	bge	zero,r3,2006464 <___vfprintf_internal_r+0x1fdc>
 20063c0:	4800021e 	bne	r9,zero,20063cc <___vfprintf_internal_r+0x1f44>
 20063c4:	e080004c 	andi	r2,fp,1
 20063c8:	103ff826 	beq	r2,zero,20063ac <___vfprintf_internal_r+0x1f24>
 20063cc:	d8c03417 	ldw	r3,208(sp)
 20063d0:	4a400044 	addi	r9,r9,1
 20063d4:	1a63883a 	add	r17,r3,r9
 20063d8:	8839883a 	mov	fp,r17
 20063dc:	883e0d0e 	bge	r17,zero,2005c14 <___vfprintf_internal_r+0x178c>
 20063e0:	003fee06 	br	200639c <___vfprintf_internal_r+0x1f14>
 20063e4:	d8802117 	ldw	r2,132(sp)
 20063e8:	003df606 	br	2005bc4 <___vfprintf_internal_r+0x173c>
 20063ec:	0005883a 	mov	r2,zero
 20063f0:	003f5206 	br	200613c <___vfprintf_internal_r+0x1cb4>
 20063f4:	00800c04 	movi	r2,48
 20063f8:	a8c00c04 	addi	r3,r21,48
 20063fc:	d8802345 	stb	r2,141(sp)
 2006400:	d8c02385 	stb	r3,142(sp)
 2006404:	d88023c4 	addi	r2,sp,143
 2006408:	dcc022c4 	addi	r19,sp,139
 200640c:	003fbd06 	br	2006304 <___vfprintf_internal_r+0x1e7c>
 2006410:	d9003717 	ldw	r4,220(sp)
 2006414:	880b883a 	mov	r5,r17
 2006418:	000d883a 	mov	r6,zero
 200641c:	000f883a 	mov	r7,zero
 2006420:	da003f15 	stw	r8,252(sp)
 2006424:	da403e15 	stw	r9,248(sp)
 2006428:	da803d15 	stw	r10,244(sp)
 200642c:	200f5200 	call	200f520 <__eqdf2>
 2006430:	da003f17 	ldw	r8,252(sp)
 2006434:	da403e17 	ldw	r9,248(sp)
 2006438:	da803d17 	ldw	r10,244(sp)
 200643c:	103f1526 	beq	r2,zero,2006094 <___vfprintf_internal_r+0x1c0c>
 2006440:	00800044 	movi	r2,1
 2006444:	1547c83a 	sub	r3,r2,r21
 2006448:	d8c02615 	stw	r3,152(sp)
 200644c:	003f1206 	br	2006098 <___vfprintf_internal_r+0x1c10>
 2006450:	0039883a 	mov	fp,zero
 2006454:	003fb506 	br	200632c <___vfprintf_internal_r+0x1ea4>
 2006458:	e084703a 	and	r2,fp,r2
 200645c:	103fb126 	beq	r2,zero,2006324 <___vfprintf_internal_r+0x1e9c>
 2006460:	003faf06 	br	2006320 <___vfprintf_internal_r+0x1e98>
 2006464:	4800081e 	bne	r9,zero,2006488 <___vfprintf_internal_r+0x2000>
 2006468:	e080004c 	andi	r2,fp,1
 200646c:	1000061e 	bne	r2,zero,2006488 <___vfprintf_internal_r+0x2000>
 2006470:	07000044 	movi	fp,1
 2006474:	e023883a 	mov	r17,fp
 2006478:	003de606 	br	2005c14 <___vfprintf_internal_r+0x178c>
 200647c:	04400084 	movi	r17,2
 2006480:	88e3c83a 	sub	r17,r17,r3
 2006484:	003fc106 	br	200638c <___vfprintf_internal_r+0x1f04>
 2006488:	4c400084 	addi	r17,r9,2
 200648c:	8839883a 	mov	fp,r17
 2006490:	883de00e 	bge	r17,zero,2005c14 <___vfprintf_internal_r+0x178c>
 2006494:	003fc106 	br	200639c <___vfprintf_internal_r+0x1f14>
 2006498:	d9402d17 	ldw	r5,180(sp)
 200649c:	2a400017 	ldw	r9,0(r5)
 20064a0:	28c00104 	addi	r3,r5,4
 20064a4:	d8c02d15 	stw	r3,180(sp)
 20064a8:	483eb50e 	bge	r9,zero,2005f80 <___vfprintf_internal_r+0x1af8>
 20064ac:	027fffc4 	movi	r9,-1
 20064b0:	e4000047 	ldb	r16,1(fp)
 20064b4:	00385a06 	br	2004620 <___vfprintf_internal_r+0x198>
 20064b8:	00800b44 	movi	r2,45
 20064bc:	056bc83a 	sub	r21,zero,r21
 20064c0:	d8802305 	stb	r2,140(sp)
 20064c4:	003f6806 	br	2006268 <___vfprintf_internal_r+0x1de0>
 20064c8:	d8802344 	addi	r2,sp,141
 20064cc:	003f8d06 	br	2006304 <___vfprintf_internal_r+0x1e7c>
 20064d0:	0039883a 	mov	fp,zero
 20064d4:	003fb706 	br	20063b4 <___vfprintf_internal_r+0x1f2c>
 20064d8:	d8c02617 	ldw	r3,152(sp)
 20064dc:	003f5c06 	br	2006250 <___vfprintf_internal_r+0x1dc8>

020064e0 <__vfprintf_internal>:
 20064e0:	2007883a 	mov	r3,r4
 20064e4:	010080b4 	movhi	r4,514
 20064e8:	212a6704 	addi	r4,r4,-22116
 20064ec:	21000017 	ldw	r4,0(r4)
 20064f0:	2805883a 	mov	r2,r5
 20064f4:	300f883a 	mov	r7,r6
 20064f8:	180b883a 	mov	r5,r3
 20064fc:	100d883a 	mov	r6,r2
 2006500:	20044881 	jmpi	2004488 <___vfprintf_internal_r>

02006504 <__sbprintf>:
 2006504:	2880030b 	ldhu	r2,12(r5)
 2006508:	2ac01917 	ldw	r11,100(r5)
 200650c:	2a80038b 	ldhu	r10,14(r5)
 2006510:	2a400717 	ldw	r9,28(r5)
 2006514:	2a000917 	ldw	r8,36(r5)
 2006518:	defee204 	addi	sp,sp,-1144
 200651c:	00c10004 	movi	r3,1024
 2006520:	dc011a15 	stw	r16,1128(sp)
 2006524:	10bfff4c 	andi	r2,r2,65533
 2006528:	2821883a 	mov	r16,r5
 200652c:	d8cb883a 	add	r5,sp,r3
 2006530:	dc811c15 	stw	r18,1136(sp)
 2006534:	dc411b15 	stw	r17,1132(sp)
 2006538:	dfc11d15 	stw	ra,1140(sp)
 200653c:	2025883a 	mov	r18,r4
 2006540:	d881030d 	sth	r2,1036(sp)
 2006544:	dac11915 	stw	r11,1124(sp)
 2006548:	da81038d 	sth	r10,1038(sp)
 200654c:	da410715 	stw	r9,1052(sp)
 2006550:	da010915 	stw	r8,1060(sp)
 2006554:	dec10015 	stw	sp,1024(sp)
 2006558:	dec10415 	stw	sp,1040(sp)
 200655c:	d8c10215 	stw	r3,1032(sp)
 2006560:	d8c10515 	stw	r3,1044(sp)
 2006564:	d8010615 	stw	zero,1048(sp)
 2006568:	20044880 	call	2004488 <___vfprintf_internal_r>
 200656c:	1023883a 	mov	r17,r2
 2006570:	10000416 	blt	r2,zero,2006584 <__sbprintf+0x80>
 2006574:	9009883a 	mov	r4,r18
 2006578:	d9410004 	addi	r5,sp,1024
 200657c:	20083c00 	call	20083c0 <_fflush_r>
 2006580:	10000d1e 	bne	r2,zero,20065b8 <__sbprintf+0xb4>
 2006584:	d8c1030b 	ldhu	r3,1036(sp)
 2006588:	18c0100c 	andi	r3,r3,64
 200658c:	18000326 	beq	r3,zero,200659c <__sbprintf+0x98>
 2006590:	8080030b 	ldhu	r2,12(r16)
 2006594:	10801014 	ori	r2,r2,64
 2006598:	8080030d 	sth	r2,12(r16)
 200659c:	8805883a 	mov	r2,r17
 20065a0:	dfc11d17 	ldw	ra,1140(sp)
 20065a4:	dc811c17 	ldw	r18,1136(sp)
 20065a8:	dc411b17 	ldw	r17,1132(sp)
 20065ac:	dc011a17 	ldw	r16,1128(sp)
 20065b0:	dec11e04 	addi	sp,sp,1144
 20065b4:	f800283a 	ret
 20065b8:	047fffc4 	movi	r17,-1
 20065bc:	003ff106 	br	2006584 <__sbprintf+0x80>

020065c0 <__swbuf_r>:
 20065c0:	defffc04 	addi	sp,sp,-16
 20065c4:	dc800215 	stw	r18,8(sp)
 20065c8:	dc400115 	stw	r17,4(sp)
 20065cc:	dc000015 	stw	r16,0(sp)
 20065d0:	dfc00315 	stw	ra,12(sp)
 20065d4:	2025883a 	mov	r18,r4
 20065d8:	2823883a 	mov	r17,r5
 20065dc:	3021883a 	mov	r16,r6
 20065e0:	20000226 	beq	r4,zero,20065ec <__swbuf_r+0x2c>
 20065e4:	20800e17 	ldw	r2,56(r4)
 20065e8:	10004126 	beq	r2,zero,20066f0 <__swbuf_r+0x130>
 20065ec:	80c00617 	ldw	r3,24(r16)
 20065f0:	8180030b 	ldhu	r6,12(r16)
 20065f4:	80c00215 	stw	r3,8(r16)
 20065f8:	30c0020c 	andi	r3,r6,8
 20065fc:	18003526 	beq	r3,zero,20066d4 <__swbuf_r+0x114>
 2006600:	80c00417 	ldw	r3,16(r16)
 2006604:	18003326 	beq	r3,zero,20066d4 <__swbuf_r+0x114>
 2006608:	3088000c 	andi	r2,r6,8192
 200660c:	8c403fcc 	andi	r17,r17,255
 2006610:	10001726 	beq	r2,zero,2006670 <__swbuf_r+0xb0>
 2006614:	80800017 	ldw	r2,0(r16)
 2006618:	81000517 	ldw	r4,20(r16)
 200661c:	10c7c83a 	sub	r3,r2,r3
 2006620:	19001d0e 	bge	r3,r4,2006698 <__swbuf_r+0xd8>
 2006624:	18c00044 	addi	r3,r3,1
 2006628:	81400217 	ldw	r5,8(r16)
 200662c:	11000044 	addi	r4,r2,1
 2006630:	81000015 	stw	r4,0(r16)
 2006634:	297fffc4 	addi	r5,r5,-1
 2006638:	81400215 	stw	r5,8(r16)
 200663c:	14400005 	stb	r17,0(r2)
 2006640:	80800517 	ldw	r2,20(r16)
 2006644:	10c01d26 	beq	r2,r3,20066bc <__swbuf_r+0xfc>
 2006648:	8080030b 	ldhu	r2,12(r16)
 200664c:	1080004c 	andi	r2,r2,1
 2006650:	1000181e 	bne	r2,zero,20066b4 <__swbuf_r+0xf4>
 2006654:	8805883a 	mov	r2,r17
 2006658:	dfc00317 	ldw	ra,12(sp)
 200665c:	dc800217 	ldw	r18,8(sp)
 2006660:	dc400117 	ldw	r17,4(sp)
 2006664:	dc000017 	ldw	r16,0(sp)
 2006668:	dec00404 	addi	sp,sp,16
 200666c:	f800283a 	ret
 2006670:	81001917 	ldw	r4,100(r16)
 2006674:	00b7ffc4 	movi	r2,-8193
 2006678:	31880014 	ori	r6,r6,8192
 200667c:	2084703a 	and	r2,r4,r2
 2006680:	80801915 	stw	r2,100(r16)
 2006684:	80800017 	ldw	r2,0(r16)
 2006688:	81000517 	ldw	r4,20(r16)
 200668c:	8180030d 	sth	r6,12(r16)
 2006690:	10c7c83a 	sub	r3,r2,r3
 2006694:	193fe316 	blt	r3,r4,2006624 <__swbuf_r+0x64>
 2006698:	9009883a 	mov	r4,r18
 200669c:	800b883a 	mov	r5,r16
 20066a0:	20083c00 	call	20083c0 <_fflush_r>
 20066a4:	1000091e 	bne	r2,zero,20066cc <__swbuf_r+0x10c>
 20066a8:	80800017 	ldw	r2,0(r16)
 20066ac:	00c00044 	movi	r3,1
 20066b0:	003fdd06 	br	2006628 <__swbuf_r+0x68>
 20066b4:	00800284 	movi	r2,10
 20066b8:	88bfe61e 	bne	r17,r2,2006654 <__swbuf_r+0x94>
 20066bc:	9009883a 	mov	r4,r18
 20066c0:	800b883a 	mov	r5,r16
 20066c4:	20083c00 	call	20083c0 <_fflush_r>
 20066c8:	103fe226 	beq	r2,zero,2006654 <__swbuf_r+0x94>
 20066cc:	00bfffc4 	movi	r2,-1
 20066d0:	003fe106 	br	2006658 <__swbuf_r+0x98>
 20066d4:	9009883a 	mov	r4,r18
 20066d8:	800b883a 	mov	r5,r16
 20066dc:	20067140 	call	2006714 <__swsetup_r>
 20066e0:	103ffa1e 	bne	r2,zero,20066cc <__swbuf_r+0x10c>
 20066e4:	8180030b 	ldhu	r6,12(r16)
 20066e8:	80c00417 	ldw	r3,16(r16)
 20066ec:	003fc606 	br	2006608 <__swbuf_r+0x48>
 20066f0:	20087ac0 	call	20087ac <__sinit>
 20066f4:	003fbd06 	br	20065ec <__swbuf_r+0x2c>

020066f8 <__swbuf>:
 20066f8:	00c080b4 	movhi	r3,514
 20066fc:	18ea6704 	addi	r3,r3,-22116
 2006700:	2005883a 	mov	r2,r4
 2006704:	19000017 	ldw	r4,0(r3)
 2006708:	280d883a 	mov	r6,r5
 200670c:	100b883a 	mov	r5,r2
 2006710:	20065c01 	jmpi	20065c0 <__swbuf_r>

02006714 <__swsetup_r>:
 2006714:	008080b4 	movhi	r2,514
 2006718:	defffd04 	addi	sp,sp,-12
 200671c:	10aa6704 	addi	r2,r2,-22116
 2006720:	dc400115 	stw	r17,4(sp)
 2006724:	2023883a 	mov	r17,r4
 2006728:	11000017 	ldw	r4,0(r2)
 200672c:	dc000015 	stw	r16,0(sp)
 2006730:	dfc00215 	stw	ra,8(sp)
 2006734:	2821883a 	mov	r16,r5
 2006738:	20000226 	beq	r4,zero,2006744 <__swsetup_r+0x30>
 200673c:	20c00e17 	ldw	r3,56(r4)
 2006740:	18003126 	beq	r3,zero,2006808 <__swsetup_r+0xf4>
 2006744:	8080030b 	ldhu	r2,12(r16)
 2006748:	10c0020c 	andi	r3,r2,8
 200674c:	100d883a 	mov	r6,r2
 2006750:	18000f26 	beq	r3,zero,2006790 <__swsetup_r+0x7c>
 2006754:	80c00417 	ldw	r3,16(r16)
 2006758:	18001526 	beq	r3,zero,20067b0 <__swsetup_r+0x9c>
 200675c:	1100004c 	andi	r4,r2,1
 2006760:	20001c1e 	bne	r4,zero,20067d4 <__swsetup_r+0xc0>
 2006764:	1080008c 	andi	r2,r2,2
 2006768:	1000291e 	bne	r2,zero,2006810 <__swsetup_r+0xfc>
 200676c:	80800517 	ldw	r2,20(r16)
 2006770:	80800215 	stw	r2,8(r16)
 2006774:	18001c26 	beq	r3,zero,20067e8 <__swsetup_r+0xd4>
 2006778:	0005883a 	mov	r2,zero
 200677c:	dfc00217 	ldw	ra,8(sp)
 2006780:	dc400117 	ldw	r17,4(sp)
 2006784:	dc000017 	ldw	r16,0(sp)
 2006788:	dec00304 	addi	sp,sp,12
 200678c:	f800283a 	ret
 2006790:	3080040c 	andi	r2,r6,16
 2006794:	10002e26 	beq	r2,zero,2006850 <__swsetup_r+0x13c>
 2006798:	3080010c 	andi	r2,r6,4
 200679c:	10001e1e 	bne	r2,zero,2006818 <__swsetup_r+0x104>
 20067a0:	80c00417 	ldw	r3,16(r16)
 20067a4:	30800214 	ori	r2,r6,8
 20067a8:	8080030d 	sth	r2,12(r16)
 20067ac:	183feb1e 	bne	r3,zero,200675c <__swsetup_r+0x48>
 20067b0:	1140a00c 	andi	r5,r2,640
 20067b4:	01008004 	movi	r4,512
 20067b8:	293fe826 	beq	r5,r4,200675c <__swsetup_r+0x48>
 20067bc:	8809883a 	mov	r4,r17
 20067c0:	800b883a 	mov	r5,r16
 20067c4:	200939c0 	call	200939c <__smakebuf_r>
 20067c8:	8080030b 	ldhu	r2,12(r16)
 20067cc:	80c00417 	ldw	r3,16(r16)
 20067d0:	003fe206 	br	200675c <__swsetup_r+0x48>
 20067d4:	80800517 	ldw	r2,20(r16)
 20067d8:	80000215 	stw	zero,8(r16)
 20067dc:	0085c83a 	sub	r2,zero,r2
 20067e0:	80800615 	stw	r2,24(r16)
 20067e4:	183fe41e 	bne	r3,zero,2006778 <__swsetup_r+0x64>
 20067e8:	80c0030b 	ldhu	r3,12(r16)
 20067ec:	0005883a 	mov	r2,zero
 20067f0:	1900200c 	andi	r4,r3,128
 20067f4:	203fe126 	beq	r4,zero,200677c <__swsetup_r+0x68>
 20067f8:	18c01014 	ori	r3,r3,64
 20067fc:	80c0030d 	sth	r3,12(r16)
 2006800:	00bfffc4 	movi	r2,-1
 2006804:	003fdd06 	br	200677c <__swsetup_r+0x68>
 2006808:	20087ac0 	call	20087ac <__sinit>
 200680c:	003fcd06 	br	2006744 <__swsetup_r+0x30>
 2006810:	0005883a 	mov	r2,zero
 2006814:	003fd606 	br	2006770 <__swsetup_r+0x5c>
 2006818:	81400c17 	ldw	r5,48(r16)
 200681c:	28000626 	beq	r5,zero,2006838 <__swsetup_r+0x124>
 2006820:	80801004 	addi	r2,r16,64
 2006824:	28800326 	beq	r5,r2,2006834 <__swsetup_r+0x120>
 2006828:	8809883a 	mov	r4,r17
 200682c:	20089200 	call	2008920 <_free_r>
 2006830:	8180030b 	ldhu	r6,12(r16)
 2006834:	80000c15 	stw	zero,48(r16)
 2006838:	80c00417 	ldw	r3,16(r16)
 200683c:	00bff6c4 	movi	r2,-37
 2006840:	118c703a 	and	r6,r2,r6
 2006844:	80000115 	stw	zero,4(r16)
 2006848:	80c00015 	stw	r3,0(r16)
 200684c:	003fd506 	br	20067a4 <__swsetup_r+0x90>
 2006850:	00800244 	movi	r2,9
 2006854:	88800015 	stw	r2,0(r17)
 2006858:	30801014 	ori	r2,r6,64
 200685c:	8080030d 	sth	r2,12(r16)
 2006860:	00bfffc4 	movi	r2,-1
 2006864:	003fc506 	br	200677c <__swsetup_r+0x68>

02006868 <quorem>:
 2006868:	defff204 	addi	sp,sp,-56
 200686c:	ddc00b15 	stw	r23,44(sp)
 2006870:	20800417 	ldw	r2,16(r4)
 2006874:	2dc00417 	ldw	r23,16(r5)
 2006878:	dfc00d15 	stw	ra,52(sp)
 200687c:	df000c15 	stw	fp,48(sp)
 2006880:	dd800a15 	stw	r22,40(sp)
 2006884:	dd400915 	stw	r21,36(sp)
 2006888:	dd000815 	stw	r20,32(sp)
 200688c:	dcc00715 	stw	r19,28(sp)
 2006890:	dc800615 	stw	r18,24(sp)
 2006894:	dc400515 	stw	r17,20(sp)
 2006898:	dc000415 	stw	r16,16(sp)
 200689c:	15c07a16 	blt	r2,r23,2006a88 <quorem+0x220>
 20068a0:	bdffffc4 	addi	r23,r23,-1
 20068a4:	bde9883a 	add	r20,r23,r23
 20068a8:	28c00504 	addi	r3,r5,20
 20068ac:	a529883a 	add	r20,r20,r20
 20068b0:	1d39883a 	add	fp,r3,r20
 20068b4:	24c00504 	addi	r19,r4,20
 20068b8:	d9400215 	stw	r5,8(sp)
 20068bc:	9d29883a 	add	r20,r19,r20
 20068c0:	e1400017 	ldw	r5,0(fp)
 20068c4:	d9000015 	stw	r4,0(sp)
 20068c8:	a1000017 	ldw	r4,0(r20)
 20068cc:	29400044 	addi	r5,r5,1
 20068d0:	d8c00115 	stw	r3,4(sp)
 20068d4:	dd000315 	stw	r20,12(sp)
 20068d8:	200e2cc0 	call	200e2cc <__udivsi3>
 20068dc:	1025883a 	mov	r18,r2
 20068e0:	10003026 	beq	r2,zero,20069a4 <quorem+0x13c>
 20068e4:	dc400117 	ldw	r17,4(sp)
 20068e8:	9829883a 	mov	r20,r19
 20068ec:	002d883a 	mov	r22,zero
 20068f0:	0021883a 	mov	r16,zero
 20068f4:	8d400017 	ldw	r21,0(r17)
 20068f8:	900b883a 	mov	r5,r18
 20068fc:	8c400104 	addi	r17,r17,4
 2006900:	a93fffcc 	andi	r4,r21,65535
 2006904:	200e2dc0 	call	200e2dc <__mulsi3>
 2006908:	a808d43a 	srli	r4,r21,16
 200690c:	900b883a 	mov	r5,r18
 2006910:	b0ad883a 	add	r22,r22,r2
 2006914:	200e2dc0 	call	200e2dc <__mulsi3>
 2006918:	a1000017 	ldw	r4,0(r20)
 200691c:	b00cd43a 	srli	r6,r22,16
 2006920:	b0ffffcc 	andi	r3,r22,65535
 2006924:	217fffcc 	andi	r5,r4,65535
 2006928:	2c21883a 	add	r16,r5,r16
 200692c:	80c7c83a 	sub	r3,r16,r3
 2006930:	2008d43a 	srli	r4,r4,16
 2006934:	3085883a 	add	r2,r6,r2
 2006938:	1821d43a 	srai	r16,r3,16
 200693c:	117fffcc 	andi	r5,r2,65535
 2006940:	2149c83a 	sub	r4,r4,r5
 2006944:	2421883a 	add	r16,r4,r16
 2006948:	8008943a 	slli	r4,r16,16
 200694c:	18ffffcc 	andi	r3,r3,65535
 2006950:	102cd43a 	srli	r22,r2,16
 2006954:	20c8b03a 	or	r4,r4,r3
 2006958:	a1000015 	stw	r4,0(r20)
 200695c:	8021d43a 	srai	r16,r16,16
 2006960:	a5000104 	addi	r20,r20,4
 2006964:	e47fe32e 	bgeu	fp,r17,20068f4 <quorem+0x8c>
 2006968:	d8c00317 	ldw	r3,12(sp)
 200696c:	18800017 	ldw	r2,0(r3)
 2006970:	10000c1e 	bne	r2,zero,20069a4 <quorem+0x13c>
 2006974:	18bfff04 	addi	r2,r3,-4
 2006978:	9880082e 	bgeu	r19,r2,200699c <quorem+0x134>
 200697c:	18ffff17 	ldw	r3,-4(r3)
 2006980:	18000326 	beq	r3,zero,2006990 <quorem+0x128>
 2006984:	00000506 	br	200699c <quorem+0x134>
 2006988:	10c00017 	ldw	r3,0(r2)
 200698c:	1800031e 	bne	r3,zero,200699c <quorem+0x134>
 2006990:	10bfff04 	addi	r2,r2,-4
 2006994:	bdffffc4 	addi	r23,r23,-1
 2006998:	98bffb36 	bltu	r19,r2,2006988 <quorem+0x120>
 200699c:	d8c00017 	ldw	r3,0(sp)
 20069a0:	1dc00415 	stw	r23,16(r3)
 20069a4:	d9000017 	ldw	r4,0(sp)
 20069a8:	d9400217 	ldw	r5,8(sp)
 20069ac:	200a8d00 	call	200a8d0 <__mcmp>
 20069b0:	10002816 	blt	r2,zero,2006a54 <quorem+0x1ec>
 20069b4:	dc400117 	ldw	r17,4(sp)
 20069b8:	94800044 	addi	r18,r18,1
 20069bc:	980d883a 	mov	r6,r19
 20069c0:	0007883a 	mov	r3,zero
 20069c4:	31000017 	ldw	r4,0(r6)
 20069c8:	89400017 	ldw	r5,0(r17)
 20069cc:	31800104 	addi	r6,r6,4
 20069d0:	20bfffcc 	andi	r2,r4,65535
 20069d4:	10c7883a 	add	r3,r2,r3
 20069d8:	28bfffcc 	andi	r2,r5,65535
 20069dc:	1885c83a 	sub	r2,r3,r2
 20069e0:	280ad43a 	srli	r5,r5,16
 20069e4:	2008d43a 	srli	r4,r4,16
 20069e8:	1007d43a 	srai	r3,r2,16
 20069ec:	10bfffcc 	andi	r2,r2,65535
 20069f0:	2149c83a 	sub	r4,r4,r5
 20069f4:	20c9883a 	add	r4,r4,r3
 20069f8:	200a943a 	slli	r5,r4,16
 20069fc:	8c400104 	addi	r17,r17,4
 2006a00:	2007d43a 	srai	r3,r4,16
 2006a04:	2884b03a 	or	r2,r5,r2
 2006a08:	30bfff15 	stw	r2,-4(r6)
 2006a0c:	e47fed2e 	bgeu	fp,r17,20069c4 <quorem+0x15c>
 2006a10:	bdc5883a 	add	r2,r23,r23
 2006a14:	1085883a 	add	r2,r2,r2
 2006a18:	9887883a 	add	r3,r19,r2
 2006a1c:	18800017 	ldw	r2,0(r3)
 2006a20:	10000c1e 	bne	r2,zero,2006a54 <quorem+0x1ec>
 2006a24:	18bfff04 	addi	r2,r3,-4
 2006a28:	9880082e 	bgeu	r19,r2,2006a4c <quorem+0x1e4>
 2006a2c:	18ffff17 	ldw	r3,-4(r3)
 2006a30:	18000326 	beq	r3,zero,2006a40 <quorem+0x1d8>
 2006a34:	00000506 	br	2006a4c <quorem+0x1e4>
 2006a38:	10c00017 	ldw	r3,0(r2)
 2006a3c:	1800031e 	bne	r3,zero,2006a4c <quorem+0x1e4>
 2006a40:	10bfff04 	addi	r2,r2,-4
 2006a44:	bdffffc4 	addi	r23,r23,-1
 2006a48:	98bffb36 	bltu	r19,r2,2006a38 <quorem+0x1d0>
 2006a4c:	d8c00017 	ldw	r3,0(sp)
 2006a50:	1dc00415 	stw	r23,16(r3)
 2006a54:	9005883a 	mov	r2,r18
 2006a58:	dfc00d17 	ldw	ra,52(sp)
 2006a5c:	df000c17 	ldw	fp,48(sp)
 2006a60:	ddc00b17 	ldw	r23,44(sp)
 2006a64:	dd800a17 	ldw	r22,40(sp)
 2006a68:	dd400917 	ldw	r21,36(sp)
 2006a6c:	dd000817 	ldw	r20,32(sp)
 2006a70:	dcc00717 	ldw	r19,28(sp)
 2006a74:	dc800617 	ldw	r18,24(sp)
 2006a78:	dc400517 	ldw	r17,20(sp)
 2006a7c:	dc000417 	ldw	r16,16(sp)
 2006a80:	dec00e04 	addi	sp,sp,56
 2006a84:	f800283a 	ret
 2006a88:	0005883a 	mov	r2,zero
 2006a8c:	003ff206 	br	2006a58 <quorem+0x1f0>

02006a90 <_dtoa_r>:
 2006a90:	20801017 	ldw	r2,64(r4)
 2006a94:	deffde04 	addi	sp,sp,-136
 2006a98:	dd401d15 	stw	r21,116(sp)
 2006a9c:	dcc01b15 	stw	r19,108(sp)
 2006aa0:	dc801a15 	stw	r18,104(sp)
 2006aa4:	dc401915 	stw	r17,100(sp)
 2006aa8:	dc001815 	stw	r16,96(sp)
 2006aac:	dfc02115 	stw	ra,132(sp)
 2006ab0:	df002015 	stw	fp,128(sp)
 2006ab4:	ddc01f15 	stw	r23,124(sp)
 2006ab8:	dd801e15 	stw	r22,120(sp)
 2006abc:	dd001c15 	stw	r20,112(sp)
 2006ac0:	d9c00315 	stw	r7,12(sp)
 2006ac4:	2021883a 	mov	r16,r4
 2006ac8:	302b883a 	mov	r21,r6
 2006acc:	2825883a 	mov	r18,r5
 2006ad0:	dc402417 	ldw	r17,144(sp)
 2006ad4:	3027883a 	mov	r19,r6
 2006ad8:	10000826 	beq	r2,zero,2006afc <_dtoa_r+0x6c>
 2006adc:	21801117 	ldw	r6,68(r4)
 2006ae0:	00c00044 	movi	r3,1
 2006ae4:	100b883a 	mov	r5,r2
 2006ae8:	1986983a 	sll	r3,r3,r6
 2006aec:	11800115 	stw	r6,4(r2)
 2006af0:	10c00215 	stw	r3,8(r2)
 2006af4:	2009fe80 	call	2009fe8 <_Bfree>
 2006af8:	80001015 	stw	zero,64(r16)
 2006afc:	a8002d16 	blt	r21,zero,2006bb4 <_dtoa_r+0x124>
 2006b00:	88000015 	stw	zero,0(r17)
 2006b04:	a8dffc2c 	andhi	r3,r21,32752
 2006b08:	009ffc34 	movhi	r2,32752
 2006b0c:	18801b26 	beq	r3,r2,2006b7c <_dtoa_r+0xec>
 2006b10:	9009883a 	mov	r4,r18
 2006b14:	980b883a 	mov	r5,r19
 2006b18:	000d883a 	mov	r6,zero
 2006b1c:	000f883a 	mov	r7,zero
 2006b20:	200f5200 	call	200f520 <__eqdf2>
 2006b24:	10002a1e 	bne	r2,zero,2006bd0 <_dtoa_r+0x140>
 2006b28:	d8c02317 	ldw	r3,140(sp)
 2006b2c:	d9002517 	ldw	r4,148(sp)
 2006b30:	00800044 	movi	r2,1
 2006b34:	18800015 	stw	r2,0(r3)
 2006b38:	2001a226 	beq	r4,zero,20071c4 <_dtoa_r+0x734>
 2006b3c:	008080b4 	movhi	r2,514
 2006b40:	10a2ca44 	addi	r2,r2,-29911
 2006b44:	20800015 	stw	r2,0(r4)
 2006b48:	10bfffc4 	addi	r2,r2,-1
 2006b4c:	dfc02117 	ldw	ra,132(sp)
 2006b50:	df002017 	ldw	fp,128(sp)
 2006b54:	ddc01f17 	ldw	r23,124(sp)
 2006b58:	dd801e17 	ldw	r22,120(sp)
 2006b5c:	dd401d17 	ldw	r21,116(sp)
 2006b60:	dd001c17 	ldw	r20,112(sp)
 2006b64:	dcc01b17 	ldw	r19,108(sp)
 2006b68:	dc801a17 	ldw	r18,104(sp)
 2006b6c:	dc401917 	ldw	r17,100(sp)
 2006b70:	dc001817 	ldw	r16,96(sp)
 2006b74:	dec02204 	addi	sp,sp,136
 2006b78:	f800283a 	ret
 2006b7c:	d8c02317 	ldw	r3,140(sp)
 2006b80:	0089c3c4 	movi	r2,9999
 2006b84:	18800015 	stw	r2,0(r3)
 2006b88:	90017c26 	beq	r18,zero,200717c <_dtoa_r+0x6ec>
 2006b8c:	008080b4 	movhi	r2,514
 2006b90:	10a2d604 	addi	r2,r2,-29864
 2006b94:	d9002517 	ldw	r4,148(sp)
 2006b98:	203fec26 	beq	r4,zero,2006b4c <_dtoa_r+0xbc>
 2006b9c:	10c000c7 	ldb	r3,3(r2)
 2006ba0:	18017d1e 	bne	r3,zero,2007198 <_dtoa_r+0x708>
 2006ba4:	10c000c4 	addi	r3,r2,3
 2006ba8:	d9802517 	ldw	r6,148(sp)
 2006bac:	30c00015 	stw	r3,0(r6)
 2006bb0:	003fe606 	br	2006b4c <_dtoa_r+0xbc>
 2006bb4:	04e00034 	movhi	r19,32768
 2006bb8:	9cffffc4 	addi	r19,r19,-1
 2006bbc:	00800044 	movi	r2,1
 2006bc0:	ace6703a 	and	r19,r21,r19
 2006bc4:	88800015 	stw	r2,0(r17)
 2006bc8:	982b883a 	mov	r21,r19
 2006bcc:	003fcd06 	br	2006b04 <_dtoa_r+0x74>
 2006bd0:	d8800204 	addi	r2,sp,8
 2006bd4:	a822d53a 	srli	r17,r21,20
 2006bd8:	d8800015 	stw	r2,0(sp)
 2006bdc:	8009883a 	mov	r4,r16
 2006be0:	900b883a 	mov	r5,r18
 2006be4:	980d883a 	mov	r6,r19
 2006be8:	d9c00104 	addi	r7,sp,4
 2006bec:	200ac440 	call	200ac44 <__d2b>
 2006bf0:	1039883a 	mov	fp,r2
 2006bf4:	88016a1e 	bne	r17,zero,20071a0 <_dtoa_r+0x710>
 2006bf8:	dd000217 	ldw	r20,8(sp)
 2006bfc:	dc400117 	ldw	r17,4(sp)
 2006c00:	00befbc4 	movi	r2,-1041
 2006c04:	a463883a 	add	r17,r20,r17
 2006c08:	8882ea16 	blt	r17,r2,20077b4 <_dtoa_r+0xd24>
 2006c0c:	00bf0384 	movi	r2,-1010
 2006c10:	1445c83a 	sub	r2,r2,r17
 2006c14:	89010484 	addi	r4,r17,1042
 2006c18:	a8aa983a 	sll	r21,r21,r2
 2006c1c:	9108d83a 	srl	r4,r18,r4
 2006c20:	a908b03a 	or	r4,r21,r4
 2006c24:	20109f80 	call	20109f8 <__floatunsidf>
 2006c28:	017f8434 	movhi	r5,65040
 2006c2c:	01800044 	movi	r6,1
 2006c30:	1009883a 	mov	r4,r2
 2006c34:	194b883a 	add	r5,r3,r5
 2006c38:	8c7fffc4 	addi	r17,r17,-1
 2006c3c:	d9800f15 	stw	r6,60(sp)
 2006c40:	000d883a 	mov	r6,zero
 2006c44:	01cffe34 	movhi	r7,16376
 2006c48:	200ffd00 	call	200ffd0 <__subdf3>
 2006c4c:	0198dbf4 	movhi	r6,25455
 2006c50:	01cff4f4 	movhi	r7,16339
 2006c54:	1009883a 	mov	r4,r2
 2006c58:	180b883a 	mov	r5,r3
 2006c5c:	3190d844 	addi	r6,r6,17249
 2006c60:	39e1e9c4 	addi	r7,r7,-30809
 2006c64:	200f7640 	call	200f764 <__muldf3>
 2006c68:	01a2d874 	movhi	r6,35681
 2006c6c:	01cff1f4 	movhi	r7,16327
 2006c70:	180b883a 	mov	r5,r3
 2006c74:	31b22cc4 	addi	r6,r6,-14157
 2006c78:	39e28a04 	addi	r7,r7,-30168
 2006c7c:	1009883a 	mov	r4,r2
 2006c80:	200e3040 	call	200e304 <__adddf3>
 2006c84:	8809883a 	mov	r4,r17
 2006c88:	102d883a 	mov	r22,r2
 2006c8c:	182b883a 	mov	r21,r3
 2006c90:	20109280 	call	2010928 <__floatsidf>
 2006c94:	019427f4 	movhi	r6,20639
 2006c98:	01cff4f4 	movhi	r7,16339
 2006c9c:	1009883a 	mov	r4,r2
 2006ca0:	180b883a 	mov	r5,r3
 2006ca4:	319e7ec4 	addi	r6,r6,31227
 2006ca8:	39d104c4 	addi	r7,r7,17427
 2006cac:	200f7640 	call	200f764 <__muldf3>
 2006cb0:	b009883a 	mov	r4,r22
 2006cb4:	a80b883a 	mov	r5,r21
 2006cb8:	100d883a 	mov	r6,r2
 2006cbc:	180f883a 	mov	r7,r3
 2006cc0:	200e3040 	call	200e304 <__adddf3>
 2006cc4:	1009883a 	mov	r4,r2
 2006cc8:	180b883a 	mov	r5,r3
 2006ccc:	102d883a 	mov	r22,r2
 2006cd0:	182b883a 	mov	r21,r3
 2006cd4:	20108a00 	call	20108a0 <__fixdfsi>
 2006cd8:	b009883a 	mov	r4,r22
 2006cdc:	a80b883a 	mov	r5,r21
 2006ce0:	000d883a 	mov	r6,zero
 2006ce4:	000f883a 	mov	r7,zero
 2006ce8:	d8800515 	stw	r2,20(sp)
 2006cec:	200f6840 	call	200f684 <__ledf2>
 2006cf0:	10023116 	blt	r2,zero,20075b8 <_dtoa_r+0xb28>
 2006cf4:	d8c00517 	ldw	r3,20(sp)
 2006cf8:	00800584 	movi	r2,22
 2006cfc:	10c21f36 	bltu	r2,r3,200757c <_dtoa_r+0xaec>
 2006d00:	180490fa 	slli	r2,r3,3
 2006d04:	00c080b4 	movhi	r3,514
 2006d08:	18e2f104 	addi	r3,r3,-29756
 2006d0c:	1885883a 	add	r2,r3,r2
 2006d10:	11000017 	ldw	r4,0(r2)
 2006d14:	11400117 	ldw	r5,4(r2)
 2006d18:	900d883a 	mov	r6,r18
 2006d1c:	980f883a 	mov	r7,r19
 2006d20:	200f5a40 	call	200f5a4 <__gedf2>
 2006d24:	0082a70e 	bge	zero,r2,20077c4 <_dtoa_r+0xd34>
 2006d28:	d9000517 	ldw	r4,20(sp)
 2006d2c:	d8000d15 	stw	zero,52(sp)
 2006d30:	213fffc4 	addi	r4,r4,-1
 2006d34:	d9000515 	stw	r4,20(sp)
 2006d38:	a463c83a 	sub	r17,r20,r17
 2006d3c:	8dbfffc4 	addi	r22,r17,-1
 2006d40:	b0021916 	blt	r22,zero,20075a8 <_dtoa_r+0xb18>
 2006d44:	d8000815 	stw	zero,32(sp)
 2006d48:	d8800517 	ldw	r2,20(sp)
 2006d4c:	10020e16 	blt	r2,zero,2007588 <_dtoa_r+0xaf8>
 2006d50:	b0ad883a 	add	r22,r22,r2
 2006d54:	d8800a15 	stw	r2,40(sp)
 2006d58:	d8000915 	stw	zero,36(sp)
 2006d5c:	d8c00317 	ldw	r3,12(sp)
 2006d60:	00800244 	movi	r2,9
 2006d64:	10c11a36 	bltu	r2,r3,20071d0 <_dtoa_r+0x740>
 2006d68:	00800144 	movi	r2,5
 2006d6c:	10c4fc0e 	bge	r2,r3,2008160 <_dtoa_r+0x16d0>
 2006d70:	18ffff04 	addi	r3,r3,-4
 2006d74:	d8c00315 	stw	r3,12(sp)
 2006d78:	0029883a 	mov	r20,zero
 2006d7c:	d9800317 	ldw	r6,12(sp)
 2006d80:	008000c4 	movi	r2,3
 2006d84:	3083bd26 	beq	r6,r2,2007c7c <_dtoa_r+0x11ec>
 2006d88:	1183670e 	bge	r2,r6,2007b28 <_dtoa_r+0x1098>
 2006d8c:	d8c00317 	ldw	r3,12(sp)
 2006d90:	00800104 	movi	r2,4
 2006d94:	1882e726 	beq	r3,r2,2007934 <_dtoa_r+0xea4>
 2006d98:	00800144 	movi	r2,5
 2006d9c:	1884f21e 	bne	r3,r2,2008168 <_dtoa_r+0x16d8>
 2006da0:	00800044 	movi	r2,1
 2006da4:	d8800b15 	stw	r2,44(sp)
 2006da8:	d8c02217 	ldw	r3,136(sp)
 2006dac:	d9000517 	ldw	r4,20(sp)
 2006db0:	1907883a 	add	r3,r3,r4
 2006db4:	19800044 	addi	r6,r3,1
 2006db8:	d8c00c15 	stw	r3,48(sp)
 2006dbc:	d9800615 	stw	r6,24(sp)
 2006dc0:	0183c30e 	bge	zero,r6,2007cd0 <_dtoa_r+0x1240>
 2006dc4:	d9800617 	ldw	r6,24(sp)
 2006dc8:	3023883a 	mov	r17,r6
 2006dcc:	80001115 	stw	zero,68(r16)
 2006dd0:	008005c4 	movi	r2,23
 2006dd4:	1184f62e 	bgeu	r2,r6,20081b0 <_dtoa_r+0x1720>
 2006dd8:	00c00044 	movi	r3,1
 2006ddc:	00800104 	movi	r2,4
 2006de0:	1085883a 	add	r2,r2,r2
 2006de4:	11000504 	addi	r4,r2,20
 2006de8:	180b883a 	mov	r5,r3
 2006dec:	18c00044 	addi	r3,r3,1
 2006df0:	313ffb2e 	bgeu	r6,r4,2006de0 <_dtoa_r+0x350>
 2006df4:	81401115 	stw	r5,68(r16)
 2006df8:	8009883a 	mov	r4,r16
 2006dfc:	2009f400 	call	2009f40 <_Balloc>
 2006e00:	d8800715 	stw	r2,28(sp)
 2006e04:	80801015 	stw	r2,64(r16)
 2006e08:	00800384 	movi	r2,14
 2006e0c:	1440fd36 	bltu	r2,r17,2007204 <_dtoa_r+0x774>
 2006e10:	a000fc26 	beq	r20,zero,2007204 <_dtoa_r+0x774>
 2006e14:	d8800517 	ldw	r2,20(sp)
 2006e18:	0083b90e 	bge	zero,r2,2007d00 <_dtoa_r+0x1270>
 2006e1c:	d8c00517 	ldw	r3,20(sp)
 2006e20:	108003cc 	andi	r2,r2,15
 2006e24:	100490fa 	slli	r2,r2,3
 2006e28:	182fd13a 	srai	r23,r3,4
 2006e2c:	00c080b4 	movhi	r3,514
 2006e30:	18e2f104 	addi	r3,r3,-29756
 2006e34:	1885883a 	add	r2,r3,r2
 2006e38:	b8c0040c 	andi	r3,r23,16
 2006e3c:	12c00017 	ldw	r11,0(r2)
 2006e40:	12800117 	ldw	r10,4(r2)
 2006e44:	18039726 	beq	r3,zero,2007ca4 <_dtoa_r+0x1214>
 2006e48:	008080b4 	movhi	r2,514
 2006e4c:	10a2e704 	addi	r2,r2,-29796
 2006e50:	11800817 	ldw	r6,32(r2)
 2006e54:	11c00917 	ldw	r7,36(r2)
 2006e58:	9009883a 	mov	r4,r18
 2006e5c:	980b883a 	mov	r5,r19
 2006e60:	da801615 	stw	r10,88(sp)
 2006e64:	dac01515 	stw	r11,84(sp)
 2006e68:	200eba00 	call	200eba0 <__divdf3>
 2006e6c:	da801617 	ldw	r10,88(sp)
 2006e70:	dac01517 	ldw	r11,84(sp)
 2006e74:	bdc003cc 	andi	r23,r23,15
 2006e78:	044000c4 	movi	r17,3
 2006e7c:	d8800e15 	stw	r2,56(sp)
 2006e80:	182b883a 	mov	r21,r3
 2006e84:	b8001126 	beq	r23,zero,2006ecc <_dtoa_r+0x43c>
 2006e88:	050080b4 	movhi	r20,514
 2006e8c:	a522e704 	addi	r20,r20,-29796
 2006e90:	5805883a 	mov	r2,r11
 2006e94:	5007883a 	mov	r3,r10
 2006e98:	b980004c 	andi	r6,r23,1
 2006e9c:	1009883a 	mov	r4,r2
 2006ea0:	b82fd07a 	srai	r23,r23,1
 2006ea4:	180b883a 	mov	r5,r3
 2006ea8:	30000426 	beq	r6,zero,2006ebc <_dtoa_r+0x42c>
 2006eac:	a1800017 	ldw	r6,0(r20)
 2006eb0:	a1c00117 	ldw	r7,4(r20)
 2006eb4:	8c400044 	addi	r17,r17,1
 2006eb8:	200f7640 	call	200f764 <__muldf3>
 2006ebc:	a5000204 	addi	r20,r20,8
 2006ec0:	b83ff51e 	bne	r23,zero,2006e98 <_dtoa_r+0x408>
 2006ec4:	1017883a 	mov	r11,r2
 2006ec8:	1815883a 	mov	r10,r3
 2006ecc:	d9000e17 	ldw	r4,56(sp)
 2006ed0:	a80b883a 	mov	r5,r21
 2006ed4:	580d883a 	mov	r6,r11
 2006ed8:	500f883a 	mov	r7,r10
 2006edc:	200eba00 	call	200eba0 <__divdf3>
 2006ee0:	1029883a 	mov	r20,r2
 2006ee4:	182b883a 	mov	r21,r3
 2006ee8:	d9800d17 	ldw	r6,52(sp)
 2006eec:	30000626 	beq	r6,zero,2006f08 <_dtoa_r+0x478>
 2006ef0:	a009883a 	mov	r4,r20
 2006ef4:	a80b883a 	mov	r5,r21
 2006ef8:	000d883a 	mov	r6,zero
 2006efc:	01cffc34 	movhi	r7,16368
 2006f00:	200f6840 	call	200f684 <__ledf2>
 2006f04:	10043216 	blt	r2,zero,2007fd0 <_dtoa_r+0x1540>
 2006f08:	8809883a 	mov	r4,r17
 2006f0c:	20109280 	call	2010928 <__floatsidf>
 2006f10:	1009883a 	mov	r4,r2
 2006f14:	180b883a 	mov	r5,r3
 2006f18:	a00d883a 	mov	r6,r20
 2006f1c:	a80f883a 	mov	r7,r21
 2006f20:	200f7640 	call	200f764 <__muldf3>
 2006f24:	000d883a 	mov	r6,zero
 2006f28:	1009883a 	mov	r4,r2
 2006f2c:	180b883a 	mov	r5,r3
 2006f30:	01d00734 	movhi	r7,16412
 2006f34:	200e3040 	call	200e304 <__adddf3>
 2006f38:	1023883a 	mov	r17,r2
 2006f3c:	d9800617 	ldw	r6,24(sp)
 2006f40:	00bf3034 	movhi	r2,64704
 2006f44:	1885883a 	add	r2,r3,r2
 2006f48:	d8800e15 	stw	r2,56(sp)
 2006f4c:	30032e26 	beq	r6,zero,2007c08 <_dtoa_r+0x1178>
 2006f50:	d8c00517 	ldw	r3,20(sp)
 2006f54:	da800617 	ldw	r10,24(sp)
 2006f58:	d8c01215 	stw	r3,72(sp)
 2006f5c:	d9000b17 	ldw	r4,44(sp)
 2006f60:	2003b026 	beq	r4,zero,2007e24 <_dtoa_r+0x1394>
 2006f64:	50bfffc4 	addi	r2,r10,-1
 2006f68:	100490fa 	slli	r2,r2,3
 2006f6c:	00c080b4 	movhi	r3,514
 2006f70:	18e2f104 	addi	r3,r3,-29756
 2006f74:	1885883a 	add	r2,r3,r2
 2006f78:	11800017 	ldw	r6,0(r2)
 2006f7c:	11c00117 	ldw	r7,4(r2)
 2006f80:	d8800717 	ldw	r2,28(sp)
 2006f84:	0009883a 	mov	r4,zero
 2006f88:	014ff834 	movhi	r5,16352
 2006f8c:	da801615 	stw	r10,88(sp)
 2006f90:	15c00044 	addi	r23,r2,1
 2006f94:	200eba00 	call	200eba0 <__divdf3>
 2006f98:	d9c00e17 	ldw	r7,56(sp)
 2006f9c:	880d883a 	mov	r6,r17
 2006fa0:	1009883a 	mov	r4,r2
 2006fa4:	180b883a 	mov	r5,r3
 2006fa8:	200ffd00 	call	200ffd0 <__subdf3>
 2006fac:	a80b883a 	mov	r5,r21
 2006fb0:	a009883a 	mov	r4,r20
 2006fb4:	d8c01015 	stw	r3,64(sp)
 2006fb8:	d8800e15 	stw	r2,56(sp)
 2006fbc:	20108a00 	call	20108a0 <__fixdfsi>
 2006fc0:	1009883a 	mov	r4,r2
 2006fc4:	d8801715 	stw	r2,92(sp)
 2006fc8:	20109280 	call	2010928 <__floatsidf>
 2006fcc:	a009883a 	mov	r4,r20
 2006fd0:	a80b883a 	mov	r5,r21
 2006fd4:	100d883a 	mov	r6,r2
 2006fd8:	180f883a 	mov	r7,r3
 2006fdc:	200ffd00 	call	200ffd0 <__subdf3>
 2006fe0:	da001717 	ldw	r8,92(sp)
 2006fe4:	1829883a 	mov	r20,r3
 2006fe8:	d8c00717 	ldw	r3,28(sp)
 2006fec:	d9000e17 	ldw	r4,56(sp)
 2006ff0:	d9401017 	ldw	r5,64(sp)
 2006ff4:	42000c04 	addi	r8,r8,48
 2006ff8:	1023883a 	mov	r17,r2
 2006ffc:	1a000005 	stb	r8,0(r3)
 2007000:	880d883a 	mov	r6,r17
 2007004:	a00f883a 	mov	r7,r20
 2007008:	402b883a 	mov	r21,r8
 200700c:	200f5a40 	call	200f5a4 <__gedf2>
 2007010:	00844516 	blt	zero,r2,2008128 <_dtoa_r+0x1698>
 2007014:	0009883a 	mov	r4,zero
 2007018:	014ffc34 	movhi	r5,16368
 200701c:	880d883a 	mov	r6,r17
 2007020:	a00f883a 	mov	r7,r20
 2007024:	200ffd00 	call	200ffd0 <__subdf3>
 2007028:	d9000e17 	ldw	r4,56(sp)
 200702c:	d9401017 	ldw	r5,64(sp)
 2007030:	100d883a 	mov	r6,r2
 2007034:	180f883a 	mov	r7,r3
 2007038:	200f5a40 	call	200f5a4 <__gedf2>
 200703c:	da801617 	ldw	r10,88(sp)
 2007040:	00843616 	blt	zero,r2,200811c <_dtoa_r+0x168c>
 2007044:	00800044 	movi	r2,1
 2007048:	12806e0e 	bge	r2,r10,2007204 <_dtoa_r+0x774>
 200704c:	d9000717 	ldw	r4,28(sp)
 2007050:	dd801315 	stw	r22,76(sp)
 2007054:	dc001115 	stw	r16,68(sp)
 2007058:	2295883a 	add	r10,r4,r10
 200705c:	dcc01415 	stw	r19,80(sp)
 2007060:	502d883a 	mov	r22,r10
 2007064:	dcc01017 	ldw	r19,64(sp)
 2007068:	b821883a 	mov	r16,r23
 200706c:	dc801015 	stw	r18,64(sp)
 2007070:	dc800e17 	ldw	r18,56(sp)
 2007074:	00000906 	br	200709c <_dtoa_r+0x60c>
 2007078:	200ffd00 	call	200ffd0 <__subdf3>
 200707c:	1009883a 	mov	r4,r2
 2007080:	180b883a 	mov	r5,r3
 2007084:	900d883a 	mov	r6,r18
 2007088:	980f883a 	mov	r7,r19
 200708c:	200f6840 	call	200f684 <__ledf2>
 2007090:	10040e16 	blt	r2,zero,20080cc <_dtoa_r+0x163c>
 2007094:	b821883a 	mov	r16,r23
 2007098:	bd841026 	beq	r23,r22,20080dc <_dtoa_r+0x164c>
 200709c:	9009883a 	mov	r4,r18
 20070a0:	980b883a 	mov	r5,r19
 20070a4:	000d883a 	mov	r6,zero
 20070a8:	01d00934 	movhi	r7,16420
 20070ac:	200f7640 	call	200f764 <__muldf3>
 20070b0:	000d883a 	mov	r6,zero
 20070b4:	01d00934 	movhi	r7,16420
 20070b8:	8809883a 	mov	r4,r17
 20070bc:	a00b883a 	mov	r5,r20
 20070c0:	1025883a 	mov	r18,r2
 20070c4:	1827883a 	mov	r19,r3
 20070c8:	200f7640 	call	200f764 <__muldf3>
 20070cc:	180b883a 	mov	r5,r3
 20070d0:	1009883a 	mov	r4,r2
 20070d4:	1823883a 	mov	r17,r3
 20070d8:	1029883a 	mov	r20,r2
 20070dc:	20108a00 	call	20108a0 <__fixdfsi>
 20070e0:	1009883a 	mov	r4,r2
 20070e4:	102b883a 	mov	r21,r2
 20070e8:	20109280 	call	2010928 <__floatsidf>
 20070ec:	a009883a 	mov	r4,r20
 20070f0:	880b883a 	mov	r5,r17
 20070f4:	100d883a 	mov	r6,r2
 20070f8:	180f883a 	mov	r7,r3
 20070fc:	200ffd00 	call	200ffd0 <__subdf3>
 2007100:	ad400c04 	addi	r21,r21,48
 2007104:	1009883a 	mov	r4,r2
 2007108:	180b883a 	mov	r5,r3
 200710c:	900d883a 	mov	r6,r18
 2007110:	980f883a 	mov	r7,r19
 2007114:	85400005 	stb	r21,0(r16)
 2007118:	1023883a 	mov	r17,r2
 200711c:	1829883a 	mov	r20,r3
 2007120:	200f6840 	call	200f684 <__ledf2>
 2007124:	bdc00044 	addi	r23,r23,1
 2007128:	0009883a 	mov	r4,zero
 200712c:	014ffc34 	movhi	r5,16368
 2007130:	880d883a 	mov	r6,r17
 2007134:	a00f883a 	mov	r7,r20
 2007138:	103fcf0e 	bge	r2,zero,2007078 <_dtoa_r+0x5e8>
 200713c:	d9801217 	ldw	r6,72(sp)
 2007140:	dc001117 	ldw	r16,68(sp)
 2007144:	d9800515 	stw	r6,20(sp)
 2007148:	8009883a 	mov	r4,r16
 200714c:	e00b883a 	mov	r5,fp
 2007150:	2009fe80 	call	2009fe8 <_Bfree>
 2007154:	d8c00517 	ldw	r3,20(sp)
 2007158:	d9002317 	ldw	r4,140(sp)
 200715c:	d9802517 	ldw	r6,148(sp)
 2007160:	b8000005 	stb	zero,0(r23)
 2007164:	18800044 	addi	r2,r3,1
 2007168:	20800015 	stw	r2,0(r4)
 200716c:	30027226 	beq	r6,zero,2007b38 <_dtoa_r+0x10a8>
 2007170:	35c00015 	stw	r23,0(r6)
 2007174:	d8800717 	ldw	r2,28(sp)
 2007178:	003e7406 	br	2006b4c <_dtoa_r+0xbc>
 200717c:	00800434 	movhi	r2,16
 2007180:	10bfffc4 	addi	r2,r2,-1
 2007184:	a8aa703a 	and	r21,r21,r2
 2007188:	a83e801e 	bne	r21,zero,2006b8c <_dtoa_r+0xfc>
 200718c:	008080b4 	movhi	r2,514
 2007190:	10a2d304 	addi	r2,r2,-29876
 2007194:	003e7f06 	br	2006b94 <_dtoa_r+0x104>
 2007198:	10c00204 	addi	r3,r2,8
 200719c:	003e8206 	br	2006ba8 <_dtoa_r+0x118>
 20071a0:	01400434 	movhi	r5,16
 20071a4:	297fffc4 	addi	r5,r5,-1
 20071a8:	994a703a 	and	r5,r19,r5
 20071ac:	9009883a 	mov	r4,r18
 20071b0:	8c7f0044 	addi	r17,r17,-1023
 20071b4:	294ffc34 	orhi	r5,r5,16368
 20071b8:	dd000217 	ldw	r20,8(sp)
 20071bc:	d8000f15 	stw	zero,60(sp)
 20071c0:	003e9f06 	br	2006c40 <_dtoa_r+0x1b0>
 20071c4:	008080b4 	movhi	r2,514
 20071c8:	10a2ca04 	addi	r2,r2,-29912
 20071cc:	003e5f06 	br	2006b4c <_dtoa_r+0xbc>
 20071d0:	80001115 	stw	zero,68(r16)
 20071d4:	8009883a 	mov	r4,r16
 20071d8:	000b883a 	mov	r5,zero
 20071dc:	2009f400 	call	2009f40 <_Balloc>
 20071e0:	01bfffc4 	movi	r6,-1
 20071e4:	d8800715 	stw	r2,28(sp)
 20071e8:	80801015 	stw	r2,64(r16)
 20071ec:	00800044 	movi	r2,1
 20071f0:	d9800c15 	stw	r6,48(sp)
 20071f4:	d8800b15 	stw	r2,44(sp)
 20071f8:	d9800615 	stw	r6,24(sp)
 20071fc:	d8002215 	stw	zero,136(sp)
 2007200:	d8000315 	stw	zero,12(sp)
 2007204:	d8800117 	ldw	r2,4(sp)
 2007208:	10008e16 	blt	r2,zero,2007444 <_dtoa_r+0x9b4>
 200720c:	d9000517 	ldw	r4,20(sp)
 2007210:	00c00384 	movi	r3,14
 2007214:	19008b16 	blt	r3,r4,2007444 <_dtoa_r+0x9b4>
 2007218:	200490fa 	slli	r2,r4,3
 200721c:	00c080b4 	movhi	r3,514
 2007220:	d9802217 	ldw	r6,136(sp)
 2007224:	18e2f104 	addi	r3,r3,-29756
 2007228:	1885883a 	add	r2,r3,r2
 200722c:	14400017 	ldw	r17,0(r2)
 2007230:	15000117 	ldw	r20,4(r2)
 2007234:	3001c716 	blt	r6,zero,2007954 <_dtoa_r+0xec4>
 2007238:	880d883a 	mov	r6,r17
 200723c:	a00f883a 	mov	r7,r20
 2007240:	9009883a 	mov	r4,r18
 2007244:	980b883a 	mov	r5,r19
 2007248:	200eba00 	call	200eba0 <__divdf3>
 200724c:	180b883a 	mov	r5,r3
 2007250:	1009883a 	mov	r4,r2
 2007254:	20108a00 	call	20108a0 <__fixdfsi>
 2007258:	1009883a 	mov	r4,r2
 200725c:	102d883a 	mov	r22,r2
 2007260:	20109280 	call	2010928 <__floatsidf>
 2007264:	1009883a 	mov	r4,r2
 2007268:	180b883a 	mov	r5,r3
 200726c:	880d883a 	mov	r6,r17
 2007270:	a00f883a 	mov	r7,r20
 2007274:	200f7640 	call	200f764 <__muldf3>
 2007278:	9009883a 	mov	r4,r18
 200727c:	980b883a 	mov	r5,r19
 2007280:	100d883a 	mov	r6,r2
 2007284:	180f883a 	mov	r7,r3
 2007288:	200ffd00 	call	200ffd0 <__subdf3>
 200728c:	d9000717 	ldw	r4,28(sp)
 2007290:	d9800617 	ldw	r6,24(sp)
 2007294:	180b883a 	mov	r5,r3
 2007298:	b0c00c04 	addi	r3,r22,48
 200729c:	20c00005 	stb	r3,0(r4)
 20072a0:	25c00044 	addi	r23,r4,1
 20072a4:	01000044 	movi	r4,1
 20072a8:	1011883a 	mov	r8,r2
 20072ac:	2807883a 	mov	r3,r5
 20072b0:	31003d26 	beq	r6,r4,20073a8 <_dtoa_r+0x918>
 20072b4:	000d883a 	mov	r6,zero
 20072b8:	01d00934 	movhi	r7,16420
 20072bc:	1009883a 	mov	r4,r2
 20072c0:	200f7640 	call	200f764 <__muldf3>
 20072c4:	1009883a 	mov	r4,r2
 20072c8:	180b883a 	mov	r5,r3
 20072cc:	000d883a 	mov	r6,zero
 20072d0:	000f883a 	mov	r7,zero
 20072d4:	1027883a 	mov	r19,r2
 20072d8:	182b883a 	mov	r21,r3
 20072dc:	200f5200 	call	200f520 <__eqdf2>
 20072e0:	103f9926 	beq	r2,zero,2007148 <_dtoa_r+0x6b8>
 20072e4:	d8c00617 	ldw	r3,24(sp)
 20072e8:	d9000717 	ldw	r4,28(sp)
 20072ec:	b825883a 	mov	r18,r23
 20072f0:	18bfffc4 	addi	r2,r3,-1
 20072f4:	20ad883a 	add	r22,r4,r2
 20072f8:	dc000315 	stw	r16,12(sp)
 20072fc:	00000a06 	br	2007328 <_dtoa_r+0x898>
 2007300:	200f7640 	call	200f764 <__muldf3>
 2007304:	1009883a 	mov	r4,r2
 2007308:	180b883a 	mov	r5,r3
 200730c:	000d883a 	mov	r6,zero
 2007310:	000f883a 	mov	r7,zero
 2007314:	1027883a 	mov	r19,r2
 2007318:	182b883a 	mov	r21,r3
 200731c:	b825883a 	mov	r18,r23
 2007320:	200f5200 	call	200f520 <__eqdf2>
 2007324:	10022626 	beq	r2,zero,2007bc0 <_dtoa_r+0x1130>
 2007328:	880d883a 	mov	r6,r17
 200732c:	a00f883a 	mov	r7,r20
 2007330:	9809883a 	mov	r4,r19
 2007334:	a80b883a 	mov	r5,r21
 2007338:	200eba00 	call	200eba0 <__divdf3>
 200733c:	180b883a 	mov	r5,r3
 2007340:	1009883a 	mov	r4,r2
 2007344:	20108a00 	call	20108a0 <__fixdfsi>
 2007348:	1009883a 	mov	r4,r2
 200734c:	1021883a 	mov	r16,r2
 2007350:	20109280 	call	2010928 <__floatsidf>
 2007354:	1009883a 	mov	r4,r2
 2007358:	180b883a 	mov	r5,r3
 200735c:	880d883a 	mov	r6,r17
 2007360:	a00f883a 	mov	r7,r20
 2007364:	200f7640 	call	200f764 <__muldf3>
 2007368:	9809883a 	mov	r4,r19
 200736c:	a80b883a 	mov	r5,r21
 2007370:	100d883a 	mov	r6,r2
 2007374:	180f883a 	mov	r7,r3
 2007378:	200ffd00 	call	200ffd0 <__subdf3>
 200737c:	82000c04 	addi	r8,r16,48
 2007380:	92000005 	stb	r8,0(r18)
 2007384:	1009883a 	mov	r4,r2
 2007388:	180b883a 	mov	r5,r3
 200738c:	000d883a 	mov	r6,zero
 2007390:	01d00934 	movhi	r7,16420
 2007394:	1011883a 	mov	r8,r2
 2007398:	bdc00044 	addi	r23,r23,1
 200739c:	95bfd81e 	bne	r18,r22,2007300 <_dtoa_r+0x870>
 20073a0:	802d883a 	mov	r22,r16
 20073a4:	dc000317 	ldw	r16,12(sp)
 20073a8:	4009883a 	mov	r4,r8
 20073ac:	180b883a 	mov	r5,r3
 20073b0:	400d883a 	mov	r6,r8
 20073b4:	180f883a 	mov	r7,r3
 20073b8:	200e3040 	call	200e304 <__adddf3>
 20073bc:	8809883a 	mov	r4,r17
 20073c0:	a00b883a 	mov	r5,r20
 20073c4:	100d883a 	mov	r6,r2
 20073c8:	180f883a 	mov	r7,r3
 20073cc:	1027883a 	mov	r19,r2
 20073d0:	1825883a 	mov	r18,r3
 20073d4:	200f6840 	call	200f684 <__ledf2>
 20073d8:	10000816 	blt	r2,zero,20073fc <_dtoa_r+0x96c>
 20073dc:	8809883a 	mov	r4,r17
 20073e0:	a00b883a 	mov	r5,r20
 20073e4:	980d883a 	mov	r6,r19
 20073e8:	900f883a 	mov	r7,r18
 20073ec:	200f5200 	call	200f520 <__eqdf2>
 20073f0:	103f551e 	bne	r2,zero,2007148 <_dtoa_r+0x6b8>
 20073f4:	b580004c 	andi	r22,r22,1
 20073f8:	b03f5326 	beq	r22,zero,2007148 <_dtoa_r+0x6b8>
 20073fc:	bd7fffc3 	ldbu	r21,-1(r23)
 2007400:	b8bfffc4 	addi	r2,r23,-1
 2007404:	1007883a 	mov	r3,r2
 2007408:	01400e44 	movi	r5,57
 200740c:	d9800717 	ldw	r6,28(sp)
 2007410:	00000506 	br	2007428 <_dtoa_r+0x998>
 2007414:	18ffffc4 	addi	r3,r3,-1
 2007418:	30825e26 	beq	r6,r2,2007d94 <_dtoa_r+0x1304>
 200741c:	1d400003 	ldbu	r21,0(r3)
 2007420:	102f883a 	mov	r23,r2
 2007424:	10bfffc4 	addi	r2,r2,-1
 2007428:	a9003fcc 	andi	r4,r21,255
 200742c:	2100201c 	xori	r4,r4,128
 2007430:	213fe004 	addi	r4,r4,-128
 2007434:	217ff726 	beq	r4,r5,2007414 <_dtoa_r+0x984>
 2007438:	aa000044 	addi	r8,r21,1
 200743c:	12000005 	stb	r8,0(r2)
 2007440:	003f4106 	br	2007148 <_dtoa_r+0x6b8>
 2007444:	d8c00b17 	ldw	r3,44(sp)
 2007448:	18006726 	beq	r3,zero,20075e8 <_dtoa_r+0xb58>
 200744c:	d9000317 	ldw	r4,12(sp)
 2007450:	00c00044 	movi	r3,1
 2007454:	19016a0e 	bge	r3,r4,2007a00 <_dtoa_r+0xf70>
 2007458:	d8800617 	ldw	r2,24(sp)
 200745c:	d8c00917 	ldw	r3,36(sp)
 2007460:	157fffc4 	addi	r21,r2,-1
 2007464:	1d420716 	blt	r3,r21,2007c84 <_dtoa_r+0x11f4>
 2007468:	1d6bc83a 	sub	r21,r3,r21
 200746c:	d8800617 	ldw	r2,24(sp)
 2007470:	1002c716 	blt	r2,zero,2007f90 <_dtoa_r+0x1500>
 2007474:	dd000817 	ldw	r20,32(sp)
 2007478:	d8800617 	ldw	r2,24(sp)
 200747c:	d9800817 	ldw	r6,32(sp)
 2007480:	8009883a 	mov	r4,r16
 2007484:	01400044 	movi	r5,1
 2007488:	308d883a 	add	r6,r6,r2
 200748c:	d9800815 	stw	r6,32(sp)
 2007490:	b0ad883a 	add	r22,r22,r2
 2007494:	200a3740 	call	200a374 <__i2b>
 2007498:	1023883a 	mov	r17,r2
 200749c:	a0000826 	beq	r20,zero,20074c0 <_dtoa_r+0xa30>
 20074a0:	0580070e 	bge	zero,r22,20074c0 <_dtoa_r+0xa30>
 20074a4:	b005883a 	mov	r2,r22
 20074a8:	a5812016 	blt	r20,r22,200792c <_dtoa_r+0xe9c>
 20074ac:	d8c00817 	ldw	r3,32(sp)
 20074b0:	a0a9c83a 	sub	r20,r20,r2
 20074b4:	b0adc83a 	sub	r22,r22,r2
 20074b8:	1887c83a 	sub	r3,r3,r2
 20074bc:	d8c00815 	stw	r3,32(sp)
 20074c0:	d9000917 	ldw	r4,36(sp)
 20074c4:	0100140e 	bge	zero,r4,2007518 <_dtoa_r+0xa88>
 20074c8:	d9800b17 	ldw	r6,44(sp)
 20074cc:	3001e526 	beq	r6,zero,2007c64 <_dtoa_r+0x11d4>
 20074d0:	05400e0e 	bge	zero,r21,200750c <_dtoa_r+0xa7c>
 20074d4:	880b883a 	mov	r5,r17
 20074d8:	8009883a 	mov	r4,r16
 20074dc:	a80d883a 	mov	r6,r21
 20074e0:	200a6400 	call	200a640 <__pow5mult>
 20074e4:	e00d883a 	mov	r6,fp
 20074e8:	8009883a 	mov	r4,r16
 20074ec:	100b883a 	mov	r5,r2
 20074f0:	1023883a 	mov	r17,r2
 20074f4:	200a3b00 	call	200a3b0 <__multiply>
 20074f8:	102f883a 	mov	r23,r2
 20074fc:	e00b883a 	mov	r5,fp
 2007500:	8009883a 	mov	r4,r16
 2007504:	2009fe80 	call	2009fe8 <_Bfree>
 2007508:	b839883a 	mov	fp,r23
 200750c:	d8800917 	ldw	r2,36(sp)
 2007510:	154dc83a 	sub	r6,r2,r21
 2007514:	3001281e 	bne	r6,zero,20079b8 <_dtoa_r+0xf28>
 2007518:	05c00044 	movi	r23,1
 200751c:	8009883a 	mov	r4,r16
 2007520:	b80b883a 	mov	r5,r23
 2007524:	200a3740 	call	200a374 <__i2b>
 2007528:	d8c00a17 	ldw	r3,40(sp)
 200752c:	102b883a 	mov	r21,r2
 2007530:	00c0310e 	bge	zero,r3,20075f8 <_dtoa_r+0xb68>
 2007534:	8009883a 	mov	r4,r16
 2007538:	100b883a 	mov	r5,r2
 200753c:	180d883a 	mov	r6,r3
 2007540:	200a6400 	call	200a640 <__pow5mult>
 2007544:	d9000317 	ldw	r4,12(sp)
 2007548:	102b883a 	mov	r21,r2
 200754c:	b9011f0e 	bge	r23,r4,20079cc <_dtoa_r+0xf3c>
 2007550:	0027883a 	mov	r19,zero
 2007554:	a8800417 	ldw	r2,16(r21)
 2007558:	10800104 	addi	r2,r2,4
 200755c:	1085883a 	add	r2,r2,r2
 2007560:	1085883a 	add	r2,r2,r2
 2007564:	a885883a 	add	r2,r21,r2
 2007568:	11000017 	ldw	r4,0(r2)
 200756c:	200a25c0 	call	200a25c <__hi0bits>
 2007570:	00c00804 	movi	r3,32
 2007574:	1885c83a 	sub	r2,r3,r2
 2007578:	00002506 	br	2007610 <_dtoa_r+0xb80>
 200757c:	01800044 	movi	r6,1
 2007580:	d9800d15 	stw	r6,52(sp)
 2007584:	003dec06 	br	2006d38 <_dtoa_r+0x2a8>
 2007588:	d8c00817 	ldw	r3,32(sp)
 200758c:	d9000517 	ldw	r4,20(sp)
 2007590:	d8000a15 	stw	zero,40(sp)
 2007594:	1907c83a 	sub	r3,r3,r4
 2007598:	010dc83a 	sub	r6,zero,r4
 200759c:	d8c00815 	stw	r3,32(sp)
 20075a0:	d9800915 	stw	r6,36(sp)
 20075a4:	003ded06 	br	2006d5c <_dtoa_r+0x2cc>
 20075a8:	05adc83a 	sub	r22,zero,r22
 20075ac:	dd800815 	stw	r22,32(sp)
 20075b0:	002d883a 	mov	r22,zero
 20075b4:	003de406 	br	2006d48 <_dtoa_r+0x2b8>
 20075b8:	d9000517 	ldw	r4,20(sp)
 20075bc:	20109280 	call	2010928 <__floatsidf>
 20075c0:	1009883a 	mov	r4,r2
 20075c4:	180b883a 	mov	r5,r3
 20075c8:	b00d883a 	mov	r6,r22
 20075cc:	a80f883a 	mov	r7,r21
 20075d0:	200f5200 	call	200f520 <__eqdf2>
 20075d4:	103dc726 	beq	r2,zero,2006cf4 <_dtoa_r+0x264>
 20075d8:	d8800517 	ldw	r2,20(sp)
 20075dc:	10bfffc4 	addi	r2,r2,-1
 20075e0:	d8800515 	stw	r2,20(sp)
 20075e4:	003dc306 	br	2006cf4 <_dtoa_r+0x264>
 20075e8:	dd400917 	ldw	r21,36(sp)
 20075ec:	dd000817 	ldw	r20,32(sp)
 20075f0:	0023883a 	mov	r17,zero
 20075f4:	003fa906 	br	200749c <_dtoa_r+0xa0c>
 20075f8:	d9800317 	ldw	r6,12(sp)
 20075fc:	b981670e 	bge	r23,r6,2007b9c <_dtoa_r+0x110c>
 2007600:	0027883a 	mov	r19,zero
 2007604:	d8c00a17 	ldw	r3,40(sp)
 2007608:	183fd21e 	bne	r3,zero,2007554 <_dtoa_r+0xac4>
 200760c:	00800044 	movi	r2,1
 2007610:	1585883a 	add	r2,r2,r22
 2007614:	108007cc 	andi	r2,r2,31
 2007618:	10005f26 	beq	r2,zero,2007798 <_dtoa_r+0xd08>
 200761c:	00c00804 	movi	r3,32
 2007620:	1887c83a 	sub	r3,r3,r2
 2007624:	01000104 	movi	r4,4
 2007628:	20c2dd0e 	bge	r4,r3,20081a0 <_dtoa_r+0x1710>
 200762c:	d9000817 	ldw	r4,32(sp)
 2007630:	00c00704 	movi	r3,28
 2007634:	1885c83a 	sub	r2,r3,r2
 2007638:	2089883a 	add	r4,r4,r2
 200763c:	d9000815 	stw	r4,32(sp)
 2007640:	a0a9883a 	add	r20,r20,r2
 2007644:	b0ad883a 	add	r22,r22,r2
 2007648:	d8800817 	ldw	r2,32(sp)
 200764c:	0080050e 	bge	zero,r2,2007664 <_dtoa_r+0xbd4>
 2007650:	e00b883a 	mov	r5,fp
 2007654:	8009883a 	mov	r4,r16
 2007658:	100d883a 	mov	r6,r2
 200765c:	200a7800 	call	200a780 <__lshift>
 2007660:	1039883a 	mov	fp,r2
 2007664:	0580050e 	bge	zero,r22,200767c <_dtoa_r+0xbec>
 2007668:	a80b883a 	mov	r5,r21
 200766c:	8009883a 	mov	r4,r16
 2007670:	b00d883a 	mov	r6,r22
 2007674:	200a7800 	call	200a780 <__lshift>
 2007678:	102b883a 	mov	r21,r2
 200767c:	d8c00d17 	ldw	r3,52(sp)
 2007680:	1801161e 	bne	r3,zero,2007adc <_dtoa_r+0x104c>
 2007684:	d8c00617 	ldw	r3,24(sp)
 2007688:	00c12d0e 	bge	zero,r3,2007b40 <_dtoa_r+0x10b0>
 200768c:	d8c00b17 	ldw	r3,44(sp)
 2007690:	1800571e 	bne	r3,zero,20077f0 <_dtoa_r+0xd60>
 2007694:	dc800717 	ldw	r18,28(sp)
 2007698:	dcc00617 	ldw	r19,24(sp)
 200769c:	9029883a 	mov	r20,r18
 20076a0:	00000206 	br	20076ac <_dtoa_r+0xc1c>
 20076a4:	200a0100 	call	200a010 <__multadd>
 20076a8:	1039883a 	mov	fp,r2
 20076ac:	e009883a 	mov	r4,fp
 20076b0:	a80b883a 	mov	r5,r21
 20076b4:	20068680 	call	2006868 <quorem>
 20076b8:	10800c04 	addi	r2,r2,48
 20076bc:	90800005 	stb	r2,0(r18)
 20076c0:	94800044 	addi	r18,r18,1
 20076c4:	9507c83a 	sub	r3,r18,r20
 20076c8:	8009883a 	mov	r4,r16
 20076cc:	e00b883a 	mov	r5,fp
 20076d0:	01800284 	movi	r6,10
 20076d4:	000f883a 	mov	r7,zero
 20076d8:	1cfff216 	blt	r3,r19,20076a4 <_dtoa_r+0xc14>
 20076dc:	1011883a 	mov	r8,r2
 20076e0:	d8800617 	ldw	r2,24(sp)
 20076e4:	00822e0e 	bge	zero,r2,2007fa0 <_dtoa_r+0x1510>
 20076e8:	d9000717 	ldw	r4,28(sp)
 20076ec:	0025883a 	mov	r18,zero
 20076f0:	20af883a 	add	r23,r4,r2
 20076f4:	e00b883a 	mov	r5,fp
 20076f8:	01800044 	movi	r6,1
 20076fc:	8009883a 	mov	r4,r16
 2007700:	da001715 	stw	r8,92(sp)
 2007704:	200a7800 	call	200a780 <__lshift>
 2007708:	1009883a 	mov	r4,r2
 200770c:	a80b883a 	mov	r5,r21
 2007710:	1039883a 	mov	fp,r2
 2007714:	200a8d00 	call	200a8d0 <__mcmp>
 2007718:	da001717 	ldw	r8,92(sp)
 200771c:	00816e0e 	bge	zero,r2,2007cd8 <_dtoa_r+0x1248>
 2007720:	b93fffc3 	ldbu	r4,-1(r23)
 2007724:	b8bfffc4 	addi	r2,r23,-1
 2007728:	1007883a 	mov	r3,r2
 200772c:	01800e44 	movi	r6,57
 2007730:	d9c00717 	ldw	r7,28(sp)
 2007734:	00000506 	br	200774c <_dtoa_r+0xcbc>
 2007738:	18ffffc4 	addi	r3,r3,-1
 200773c:	38811926 	beq	r7,r2,2007ba4 <_dtoa_r+0x1114>
 2007740:	19000003 	ldbu	r4,0(r3)
 2007744:	102f883a 	mov	r23,r2
 2007748:	10bfffc4 	addi	r2,r2,-1
 200774c:	21403fcc 	andi	r5,r4,255
 2007750:	2940201c 	xori	r5,r5,128
 2007754:	297fe004 	addi	r5,r5,-128
 2007758:	29bff726 	beq	r5,r6,2007738 <_dtoa_r+0xca8>
 200775c:	21000044 	addi	r4,r4,1
 2007760:	11000005 	stb	r4,0(r2)
 2007764:	8009883a 	mov	r4,r16
 2007768:	a80b883a 	mov	r5,r21
 200776c:	2009fe80 	call	2009fe8 <_Bfree>
 2007770:	883e7526 	beq	r17,zero,2007148 <_dtoa_r+0x6b8>
 2007774:	90000426 	beq	r18,zero,2007788 <_dtoa_r+0xcf8>
 2007778:	94400326 	beq	r18,r17,2007788 <_dtoa_r+0xcf8>
 200777c:	8009883a 	mov	r4,r16
 2007780:	900b883a 	mov	r5,r18
 2007784:	2009fe80 	call	2009fe8 <_Bfree>
 2007788:	8009883a 	mov	r4,r16
 200778c:	880b883a 	mov	r5,r17
 2007790:	2009fe80 	call	2009fe8 <_Bfree>
 2007794:	003e6c06 	br	2007148 <_dtoa_r+0x6b8>
 2007798:	00800704 	movi	r2,28
 200779c:	d9800817 	ldw	r6,32(sp)
 20077a0:	a0a9883a 	add	r20,r20,r2
 20077a4:	b0ad883a 	add	r22,r22,r2
 20077a8:	308d883a 	add	r6,r6,r2
 20077ac:	d9800815 	stw	r6,32(sp)
 20077b0:	003fa506 	br	2007648 <_dtoa_r+0xbb8>
 20077b4:	013efb84 	movi	r4,-1042
 20077b8:	246bc83a 	sub	r21,r4,r17
 20077bc:	9548983a 	sll	r4,r18,r21
 20077c0:	003d1806 	br	2006c24 <_dtoa_r+0x194>
 20077c4:	d8000d15 	stw	zero,52(sp)
 20077c8:	003d5b06 	br	2006d38 <_dtoa_r+0x2a8>
 20077cc:	880b883a 	mov	r5,r17
 20077d0:	8009883a 	mov	r4,r16
 20077d4:	01800284 	movi	r6,10
 20077d8:	000f883a 	mov	r7,zero
 20077dc:	200a0100 	call	200a010 <__multadd>
 20077e0:	1023883a 	mov	r17,r2
 20077e4:	d8800c17 	ldw	r2,48(sp)
 20077e8:	0082550e 	bge	zero,r2,2008140 <_dtoa_r+0x16b0>
 20077ec:	d8800615 	stw	r2,24(sp)
 20077f0:	0500050e 	bge	zero,r20,2007808 <_dtoa_r+0xd78>
 20077f4:	880b883a 	mov	r5,r17
 20077f8:	8009883a 	mov	r4,r16
 20077fc:	a00d883a 	mov	r6,r20
 2007800:	200a7800 	call	200a780 <__lshift>
 2007804:	1023883a 	mov	r17,r2
 2007808:	98016a1e 	bne	r19,zero,2007db4 <_dtoa_r+0x1324>
 200780c:	8829883a 	mov	r20,r17
 2007810:	d9000617 	ldw	r4,24(sp)
 2007814:	dcc00717 	ldw	r19,28(sp)
 2007818:	9480004c 	andi	r18,r18,1
 200781c:	20bfffc4 	addi	r2,r4,-1
 2007820:	9885883a 	add	r2,r19,r2
 2007824:	d8800415 	stw	r2,16(sp)
 2007828:	dc800615 	stw	r18,24(sp)
 200782c:	e009883a 	mov	r4,fp
 2007830:	a80b883a 	mov	r5,r21
 2007834:	20068680 	call	2006868 <quorem>
 2007838:	e009883a 	mov	r4,fp
 200783c:	880b883a 	mov	r5,r17
 2007840:	102f883a 	mov	r23,r2
 2007844:	200a8d00 	call	200a8d0 <__mcmp>
 2007848:	8009883a 	mov	r4,r16
 200784c:	a80b883a 	mov	r5,r21
 2007850:	a00d883a 	mov	r6,r20
 2007854:	102d883a 	mov	r22,r2
 2007858:	200a9300 	call	200a930 <__mdiff>
 200785c:	1007883a 	mov	r3,r2
 2007860:	10800317 	ldw	r2,12(r2)
 2007864:	bc800c04 	addi	r18,r23,48
 2007868:	1000971e 	bne	r2,zero,2007ac8 <_dtoa_r+0x1038>
 200786c:	180b883a 	mov	r5,r3
 2007870:	e009883a 	mov	r4,fp
 2007874:	d8c01515 	stw	r3,84(sp)
 2007878:	200a8d00 	call	200a8d0 <__mcmp>
 200787c:	d8c01517 	ldw	r3,84(sp)
 2007880:	8009883a 	mov	r4,r16
 2007884:	d8801515 	stw	r2,84(sp)
 2007888:	180b883a 	mov	r5,r3
 200788c:	2009fe80 	call	2009fe8 <_Bfree>
 2007890:	d8801517 	ldw	r2,84(sp)
 2007894:	1000041e 	bne	r2,zero,20078a8 <_dtoa_r+0xe18>
 2007898:	d9800317 	ldw	r6,12(sp)
 200789c:	3000021e 	bne	r6,zero,20078a8 <_dtoa_r+0xe18>
 20078a0:	d8c00617 	ldw	r3,24(sp)
 20078a4:	18007626 	beq	r3,zero,2007a80 <_dtoa_r+0xff0>
 20078a8:	b0005b16 	blt	r22,zero,2007a18 <_dtoa_r+0xf88>
 20078ac:	b000041e 	bne	r22,zero,20078c0 <_dtoa_r+0xe30>
 20078b0:	d9000317 	ldw	r4,12(sp)
 20078b4:	2000021e 	bne	r4,zero,20078c0 <_dtoa_r+0xe30>
 20078b8:	d8c00617 	ldw	r3,24(sp)
 20078bc:	18005626 	beq	r3,zero,2007a18 <_dtoa_r+0xf88>
 20078c0:	00814d16 	blt	zero,r2,2007df8 <_dtoa_r+0x1368>
 20078c4:	d8c00417 	ldw	r3,16(sp)
 20078c8:	9d800044 	addi	r22,r19,1
 20078cc:	9c800005 	stb	r18,0(r19)
 20078d0:	b02f883a 	mov	r23,r22
 20078d4:	98c14c26 	beq	r19,r3,2007e08 <_dtoa_r+0x1378>
 20078d8:	e00b883a 	mov	r5,fp
 20078dc:	8009883a 	mov	r4,r16
 20078e0:	01800284 	movi	r6,10
 20078e4:	000f883a 	mov	r7,zero
 20078e8:	200a0100 	call	200a010 <__multadd>
 20078ec:	1039883a 	mov	fp,r2
 20078f0:	8d006d26 	beq	r17,r20,2007aa8 <_dtoa_r+0x1018>
 20078f4:	880b883a 	mov	r5,r17
 20078f8:	01800284 	movi	r6,10
 20078fc:	000f883a 	mov	r7,zero
 2007900:	8009883a 	mov	r4,r16
 2007904:	200a0100 	call	200a010 <__multadd>
 2007908:	a00b883a 	mov	r5,r20
 200790c:	8009883a 	mov	r4,r16
 2007910:	01800284 	movi	r6,10
 2007914:	000f883a 	mov	r7,zero
 2007918:	1023883a 	mov	r17,r2
 200791c:	200a0100 	call	200a010 <__multadd>
 2007920:	1029883a 	mov	r20,r2
 2007924:	b027883a 	mov	r19,r22
 2007928:	003fc006 	br	200782c <_dtoa_r+0xd9c>
 200792c:	a005883a 	mov	r2,r20
 2007930:	003ede06 	br	20074ac <_dtoa_r+0xa1c>
 2007934:	01000044 	movi	r4,1
 2007938:	d9000b15 	stw	r4,44(sp)
 200793c:	d9802217 	ldw	r6,136(sp)
 2007940:	0180dc0e 	bge	zero,r6,2007cb4 <_dtoa_r+0x1224>
 2007944:	3023883a 	mov	r17,r6
 2007948:	d9800c15 	stw	r6,48(sp)
 200794c:	d9800615 	stw	r6,24(sp)
 2007950:	003d1e06 	br	2006dcc <_dtoa_r+0x33c>
 2007954:	d8800617 	ldw	r2,24(sp)
 2007958:	00be3716 	blt	zero,r2,2007238 <_dtoa_r+0x7a8>
 200795c:	1000be1e 	bne	r2,zero,2007c58 <_dtoa_r+0x11c8>
 2007960:	8809883a 	mov	r4,r17
 2007964:	a00b883a 	mov	r5,r20
 2007968:	000d883a 	mov	r6,zero
 200796c:	01d00534 	movhi	r7,16404
 2007970:	200f7640 	call	200f764 <__muldf3>
 2007974:	1009883a 	mov	r4,r2
 2007978:	180b883a 	mov	r5,r3
 200797c:	900d883a 	mov	r6,r18
 2007980:	980f883a 	mov	r7,r19
 2007984:	200f5a40 	call	200f5a4 <__gedf2>
 2007988:	002b883a 	mov	r21,zero
 200798c:	0023883a 	mov	r17,zero
 2007990:	10007a16 	blt	r2,zero,2007b7c <_dtoa_r+0x10ec>
 2007994:	d9002217 	ldw	r4,136(sp)
 2007998:	ddc00717 	ldw	r23,28(sp)
 200799c:	0108303a 	nor	r4,zero,r4
 20079a0:	d9000515 	stw	r4,20(sp)
 20079a4:	8009883a 	mov	r4,r16
 20079a8:	a80b883a 	mov	r5,r21
 20079ac:	2009fe80 	call	2009fe8 <_Bfree>
 20079b0:	883f751e 	bne	r17,zero,2007788 <_dtoa_r+0xcf8>
 20079b4:	003de406 	br	2007148 <_dtoa_r+0x6b8>
 20079b8:	e00b883a 	mov	r5,fp
 20079bc:	8009883a 	mov	r4,r16
 20079c0:	200a6400 	call	200a640 <__pow5mult>
 20079c4:	1039883a 	mov	fp,r2
 20079c8:	003ed306 	br	2007518 <_dtoa_r+0xa88>
 20079cc:	903ee01e 	bne	r18,zero,2007550 <_dtoa_r+0xac0>
 20079d0:	00800434 	movhi	r2,16
 20079d4:	10bfffc4 	addi	r2,r2,-1
 20079d8:	9884703a 	and	r2,r19,r2
 20079dc:	103f081e 	bne	r2,zero,2007600 <_dtoa_r+0xb70>
 20079e0:	9cdffc2c 	andhi	r19,r19,32752
 20079e4:	983f0626 	beq	r19,zero,2007600 <_dtoa_r+0xb70>
 20079e8:	d8800817 	ldw	r2,32(sp)
 20079ec:	b5800044 	addi	r22,r22,1
 20079f0:	04c00044 	movi	r19,1
 20079f4:	10800044 	addi	r2,r2,1
 20079f8:	d8800815 	stw	r2,32(sp)
 20079fc:	003f0106 	br	2007604 <_dtoa_r+0xb74>
 2007a00:	d9800f17 	ldw	r6,60(sp)
 2007a04:	30016826 	beq	r6,zero,2007fa8 <_dtoa_r+0x1518>
 2007a08:	10810cc4 	addi	r2,r2,1075
 2007a0c:	dd400917 	ldw	r21,36(sp)
 2007a10:	dd000817 	ldw	r20,32(sp)
 2007a14:	003e9906 	br	200747c <_dtoa_r+0x9ec>
 2007a18:	9011883a 	mov	r8,r18
 2007a1c:	4007883a 	mov	r3,r8
 2007a20:	e02d883a 	mov	r22,fp
 2007a24:	0080100e 	bge	zero,r2,2007a68 <_dtoa_r+0xfd8>
 2007a28:	01800044 	movi	r6,1
 2007a2c:	8009883a 	mov	r4,r16
 2007a30:	e00b883a 	mov	r5,fp
 2007a34:	da001515 	stw	r8,84(sp)
 2007a38:	da001715 	stw	r8,92(sp)
 2007a3c:	200a7800 	call	200a780 <__lshift>
 2007a40:	1009883a 	mov	r4,r2
 2007a44:	a80b883a 	mov	r5,r21
 2007a48:	102d883a 	mov	r22,r2
 2007a4c:	200a8d00 	call	200a8d0 <__mcmp>
 2007a50:	d8c01517 	ldw	r3,84(sp)
 2007a54:	da001717 	ldw	r8,92(sp)
 2007a58:	0081a50e 	bge	zero,r2,20080f0 <_dtoa_r+0x1660>
 2007a5c:	00800e44 	movi	r2,57
 2007a60:	40817b26 	beq	r8,r2,2008050 <_dtoa_r+0x15c0>
 2007a64:	40c00044 	addi	r3,r8,1
 2007a68:	8825883a 	mov	r18,r17
 2007a6c:	9dc00044 	addi	r23,r19,1
 2007a70:	98c00005 	stb	r3,0(r19)
 2007a74:	a023883a 	mov	r17,r20
 2007a78:	b039883a 	mov	fp,r22
 2007a7c:	003f3906 	br	2007764 <_dtoa_r+0xcd4>
 2007a80:	00800e44 	movi	r2,57
 2007a84:	9011883a 	mov	r8,r18
 2007a88:	90817226 	beq	r18,r2,2008054 <_dtoa_r+0x15c4>
 2007a8c:	0580010e 	bge	zero,r22,2007a94 <_dtoa_r+0x1004>
 2007a90:	ba000c44 	addi	r8,r23,49
 2007a94:	8825883a 	mov	r18,r17
 2007a98:	9dc00044 	addi	r23,r19,1
 2007a9c:	9a000005 	stb	r8,0(r19)
 2007aa0:	a023883a 	mov	r17,r20
 2007aa4:	003f2f06 	br	2007764 <_dtoa_r+0xcd4>
 2007aa8:	880b883a 	mov	r5,r17
 2007aac:	8009883a 	mov	r4,r16
 2007ab0:	01800284 	movi	r6,10
 2007ab4:	000f883a 	mov	r7,zero
 2007ab8:	200a0100 	call	200a010 <__multadd>
 2007abc:	1023883a 	mov	r17,r2
 2007ac0:	1029883a 	mov	r20,r2
 2007ac4:	003f9706 	br	2007924 <_dtoa_r+0xe94>
 2007ac8:	8009883a 	mov	r4,r16
 2007acc:	180b883a 	mov	r5,r3
 2007ad0:	2009fe80 	call	2009fe8 <_Bfree>
 2007ad4:	00800044 	movi	r2,1
 2007ad8:	003f7306 	br	20078a8 <_dtoa_r+0xe18>
 2007adc:	e009883a 	mov	r4,fp
 2007ae0:	a80b883a 	mov	r5,r21
 2007ae4:	200a8d00 	call	200a8d0 <__mcmp>
 2007ae8:	103ee60e 	bge	r2,zero,2007684 <_dtoa_r+0xbf4>
 2007aec:	8009883a 	mov	r4,r16
 2007af0:	e00b883a 	mov	r5,fp
 2007af4:	01800284 	movi	r6,10
 2007af8:	000f883a 	mov	r7,zero
 2007afc:	200a0100 	call	200a010 <__multadd>
 2007b00:	d9000517 	ldw	r4,20(sp)
 2007b04:	d9800b17 	ldw	r6,44(sp)
 2007b08:	1039883a 	mov	fp,r2
 2007b0c:	213fffc4 	addi	r4,r4,-1
 2007b10:	d9000515 	stw	r4,20(sp)
 2007b14:	303f2d1e 	bne	r6,zero,20077cc <_dtoa_r+0xd3c>
 2007b18:	d9000c17 	ldw	r4,48(sp)
 2007b1c:	0101780e 	bge	zero,r4,2008100 <_dtoa_r+0x1670>
 2007b20:	d9000615 	stw	r4,24(sp)
 2007b24:	003edb06 	br	2007694 <_dtoa_r+0xc04>
 2007b28:	00800084 	movi	r2,2
 2007b2c:	30818e1e 	bne	r6,r2,2008168 <_dtoa_r+0x16d8>
 2007b30:	d8000b15 	stw	zero,44(sp)
 2007b34:	003f8106 	br	200793c <_dtoa_r+0xeac>
 2007b38:	d8800717 	ldw	r2,28(sp)
 2007b3c:	003c0306 	br	2006b4c <_dtoa_r+0xbc>
 2007b40:	d9000317 	ldw	r4,12(sp)
 2007b44:	00800084 	movi	r2,2
 2007b48:	113ed00e 	bge	r2,r4,200768c <_dtoa_r+0xbfc>
 2007b4c:	d8c00617 	ldw	r3,24(sp)
 2007b50:	183f901e 	bne	r3,zero,2007994 <_dtoa_r+0xf04>
 2007b54:	a80b883a 	mov	r5,r21
 2007b58:	8009883a 	mov	r4,r16
 2007b5c:	01800144 	movi	r6,5
 2007b60:	000f883a 	mov	r7,zero
 2007b64:	200a0100 	call	200a010 <__multadd>
 2007b68:	e009883a 	mov	r4,fp
 2007b6c:	100b883a 	mov	r5,r2
 2007b70:	102b883a 	mov	r21,r2
 2007b74:	200a8d00 	call	200a8d0 <__mcmp>
 2007b78:	00bf860e 	bge	zero,r2,2007994 <_dtoa_r+0xf04>
 2007b7c:	d9800717 	ldw	r6,28(sp)
 2007b80:	00800c44 	movi	r2,49
 2007b84:	30800005 	stb	r2,0(r6)
 2007b88:	d8800517 	ldw	r2,20(sp)
 2007b8c:	35c00044 	addi	r23,r6,1
 2007b90:	10800044 	addi	r2,r2,1
 2007b94:	d8800515 	stw	r2,20(sp)
 2007b98:	003f8206 	br	20079a4 <_dtoa_r+0xf14>
 2007b9c:	903e981e 	bne	r18,zero,2007600 <_dtoa_r+0xb70>
 2007ba0:	003f8b06 	br	20079d0 <_dtoa_r+0xf40>
 2007ba4:	d9800517 	ldw	r6,20(sp)
 2007ba8:	d8c00717 	ldw	r3,28(sp)
 2007bac:	00800c44 	movi	r2,49
 2007bb0:	31800044 	addi	r6,r6,1
 2007bb4:	d9800515 	stw	r6,20(sp)
 2007bb8:	18800005 	stb	r2,0(r3)
 2007bbc:	003ee906 	br	2007764 <_dtoa_r+0xcd4>
 2007bc0:	dc000317 	ldw	r16,12(sp)
 2007bc4:	003d6006 	br	2007148 <_dtoa_r+0x6b8>
 2007bc8:	8809883a 	mov	r4,r17
 2007bcc:	20109280 	call	2010928 <__floatsidf>
 2007bd0:	a009883a 	mov	r4,r20
 2007bd4:	a80b883a 	mov	r5,r21
 2007bd8:	100d883a 	mov	r6,r2
 2007bdc:	180f883a 	mov	r7,r3
 2007be0:	200f7640 	call	200f764 <__muldf3>
 2007be4:	1009883a 	mov	r4,r2
 2007be8:	180b883a 	mov	r5,r3
 2007bec:	000d883a 	mov	r6,zero
 2007bf0:	01d00734 	movhi	r7,16412
 2007bf4:	200e3040 	call	200e304 <__adddf3>
 2007bf8:	1023883a 	mov	r17,r2
 2007bfc:	00bf3034 	movhi	r2,64704
 2007c00:	1885883a 	add	r2,r3,r2
 2007c04:	d8800e15 	stw	r2,56(sp)
 2007c08:	a009883a 	mov	r4,r20
 2007c0c:	a80b883a 	mov	r5,r21
 2007c10:	000d883a 	mov	r6,zero
 2007c14:	01d00534 	movhi	r7,16404
 2007c18:	200ffd00 	call	200ffd0 <__subdf3>
 2007c1c:	d9c00e17 	ldw	r7,56(sp)
 2007c20:	1009883a 	mov	r4,r2
 2007c24:	180b883a 	mov	r5,r3
 2007c28:	880d883a 	mov	r6,r17
 2007c2c:	102b883a 	mov	r21,r2
 2007c30:	1829883a 	mov	r20,r3
 2007c34:	200f5a40 	call	200f5a4 <__gedf2>
 2007c38:	00807716 	blt	zero,r2,2007e18 <_dtoa_r+0x1388>
 2007c3c:	d8800e17 	ldw	r2,56(sp)
 2007c40:	a809883a 	mov	r4,r21
 2007c44:	a00b883a 	mov	r5,r20
 2007c48:	11e0003c 	xorhi	r7,r2,32768
 2007c4c:	880d883a 	mov	r6,r17
 2007c50:	200f6840 	call	200f684 <__ledf2>
 2007c54:	103d6b0e 	bge	r2,zero,2007204 <_dtoa_r+0x774>
 2007c58:	002b883a 	mov	r21,zero
 2007c5c:	0023883a 	mov	r17,zero
 2007c60:	003f4c06 	br	2007994 <_dtoa_r+0xf04>
 2007c64:	d9800917 	ldw	r6,36(sp)
 2007c68:	e00b883a 	mov	r5,fp
 2007c6c:	8009883a 	mov	r4,r16
 2007c70:	200a6400 	call	200a640 <__pow5mult>
 2007c74:	1039883a 	mov	fp,r2
 2007c78:	003e2706 	br	2007518 <_dtoa_r+0xa88>
 2007c7c:	d8000b15 	stw	zero,44(sp)
 2007c80:	003c4906 	br	2006da8 <_dtoa_r+0x318>
 2007c84:	d9000917 	ldw	r4,36(sp)
 2007c88:	d9800a17 	ldw	r6,40(sp)
 2007c8c:	dd400915 	stw	r21,36(sp)
 2007c90:	a905c83a 	sub	r2,r21,r4
 2007c94:	308d883a 	add	r6,r6,r2
 2007c98:	d9800a15 	stw	r6,40(sp)
 2007c9c:	002b883a 	mov	r21,zero
 2007ca0:	003df206 	br	200746c <_dtoa_r+0x9dc>
 2007ca4:	dc800e15 	stw	r18,56(sp)
 2007ca8:	982b883a 	mov	r21,r19
 2007cac:	04400084 	movi	r17,2
 2007cb0:	003c7406 	br	2006e84 <_dtoa_r+0x3f4>
 2007cb4:	04400044 	movi	r17,1
 2007cb8:	dc400c15 	stw	r17,48(sp)
 2007cbc:	dc400615 	stw	r17,24(sp)
 2007cc0:	dc402215 	stw	r17,136(sp)
 2007cc4:	80001115 	stw	zero,68(r16)
 2007cc8:	000b883a 	mov	r5,zero
 2007ccc:	003c4a06 	br	2006df8 <_dtoa_r+0x368>
 2007cd0:	3023883a 	mov	r17,r6
 2007cd4:	003ffb06 	br	2007cc4 <_dtoa_r+0x1234>
 2007cd8:	1000021e 	bne	r2,zero,2007ce4 <_dtoa_r+0x1254>
 2007cdc:	4200004c 	andi	r8,r8,1
 2007ce0:	403e8f1e 	bne	r8,zero,2007720 <_dtoa_r+0xc90>
 2007ce4:	01000c04 	movi	r4,48
 2007ce8:	00000106 	br	2007cf0 <_dtoa_r+0x1260>
 2007cec:	102f883a 	mov	r23,r2
 2007cf0:	b8bfffc4 	addi	r2,r23,-1
 2007cf4:	10c00007 	ldb	r3,0(r2)
 2007cf8:	193ffc26 	beq	r3,r4,2007cec <_dtoa_r+0x125c>
 2007cfc:	003e9906 	br	2007764 <_dtoa_r+0xcd4>
 2007d00:	d9000517 	ldw	r4,20(sp)
 2007d04:	012fc83a 	sub	r23,zero,r4
 2007d08:	b800ad26 	beq	r23,zero,2007fc0 <_dtoa_r+0x1530>
 2007d0c:	b88003cc 	andi	r2,r23,15
 2007d10:	100490fa 	slli	r2,r2,3
 2007d14:	00c080b4 	movhi	r3,514
 2007d18:	18e2f104 	addi	r3,r3,-29756
 2007d1c:	1885883a 	add	r2,r3,r2
 2007d20:	11800017 	ldw	r6,0(r2)
 2007d24:	11c00117 	ldw	r7,4(r2)
 2007d28:	b82fd13a 	srai	r23,r23,4
 2007d2c:	9009883a 	mov	r4,r18
 2007d30:	980b883a 	mov	r5,r19
 2007d34:	200f7640 	call	200f764 <__muldf3>
 2007d38:	1029883a 	mov	r20,r2
 2007d3c:	182b883a 	mov	r21,r3
 2007d40:	b800f426 	beq	r23,zero,2008114 <_dtoa_r+0x1684>
 2007d44:	020080b4 	movhi	r8,514
 2007d48:	4222e704 	addi	r8,r8,-29796
 2007d4c:	8029883a 	mov	r20,r16
 2007d50:	04400084 	movi	r17,2
 2007d54:	4021883a 	mov	r16,r8
 2007d58:	b980004c 	andi	r6,r23,1
 2007d5c:	1009883a 	mov	r4,r2
 2007d60:	b82fd07a 	srai	r23,r23,1
 2007d64:	180b883a 	mov	r5,r3
 2007d68:	30000426 	beq	r6,zero,2007d7c <_dtoa_r+0x12ec>
 2007d6c:	81800017 	ldw	r6,0(r16)
 2007d70:	81c00117 	ldw	r7,4(r16)
 2007d74:	8c400044 	addi	r17,r17,1
 2007d78:	200f7640 	call	200f764 <__muldf3>
 2007d7c:	84000204 	addi	r16,r16,8
 2007d80:	b83ff51e 	bne	r23,zero,2007d58 <_dtoa_r+0x12c8>
 2007d84:	a021883a 	mov	r16,r20
 2007d88:	182b883a 	mov	r21,r3
 2007d8c:	1029883a 	mov	r20,r2
 2007d90:	003c5506 	br	2006ee8 <_dtoa_r+0x458>
 2007d94:	d9800517 	ldw	r6,20(sp)
 2007d98:	d9000717 	ldw	r4,28(sp)
 2007d9c:	00c00c04 	movi	r3,48
 2007da0:	31800044 	addi	r6,r6,1
 2007da4:	d9800515 	stw	r6,20(sp)
 2007da8:	20c00005 	stb	r3,0(r4)
 2007dac:	02000c44 	movi	r8,49
 2007db0:	003da206 	br	200743c <_dtoa_r+0x9ac>
 2007db4:	89400117 	ldw	r5,4(r17)
 2007db8:	8009883a 	mov	r4,r16
 2007dbc:	2009f400 	call	2009f40 <_Balloc>
 2007dc0:	89800417 	ldw	r6,16(r17)
 2007dc4:	11000304 	addi	r4,r2,12
 2007dc8:	89400304 	addi	r5,r17,12
 2007dcc:	31800084 	addi	r6,r6,2
 2007dd0:	318d883a 	add	r6,r6,r6
 2007dd4:	318d883a 	add	r6,r6,r6
 2007dd8:	1027883a 	mov	r19,r2
 2007ddc:	2003e380 	call	2003e38 <memcpy>
 2007de0:	8009883a 	mov	r4,r16
 2007de4:	980b883a 	mov	r5,r19
 2007de8:	01800044 	movi	r6,1
 2007dec:	200a7800 	call	200a780 <__lshift>
 2007df0:	1029883a 	mov	r20,r2
 2007df4:	003e8606 	br	2007810 <_dtoa_r+0xd80>
 2007df8:	00800e44 	movi	r2,57
 2007dfc:	90809526 	beq	r18,r2,2008054 <_dtoa_r+0x15c4>
 2007e00:	92000044 	addi	r8,r18,1
 2007e04:	003f2306 	br	2007a94 <_dtoa_r+0x1004>
 2007e08:	9011883a 	mov	r8,r18
 2007e0c:	8825883a 	mov	r18,r17
 2007e10:	a023883a 	mov	r17,r20
 2007e14:	003e3706 	br	20076f4 <_dtoa_r+0xc64>
 2007e18:	002b883a 	mov	r21,zero
 2007e1c:	0023883a 	mov	r17,zero
 2007e20:	003f5606 	br	2007b7c <_dtoa_r+0x10ec>
 2007e24:	51bfffc4 	addi	r6,r10,-1
 2007e28:	300490fa 	slli	r2,r6,3
 2007e2c:	00c080b4 	movhi	r3,514
 2007e30:	18e2f104 	addi	r3,r3,-29756
 2007e34:	1885883a 	add	r2,r3,r2
 2007e38:	d9c00e17 	ldw	r7,56(sp)
 2007e3c:	11000017 	ldw	r4,0(r2)
 2007e40:	11400117 	ldw	r5,4(r2)
 2007e44:	d8800717 	ldw	r2,28(sp)
 2007e48:	d9801015 	stw	r6,64(sp)
 2007e4c:	880d883a 	mov	r6,r17
 2007e50:	da801615 	stw	r10,88(sp)
 2007e54:	15c00044 	addi	r23,r2,1
 2007e58:	200f7640 	call	200f764 <__muldf3>
 2007e5c:	a80b883a 	mov	r5,r21
 2007e60:	a009883a 	mov	r4,r20
 2007e64:	d8c01115 	stw	r3,68(sp)
 2007e68:	d8800e15 	stw	r2,56(sp)
 2007e6c:	20108a00 	call	20108a0 <__fixdfsi>
 2007e70:	1009883a 	mov	r4,r2
 2007e74:	1023883a 	mov	r17,r2
 2007e78:	20109280 	call	2010928 <__floatsidf>
 2007e7c:	a009883a 	mov	r4,r20
 2007e80:	a80b883a 	mov	r5,r21
 2007e84:	100d883a 	mov	r6,r2
 2007e88:	180f883a 	mov	r7,r3
 2007e8c:	200ffd00 	call	200ffd0 <__subdf3>
 2007e90:	1813883a 	mov	r9,r3
 2007e94:	d8c00717 	ldw	r3,28(sp)
 2007e98:	8c400c04 	addi	r17,r17,48
 2007e9c:	1011883a 	mov	r8,r2
 2007ea0:	1c400005 	stb	r17,0(r3)
 2007ea4:	da801617 	ldw	r10,88(sp)
 2007ea8:	00800044 	movi	r2,1
 2007eac:	50802326 	beq	r10,r2,2007f3c <_dtoa_r+0x14ac>
 2007eb0:	d8800717 	ldw	r2,28(sp)
 2007eb4:	b82b883a 	mov	r21,r23
 2007eb8:	dc001315 	stw	r16,76(sp)
 2007ebc:	12a9883a 	add	r20,r2,r10
 2007ec0:	4807883a 	mov	r3,r9
 2007ec4:	4005883a 	mov	r2,r8
 2007ec8:	dc801415 	stw	r18,80(sp)
 2007ecc:	000d883a 	mov	r6,zero
 2007ed0:	01d00934 	movhi	r7,16420
 2007ed4:	1009883a 	mov	r4,r2
 2007ed8:	180b883a 	mov	r5,r3
 2007edc:	200f7640 	call	200f764 <__muldf3>
 2007ee0:	180b883a 	mov	r5,r3
 2007ee4:	1009883a 	mov	r4,r2
 2007ee8:	1821883a 	mov	r16,r3
 2007eec:	1025883a 	mov	r18,r2
 2007ef0:	20108a00 	call	20108a0 <__fixdfsi>
 2007ef4:	1009883a 	mov	r4,r2
 2007ef8:	1023883a 	mov	r17,r2
 2007efc:	20109280 	call	2010928 <__floatsidf>
 2007f00:	9009883a 	mov	r4,r18
 2007f04:	800b883a 	mov	r5,r16
 2007f08:	100d883a 	mov	r6,r2
 2007f0c:	180f883a 	mov	r7,r3
 2007f10:	8c400c04 	addi	r17,r17,48
 2007f14:	200ffd00 	call	200ffd0 <__subdf3>
 2007f18:	ad400044 	addi	r21,r21,1
 2007f1c:	ac7fffc5 	stb	r17,-1(r21)
 2007f20:	ad3fea1e 	bne	r21,r20,2007ecc <_dtoa_r+0x143c>
 2007f24:	1813883a 	mov	r9,r3
 2007f28:	d8c01017 	ldw	r3,64(sp)
 2007f2c:	dc001317 	ldw	r16,76(sp)
 2007f30:	dc801417 	ldw	r18,80(sp)
 2007f34:	1011883a 	mov	r8,r2
 2007f38:	b8ef883a 	add	r23,r23,r3
 2007f3c:	d9000e17 	ldw	r4,56(sp)
 2007f40:	d9401117 	ldw	r5,68(sp)
 2007f44:	000d883a 	mov	r6,zero
 2007f48:	01cff834 	movhi	r7,16352
 2007f4c:	da001715 	stw	r8,92(sp)
 2007f50:	da401515 	stw	r9,84(sp)
 2007f54:	200e3040 	call	200e304 <__adddf3>
 2007f58:	da001717 	ldw	r8,92(sp)
 2007f5c:	da401517 	ldw	r9,84(sp)
 2007f60:	1009883a 	mov	r4,r2
 2007f64:	400d883a 	mov	r6,r8
 2007f68:	480f883a 	mov	r7,r9
 2007f6c:	180b883a 	mov	r5,r3
 2007f70:	200f6840 	call	200f684 <__ledf2>
 2007f74:	da001717 	ldw	r8,92(sp)
 2007f78:	da401517 	ldw	r9,84(sp)
 2007f7c:	10003b0e 	bge	r2,zero,200806c <_dtoa_r+0x15dc>
 2007f80:	d9001217 	ldw	r4,72(sp)
 2007f84:	bd7fffc3 	ldbu	r21,-1(r23)
 2007f88:	d9000515 	stw	r4,20(sp)
 2007f8c:	003d1c06 	br	2007400 <_dtoa_r+0x970>
 2007f90:	d8c00817 	ldw	r3,32(sp)
 2007f94:	18a9c83a 	sub	r20,r3,r2
 2007f98:	0005883a 	mov	r2,zero
 2007f9c:	003d3706 	br	200747c <_dtoa_r+0x9ec>
 2007fa0:	00800044 	movi	r2,1
 2007fa4:	003dd006 	br	20076e8 <_dtoa_r+0xc58>
 2007fa8:	d8c00217 	ldw	r3,8(sp)
 2007fac:	00800d84 	movi	r2,54
 2007fb0:	dd400917 	ldw	r21,36(sp)
 2007fb4:	10c5c83a 	sub	r2,r2,r3
 2007fb8:	dd000817 	ldw	r20,32(sp)
 2007fbc:	003d2f06 	br	200747c <_dtoa_r+0x9ec>
 2007fc0:	9029883a 	mov	r20,r18
 2007fc4:	982b883a 	mov	r21,r19
 2007fc8:	04400084 	movi	r17,2
 2007fcc:	003bc606 	br	2006ee8 <_dtoa_r+0x458>
 2007fd0:	d8800617 	ldw	r2,24(sp)
 2007fd4:	103efc26 	beq	r2,zero,2007bc8 <_dtoa_r+0x1138>
 2007fd8:	d8c00c17 	ldw	r3,48(sp)
 2007fdc:	00fc890e 	bge	zero,r3,2007204 <_dtoa_r+0x774>
 2007fe0:	a80b883a 	mov	r5,r21
 2007fe4:	a009883a 	mov	r4,r20
 2007fe8:	000d883a 	mov	r6,zero
 2007fec:	01d00934 	movhi	r7,16420
 2007ff0:	200f7640 	call	200f764 <__muldf3>
 2007ff4:	89000044 	addi	r4,r17,1
 2007ff8:	1029883a 	mov	r20,r2
 2007ffc:	182b883a 	mov	r21,r3
 2008000:	20109280 	call	2010928 <__floatsidf>
 2008004:	a009883a 	mov	r4,r20
 2008008:	a80b883a 	mov	r5,r21
 200800c:	100d883a 	mov	r6,r2
 2008010:	180f883a 	mov	r7,r3
 2008014:	200f7640 	call	200f764 <__muldf3>
 2008018:	1009883a 	mov	r4,r2
 200801c:	180b883a 	mov	r5,r3
 2008020:	000d883a 	mov	r6,zero
 2008024:	01d00734 	movhi	r7,16412
 2008028:	200e3040 	call	200e304 <__adddf3>
 200802c:	d9000517 	ldw	r4,20(sp)
 2008030:	1023883a 	mov	r17,r2
 2008034:	00bf3034 	movhi	r2,64704
 2008038:	213fffc4 	addi	r4,r4,-1
 200803c:	1885883a 	add	r2,r3,r2
 2008040:	d9001215 	stw	r4,72(sp)
 2008044:	d8800e15 	stw	r2,56(sp)
 2008048:	da800c17 	ldw	r10,48(sp)
 200804c:	003bc306 	br	2006f5c <_dtoa_r+0x4cc>
 2008050:	b039883a 	mov	fp,r22
 2008054:	01000e44 	movi	r4,57
 2008058:	8825883a 	mov	r18,r17
 200805c:	9dc00044 	addi	r23,r19,1
 2008060:	99000005 	stb	r4,0(r19)
 2008064:	a023883a 	mov	r17,r20
 2008068:	003dae06 	br	2007724 <_dtoa_r+0xc94>
 200806c:	d9800e17 	ldw	r6,56(sp)
 2008070:	d9c01117 	ldw	r7,68(sp)
 2008074:	0009883a 	mov	r4,zero
 2008078:	014ff834 	movhi	r5,16352
 200807c:	da001715 	stw	r8,92(sp)
 2008080:	da401515 	stw	r9,84(sp)
 2008084:	200ffd00 	call	200ffd0 <__subdf3>
 2008088:	da001717 	ldw	r8,92(sp)
 200808c:	da401517 	ldw	r9,84(sp)
 2008090:	1009883a 	mov	r4,r2
 2008094:	180b883a 	mov	r5,r3
 2008098:	400d883a 	mov	r6,r8
 200809c:	480f883a 	mov	r7,r9
 20080a0:	200f5a40 	call	200f5a4 <__gedf2>
 20080a4:	00bc570e 	bge	zero,r2,2007204 <_dtoa_r+0x774>
 20080a8:	01000c04 	movi	r4,48
 20080ac:	00000106 	br	20080b4 <_dtoa_r+0x1624>
 20080b0:	102f883a 	mov	r23,r2
 20080b4:	b8bfffc4 	addi	r2,r23,-1
 20080b8:	10c00007 	ldb	r3,0(r2)
 20080bc:	193ffc26 	beq	r3,r4,20080b0 <_dtoa_r+0x1620>
 20080c0:	d9801217 	ldw	r6,72(sp)
 20080c4:	d9800515 	stw	r6,20(sp)
 20080c8:	003c1f06 	br	2007148 <_dtoa_r+0x6b8>
 20080cc:	d8801217 	ldw	r2,72(sp)
 20080d0:	dc001117 	ldw	r16,68(sp)
 20080d4:	d8800515 	stw	r2,20(sp)
 20080d8:	003cc906 	br	2007400 <_dtoa_r+0x970>
 20080dc:	dd801317 	ldw	r22,76(sp)
 20080e0:	dc001117 	ldw	r16,68(sp)
 20080e4:	dcc01417 	ldw	r19,80(sp)
 20080e8:	dc801017 	ldw	r18,64(sp)
 20080ec:	003c4506 	br	2007204 <_dtoa_r+0x774>
 20080f0:	103e5d1e 	bne	r2,zero,2007a68 <_dtoa_r+0xfd8>
 20080f4:	4080004c 	andi	r2,r8,1
 20080f8:	103e5b26 	beq	r2,zero,2007a68 <_dtoa_r+0xfd8>
 20080fc:	003e5706 	br	2007a5c <_dtoa_r+0xfcc>
 2008100:	d8c00317 	ldw	r3,12(sp)
 2008104:	00800084 	movi	r2,2
 2008108:	10c00a16 	blt	r2,r3,2008134 <_dtoa_r+0x16a4>
 200810c:	d9000c17 	ldw	r4,48(sp)
 2008110:	003e8306 	br	2007b20 <_dtoa_r+0x1090>
 2008114:	04400084 	movi	r17,2
 2008118:	003b7306 	br	2006ee8 <_dtoa_r+0x458>
 200811c:	d9801217 	ldw	r6,72(sp)
 2008120:	d9800515 	stw	r6,20(sp)
 2008124:	003cb606 	br	2007400 <_dtoa_r+0x970>
 2008128:	d9001217 	ldw	r4,72(sp)
 200812c:	d9000515 	stw	r4,20(sp)
 2008130:	003c0506 	br	2007148 <_dtoa_r+0x6b8>
 2008134:	d9800c17 	ldw	r6,48(sp)
 2008138:	d9800615 	stw	r6,24(sp)
 200813c:	003e8306 	br	2007b4c <_dtoa_r+0x10bc>
 2008140:	d9800317 	ldw	r6,12(sp)
 2008144:	00800084 	movi	r2,2
 2008148:	11800216 	blt	r2,r6,2008154 <_dtoa_r+0x16c4>
 200814c:	d8800c17 	ldw	r2,48(sp)
 2008150:	003da606 	br	20077ec <_dtoa_r+0xd5c>
 2008154:	d8800c17 	ldw	r2,48(sp)
 2008158:	d8800615 	stw	r2,24(sp)
 200815c:	003e7b06 	br	2007b4c <_dtoa_r+0x10bc>
 2008160:	05000044 	movi	r20,1
 2008164:	003b0506 	br	2006d7c <_dtoa_r+0x2ec>
 2008168:	8009883a 	mov	r4,r16
 200816c:	80001115 	stw	zero,68(r16)
 2008170:	000b883a 	mov	r5,zero
 2008174:	2009f400 	call	2009f40 <_Balloc>
 2008178:	d8800715 	stw	r2,28(sp)
 200817c:	d8c00717 	ldw	r3,28(sp)
 2008180:	00bfffc4 	movi	r2,-1
 2008184:	01000044 	movi	r4,1
 2008188:	d8800c15 	stw	r2,48(sp)
 200818c:	80c01015 	stw	r3,64(r16)
 2008190:	d9000b15 	stw	r4,44(sp)
 2008194:	d8800615 	stw	r2,24(sp)
 2008198:	d8002215 	stw	zero,136(sp)
 200819c:	003c1906 	br	2007204 <_dtoa_r+0x774>
 20081a0:	193d2926 	beq	r3,r4,2007648 <_dtoa_r+0xbb8>
 20081a4:	00c00f04 	movi	r3,60
 20081a8:	1885c83a 	sub	r2,r3,r2
 20081ac:	003d7b06 	br	200779c <_dtoa_r+0xd0c>
 20081b0:	000b883a 	mov	r5,zero
 20081b4:	003b1006 	br	2006df8 <_dtoa_r+0x368>

020081b8 <__sflush_r>:
 20081b8:	2880030b 	ldhu	r2,12(r5)
 20081bc:	defffb04 	addi	sp,sp,-20
 20081c0:	dcc00315 	stw	r19,12(sp)
 20081c4:	dc400115 	stw	r17,4(sp)
 20081c8:	dfc00415 	stw	ra,16(sp)
 20081cc:	dc800215 	stw	r18,8(sp)
 20081d0:	dc000015 	stw	r16,0(sp)
 20081d4:	10c0020c 	andi	r3,r2,8
 20081d8:	2823883a 	mov	r17,r5
 20081dc:	2027883a 	mov	r19,r4
 20081e0:	1800311e 	bne	r3,zero,20082a8 <__sflush_r+0xf0>
 20081e4:	28c00117 	ldw	r3,4(r5)
 20081e8:	10820014 	ori	r2,r2,2048
 20081ec:	2880030d 	sth	r2,12(r5)
 20081f0:	00c04b0e 	bge	zero,r3,2008320 <__sflush_r+0x168>
 20081f4:	8a000a17 	ldw	r8,40(r17)
 20081f8:	40002326 	beq	r8,zero,2008288 <__sflush_r+0xd0>
 20081fc:	9c000017 	ldw	r16,0(r19)
 2008200:	10c4000c 	andi	r3,r2,4096
 2008204:	98000015 	stw	zero,0(r19)
 2008208:	18004826 	beq	r3,zero,200832c <__sflush_r+0x174>
 200820c:	89801417 	ldw	r6,80(r17)
 2008210:	10c0010c 	andi	r3,r2,4
 2008214:	18000626 	beq	r3,zero,2008230 <__sflush_r+0x78>
 2008218:	88c00117 	ldw	r3,4(r17)
 200821c:	88800c17 	ldw	r2,48(r17)
 2008220:	30cdc83a 	sub	r6,r6,r3
 2008224:	10000226 	beq	r2,zero,2008230 <__sflush_r+0x78>
 2008228:	88800f17 	ldw	r2,60(r17)
 200822c:	308dc83a 	sub	r6,r6,r2
 2008230:	89400717 	ldw	r5,28(r17)
 2008234:	9809883a 	mov	r4,r19
 2008238:	000f883a 	mov	r7,zero
 200823c:	403ee83a 	callr	r8
 2008240:	00ffffc4 	movi	r3,-1
 2008244:	10c04426 	beq	r2,r3,2008358 <__sflush_r+0x1a0>
 2008248:	88c0030b 	ldhu	r3,12(r17)
 200824c:	89000417 	ldw	r4,16(r17)
 2008250:	88000115 	stw	zero,4(r17)
 2008254:	197dffcc 	andi	r5,r3,63487
 2008258:	8940030d 	sth	r5,12(r17)
 200825c:	89000015 	stw	r4,0(r17)
 2008260:	18c4000c 	andi	r3,r3,4096
 2008264:	18002c1e 	bne	r3,zero,2008318 <__sflush_r+0x160>
 2008268:	89400c17 	ldw	r5,48(r17)
 200826c:	9c000015 	stw	r16,0(r19)
 2008270:	28000526 	beq	r5,zero,2008288 <__sflush_r+0xd0>
 2008274:	88801004 	addi	r2,r17,64
 2008278:	28800226 	beq	r5,r2,2008284 <__sflush_r+0xcc>
 200827c:	9809883a 	mov	r4,r19
 2008280:	20089200 	call	2008920 <_free_r>
 2008284:	88000c15 	stw	zero,48(r17)
 2008288:	0005883a 	mov	r2,zero
 200828c:	dfc00417 	ldw	ra,16(sp)
 2008290:	dcc00317 	ldw	r19,12(sp)
 2008294:	dc800217 	ldw	r18,8(sp)
 2008298:	dc400117 	ldw	r17,4(sp)
 200829c:	dc000017 	ldw	r16,0(sp)
 20082a0:	dec00504 	addi	sp,sp,20
 20082a4:	f800283a 	ret
 20082a8:	2c800417 	ldw	r18,16(r5)
 20082ac:	903ff626 	beq	r18,zero,2008288 <__sflush_r+0xd0>
 20082b0:	2c000017 	ldw	r16,0(r5)
 20082b4:	108000cc 	andi	r2,r2,3
 20082b8:	2c800015 	stw	r18,0(r5)
 20082bc:	84a1c83a 	sub	r16,r16,r18
 20082c0:	1000131e 	bne	r2,zero,2008310 <__sflush_r+0x158>
 20082c4:	28800517 	ldw	r2,20(r5)
 20082c8:	88800215 	stw	r2,8(r17)
 20082cc:	04000316 	blt	zero,r16,20082dc <__sflush_r+0x124>
 20082d0:	003fed06 	br	2008288 <__sflush_r+0xd0>
 20082d4:	90a5883a 	add	r18,r18,r2
 20082d8:	043feb0e 	bge	zero,r16,2008288 <__sflush_r+0xd0>
 20082dc:	88800917 	ldw	r2,36(r17)
 20082e0:	89400717 	ldw	r5,28(r17)
 20082e4:	800f883a 	mov	r7,r16
 20082e8:	900d883a 	mov	r6,r18
 20082ec:	9809883a 	mov	r4,r19
 20082f0:	103ee83a 	callr	r2
 20082f4:	80a1c83a 	sub	r16,r16,r2
 20082f8:	00bff616 	blt	zero,r2,20082d4 <__sflush_r+0x11c>
 20082fc:	88c0030b 	ldhu	r3,12(r17)
 2008300:	00bfffc4 	movi	r2,-1
 2008304:	18c01014 	ori	r3,r3,64
 2008308:	88c0030d 	sth	r3,12(r17)
 200830c:	003fdf06 	br	200828c <__sflush_r+0xd4>
 2008310:	0005883a 	mov	r2,zero
 2008314:	003fec06 	br	20082c8 <__sflush_r+0x110>
 2008318:	88801415 	stw	r2,80(r17)
 200831c:	003fd206 	br	2008268 <__sflush_r+0xb0>
 2008320:	28c00f17 	ldw	r3,60(r5)
 2008324:	00ffb316 	blt	zero,r3,20081f4 <__sflush_r+0x3c>
 2008328:	003fd706 	br	2008288 <__sflush_r+0xd0>
 200832c:	89400717 	ldw	r5,28(r17)
 2008330:	000d883a 	mov	r6,zero
 2008334:	9809883a 	mov	r4,r19
 2008338:	01c00044 	movi	r7,1
 200833c:	403ee83a 	callr	r8
 2008340:	100d883a 	mov	r6,r2
 2008344:	00bfffc4 	movi	r2,-1
 2008348:	30801426 	beq	r6,r2,200839c <__sflush_r+0x1e4>
 200834c:	8880030b 	ldhu	r2,12(r17)
 2008350:	8a000a17 	ldw	r8,40(r17)
 2008354:	003fae06 	br	2008210 <__sflush_r+0x58>
 2008358:	98c00017 	ldw	r3,0(r19)
 200835c:	183fba26 	beq	r3,zero,2008248 <__sflush_r+0x90>
 2008360:	01000744 	movi	r4,29
 2008364:	19000626 	beq	r3,r4,2008380 <__sflush_r+0x1c8>
 2008368:	01000584 	movi	r4,22
 200836c:	19000426 	beq	r3,r4,2008380 <__sflush_r+0x1c8>
 2008370:	88c0030b 	ldhu	r3,12(r17)
 2008374:	18c01014 	ori	r3,r3,64
 2008378:	88c0030d 	sth	r3,12(r17)
 200837c:	003fc306 	br	200828c <__sflush_r+0xd4>
 2008380:	8880030b 	ldhu	r2,12(r17)
 2008384:	88c00417 	ldw	r3,16(r17)
 2008388:	88000115 	stw	zero,4(r17)
 200838c:	10bdffcc 	andi	r2,r2,63487
 2008390:	8880030d 	sth	r2,12(r17)
 2008394:	88c00015 	stw	r3,0(r17)
 2008398:	003fb306 	br	2008268 <__sflush_r+0xb0>
 200839c:	98800017 	ldw	r2,0(r19)
 20083a0:	103fea26 	beq	r2,zero,200834c <__sflush_r+0x194>
 20083a4:	00c00744 	movi	r3,29
 20083a8:	10c00226 	beq	r2,r3,20083b4 <__sflush_r+0x1fc>
 20083ac:	00c00584 	movi	r3,22
 20083b0:	10ffd21e 	bne	r2,r3,20082fc <__sflush_r+0x144>
 20083b4:	9c000015 	stw	r16,0(r19)
 20083b8:	0005883a 	mov	r2,zero
 20083bc:	003fb306 	br	200828c <__sflush_r+0xd4>

020083c0 <_fflush_r>:
 20083c0:	defffd04 	addi	sp,sp,-12
 20083c4:	dc000115 	stw	r16,4(sp)
 20083c8:	dfc00215 	stw	ra,8(sp)
 20083cc:	2021883a 	mov	r16,r4
 20083d0:	20000226 	beq	r4,zero,20083dc <_fflush_r+0x1c>
 20083d4:	20800e17 	ldw	r2,56(r4)
 20083d8:	10000c26 	beq	r2,zero,200840c <_fflush_r+0x4c>
 20083dc:	2880030f 	ldh	r2,12(r5)
 20083e0:	1000051e 	bne	r2,zero,20083f8 <_fflush_r+0x38>
 20083e4:	0005883a 	mov	r2,zero
 20083e8:	dfc00217 	ldw	ra,8(sp)
 20083ec:	dc000117 	ldw	r16,4(sp)
 20083f0:	dec00304 	addi	sp,sp,12
 20083f4:	f800283a 	ret
 20083f8:	8009883a 	mov	r4,r16
 20083fc:	dfc00217 	ldw	ra,8(sp)
 2008400:	dc000117 	ldw	r16,4(sp)
 2008404:	dec00304 	addi	sp,sp,12
 2008408:	20081b81 	jmpi	20081b8 <__sflush_r>
 200840c:	d9400015 	stw	r5,0(sp)
 2008410:	20087ac0 	call	20087ac <__sinit>
 2008414:	d9400017 	ldw	r5,0(sp)
 2008418:	003ff006 	br	20083dc <_fflush_r+0x1c>

0200841c <fflush>:
 200841c:	20000526 	beq	r4,zero,2008434 <fflush+0x18>
 2008420:	008080b4 	movhi	r2,514
 2008424:	10aa6704 	addi	r2,r2,-22116
 2008428:	200b883a 	mov	r5,r4
 200842c:	11000017 	ldw	r4,0(r2)
 2008430:	20083c01 	jmpi	20083c0 <_fflush_r>
 2008434:	008080b4 	movhi	r2,514
 2008438:	10aa6604 	addi	r2,r2,-22120
 200843c:	11000017 	ldw	r4,0(r2)
 2008440:	01408074 	movhi	r5,513
 2008444:	2960f004 	addi	r5,r5,-31808
 2008448:	20091a01 	jmpi	20091a0 <_fwalk_reent>

0200844c <__fp_lock>:
 200844c:	0005883a 	mov	r2,zero
 2008450:	f800283a 	ret

02008454 <__fp_unlock>:
 2008454:	0005883a 	mov	r2,zero
 2008458:	f800283a 	ret

0200845c <_cleanup_r>:
 200845c:	01408074 	movhi	r5,513
 2008460:	29738604 	addi	r5,r5,-12776
 2008464:	20091a01 	jmpi	20091a0 <_fwalk_reent>

02008468 <__sinit.part.1>:
 2008468:	defff704 	addi	sp,sp,-36
 200846c:	00c08074 	movhi	r3,513
 2008470:	dfc00815 	stw	ra,32(sp)
 2008474:	ddc00715 	stw	r23,28(sp)
 2008478:	dd800615 	stw	r22,24(sp)
 200847c:	dd400515 	stw	r21,20(sp)
 2008480:	dd000415 	stw	r20,16(sp)
 2008484:	dcc00315 	stw	r19,12(sp)
 2008488:	dc800215 	stw	r18,8(sp)
 200848c:	dc400115 	stw	r17,4(sp)
 2008490:	dc000015 	stw	r16,0(sp)
 2008494:	18e11704 	addi	r3,r3,-31652
 2008498:	24000117 	ldw	r16,4(r4)
 200849c:	20c00f15 	stw	r3,60(r4)
 20084a0:	2080bb04 	addi	r2,r4,748
 20084a4:	00c000c4 	movi	r3,3
 20084a8:	20c0b915 	stw	r3,740(r4)
 20084ac:	2080ba15 	stw	r2,744(r4)
 20084b0:	2000b815 	stw	zero,736(r4)
 20084b4:	05c00204 	movi	r23,8
 20084b8:	00800104 	movi	r2,4
 20084bc:	2025883a 	mov	r18,r4
 20084c0:	b80d883a 	mov	r6,r23
 20084c4:	81001704 	addi	r4,r16,92
 20084c8:	000b883a 	mov	r5,zero
 20084cc:	80000015 	stw	zero,0(r16)
 20084d0:	80000115 	stw	zero,4(r16)
 20084d4:	80000215 	stw	zero,8(r16)
 20084d8:	8080030d 	sth	r2,12(r16)
 20084dc:	80001915 	stw	zero,100(r16)
 20084e0:	8000038d 	sth	zero,14(r16)
 20084e4:	80000415 	stw	zero,16(r16)
 20084e8:	80000515 	stw	zero,20(r16)
 20084ec:	80000615 	stw	zero,24(r16)
 20084f0:	2003f700 	call	2003f70 <memset>
 20084f4:	05808074 	movhi	r22,513
 20084f8:	94400217 	ldw	r17,8(r18)
 20084fc:	05408074 	movhi	r21,513
 2008500:	05008074 	movhi	r20,513
 2008504:	04c08074 	movhi	r19,513
 2008508:	b5ad7304 	addi	r22,r22,-18996
 200850c:	ad6d8a04 	addi	r21,r21,-18904
 2008510:	a52da904 	addi	r20,r20,-18780
 2008514:	9cedc004 	addi	r19,r19,-18688
 2008518:	85800815 	stw	r22,32(r16)
 200851c:	85400915 	stw	r21,36(r16)
 2008520:	85000a15 	stw	r20,40(r16)
 2008524:	84c00b15 	stw	r19,44(r16)
 2008528:	84000715 	stw	r16,28(r16)
 200852c:	00800284 	movi	r2,10
 2008530:	8880030d 	sth	r2,12(r17)
 2008534:	00800044 	movi	r2,1
 2008538:	89001704 	addi	r4,r17,92
 200853c:	b80d883a 	mov	r6,r23
 2008540:	000b883a 	mov	r5,zero
 2008544:	88000015 	stw	zero,0(r17)
 2008548:	88000115 	stw	zero,4(r17)
 200854c:	88000215 	stw	zero,8(r17)
 2008550:	88001915 	stw	zero,100(r17)
 2008554:	8880038d 	sth	r2,14(r17)
 2008558:	88000415 	stw	zero,16(r17)
 200855c:	88000515 	stw	zero,20(r17)
 2008560:	88000615 	stw	zero,24(r17)
 2008564:	2003f700 	call	2003f70 <memset>
 2008568:	94000317 	ldw	r16,12(r18)
 200856c:	00800484 	movi	r2,18
 2008570:	8c400715 	stw	r17,28(r17)
 2008574:	8d800815 	stw	r22,32(r17)
 2008578:	8d400915 	stw	r21,36(r17)
 200857c:	8d000a15 	stw	r20,40(r17)
 2008580:	8cc00b15 	stw	r19,44(r17)
 2008584:	8080030d 	sth	r2,12(r16)
 2008588:	00800084 	movi	r2,2
 200858c:	80000015 	stw	zero,0(r16)
 2008590:	80000115 	stw	zero,4(r16)
 2008594:	80000215 	stw	zero,8(r16)
 2008598:	80001915 	stw	zero,100(r16)
 200859c:	8080038d 	sth	r2,14(r16)
 20085a0:	80000415 	stw	zero,16(r16)
 20085a4:	80000515 	stw	zero,20(r16)
 20085a8:	80000615 	stw	zero,24(r16)
 20085ac:	81001704 	addi	r4,r16,92
 20085b0:	000b883a 	mov	r5,zero
 20085b4:	b80d883a 	mov	r6,r23
 20085b8:	2003f700 	call	2003f70 <memset>
 20085bc:	00800044 	movi	r2,1
 20085c0:	84000715 	stw	r16,28(r16)
 20085c4:	85800815 	stw	r22,32(r16)
 20085c8:	85400915 	stw	r21,36(r16)
 20085cc:	85000a15 	stw	r20,40(r16)
 20085d0:	84c00b15 	stw	r19,44(r16)
 20085d4:	90800e15 	stw	r2,56(r18)
 20085d8:	dfc00817 	ldw	ra,32(sp)
 20085dc:	ddc00717 	ldw	r23,28(sp)
 20085e0:	dd800617 	ldw	r22,24(sp)
 20085e4:	dd400517 	ldw	r21,20(sp)
 20085e8:	dd000417 	ldw	r20,16(sp)
 20085ec:	dcc00317 	ldw	r19,12(sp)
 20085f0:	dc800217 	ldw	r18,8(sp)
 20085f4:	dc400117 	ldw	r17,4(sp)
 20085f8:	dc000017 	ldw	r16,0(sp)
 20085fc:	dec00904 	addi	sp,sp,36
 2008600:	f800283a 	ret

02008604 <__sfmoreglue>:
 2008604:	defffc04 	addi	sp,sp,-16
 2008608:	dc800215 	stw	r18,8(sp)
 200860c:	2825883a 	mov	r18,r5
 2008610:	dc000015 	stw	r16,0(sp)
 2008614:	01401a04 	movi	r5,104
 2008618:	2021883a 	mov	r16,r4
 200861c:	913fffc4 	addi	r4,r18,-1
 2008620:	dfc00315 	stw	ra,12(sp)
 2008624:	dc400115 	stw	r17,4(sp)
 2008628:	200e2dc0 	call	200e2dc <__mulsi3>
 200862c:	8009883a 	mov	r4,r16
 2008630:	11401d04 	addi	r5,r2,116
 2008634:	1023883a 	mov	r17,r2
 2008638:	20095540 	call	2009554 <_malloc_r>
 200863c:	1021883a 	mov	r16,r2
 2008640:	10000726 	beq	r2,zero,2008660 <__sfmoreglue+0x5c>
 2008644:	11000304 	addi	r4,r2,12
 2008648:	10000015 	stw	zero,0(r2)
 200864c:	14800115 	stw	r18,4(r2)
 2008650:	11000215 	stw	r4,8(r2)
 2008654:	000b883a 	mov	r5,zero
 2008658:	89801a04 	addi	r6,r17,104
 200865c:	2003f700 	call	2003f70 <memset>
 2008660:	8005883a 	mov	r2,r16
 2008664:	dfc00317 	ldw	ra,12(sp)
 2008668:	dc800217 	ldw	r18,8(sp)
 200866c:	dc400117 	ldw	r17,4(sp)
 2008670:	dc000017 	ldw	r16,0(sp)
 2008674:	dec00404 	addi	sp,sp,16
 2008678:	f800283a 	ret

0200867c <__sfp>:
 200867c:	008080b4 	movhi	r2,514
 2008680:	defffb04 	addi	sp,sp,-20
 2008684:	10aa6604 	addi	r2,r2,-22120
 2008688:	dc800215 	stw	r18,8(sp)
 200868c:	14800017 	ldw	r18,0(r2)
 2008690:	dcc00315 	stw	r19,12(sp)
 2008694:	dfc00415 	stw	ra,16(sp)
 2008698:	90800e17 	ldw	r2,56(r18)
 200869c:	dc400115 	stw	r17,4(sp)
 20086a0:	dc000015 	stw	r16,0(sp)
 20086a4:	2027883a 	mov	r19,r4
 20086a8:	1000021e 	bne	r2,zero,20086b4 <__sfp+0x38>
 20086ac:	9009883a 	mov	r4,r18
 20086b0:	20084680 	call	2008468 <__sinit.part.1>
 20086b4:	9480b804 	addi	r18,r18,736
 20086b8:	047fffc4 	movi	r17,-1
 20086bc:	91400117 	ldw	r5,4(r18)
 20086c0:	94000217 	ldw	r16,8(r18)
 20086c4:	297fffc4 	addi	r5,r5,-1
 20086c8:	28000a16 	blt	r5,zero,20086f4 <__sfp+0x78>
 20086cc:	8080030f 	ldh	r2,12(r16)
 20086d0:	10000c26 	beq	r2,zero,2008704 <__sfp+0x88>
 20086d4:	80c01d04 	addi	r3,r16,116
 20086d8:	00000206 	br	20086e4 <__sfp+0x68>
 20086dc:	18bfe60f 	ldh	r2,-104(r3)
 20086e0:	10000826 	beq	r2,zero,2008704 <__sfp+0x88>
 20086e4:	297fffc4 	addi	r5,r5,-1
 20086e8:	1c3ffd04 	addi	r16,r3,-12
 20086ec:	18c01a04 	addi	r3,r3,104
 20086f0:	2c7ffa1e 	bne	r5,r17,20086dc <__sfp+0x60>
 20086f4:	90800017 	ldw	r2,0(r18)
 20086f8:	10001d26 	beq	r2,zero,2008770 <__sfp+0xf4>
 20086fc:	1025883a 	mov	r18,r2
 2008700:	003fee06 	br	20086bc <__sfp+0x40>
 2008704:	00bfffc4 	movi	r2,-1
 2008708:	8080038d 	sth	r2,14(r16)
 200870c:	00800044 	movi	r2,1
 2008710:	8080030d 	sth	r2,12(r16)
 2008714:	80001915 	stw	zero,100(r16)
 2008718:	80000015 	stw	zero,0(r16)
 200871c:	80000215 	stw	zero,8(r16)
 2008720:	80000115 	stw	zero,4(r16)
 2008724:	80000415 	stw	zero,16(r16)
 2008728:	80000515 	stw	zero,20(r16)
 200872c:	80000615 	stw	zero,24(r16)
 2008730:	81001704 	addi	r4,r16,92
 2008734:	000b883a 	mov	r5,zero
 2008738:	01800204 	movi	r6,8
 200873c:	2003f700 	call	2003f70 <memset>
 2008740:	8005883a 	mov	r2,r16
 2008744:	80000c15 	stw	zero,48(r16)
 2008748:	80000d15 	stw	zero,52(r16)
 200874c:	80001115 	stw	zero,68(r16)
 2008750:	80001215 	stw	zero,72(r16)
 2008754:	dfc00417 	ldw	ra,16(sp)
 2008758:	dcc00317 	ldw	r19,12(sp)
 200875c:	dc800217 	ldw	r18,8(sp)
 2008760:	dc400117 	ldw	r17,4(sp)
 2008764:	dc000017 	ldw	r16,0(sp)
 2008768:	dec00504 	addi	sp,sp,20
 200876c:	f800283a 	ret
 2008770:	9809883a 	mov	r4,r19
 2008774:	01400104 	movi	r5,4
 2008778:	20086040 	call	2008604 <__sfmoreglue>
 200877c:	90800015 	stw	r2,0(r18)
 2008780:	103fde1e 	bne	r2,zero,20086fc <__sfp+0x80>
 2008784:	00800304 	movi	r2,12
 2008788:	98800015 	stw	r2,0(r19)
 200878c:	0005883a 	mov	r2,zero
 2008790:	003ff006 	br	2008754 <__sfp+0xd8>

02008794 <_cleanup>:
 2008794:	008080b4 	movhi	r2,514
 2008798:	10aa6604 	addi	r2,r2,-22120
 200879c:	11000017 	ldw	r4,0(r2)
 20087a0:	01408074 	movhi	r5,513
 20087a4:	29738604 	addi	r5,r5,-12776
 20087a8:	20091a01 	jmpi	20091a0 <_fwalk_reent>

020087ac <__sinit>:
 20087ac:	20800e17 	ldw	r2,56(r4)
 20087b0:	10000126 	beq	r2,zero,20087b8 <__sinit+0xc>
 20087b4:	f800283a 	ret
 20087b8:	20084681 	jmpi	2008468 <__sinit.part.1>

020087bc <__sfp_lock_acquire>:
 20087bc:	f800283a 	ret

020087c0 <__sfp_lock_release>:
 20087c0:	f800283a 	ret

020087c4 <__sinit_lock_acquire>:
 20087c4:	f800283a 	ret

020087c8 <__sinit_lock_release>:
 20087c8:	f800283a 	ret

020087cc <__fp_lock_all>:
 20087cc:	008080b4 	movhi	r2,514
 20087d0:	10aa6704 	addi	r2,r2,-22116
 20087d4:	11000017 	ldw	r4,0(r2)
 20087d8:	01408074 	movhi	r5,513
 20087dc:	29611304 	addi	r5,r5,-31668
 20087e0:	20090dc1 	jmpi	20090dc <_fwalk>

020087e4 <__fp_unlock_all>:
 20087e4:	008080b4 	movhi	r2,514
 20087e8:	10aa6704 	addi	r2,r2,-22116
 20087ec:	11000017 	ldw	r4,0(r2)
 20087f0:	01408074 	movhi	r5,513
 20087f4:	29611504 	addi	r5,r5,-31660
 20087f8:	20090dc1 	jmpi	20090dc <_fwalk>

020087fc <_malloc_trim_r>:
 20087fc:	defffb04 	addi	sp,sp,-20
 2008800:	dcc00315 	stw	r19,12(sp)
 2008804:	04c080b4 	movhi	r19,514
 2008808:	dc800215 	stw	r18,8(sp)
 200880c:	dc400115 	stw	r17,4(sp)
 2008810:	dc000015 	stw	r16,0(sp)
 2008814:	dfc00415 	stw	ra,16(sp)
 2008818:	2821883a 	mov	r16,r5
 200881c:	9ce4a404 	addi	r19,r19,-28016
 2008820:	2025883a 	mov	r18,r4
 2008824:	20112080 	call	2011208 <__malloc_lock>
 2008828:	98800217 	ldw	r2,8(r19)
 200882c:	14400117 	ldw	r17,4(r2)
 2008830:	00bfff04 	movi	r2,-4
 2008834:	88a2703a 	and	r17,r17,r2
 2008838:	8c21c83a 	sub	r16,r17,r16
 200883c:	8403fbc4 	addi	r16,r16,4079
 2008840:	8020d33a 	srli	r16,r16,12
 2008844:	0083ffc4 	movi	r2,4095
 2008848:	843fffc4 	addi	r16,r16,-1
 200884c:	8020933a 	slli	r16,r16,12
 2008850:	1400060e 	bge	r2,r16,200886c <_malloc_trim_r+0x70>
 2008854:	9009883a 	mov	r4,r18
 2008858:	000b883a 	mov	r5,zero
 200885c:	200b5780 	call	200b578 <_sbrk_r>
 2008860:	98c00217 	ldw	r3,8(r19)
 2008864:	1c47883a 	add	r3,r3,r17
 2008868:	10c00a26 	beq	r2,r3,2008894 <_malloc_trim_r+0x98>
 200886c:	9009883a 	mov	r4,r18
 2008870:	20112280 	call	2011228 <__malloc_unlock>
 2008874:	0005883a 	mov	r2,zero
 2008878:	dfc00417 	ldw	ra,16(sp)
 200887c:	dcc00317 	ldw	r19,12(sp)
 2008880:	dc800217 	ldw	r18,8(sp)
 2008884:	dc400117 	ldw	r17,4(sp)
 2008888:	dc000017 	ldw	r16,0(sp)
 200888c:	dec00504 	addi	sp,sp,20
 2008890:	f800283a 	ret
 2008894:	9009883a 	mov	r4,r18
 2008898:	040bc83a 	sub	r5,zero,r16
 200889c:	200b5780 	call	200b578 <_sbrk_r>
 20088a0:	00ffffc4 	movi	r3,-1
 20088a4:	10c00d26 	beq	r2,r3,20088dc <_malloc_trim_r+0xe0>
 20088a8:	00c080b4 	movhi	r3,514
 20088ac:	18ea8e04 	addi	r3,r3,-21960
 20088b0:	18800017 	ldw	r2,0(r3)
 20088b4:	99000217 	ldw	r4,8(r19)
 20088b8:	8c23c83a 	sub	r17,r17,r16
 20088bc:	8c400054 	ori	r17,r17,1
 20088c0:	1421c83a 	sub	r16,r2,r16
 20088c4:	24400115 	stw	r17,4(r4)
 20088c8:	9009883a 	mov	r4,r18
 20088cc:	1c000015 	stw	r16,0(r3)
 20088d0:	20112280 	call	2011228 <__malloc_unlock>
 20088d4:	00800044 	movi	r2,1
 20088d8:	003fe706 	br	2008878 <_malloc_trim_r+0x7c>
 20088dc:	9009883a 	mov	r4,r18
 20088e0:	000b883a 	mov	r5,zero
 20088e4:	200b5780 	call	200b578 <_sbrk_r>
 20088e8:	99000217 	ldw	r4,8(r19)
 20088ec:	014003c4 	movi	r5,15
 20088f0:	1107c83a 	sub	r3,r2,r4
 20088f4:	28ffdd0e 	bge	r5,r3,200886c <_malloc_trim_r+0x70>
 20088f8:	014080b4 	movhi	r5,514
 20088fc:	296a6904 	addi	r5,r5,-22108
 2008900:	29400017 	ldw	r5,0(r5)
 2008904:	18c00054 	ori	r3,r3,1
 2008908:	20c00115 	stw	r3,4(r4)
 200890c:	00c080b4 	movhi	r3,514
 2008910:	1145c83a 	sub	r2,r2,r5
 2008914:	18ea8e04 	addi	r3,r3,-21960
 2008918:	18800015 	stw	r2,0(r3)
 200891c:	003fd306 	br	200886c <_malloc_trim_r+0x70>

02008920 <_free_r>:
 2008920:	28004c26 	beq	r5,zero,2008a54 <_free_r+0x134>
 2008924:	defffd04 	addi	sp,sp,-12
 2008928:	dc400115 	stw	r17,4(sp)
 200892c:	dc000015 	stw	r16,0(sp)
 2008930:	2023883a 	mov	r17,r4
 2008934:	2821883a 	mov	r16,r5
 2008938:	dfc00215 	stw	ra,8(sp)
 200893c:	20112080 	call	2011208 <__malloc_lock>
 2008940:	813fff17 	ldw	r4,-4(r16)
 2008944:	00bfff84 	movi	r2,-2
 2008948:	024080b4 	movhi	r9,514
 200894c:	81bffe04 	addi	r6,r16,-8
 2008950:	2084703a 	and	r2,r4,r2
 2008954:	4a64a404 	addi	r9,r9,-28016
 2008958:	308b883a 	add	r5,r6,r2
 200895c:	2a000117 	ldw	r8,4(r5)
 2008960:	49c00217 	ldw	r7,8(r9)
 2008964:	00ffff04 	movi	r3,-4
 2008968:	40c6703a 	and	r3,r8,r3
 200896c:	39405326 	beq	r7,r5,2008abc <_free_r+0x19c>
 2008970:	28c00115 	stw	r3,4(r5)
 2008974:	2100004c 	andi	r4,r4,1
 2008978:	2000091e 	bne	r4,zero,20089a0 <_free_r+0x80>
 200897c:	81fffe17 	ldw	r7,-8(r16)
 2008980:	4a000204 	addi	r8,r9,8
 2008984:	31cdc83a 	sub	r6,r6,r7
 2008988:	31000217 	ldw	r4,8(r6)
 200898c:	11c5883a 	add	r2,r2,r7
 2008990:	22006126 	beq	r4,r8,2008b18 <_free_r+0x1f8>
 2008994:	31c00317 	ldw	r7,12(r6)
 2008998:	21c00315 	stw	r7,12(r4)
 200899c:	39000215 	stw	r4,8(r7)
 20089a0:	28c9883a 	add	r4,r5,r3
 20089a4:	21c00117 	ldw	r7,4(r4)
 20089a8:	39c0004c 	andi	r7,r7,1
 20089ac:	38000d1e 	bne	r7,zero,20089e4 <_free_r+0xc4>
 20089b0:	29000217 	ldw	r4,8(r5)
 20089b4:	10c5883a 	add	r2,r2,r3
 20089b8:	00c080b4 	movhi	r3,514
 20089bc:	18e4a604 	addi	r3,r3,-28008
 20089c0:	20c07526 	beq	r4,r3,2008b98 <_free_r+0x278>
 20089c4:	29c00317 	ldw	r7,12(r5)
 20089c8:	11400054 	ori	r5,r2,1
 20089cc:	3087883a 	add	r3,r6,r2
 20089d0:	21c00315 	stw	r7,12(r4)
 20089d4:	39000215 	stw	r4,8(r7)
 20089d8:	31400115 	stw	r5,4(r6)
 20089dc:	18800015 	stw	r2,0(r3)
 20089e0:	00000406 	br	20089f4 <_free_r+0xd4>
 20089e4:	10c00054 	ori	r3,r2,1
 20089e8:	30c00115 	stw	r3,4(r6)
 20089ec:	3087883a 	add	r3,r6,r2
 20089f0:	18800015 	stw	r2,0(r3)
 20089f4:	00c07fc4 	movi	r3,511
 20089f8:	18801736 	bltu	r3,r2,2008a58 <_free_r+0x138>
 20089fc:	1004d0fa 	srli	r2,r2,3
 2008a00:	01400044 	movi	r5,1
 2008a04:	49000117 	ldw	r4,4(r9)
 2008a08:	1087883a 	add	r3,r2,r2
 2008a0c:	18c7883a 	add	r3,r3,r3
 2008a10:	1005d0ba 	srai	r2,r2,2
 2008a14:	18c7883a 	add	r3,r3,r3
 2008a18:	1a47883a 	add	r3,r3,r9
 2008a1c:	19c00217 	ldw	r7,8(r3)
 2008a20:	2884983a 	sll	r2,r5,r2
 2008a24:	30c00315 	stw	r3,12(r6)
 2008a28:	31c00215 	stw	r7,8(r6)
 2008a2c:	1104b03a 	or	r2,r2,r4
 2008a30:	19800215 	stw	r6,8(r3)
 2008a34:	48800115 	stw	r2,4(r9)
 2008a38:	39800315 	stw	r6,12(r7)
 2008a3c:	8809883a 	mov	r4,r17
 2008a40:	dfc00217 	ldw	ra,8(sp)
 2008a44:	dc400117 	ldw	r17,4(sp)
 2008a48:	dc000017 	ldw	r16,0(sp)
 2008a4c:	dec00304 	addi	sp,sp,12
 2008a50:	20112281 	jmpi	2011228 <__malloc_unlock>
 2008a54:	f800283a 	ret
 2008a58:	1006d27a 	srli	r3,r2,9
 2008a5c:	01000104 	movi	r4,4
 2008a60:	20c04036 	bltu	r4,r3,2008b64 <_free_r+0x244>
 2008a64:	1006d1ba 	srli	r3,r2,6
 2008a68:	19400e04 	addi	r5,r3,56
 2008a6c:	2947883a 	add	r3,r5,r5
 2008a70:	18c7883a 	add	r3,r3,r3
 2008a74:	18c7883a 	add	r3,r3,r3
 2008a78:	1a49883a 	add	r4,r3,r9
 2008a7c:	20c00217 	ldw	r3,8(r4)
 2008a80:	01c080b4 	movhi	r7,514
 2008a84:	39e4a404 	addi	r7,r7,-28016
 2008a88:	19003b26 	beq	r3,r4,2008b78 <_free_r+0x258>
 2008a8c:	01ffff04 	movi	r7,-4
 2008a90:	19400117 	ldw	r5,4(r3)
 2008a94:	29ca703a 	and	r5,r5,r7
 2008a98:	1140022e 	bgeu	r2,r5,2008aa4 <_free_r+0x184>
 2008a9c:	18c00217 	ldw	r3,8(r3)
 2008aa0:	20fffb1e 	bne	r4,r3,2008a90 <_free_r+0x170>
 2008aa4:	18800317 	ldw	r2,12(r3)
 2008aa8:	30800315 	stw	r2,12(r6)
 2008aac:	30c00215 	stw	r3,8(r6)
 2008ab0:	11800215 	stw	r6,8(r2)
 2008ab4:	19800315 	stw	r6,12(r3)
 2008ab8:	003fe006 	br	2008a3c <_free_r+0x11c>
 2008abc:	2100004c 	andi	r4,r4,1
 2008ac0:	1885883a 	add	r2,r3,r2
 2008ac4:	2000071e 	bne	r4,zero,2008ae4 <_free_r+0x1c4>
 2008ac8:	817ffe17 	ldw	r5,-8(r16)
 2008acc:	314dc83a 	sub	r6,r6,r5
 2008ad0:	30c00317 	ldw	r3,12(r6)
 2008ad4:	31000217 	ldw	r4,8(r6)
 2008ad8:	1145883a 	add	r2,r2,r5
 2008adc:	20c00315 	stw	r3,12(r4)
 2008ae0:	19000215 	stw	r4,8(r3)
 2008ae4:	10c00054 	ori	r3,r2,1
 2008ae8:	30c00115 	stw	r3,4(r6)
 2008aec:	00c080b4 	movhi	r3,514
 2008af0:	18ea6a04 	addi	r3,r3,-22104
 2008af4:	18c00017 	ldw	r3,0(r3)
 2008af8:	49800215 	stw	r6,8(r9)
 2008afc:	10ffcf36 	bltu	r2,r3,2008a3c <_free_r+0x11c>
 2008b00:	008080b4 	movhi	r2,514
 2008b04:	10aa8204 	addi	r2,r2,-22008
 2008b08:	11400017 	ldw	r5,0(r2)
 2008b0c:	8809883a 	mov	r4,r17
 2008b10:	20087fc0 	call	20087fc <_malloc_trim_r>
 2008b14:	003fc906 	br	2008a3c <_free_r+0x11c>
 2008b18:	28c9883a 	add	r4,r5,r3
 2008b1c:	21000117 	ldw	r4,4(r4)
 2008b20:	2100004c 	andi	r4,r4,1
 2008b24:	20000a1e 	bne	r4,zero,2008b50 <_free_r+0x230>
 2008b28:	29000317 	ldw	r4,12(r5)
 2008b2c:	29400217 	ldw	r5,8(r5)
 2008b30:	10c5883a 	add	r2,r2,r3
 2008b34:	10c00054 	ori	r3,r2,1
 2008b38:	29000315 	stw	r4,12(r5)
 2008b3c:	21400215 	stw	r5,8(r4)
 2008b40:	30c00115 	stw	r3,4(r6)
 2008b44:	308d883a 	add	r6,r6,r2
 2008b48:	30800015 	stw	r2,0(r6)
 2008b4c:	003fbb06 	br	2008a3c <_free_r+0x11c>
 2008b50:	10c00054 	ori	r3,r2,1
 2008b54:	30c00115 	stw	r3,4(r6)
 2008b58:	308d883a 	add	r6,r6,r2
 2008b5c:	30800015 	stw	r2,0(r6)
 2008b60:	003fb606 	br	2008a3c <_free_r+0x11c>
 2008b64:	01000504 	movi	r4,20
 2008b68:	20c01436 	bltu	r4,r3,2008bbc <_free_r+0x29c>
 2008b6c:	194016c4 	addi	r5,r3,91
 2008b70:	2947883a 	add	r3,r5,r5
 2008b74:	003fbe06 	br	2008a70 <_free_r+0x150>
 2008b78:	280bd0ba 	srai	r5,r5,2
 2008b7c:	00800044 	movi	r2,1
 2008b80:	39000117 	ldw	r4,4(r7)
 2008b84:	114a983a 	sll	r5,r2,r5
 2008b88:	1805883a 	mov	r2,r3
 2008b8c:	2908b03a 	or	r4,r5,r4
 2008b90:	39000115 	stw	r4,4(r7)
 2008b94:	003fc406 	br	2008aa8 <_free_r+0x188>
 2008b98:	49800515 	stw	r6,20(r9)
 2008b9c:	49800415 	stw	r6,16(r9)
 2008ba0:	10c00054 	ori	r3,r2,1
 2008ba4:	31000315 	stw	r4,12(r6)
 2008ba8:	31000215 	stw	r4,8(r6)
 2008bac:	30c00115 	stw	r3,4(r6)
 2008bb0:	308d883a 	add	r6,r6,r2
 2008bb4:	30800015 	stw	r2,0(r6)
 2008bb8:	003fa006 	br	2008a3c <_free_r+0x11c>
 2008bbc:	01001504 	movi	r4,84
 2008bc0:	20c00436 	bltu	r4,r3,2008bd4 <_free_r+0x2b4>
 2008bc4:	1006d33a 	srli	r3,r2,12
 2008bc8:	19401b84 	addi	r5,r3,110
 2008bcc:	2947883a 	add	r3,r5,r5
 2008bd0:	003fa706 	br	2008a70 <_free_r+0x150>
 2008bd4:	01005504 	movi	r4,340
 2008bd8:	20c00436 	bltu	r4,r3,2008bec <_free_r+0x2cc>
 2008bdc:	1006d3fa 	srli	r3,r2,15
 2008be0:	19401dc4 	addi	r5,r3,119
 2008be4:	2947883a 	add	r3,r5,r5
 2008be8:	003fa106 	br	2008a70 <_free_r+0x150>
 2008bec:	01015504 	movi	r4,1364
 2008bf0:	20c00436 	bltu	r4,r3,2008c04 <_free_r+0x2e4>
 2008bf4:	1006d4ba 	srli	r3,r2,18
 2008bf8:	19401f04 	addi	r5,r3,124
 2008bfc:	2947883a 	add	r3,r5,r5
 2008c00:	003f9b06 	br	2008a70 <_free_r+0x150>
 2008c04:	00c03f04 	movi	r3,252
 2008c08:	01401f84 	movi	r5,126
 2008c0c:	003f9806 	br	2008a70 <_free_r+0x150>

02008c10 <__sfvwrite_r>:
 2008c10:	30800217 	ldw	r2,8(r6)
 2008c14:	10006726 	beq	r2,zero,2008db4 <__sfvwrite_r+0x1a4>
 2008c18:	defff404 	addi	sp,sp,-48
 2008c1c:	dd000615 	stw	r20,24(sp)
 2008c20:	2029883a 	mov	r20,r4
 2008c24:	2900030b 	ldhu	r4,12(r5)
 2008c28:	ddc00915 	stw	r23,36(sp)
 2008c2c:	dc000215 	stw	r16,8(sp)
 2008c30:	dfc00b15 	stw	ra,44(sp)
 2008c34:	df000a15 	stw	fp,40(sp)
 2008c38:	dd800815 	stw	r22,32(sp)
 2008c3c:	dd400715 	stw	r21,28(sp)
 2008c40:	dcc00515 	stw	r19,20(sp)
 2008c44:	dc800415 	stw	r18,16(sp)
 2008c48:	dc400315 	stw	r17,12(sp)
 2008c4c:	2080020c 	andi	r2,r4,8
 2008c50:	2821883a 	mov	r16,r5
 2008c54:	302f883a 	mov	r23,r6
 2008c58:	10002726 	beq	r2,zero,2008cf8 <__sfvwrite_r+0xe8>
 2008c5c:	28800417 	ldw	r2,16(r5)
 2008c60:	10002526 	beq	r2,zero,2008cf8 <__sfvwrite_r+0xe8>
 2008c64:	2080008c 	andi	r2,r4,2
 2008c68:	bc400017 	ldw	r17,0(r23)
 2008c6c:	10002a26 	beq	r2,zero,2008d18 <__sfvwrite_r+0x108>
 2008c70:	05600034 	movhi	r21,32768
 2008c74:	0027883a 	mov	r19,zero
 2008c78:	0025883a 	mov	r18,zero
 2008c7c:	ad7f0004 	addi	r21,r21,-1024
 2008c80:	980d883a 	mov	r6,r19
 2008c84:	a009883a 	mov	r4,r20
 2008c88:	90004626 	beq	r18,zero,2008da4 <__sfvwrite_r+0x194>
 2008c8c:	900f883a 	mov	r7,r18
 2008c90:	81400717 	ldw	r5,28(r16)
 2008c94:	ac80022e 	bgeu	r21,r18,2008ca0 <__sfvwrite_r+0x90>
 2008c98:	01e00034 	movhi	r7,32768
 2008c9c:	39ff0004 	addi	r7,r7,-1024
 2008ca0:	80800917 	ldw	r2,36(r16)
 2008ca4:	103ee83a 	callr	r2
 2008ca8:	0080550e 	bge	zero,r2,2008e00 <__sfvwrite_r+0x1f0>
 2008cac:	b8c00217 	ldw	r3,8(r23)
 2008cb0:	98a7883a 	add	r19,r19,r2
 2008cb4:	90a5c83a 	sub	r18,r18,r2
 2008cb8:	1885c83a 	sub	r2,r3,r2
 2008cbc:	b8800215 	stw	r2,8(r23)
 2008cc0:	103fef1e 	bne	r2,zero,2008c80 <__sfvwrite_r+0x70>
 2008cc4:	0005883a 	mov	r2,zero
 2008cc8:	dfc00b17 	ldw	ra,44(sp)
 2008ccc:	df000a17 	ldw	fp,40(sp)
 2008cd0:	ddc00917 	ldw	r23,36(sp)
 2008cd4:	dd800817 	ldw	r22,32(sp)
 2008cd8:	dd400717 	ldw	r21,28(sp)
 2008cdc:	dd000617 	ldw	r20,24(sp)
 2008ce0:	dcc00517 	ldw	r19,20(sp)
 2008ce4:	dc800417 	ldw	r18,16(sp)
 2008ce8:	dc400317 	ldw	r17,12(sp)
 2008cec:	dc000217 	ldw	r16,8(sp)
 2008cf0:	dec00c04 	addi	sp,sp,48
 2008cf4:	f800283a 	ret
 2008cf8:	a009883a 	mov	r4,r20
 2008cfc:	800b883a 	mov	r5,r16
 2008d00:	20067140 	call	2006714 <__swsetup_r>
 2008d04:	1000ef1e 	bne	r2,zero,20090c4 <__sfvwrite_r+0x4b4>
 2008d08:	8100030b 	ldhu	r4,12(r16)
 2008d0c:	bc400017 	ldw	r17,0(r23)
 2008d10:	2080008c 	andi	r2,r4,2
 2008d14:	103fd61e 	bne	r2,zero,2008c70 <__sfvwrite_r+0x60>
 2008d18:	2080004c 	andi	r2,r4,1
 2008d1c:	10003d1e 	bne	r2,zero,2008e14 <__sfvwrite_r+0x204>
 2008d20:	0039883a 	mov	fp,zero
 2008d24:	0025883a 	mov	r18,zero
 2008d28:	90001a26 	beq	r18,zero,2008d94 <__sfvwrite_r+0x184>
 2008d2c:	2080800c 	andi	r2,r4,512
 2008d30:	85800217 	ldw	r22,8(r16)
 2008d34:	10007926 	beq	r2,zero,2008f1c <__sfvwrite_r+0x30c>
 2008d38:	b027883a 	mov	r19,r22
 2008d3c:	95809736 	bltu	r18,r22,2008f9c <__sfvwrite_r+0x38c>
 2008d40:	2081200c 	andi	r2,r4,1152
 2008d44:	1000a21e 	bne	r2,zero,2008fd0 <__sfvwrite_r+0x3c0>
 2008d48:	81000017 	ldw	r4,0(r16)
 2008d4c:	e00b883a 	mov	r5,fp
 2008d50:	980d883a 	mov	r6,r19
 2008d54:	2009de40 	call	2009de4 <memmove>
 2008d58:	81000217 	ldw	r4,8(r16)
 2008d5c:	81400017 	ldw	r5,0(r16)
 2008d60:	9005883a 	mov	r2,r18
 2008d64:	2587c83a 	sub	r3,r4,r22
 2008d68:	2ce7883a 	add	r19,r5,r19
 2008d6c:	80c00215 	stw	r3,8(r16)
 2008d70:	84c00015 	stw	r19,0(r16)
 2008d74:	b8c00217 	ldw	r3,8(r23)
 2008d78:	e0b9883a 	add	fp,fp,r2
 2008d7c:	90a5c83a 	sub	r18,r18,r2
 2008d80:	1885c83a 	sub	r2,r3,r2
 2008d84:	b8800215 	stw	r2,8(r23)
 2008d88:	103fce26 	beq	r2,zero,2008cc4 <__sfvwrite_r+0xb4>
 2008d8c:	8100030b 	ldhu	r4,12(r16)
 2008d90:	903fe61e 	bne	r18,zero,2008d2c <__sfvwrite_r+0x11c>
 2008d94:	8f000017 	ldw	fp,0(r17)
 2008d98:	8c800117 	ldw	r18,4(r17)
 2008d9c:	8c400204 	addi	r17,r17,8
 2008da0:	003fe106 	br	2008d28 <__sfvwrite_r+0x118>
 2008da4:	8cc00017 	ldw	r19,0(r17)
 2008da8:	8c800117 	ldw	r18,4(r17)
 2008dac:	8c400204 	addi	r17,r17,8
 2008db0:	003fb306 	br	2008c80 <__sfvwrite_r+0x70>
 2008db4:	0005883a 	mov	r2,zero
 2008db8:	f800283a 	ret
 2008dbc:	00a00034 	movhi	r2,32768
 2008dc0:	10bfffc4 	addi	r2,r2,-1
 2008dc4:	9009883a 	mov	r4,r18
 2008dc8:	1480012e 	bgeu	r2,r18,2008dd0 <__sfvwrite_r+0x1c0>
 2008dcc:	1009883a 	mov	r4,r2
 2008dd0:	980b883a 	mov	r5,r19
 2008dd4:	200e21c0 	call	200e21c <__divsi3>
 2008dd8:	9809883a 	mov	r4,r19
 2008ddc:	100b883a 	mov	r5,r2
 2008de0:	200e2dc0 	call	200e2dc <__mulsi3>
 2008de4:	81400717 	ldw	r5,28(r16)
 2008de8:	80c00917 	ldw	r3,36(r16)
 2008dec:	a009883a 	mov	r4,r20
 2008df0:	e00d883a 	mov	r6,fp
 2008df4:	100f883a 	mov	r7,r2
 2008df8:	183ee83a 	callr	r3
 2008dfc:	00bfdd16 	blt	zero,r2,2008d74 <__sfvwrite_r+0x164>
 2008e00:	8080030b 	ldhu	r2,12(r16)
 2008e04:	10801014 	ori	r2,r2,64
 2008e08:	8080030d 	sth	r2,12(r16)
 2008e0c:	00bfffc4 	movi	r2,-1
 2008e10:	003fad06 	br	2008cc8 <__sfvwrite_r+0xb8>
 2008e14:	0027883a 	mov	r19,zero
 2008e18:	0011883a 	mov	r8,zero
 2008e1c:	0039883a 	mov	fp,zero
 2008e20:	0025883a 	mov	r18,zero
 2008e24:	90001f26 	beq	r18,zero,2008ea4 <__sfvwrite_r+0x294>
 2008e28:	40006026 	beq	r8,zero,2008fac <__sfvwrite_r+0x39c>
 2008e2c:	982b883a 	mov	r21,r19
 2008e30:	94c0012e 	bgeu	r18,r19,2008e38 <__sfvwrite_r+0x228>
 2008e34:	902b883a 	mov	r21,r18
 2008e38:	81000017 	ldw	r4,0(r16)
 2008e3c:	80800417 	ldw	r2,16(r16)
 2008e40:	a82d883a 	mov	r22,r21
 2008e44:	81800217 	ldw	r6,8(r16)
 2008e48:	81c00517 	ldw	r7,20(r16)
 2008e4c:	1100022e 	bgeu	r2,r4,2008e58 <__sfvwrite_r+0x248>
 2008e50:	31c7883a 	add	r3,r6,r7
 2008e54:	1d401816 	blt	r3,r21,2008eb8 <__sfvwrite_r+0x2a8>
 2008e58:	a9c04416 	blt	r21,r7,2008f6c <__sfvwrite_r+0x35c>
 2008e5c:	80800917 	ldw	r2,36(r16)
 2008e60:	81400717 	ldw	r5,28(r16)
 2008e64:	a009883a 	mov	r4,r20
 2008e68:	da000115 	stw	r8,4(sp)
 2008e6c:	e00d883a 	mov	r6,fp
 2008e70:	103ee83a 	callr	r2
 2008e74:	102d883a 	mov	r22,r2
 2008e78:	da000117 	ldw	r8,4(sp)
 2008e7c:	00bfe00e 	bge	zero,r2,2008e00 <__sfvwrite_r+0x1f0>
 2008e80:	9da7c83a 	sub	r19,r19,r22
 2008e84:	98001f26 	beq	r19,zero,2008f04 <__sfvwrite_r+0x2f4>
 2008e88:	b8800217 	ldw	r2,8(r23)
 2008e8c:	e5b9883a 	add	fp,fp,r22
 2008e90:	95a5c83a 	sub	r18,r18,r22
 2008e94:	15adc83a 	sub	r22,r2,r22
 2008e98:	bd800215 	stw	r22,8(r23)
 2008e9c:	b03f8926 	beq	r22,zero,2008cc4 <__sfvwrite_r+0xb4>
 2008ea0:	903fe11e 	bne	r18,zero,2008e28 <__sfvwrite_r+0x218>
 2008ea4:	8f000017 	ldw	fp,0(r17)
 2008ea8:	8c800117 	ldw	r18,4(r17)
 2008eac:	0011883a 	mov	r8,zero
 2008eb0:	8c400204 	addi	r17,r17,8
 2008eb4:	003fdb06 	br	2008e24 <__sfvwrite_r+0x214>
 2008eb8:	180d883a 	mov	r6,r3
 2008ebc:	e00b883a 	mov	r5,fp
 2008ec0:	da000115 	stw	r8,4(sp)
 2008ec4:	d8c00015 	stw	r3,0(sp)
 2008ec8:	2009de40 	call	2009de4 <memmove>
 2008ecc:	d8c00017 	ldw	r3,0(sp)
 2008ed0:	80800017 	ldw	r2,0(r16)
 2008ed4:	a009883a 	mov	r4,r20
 2008ed8:	800b883a 	mov	r5,r16
 2008edc:	10c5883a 	add	r2,r2,r3
 2008ee0:	80800015 	stw	r2,0(r16)
 2008ee4:	d8c00015 	stw	r3,0(sp)
 2008ee8:	20083c00 	call	20083c0 <_fflush_r>
 2008eec:	d8c00017 	ldw	r3,0(sp)
 2008ef0:	da000117 	ldw	r8,4(sp)
 2008ef4:	103fc21e 	bne	r2,zero,2008e00 <__sfvwrite_r+0x1f0>
 2008ef8:	182d883a 	mov	r22,r3
 2008efc:	9da7c83a 	sub	r19,r19,r22
 2008f00:	983fe11e 	bne	r19,zero,2008e88 <__sfvwrite_r+0x278>
 2008f04:	a009883a 	mov	r4,r20
 2008f08:	800b883a 	mov	r5,r16
 2008f0c:	20083c00 	call	20083c0 <_fflush_r>
 2008f10:	103fbb1e 	bne	r2,zero,2008e00 <__sfvwrite_r+0x1f0>
 2008f14:	0011883a 	mov	r8,zero
 2008f18:	003fdb06 	br	2008e88 <__sfvwrite_r+0x278>
 2008f1c:	81000017 	ldw	r4,0(r16)
 2008f20:	80800417 	ldw	r2,16(r16)
 2008f24:	11000236 	bltu	r2,r4,2008f30 <__sfvwrite_r+0x320>
 2008f28:	84c00517 	ldw	r19,20(r16)
 2008f2c:	94ffa32e 	bgeu	r18,r19,2008dbc <__sfvwrite_r+0x1ac>
 2008f30:	9027883a 	mov	r19,r18
 2008f34:	b480012e 	bgeu	r22,r18,2008f3c <__sfvwrite_r+0x32c>
 2008f38:	b027883a 	mov	r19,r22
 2008f3c:	e00b883a 	mov	r5,fp
 2008f40:	980d883a 	mov	r6,r19
 2008f44:	2009de40 	call	2009de4 <memmove>
 2008f48:	80800217 	ldw	r2,8(r16)
 2008f4c:	80c00017 	ldw	r3,0(r16)
 2008f50:	14c5c83a 	sub	r2,r2,r19
 2008f54:	1cc7883a 	add	r3,r3,r19
 2008f58:	80800215 	stw	r2,8(r16)
 2008f5c:	80c00015 	stw	r3,0(r16)
 2008f60:	10004326 	beq	r2,zero,2009070 <__sfvwrite_r+0x460>
 2008f64:	9805883a 	mov	r2,r19
 2008f68:	003f8206 	br	2008d74 <__sfvwrite_r+0x164>
 2008f6c:	a80d883a 	mov	r6,r21
 2008f70:	e00b883a 	mov	r5,fp
 2008f74:	da000115 	stw	r8,4(sp)
 2008f78:	2009de40 	call	2009de4 <memmove>
 2008f7c:	80800217 	ldw	r2,8(r16)
 2008f80:	80c00017 	ldw	r3,0(r16)
 2008f84:	da000117 	ldw	r8,4(sp)
 2008f88:	1545c83a 	sub	r2,r2,r21
 2008f8c:	1d6b883a 	add	r21,r3,r21
 2008f90:	80800215 	stw	r2,8(r16)
 2008f94:	85400015 	stw	r21,0(r16)
 2008f98:	003fb906 	br	2008e80 <__sfvwrite_r+0x270>
 2008f9c:	81000017 	ldw	r4,0(r16)
 2008fa0:	902d883a 	mov	r22,r18
 2008fa4:	9027883a 	mov	r19,r18
 2008fa8:	003f6806 	br	2008d4c <__sfvwrite_r+0x13c>
 2008fac:	e009883a 	mov	r4,fp
 2008fb0:	01400284 	movi	r5,10
 2008fb4:	900d883a 	mov	r6,r18
 2008fb8:	2009cfc0 	call	2009cfc <memchr>
 2008fbc:	10003e26 	beq	r2,zero,20090b8 <__sfvwrite_r+0x4a8>
 2008fc0:	10800044 	addi	r2,r2,1
 2008fc4:	1727c83a 	sub	r19,r2,fp
 2008fc8:	02000044 	movi	r8,1
 2008fcc:	003f9706 	br	2008e2c <__sfvwrite_r+0x21c>
 2008fd0:	80800517 	ldw	r2,20(r16)
 2008fd4:	81400417 	ldw	r5,16(r16)
 2008fd8:	80c00017 	ldw	r3,0(r16)
 2008fdc:	10a7883a 	add	r19,r2,r2
 2008fe0:	9885883a 	add	r2,r19,r2
 2008fe4:	1026d7fa 	srli	r19,r2,31
 2008fe8:	196bc83a 	sub	r21,r3,r5
 2008fec:	a9800044 	addi	r6,r21,1
 2008ff0:	9885883a 	add	r2,r19,r2
 2008ff4:	1027d07a 	srai	r19,r2,1
 2008ff8:	3485883a 	add	r2,r6,r18
 2008ffc:	980d883a 	mov	r6,r19
 2009000:	9880022e 	bgeu	r19,r2,200900c <__sfvwrite_r+0x3fc>
 2009004:	1027883a 	mov	r19,r2
 2009008:	100d883a 	mov	r6,r2
 200900c:	2101000c 	andi	r4,r4,1024
 2009010:	20001c26 	beq	r4,zero,2009084 <__sfvwrite_r+0x474>
 2009014:	a009883a 	mov	r4,r20
 2009018:	300b883a 	mov	r5,r6
 200901c:	20095540 	call	2009554 <_malloc_r>
 2009020:	102d883a 	mov	r22,r2
 2009024:	10002926 	beq	r2,zero,20090cc <__sfvwrite_r+0x4bc>
 2009028:	81400417 	ldw	r5,16(r16)
 200902c:	1009883a 	mov	r4,r2
 2009030:	a80d883a 	mov	r6,r21
 2009034:	2003e380 	call	2003e38 <memcpy>
 2009038:	8080030b 	ldhu	r2,12(r16)
 200903c:	00fedfc4 	movi	r3,-1153
 2009040:	10c4703a 	and	r2,r2,r3
 2009044:	10802014 	ori	r2,r2,128
 2009048:	8080030d 	sth	r2,12(r16)
 200904c:	b549883a 	add	r4,r22,r21
 2009050:	9d4bc83a 	sub	r5,r19,r21
 2009054:	85800415 	stw	r22,16(r16)
 2009058:	84c00515 	stw	r19,20(r16)
 200905c:	81000015 	stw	r4,0(r16)
 2009060:	902d883a 	mov	r22,r18
 2009064:	81400215 	stw	r5,8(r16)
 2009068:	9027883a 	mov	r19,r18
 200906c:	003f3706 	br	2008d4c <__sfvwrite_r+0x13c>
 2009070:	a009883a 	mov	r4,r20
 2009074:	800b883a 	mov	r5,r16
 2009078:	20083c00 	call	20083c0 <_fflush_r>
 200907c:	103fb926 	beq	r2,zero,2008f64 <__sfvwrite_r+0x354>
 2009080:	003f5f06 	br	2008e00 <__sfvwrite_r+0x1f0>
 2009084:	a009883a 	mov	r4,r20
 2009088:	200af9c0 	call	200af9c <_realloc_r>
 200908c:	102d883a 	mov	r22,r2
 2009090:	103fee1e 	bne	r2,zero,200904c <__sfvwrite_r+0x43c>
 2009094:	81400417 	ldw	r5,16(r16)
 2009098:	a009883a 	mov	r4,r20
 200909c:	20089200 	call	2008920 <_free_r>
 20090a0:	8080030b 	ldhu	r2,12(r16)
 20090a4:	00ffdfc4 	movi	r3,-129
 20090a8:	1884703a 	and	r2,r3,r2
 20090ac:	00c00304 	movi	r3,12
 20090b0:	a0c00015 	stw	r3,0(r20)
 20090b4:	003f5306 	br	2008e04 <__sfvwrite_r+0x1f4>
 20090b8:	94c00044 	addi	r19,r18,1
 20090bc:	02000044 	movi	r8,1
 20090c0:	003f5a06 	br	2008e2c <__sfvwrite_r+0x21c>
 20090c4:	00bfffc4 	movi	r2,-1
 20090c8:	003eff06 	br	2008cc8 <__sfvwrite_r+0xb8>
 20090cc:	00800304 	movi	r2,12
 20090d0:	a0800015 	stw	r2,0(r20)
 20090d4:	8080030b 	ldhu	r2,12(r16)
 20090d8:	003f4a06 	br	2008e04 <__sfvwrite_r+0x1f4>

020090dc <_fwalk>:
 20090dc:	defff704 	addi	sp,sp,-36
 20090e0:	dd000415 	stw	r20,16(sp)
 20090e4:	dfc00815 	stw	ra,32(sp)
 20090e8:	ddc00715 	stw	r23,28(sp)
 20090ec:	dd800615 	stw	r22,24(sp)
 20090f0:	dd400515 	stw	r21,20(sp)
 20090f4:	dcc00315 	stw	r19,12(sp)
 20090f8:	dc800215 	stw	r18,8(sp)
 20090fc:	dc400115 	stw	r17,4(sp)
 2009100:	dc000015 	stw	r16,0(sp)
 2009104:	2500b804 	addi	r20,r4,736
 2009108:	a0002326 	beq	r20,zero,2009198 <_fwalk+0xbc>
 200910c:	282b883a 	mov	r21,r5
 2009110:	002f883a 	mov	r23,zero
 2009114:	05800044 	movi	r22,1
 2009118:	04ffffc4 	movi	r19,-1
 200911c:	a4400117 	ldw	r17,4(r20)
 2009120:	a4800217 	ldw	r18,8(r20)
 2009124:	8c7fffc4 	addi	r17,r17,-1
 2009128:	88000d16 	blt	r17,zero,2009160 <_fwalk+0x84>
 200912c:	94000304 	addi	r16,r18,12
 2009130:	94800384 	addi	r18,r18,14
 2009134:	80c0000b 	ldhu	r3,0(r16)
 2009138:	8c7fffc4 	addi	r17,r17,-1
 200913c:	813ffd04 	addi	r4,r16,-12
 2009140:	b0c0042e 	bgeu	r22,r3,2009154 <_fwalk+0x78>
 2009144:	90c0000f 	ldh	r3,0(r18)
 2009148:	1cc00226 	beq	r3,r19,2009154 <_fwalk+0x78>
 200914c:	a83ee83a 	callr	r21
 2009150:	b8aeb03a 	or	r23,r23,r2
 2009154:	84001a04 	addi	r16,r16,104
 2009158:	94801a04 	addi	r18,r18,104
 200915c:	8cfff51e 	bne	r17,r19,2009134 <_fwalk+0x58>
 2009160:	a5000017 	ldw	r20,0(r20)
 2009164:	a03fed1e 	bne	r20,zero,200911c <_fwalk+0x40>
 2009168:	b805883a 	mov	r2,r23
 200916c:	dfc00817 	ldw	ra,32(sp)
 2009170:	ddc00717 	ldw	r23,28(sp)
 2009174:	dd800617 	ldw	r22,24(sp)
 2009178:	dd400517 	ldw	r21,20(sp)
 200917c:	dd000417 	ldw	r20,16(sp)
 2009180:	dcc00317 	ldw	r19,12(sp)
 2009184:	dc800217 	ldw	r18,8(sp)
 2009188:	dc400117 	ldw	r17,4(sp)
 200918c:	dc000017 	ldw	r16,0(sp)
 2009190:	dec00904 	addi	sp,sp,36
 2009194:	f800283a 	ret
 2009198:	002f883a 	mov	r23,zero
 200919c:	003ff206 	br	2009168 <_fwalk+0x8c>

020091a0 <_fwalk_reent>:
 20091a0:	defff704 	addi	sp,sp,-36
 20091a4:	dd400515 	stw	r21,20(sp)
 20091a8:	dfc00815 	stw	ra,32(sp)
 20091ac:	ddc00715 	stw	r23,28(sp)
 20091b0:	dd800615 	stw	r22,24(sp)
 20091b4:	dd000415 	stw	r20,16(sp)
 20091b8:	dcc00315 	stw	r19,12(sp)
 20091bc:	dc800215 	stw	r18,8(sp)
 20091c0:	dc400115 	stw	r17,4(sp)
 20091c4:	dc000015 	stw	r16,0(sp)
 20091c8:	2540b804 	addi	r21,r4,736
 20091cc:	a8002326 	beq	r21,zero,200925c <_fwalk_reent+0xbc>
 20091d0:	2829883a 	mov	r20,r5
 20091d4:	202d883a 	mov	r22,r4
 20091d8:	002f883a 	mov	r23,zero
 20091dc:	04c00044 	movi	r19,1
 20091e0:	04bfffc4 	movi	r18,-1
 20091e4:	ac400117 	ldw	r17,4(r21)
 20091e8:	ac000217 	ldw	r16,8(r21)
 20091ec:	8c7fffc4 	addi	r17,r17,-1
 20091f0:	88000c16 	blt	r17,zero,2009224 <_fwalk_reent+0x84>
 20091f4:	84000304 	addi	r16,r16,12
 20091f8:	80c0000b 	ldhu	r3,0(r16)
 20091fc:	8c7fffc4 	addi	r17,r17,-1
 2009200:	817ffd04 	addi	r5,r16,-12
 2009204:	98c0052e 	bgeu	r19,r3,200921c <_fwalk_reent+0x7c>
 2009208:	80c0008f 	ldh	r3,2(r16)
 200920c:	b009883a 	mov	r4,r22
 2009210:	1c800226 	beq	r3,r18,200921c <_fwalk_reent+0x7c>
 2009214:	a03ee83a 	callr	r20
 2009218:	b8aeb03a 	or	r23,r23,r2
 200921c:	84001a04 	addi	r16,r16,104
 2009220:	8cbff51e 	bne	r17,r18,20091f8 <_fwalk_reent+0x58>
 2009224:	ad400017 	ldw	r21,0(r21)
 2009228:	a83fee1e 	bne	r21,zero,20091e4 <_fwalk_reent+0x44>
 200922c:	b805883a 	mov	r2,r23
 2009230:	dfc00817 	ldw	ra,32(sp)
 2009234:	ddc00717 	ldw	r23,28(sp)
 2009238:	dd800617 	ldw	r22,24(sp)
 200923c:	dd400517 	ldw	r21,20(sp)
 2009240:	dd000417 	ldw	r20,16(sp)
 2009244:	dcc00317 	ldw	r19,12(sp)
 2009248:	dc800217 	ldw	r18,8(sp)
 200924c:	dc400117 	ldw	r17,4(sp)
 2009250:	dc000017 	ldw	r16,0(sp)
 2009254:	dec00904 	addi	sp,sp,36
 2009258:	f800283a 	ret
 200925c:	002f883a 	mov	r23,zero
 2009260:	003ff206 	br	200922c <_fwalk_reent+0x8c>

02009264 <_gettimeofday_r>:
 2009264:	defffd04 	addi	sp,sp,-12
 2009268:	dc000015 	stw	r16,0(sp)
 200926c:	040080b4 	movhi	r16,514
 2009270:	dc400115 	stw	r17,4(sp)
 2009274:	842a7c04 	addi	r16,r16,-22032
 2009278:	2023883a 	mov	r17,r4
 200927c:	2809883a 	mov	r4,r5
 2009280:	300b883a 	mov	r5,r6
 2009284:	dfc00215 	stw	ra,8(sp)
 2009288:	80000015 	stw	zero,0(r16)
 200928c:	2010d5c0 	call	2010d5c <gettimeofday>
 2009290:	00ffffc4 	movi	r3,-1
 2009294:	10c00526 	beq	r2,r3,20092ac <_gettimeofday_r+0x48>
 2009298:	dfc00217 	ldw	ra,8(sp)
 200929c:	dc400117 	ldw	r17,4(sp)
 20092a0:	dc000017 	ldw	r16,0(sp)
 20092a4:	dec00304 	addi	sp,sp,12
 20092a8:	f800283a 	ret
 20092ac:	80c00017 	ldw	r3,0(r16)
 20092b0:	183ff926 	beq	r3,zero,2009298 <_gettimeofday_r+0x34>
 20092b4:	88c00015 	stw	r3,0(r17)
 20092b8:	003ff706 	br	2009298 <_gettimeofday_r+0x34>

020092bc <_setlocale_r>:
 20092bc:	30001b26 	beq	r6,zero,200932c <_setlocale_r+0x70>
 20092c0:	014080b4 	movhi	r5,514
 20092c4:	defffe04 	addi	sp,sp,-8
 20092c8:	2962d704 	addi	r5,r5,-29860
 20092cc:	3009883a 	mov	r4,r6
 20092d0:	dc000015 	stw	r16,0(sp)
 20092d4:	dfc00115 	stw	ra,4(sp)
 20092d8:	3021883a 	mov	r16,r6
 20092dc:	200b7080 	call	200b708 <strcmp>
 20092e0:	1000061e 	bne	r2,zero,20092fc <_setlocale_r+0x40>
 20092e4:	008080b4 	movhi	r2,514
 20092e8:	10a2b804 	addi	r2,r2,-29984
 20092ec:	dfc00117 	ldw	ra,4(sp)
 20092f0:	dc000017 	ldw	r16,0(sp)
 20092f4:	dec00204 	addi	sp,sp,8
 20092f8:	f800283a 	ret
 20092fc:	014080b4 	movhi	r5,514
 2009300:	2962b804 	addi	r5,r5,-29984
 2009304:	8009883a 	mov	r4,r16
 2009308:	200b7080 	call	200b708 <strcmp>
 200930c:	103ff526 	beq	r2,zero,20092e4 <_setlocale_r+0x28>
 2009310:	014080b4 	movhi	r5,514
 2009314:	2962c204 	addi	r5,r5,-29944
 2009318:	8009883a 	mov	r4,r16
 200931c:	200b7080 	call	200b708 <strcmp>
 2009320:	103ff026 	beq	r2,zero,20092e4 <_setlocale_r+0x28>
 2009324:	0005883a 	mov	r2,zero
 2009328:	003ff006 	br	20092ec <_setlocale_r+0x30>
 200932c:	008080b4 	movhi	r2,514
 2009330:	10a2b804 	addi	r2,r2,-29984
 2009334:	f800283a 	ret

02009338 <__locale_charset>:
 2009338:	008080b4 	movhi	r2,514
 200933c:	10a48e04 	addi	r2,r2,-28104
 2009340:	f800283a 	ret

02009344 <__locale_mb_cur_max>:
 2009344:	008080b4 	movhi	r2,514
 2009348:	10aa6804 	addi	r2,r2,-22112
 200934c:	10800017 	ldw	r2,0(r2)
 2009350:	f800283a 	ret

02009354 <__locale_msgcharset>:
 2009354:	008080b4 	movhi	r2,514
 2009358:	10a48604 	addi	r2,r2,-28136
 200935c:	f800283a 	ret

02009360 <__locale_cjk_lang>:
 2009360:	0005883a 	mov	r2,zero
 2009364:	f800283a 	ret

02009368 <_localeconv_r>:
 2009368:	008080b4 	movhi	r2,514
 200936c:	10a49604 	addi	r2,r2,-28072
 2009370:	f800283a 	ret

02009374 <setlocale>:
 2009374:	00c080b4 	movhi	r3,514
 2009378:	18ea6704 	addi	r3,r3,-22116
 200937c:	2005883a 	mov	r2,r4
 2009380:	19000017 	ldw	r4,0(r3)
 2009384:	280d883a 	mov	r6,r5
 2009388:	100b883a 	mov	r5,r2
 200938c:	20092bc1 	jmpi	20092bc <_setlocale_r>

02009390 <localeconv>:
 2009390:	008080b4 	movhi	r2,514
 2009394:	10a49604 	addi	r2,r2,-28072
 2009398:	f800283a 	ret

0200939c <__smakebuf_r>:
 200939c:	2880030b 	ldhu	r2,12(r5)
 20093a0:	10c0008c 	andi	r3,r2,2
 20093a4:	1800401e 	bne	r3,zero,20094a8 <__smakebuf_r+0x10c>
 20093a8:	deffec04 	addi	sp,sp,-80
 20093ac:	dc000f15 	stw	r16,60(sp)
 20093b0:	2821883a 	mov	r16,r5
 20093b4:	2940038f 	ldh	r5,14(r5)
 20093b8:	dc401015 	stw	r17,64(sp)
 20093bc:	dfc01315 	stw	ra,76(sp)
 20093c0:	dcc01215 	stw	r19,72(sp)
 20093c4:	dc801115 	stw	r18,68(sp)
 20093c8:	2023883a 	mov	r17,r4
 20093cc:	28001b16 	blt	r5,zero,200943c <__smakebuf_r+0xa0>
 20093d0:	d80d883a 	mov	r6,sp
 20093d4:	200d0fc0 	call	200d0fc <_fstat_r>
 20093d8:	10001716 	blt	r2,zero,2009438 <__smakebuf_r+0x9c>
 20093dc:	d8800117 	ldw	r2,4(sp)
 20093e0:	00e00014 	movui	r3,32768
 20093e4:	10bc000c 	andi	r2,r2,61440
 20093e8:	10c03726 	beq	r2,r3,20094c8 <__smakebuf_r+0x12c>
 20093ec:	80c0030b 	ldhu	r3,12(r16)
 20093f0:	18c20014 	ori	r3,r3,2048
 20093f4:	80c0030d 	sth	r3,12(r16)
 20093f8:	00c80004 	movi	r3,8192
 20093fc:	10c03c1e 	bne	r2,r3,20094f0 <__smakebuf_r+0x154>
 2009400:	8140038f 	ldh	r5,14(r16)
 2009404:	8809883a 	mov	r4,r17
 2009408:	200d1540 	call	200d154 <_isatty_r>
 200940c:	10004e26 	beq	r2,zero,2009548 <__smakebuf_r+0x1ac>
 2009410:	8080030b 	ldhu	r2,12(r16)
 2009414:	04c00044 	movi	r19,1
 2009418:	80c010c4 	addi	r3,r16,67
 200941c:	14c4b03a 	or	r2,r2,r19
 2009420:	8080030d 	sth	r2,12(r16)
 2009424:	80c00015 	stw	r3,0(r16)
 2009428:	80c00415 	stw	r3,16(r16)
 200942c:	84c00515 	stw	r19,20(r16)
 2009430:	04810004 	movi	r18,1024
 2009434:	00000706 	br	2009454 <__smakebuf_r+0xb8>
 2009438:	8080030b 	ldhu	r2,12(r16)
 200943c:	10c0200c 	andi	r3,r2,128
 2009440:	18001f1e 	bne	r3,zero,20094c0 <__smakebuf_r+0x124>
 2009444:	04810004 	movi	r18,1024
 2009448:	10820014 	ori	r2,r2,2048
 200944c:	8080030d 	sth	r2,12(r16)
 2009450:	0027883a 	mov	r19,zero
 2009454:	8809883a 	mov	r4,r17
 2009458:	900b883a 	mov	r5,r18
 200945c:	20095540 	call	2009554 <_malloc_r>
 2009460:	10002e26 	beq	r2,zero,200951c <__smakebuf_r+0x180>
 2009464:	80c0030b 	ldhu	r3,12(r16)
 2009468:	01008074 	movhi	r4,513
 200946c:	21211704 	addi	r4,r4,-31652
 2009470:	89000f15 	stw	r4,60(r17)
 2009474:	18c02014 	ori	r3,r3,128
 2009478:	80c0030d 	sth	r3,12(r16)
 200947c:	80800015 	stw	r2,0(r16)
 2009480:	80800415 	stw	r2,16(r16)
 2009484:	84800515 	stw	r18,20(r16)
 2009488:	98001c1e 	bne	r19,zero,20094fc <__smakebuf_r+0x160>
 200948c:	dfc01317 	ldw	ra,76(sp)
 2009490:	dcc01217 	ldw	r19,72(sp)
 2009494:	dc801117 	ldw	r18,68(sp)
 2009498:	dc401017 	ldw	r17,64(sp)
 200949c:	dc000f17 	ldw	r16,60(sp)
 20094a0:	dec01404 	addi	sp,sp,80
 20094a4:	f800283a 	ret
 20094a8:	288010c4 	addi	r2,r5,67
 20094ac:	28800015 	stw	r2,0(r5)
 20094b0:	28800415 	stw	r2,16(r5)
 20094b4:	00800044 	movi	r2,1
 20094b8:	28800515 	stw	r2,20(r5)
 20094bc:	f800283a 	ret
 20094c0:	04801004 	movi	r18,64
 20094c4:	003fe006 	br	2009448 <__smakebuf_r+0xac>
 20094c8:	81000a17 	ldw	r4,40(r16)
 20094cc:	00c08074 	movhi	r3,513
 20094d0:	18eda904 	addi	r3,r3,-18780
 20094d4:	20ffc51e 	bne	r4,r3,20093ec <__smakebuf_r+0x50>
 20094d8:	80c0030b 	ldhu	r3,12(r16)
 20094dc:	01010004 	movi	r4,1024
 20094e0:	81001315 	stw	r4,76(r16)
 20094e4:	1906b03a 	or	r3,r3,r4
 20094e8:	80c0030d 	sth	r3,12(r16)
 20094ec:	003fc206 	br	20093f8 <__smakebuf_r+0x5c>
 20094f0:	0027883a 	mov	r19,zero
 20094f4:	04810004 	movi	r18,1024
 20094f8:	003fd606 	br	2009454 <__smakebuf_r+0xb8>
 20094fc:	8140038f 	ldh	r5,14(r16)
 2009500:	8809883a 	mov	r4,r17
 2009504:	200d1540 	call	200d154 <_isatty_r>
 2009508:	103fe026 	beq	r2,zero,200948c <__smakebuf_r+0xf0>
 200950c:	8080030b 	ldhu	r2,12(r16)
 2009510:	10800054 	ori	r2,r2,1
 2009514:	8080030d 	sth	r2,12(r16)
 2009518:	003fdc06 	br	200948c <__smakebuf_r+0xf0>
 200951c:	8080030b 	ldhu	r2,12(r16)
 2009520:	10c0800c 	andi	r3,r2,512
 2009524:	183fd91e 	bne	r3,zero,200948c <__smakebuf_r+0xf0>
 2009528:	10800094 	ori	r2,r2,2
 200952c:	80c010c4 	addi	r3,r16,67
 2009530:	8080030d 	sth	r2,12(r16)
 2009534:	00800044 	movi	r2,1
 2009538:	80c00015 	stw	r3,0(r16)
 200953c:	80c00415 	stw	r3,16(r16)
 2009540:	80800515 	stw	r2,20(r16)
 2009544:	003fd106 	br	200948c <__smakebuf_r+0xf0>
 2009548:	04c00044 	movi	r19,1
 200954c:	04810004 	movi	r18,1024
 2009550:	003fc006 	br	2009454 <__smakebuf_r+0xb8>

02009554 <_malloc_r>:
 2009554:	defff504 	addi	sp,sp,-44
 2009558:	dc800315 	stw	r18,12(sp)
 200955c:	dfc00a15 	stw	ra,40(sp)
 2009560:	df000915 	stw	fp,36(sp)
 2009564:	ddc00815 	stw	r23,32(sp)
 2009568:	dd800715 	stw	r22,28(sp)
 200956c:	dd400615 	stw	r21,24(sp)
 2009570:	dd000515 	stw	r20,20(sp)
 2009574:	dcc00415 	stw	r19,16(sp)
 2009578:	dc400215 	stw	r17,8(sp)
 200957c:	dc000115 	stw	r16,4(sp)
 2009580:	288002c4 	addi	r2,r5,11
 2009584:	00c00584 	movi	r3,22
 2009588:	2025883a 	mov	r18,r4
 200958c:	18802a2e 	bgeu	r3,r2,2009638 <_malloc_r+0xe4>
 2009590:	047ffe04 	movi	r17,-8
 2009594:	1462703a 	and	r17,r2,r17
 2009598:	88009e16 	blt	r17,zero,2009814 <_malloc_r+0x2c0>
 200959c:	89409d36 	bltu	r17,r5,2009814 <_malloc_r+0x2c0>
 20095a0:	20112080 	call	2011208 <__malloc_lock>
 20095a4:	00807dc4 	movi	r2,503
 20095a8:	14402736 	bltu	r2,r17,2009648 <_malloc_r+0xf4>
 20095ac:	8806d0fa 	srli	r3,r17,3
 20095b0:	04c080b4 	movhi	r19,514
 20095b4:	9ce4a404 	addi	r19,r19,-28016
 20095b8:	18c5883a 	add	r2,r3,r3
 20095bc:	1085883a 	add	r2,r2,r2
 20095c0:	1085883a 	add	r2,r2,r2
 20095c4:	9885883a 	add	r2,r19,r2
 20095c8:	14000317 	ldw	r16,12(r2)
 20095cc:	80814a26 	beq	r16,r2,2009af8 <_malloc_r+0x5a4>
 20095d0:	80c00117 	ldw	r3,4(r16)
 20095d4:	81000317 	ldw	r4,12(r16)
 20095d8:	00bfff04 	movi	r2,-4
 20095dc:	1884703a 	and	r2,r3,r2
 20095e0:	81400217 	ldw	r5,8(r16)
 20095e4:	8085883a 	add	r2,r16,r2
 20095e8:	10c00117 	ldw	r3,4(r2)
 20095ec:	29000315 	stw	r4,12(r5)
 20095f0:	21400215 	stw	r5,8(r4)
 20095f4:	18c00054 	ori	r3,r3,1
 20095f8:	10c00115 	stw	r3,4(r2)
 20095fc:	9009883a 	mov	r4,r18
 2009600:	20112280 	call	2011228 <__malloc_unlock>
 2009604:	80800204 	addi	r2,r16,8
 2009608:	dfc00a17 	ldw	ra,40(sp)
 200960c:	df000917 	ldw	fp,36(sp)
 2009610:	ddc00817 	ldw	r23,32(sp)
 2009614:	dd800717 	ldw	r22,28(sp)
 2009618:	dd400617 	ldw	r21,24(sp)
 200961c:	dd000517 	ldw	r20,20(sp)
 2009620:	dcc00417 	ldw	r19,16(sp)
 2009624:	dc800317 	ldw	r18,12(sp)
 2009628:	dc400217 	ldw	r17,8(sp)
 200962c:	dc000117 	ldw	r16,4(sp)
 2009630:	dec00b04 	addi	sp,sp,44
 2009634:	f800283a 	ret
 2009638:	04400404 	movi	r17,16
 200963c:	89407536 	bltu	r17,r5,2009814 <_malloc_r+0x2c0>
 2009640:	20112080 	call	2011208 <__malloc_lock>
 2009644:	003fd906 	br	20095ac <_malloc_r+0x58>
 2009648:	8806d27a 	srli	r3,r17,9
 200964c:	18007526 	beq	r3,zero,2009824 <_malloc_r+0x2d0>
 2009650:	00800104 	movi	r2,4
 2009654:	10c0ef36 	bltu	r2,r3,2009a14 <_malloc_r+0x4c0>
 2009658:	8806d1ba 	srli	r3,r17,6
 200965c:	19c00e04 	addi	r7,r3,56
 2009660:	39cb883a 	add	r5,r7,r7
 2009664:	04c080b4 	movhi	r19,514
 2009668:	294b883a 	add	r5,r5,r5
 200966c:	9ce4a404 	addi	r19,r19,-28016
 2009670:	294b883a 	add	r5,r5,r5
 2009674:	994b883a 	add	r5,r19,r5
 2009678:	2c000317 	ldw	r16,12(r5)
 200967c:	2c000e26 	beq	r5,r16,20096b8 <_malloc_r+0x164>
 2009680:	80800117 	ldw	r2,4(r16)
 2009684:	01bfff04 	movi	r6,-4
 2009688:	010003c4 	movi	r4,15
 200968c:	1184703a 	and	r2,r2,r6
 2009690:	1447c83a 	sub	r3,r2,r17
 2009694:	20c00716 	blt	r4,r3,20096b4 <_malloc_r+0x160>
 2009698:	1800650e 	bge	r3,zero,2009830 <_malloc_r+0x2dc>
 200969c:	84000317 	ldw	r16,12(r16)
 20096a0:	2c000526 	beq	r5,r16,20096b8 <_malloc_r+0x164>
 20096a4:	80800117 	ldw	r2,4(r16)
 20096a8:	1184703a 	and	r2,r2,r6
 20096ac:	1447c83a 	sub	r3,r2,r17
 20096b0:	20fff90e 	bge	r4,r3,2009698 <_malloc_r+0x144>
 20096b4:	39ffffc4 	addi	r7,r7,-1
 20096b8:	38c00044 	addi	r3,r7,1
 20096bc:	018080b4 	movhi	r6,514
 20096c0:	9c000417 	ldw	r16,16(r19)
 20096c4:	31a4a404 	addi	r6,r6,-28016
 20096c8:	32400204 	addi	r9,r6,8
 20096cc:	82410326 	beq	r16,r9,2009adc <_malloc_r+0x588>
 20096d0:	81000117 	ldw	r4,4(r16)
 20096d4:	00bfff04 	movi	r2,-4
 20096d8:	208e703a 	and	r7,r4,r2
 20096dc:	3c45c83a 	sub	r2,r7,r17
 20096e0:	010003c4 	movi	r4,15
 20096e4:	2080ee16 	blt	r4,r2,2009aa0 <_malloc_r+0x54c>
 20096e8:	32400515 	stw	r9,20(r6)
 20096ec:	32400415 	stw	r9,16(r6)
 20096f0:	1000510e 	bge	r2,zero,2009838 <_malloc_r+0x2e4>
 20096f4:	00807fc4 	movi	r2,511
 20096f8:	11c0ce36 	bltu	r2,r7,2009a34 <_malloc_r+0x4e0>
 20096fc:	3808d0fa 	srli	r4,r7,3
 2009700:	01c00044 	movi	r7,1
 2009704:	30800117 	ldw	r2,4(r6)
 2009708:	210b883a 	add	r5,r4,r4
 200970c:	294b883a 	add	r5,r5,r5
 2009710:	2009d0ba 	srai	r4,r4,2
 2009714:	294b883a 	add	r5,r5,r5
 2009718:	298b883a 	add	r5,r5,r6
 200971c:	2a000217 	ldw	r8,8(r5)
 2009720:	3908983a 	sll	r4,r7,r4
 2009724:	81400315 	stw	r5,12(r16)
 2009728:	82000215 	stw	r8,8(r16)
 200972c:	2088b03a 	or	r4,r4,r2
 2009730:	2c000215 	stw	r16,8(r5)
 2009734:	31000115 	stw	r4,4(r6)
 2009738:	44000315 	stw	r16,12(r8)
 200973c:	1805d0ba 	srai	r2,r3,2
 2009740:	01400044 	movi	r5,1
 2009744:	288a983a 	sll	r5,r5,r2
 2009748:	21404336 	bltu	r4,r5,2009858 <_malloc_r+0x304>
 200974c:	2144703a 	and	r2,r4,r5
 2009750:	10000a1e 	bne	r2,zero,200977c <_malloc_r+0x228>
 2009754:	00bfff04 	movi	r2,-4
 2009758:	294b883a 	add	r5,r5,r5
 200975c:	1886703a 	and	r3,r3,r2
 2009760:	2144703a 	and	r2,r4,r5
 2009764:	18c00104 	addi	r3,r3,4
 2009768:	1000041e 	bne	r2,zero,200977c <_malloc_r+0x228>
 200976c:	294b883a 	add	r5,r5,r5
 2009770:	2144703a 	and	r2,r4,r5
 2009774:	18c00104 	addi	r3,r3,4
 2009778:	103ffc26 	beq	r2,zero,200976c <_malloc_r+0x218>
 200977c:	023fff04 	movi	r8,-4
 2009780:	01c003c4 	movi	r7,15
 2009784:	18c5883a 	add	r2,r3,r3
 2009788:	1085883a 	add	r2,r2,r2
 200978c:	1085883a 	add	r2,r2,r2
 2009790:	9895883a 	add	r10,r19,r2
 2009794:	52c00304 	addi	r11,r10,12
 2009798:	1819883a 	mov	r12,r3
 200979c:	5c000017 	ldw	r16,0(r11)
 20097a0:	59bffd04 	addi	r6,r11,-12
 20097a4:	8180041e 	bne	r16,r6,20097b8 <_malloc_r+0x264>
 20097a8:	0000ce06 	br	2009ae4 <_malloc_r+0x590>
 20097ac:	2000d70e 	bge	r4,zero,2009b0c <_malloc_r+0x5b8>
 20097b0:	84000317 	ldw	r16,12(r16)
 20097b4:	8180cb26 	beq	r16,r6,2009ae4 <_malloc_r+0x590>
 20097b8:	80800117 	ldw	r2,4(r16)
 20097bc:	1204703a 	and	r2,r2,r8
 20097c0:	1449c83a 	sub	r4,r2,r17
 20097c4:	393ff90e 	bge	r7,r4,20097ac <_malloc_r+0x258>
 20097c8:	80800317 	ldw	r2,12(r16)
 20097cc:	80c00217 	ldw	r3,8(r16)
 20097d0:	89400054 	ori	r5,r17,1
 20097d4:	81400115 	stw	r5,4(r16)
 20097d8:	18800315 	stw	r2,12(r3)
 20097dc:	10c00215 	stw	r3,8(r2)
 20097e0:	8463883a 	add	r17,r16,r17
 20097e4:	9c400515 	stw	r17,20(r19)
 20097e8:	9c400415 	stw	r17,16(r19)
 20097ec:	20800054 	ori	r2,r4,1
 20097f0:	88800115 	stw	r2,4(r17)
 20097f4:	8a400315 	stw	r9,12(r17)
 20097f8:	8a400215 	stw	r9,8(r17)
 20097fc:	8923883a 	add	r17,r17,r4
 2009800:	89000015 	stw	r4,0(r17)
 2009804:	9009883a 	mov	r4,r18
 2009808:	20112280 	call	2011228 <__malloc_unlock>
 200980c:	80800204 	addi	r2,r16,8
 2009810:	003f7d06 	br	2009608 <_malloc_r+0xb4>
 2009814:	00800304 	movi	r2,12
 2009818:	90800015 	stw	r2,0(r18)
 200981c:	0005883a 	mov	r2,zero
 2009820:	003f7906 	br	2009608 <_malloc_r+0xb4>
 2009824:	01401f84 	movi	r5,126
 2009828:	01c00fc4 	movi	r7,63
 200982c:	003f8d06 	br	2009664 <_malloc_r+0x110>
 2009830:	81000317 	ldw	r4,12(r16)
 2009834:	003f6a06 	br	20095e0 <_malloc_r+0x8c>
 2009838:	81c5883a 	add	r2,r16,r7
 200983c:	10c00117 	ldw	r3,4(r2)
 2009840:	9009883a 	mov	r4,r18
 2009844:	18c00054 	ori	r3,r3,1
 2009848:	10c00115 	stw	r3,4(r2)
 200984c:	20112280 	call	2011228 <__malloc_unlock>
 2009850:	80800204 	addi	r2,r16,8
 2009854:	003f6c06 	br	2009608 <_malloc_r+0xb4>
 2009858:	9c000217 	ldw	r16,8(r19)
 200985c:	00bfff04 	movi	r2,-4
 2009860:	85800117 	ldw	r22,4(r16)
 2009864:	b0ac703a 	and	r22,r22,r2
 2009868:	b4400336 	bltu	r22,r17,2009878 <_malloc_r+0x324>
 200986c:	b445c83a 	sub	r2,r22,r17
 2009870:	00c003c4 	movi	r3,15
 2009874:	18805d16 	blt	r3,r2,20099ec <_malloc_r+0x498>
 2009878:	05c080b4 	movhi	r23,514
 200987c:	008080b4 	movhi	r2,514
 2009880:	bdea6904 	addi	r23,r23,-22108
 2009884:	10aa8204 	addi	r2,r2,-22008
 2009888:	15400017 	ldw	r21,0(r2)
 200988c:	b9000017 	ldw	r4,0(r23)
 2009890:	00ffffc4 	movi	r3,-1
 2009894:	858d883a 	add	r6,r16,r22
 2009898:	8d6b883a 	add	r21,r17,r21
 200989c:	20c0e426 	beq	r4,r3,2009c30 <_malloc_r+0x6dc>
 20098a0:	ad4403c4 	addi	r21,r21,4111
 20098a4:	00fc0004 	movi	r3,-4096
 20098a8:	a8ea703a 	and	r21,r21,r3
 20098ac:	9009883a 	mov	r4,r18
 20098b0:	a80b883a 	mov	r5,r21
 20098b4:	d9800015 	stw	r6,0(sp)
 20098b8:	200b5780 	call	200b578 <_sbrk_r>
 20098bc:	00ffffc4 	movi	r3,-1
 20098c0:	1029883a 	mov	r20,r2
 20098c4:	d9800017 	ldw	r6,0(sp)
 20098c8:	10c0a426 	beq	r2,r3,2009b5c <_malloc_r+0x608>
 20098cc:	1180a236 	bltu	r2,r6,2009b58 <_malloc_r+0x604>
 20098d0:	070080b4 	movhi	fp,514
 20098d4:	e72a8e04 	addi	fp,fp,-21960
 20098d8:	e0c00017 	ldw	r3,0(fp)
 20098dc:	a8c7883a 	add	r3,r21,r3
 20098e0:	e0c00015 	stw	r3,0(fp)
 20098e4:	3500da26 	beq	r6,r20,2009c50 <_malloc_r+0x6fc>
 20098e8:	b9000017 	ldw	r4,0(r23)
 20098ec:	00bfffc4 	movi	r2,-1
 20098f0:	2080e426 	beq	r4,r2,2009c84 <_malloc_r+0x730>
 20098f4:	a185c83a 	sub	r2,r20,r6
 20098f8:	1885883a 	add	r2,r3,r2
 20098fc:	e0800015 	stw	r2,0(fp)
 2009900:	a0c001cc 	andi	r3,r20,7
 2009904:	1800b526 	beq	r3,zero,2009bdc <_malloc_r+0x688>
 2009908:	a0e9c83a 	sub	r20,r20,r3
 200990c:	00840204 	movi	r2,4104
 2009910:	a5000204 	addi	r20,r20,8
 2009914:	10c7c83a 	sub	r3,r2,r3
 2009918:	a545883a 	add	r2,r20,r21
 200991c:	1083ffcc 	andi	r2,r2,4095
 2009920:	18abc83a 	sub	r21,r3,r2
 2009924:	9009883a 	mov	r4,r18
 2009928:	a80b883a 	mov	r5,r21
 200992c:	200b5780 	call	200b578 <_sbrk_r>
 2009930:	00ffffc4 	movi	r3,-1
 2009934:	10c0d026 	beq	r2,r3,2009c78 <_malloc_r+0x724>
 2009938:	1507c83a 	sub	r3,r2,r20
 200993c:	a8c7883a 	add	r3,r21,r3
 2009940:	18c00054 	ori	r3,r3,1
 2009944:	e0800017 	ldw	r2,0(fp)
 2009948:	9d000215 	stw	r20,8(r19)
 200994c:	a0c00115 	stw	r3,4(r20)
 2009950:	a887883a 	add	r3,r21,r2
 2009954:	e0c00015 	stw	r3,0(fp)
 2009958:	84c00e26 	beq	r16,r19,2009994 <_malloc_r+0x440>
 200995c:	018003c4 	movi	r6,15
 2009960:	3580a02e 	bgeu	r6,r22,2009be4 <_malloc_r+0x690>
 2009964:	81400117 	ldw	r5,4(r16)
 2009968:	013ffe04 	movi	r4,-8
 200996c:	b0bffd04 	addi	r2,r22,-12
 2009970:	1104703a 	and	r2,r2,r4
 2009974:	2900004c 	andi	r4,r5,1
 2009978:	1108b03a 	or	r4,r2,r4
 200997c:	81000115 	stw	r4,4(r16)
 2009980:	01400144 	movi	r5,5
 2009984:	8089883a 	add	r4,r16,r2
 2009988:	21400115 	stw	r5,4(r4)
 200998c:	21400215 	stw	r5,8(r4)
 2009990:	3080c036 	bltu	r6,r2,2009c94 <_malloc_r+0x740>
 2009994:	008080b4 	movhi	r2,514
 2009998:	10aa8104 	addi	r2,r2,-22012
 200999c:	11000017 	ldw	r4,0(r2)
 20099a0:	20c0012e 	bgeu	r4,r3,20099a8 <_malloc_r+0x454>
 20099a4:	10c00015 	stw	r3,0(r2)
 20099a8:	008080b4 	movhi	r2,514
 20099ac:	10aa8004 	addi	r2,r2,-22016
 20099b0:	11000017 	ldw	r4,0(r2)
 20099b4:	9c000217 	ldw	r16,8(r19)
 20099b8:	20c0012e 	bgeu	r4,r3,20099c0 <_malloc_r+0x46c>
 20099bc:	10c00015 	stw	r3,0(r2)
 20099c0:	80c00117 	ldw	r3,4(r16)
 20099c4:	00bfff04 	movi	r2,-4
 20099c8:	1886703a 	and	r3,r3,r2
 20099cc:	1c45c83a 	sub	r2,r3,r17
 20099d0:	1c400236 	bltu	r3,r17,20099dc <_malloc_r+0x488>
 20099d4:	00c003c4 	movi	r3,15
 20099d8:	18800416 	blt	r3,r2,20099ec <_malloc_r+0x498>
 20099dc:	9009883a 	mov	r4,r18
 20099e0:	20112280 	call	2011228 <__malloc_unlock>
 20099e4:	0005883a 	mov	r2,zero
 20099e8:	003f0706 	br	2009608 <_malloc_r+0xb4>
 20099ec:	88c00054 	ori	r3,r17,1
 20099f0:	80c00115 	stw	r3,4(r16)
 20099f4:	8463883a 	add	r17,r16,r17
 20099f8:	10800054 	ori	r2,r2,1
 20099fc:	9c400215 	stw	r17,8(r19)
 2009a00:	88800115 	stw	r2,4(r17)
 2009a04:	9009883a 	mov	r4,r18
 2009a08:	20112280 	call	2011228 <__malloc_unlock>
 2009a0c:	80800204 	addi	r2,r16,8
 2009a10:	003efd06 	br	2009608 <_malloc_r+0xb4>
 2009a14:	00800504 	movi	r2,20
 2009a18:	10c0482e 	bgeu	r2,r3,2009b3c <_malloc_r+0x5e8>
 2009a1c:	00801504 	movi	r2,84
 2009a20:	10c06836 	bltu	r2,r3,2009bc4 <_malloc_r+0x670>
 2009a24:	8806d33a 	srli	r3,r17,12
 2009a28:	19c01b84 	addi	r7,r3,110
 2009a2c:	39cb883a 	add	r5,r7,r7
 2009a30:	003f0c06 	br	2009664 <_malloc_r+0x110>
 2009a34:	3804d27a 	srli	r2,r7,9
 2009a38:	01000104 	movi	r4,4
 2009a3c:	2080422e 	bgeu	r4,r2,2009b48 <_malloc_r+0x5f4>
 2009a40:	01000504 	movi	r4,20
 2009a44:	20807c36 	bltu	r4,r2,2009c38 <_malloc_r+0x6e4>
 2009a48:	110016c4 	addi	r4,r2,91
 2009a4c:	210b883a 	add	r5,r4,r4
 2009a50:	294b883a 	add	r5,r5,r5
 2009a54:	294b883a 	add	r5,r5,r5
 2009a58:	994b883a 	add	r5,r19,r5
 2009a5c:	28800217 	ldw	r2,8(r5)
 2009a60:	020080b4 	movhi	r8,514
 2009a64:	4224a404 	addi	r8,r8,-28016
 2009a68:	11406326 	beq	r2,r5,2009bf8 <_malloc_r+0x6a4>
 2009a6c:	01bfff04 	movi	r6,-4
 2009a70:	11000117 	ldw	r4,4(r2)
 2009a74:	2188703a 	and	r4,r4,r6
 2009a78:	3900022e 	bgeu	r7,r4,2009a84 <_malloc_r+0x530>
 2009a7c:	10800217 	ldw	r2,8(r2)
 2009a80:	28bffb1e 	bne	r5,r2,2009a70 <_malloc_r+0x51c>
 2009a84:	11800317 	ldw	r6,12(r2)
 2009a88:	99000117 	ldw	r4,4(r19)
 2009a8c:	81800315 	stw	r6,12(r16)
 2009a90:	80800215 	stw	r2,8(r16)
 2009a94:	34000215 	stw	r16,8(r6)
 2009a98:	14000315 	stw	r16,12(r2)
 2009a9c:	003f2706 	br	200973c <_malloc_r+0x1e8>
 2009aa0:	88c00054 	ori	r3,r17,1
 2009aa4:	80c00115 	stw	r3,4(r16)
 2009aa8:	8463883a 	add	r17,r16,r17
 2009aac:	34400515 	stw	r17,20(r6)
 2009ab0:	34400415 	stw	r17,16(r6)
 2009ab4:	10c00054 	ori	r3,r2,1
 2009ab8:	8a400315 	stw	r9,12(r17)
 2009abc:	8a400215 	stw	r9,8(r17)
 2009ac0:	88c00115 	stw	r3,4(r17)
 2009ac4:	88a3883a 	add	r17,r17,r2
 2009ac8:	88800015 	stw	r2,0(r17)
 2009acc:	9009883a 	mov	r4,r18
 2009ad0:	20112280 	call	2011228 <__malloc_unlock>
 2009ad4:	80800204 	addi	r2,r16,8
 2009ad8:	003ecb06 	br	2009608 <_malloc_r+0xb4>
 2009adc:	31000117 	ldw	r4,4(r6)
 2009ae0:	003f1606 	br	200973c <_malloc_r+0x1e8>
 2009ae4:	63000044 	addi	r12,r12,1
 2009ae8:	608000cc 	andi	r2,r12,3
 2009aec:	5ac00204 	addi	r11,r11,8
 2009af0:	103f2a1e 	bne	r2,zero,200979c <_malloc_r+0x248>
 2009af4:	00002106 	br	2009b7c <_malloc_r+0x628>
 2009af8:	80800204 	addi	r2,r16,8
 2009afc:	84000517 	ldw	r16,20(r16)
 2009b00:	143eb31e 	bne	r2,r16,20095d0 <_malloc_r+0x7c>
 2009b04:	18c00084 	addi	r3,r3,2
 2009b08:	003eec06 	br	20096bc <_malloc_r+0x168>
 2009b0c:	8085883a 	add	r2,r16,r2
 2009b10:	10c00117 	ldw	r3,4(r2)
 2009b14:	81000317 	ldw	r4,12(r16)
 2009b18:	81400217 	ldw	r5,8(r16)
 2009b1c:	18c00054 	ori	r3,r3,1
 2009b20:	10c00115 	stw	r3,4(r2)
 2009b24:	29000315 	stw	r4,12(r5)
 2009b28:	21400215 	stw	r5,8(r4)
 2009b2c:	9009883a 	mov	r4,r18
 2009b30:	20112280 	call	2011228 <__malloc_unlock>
 2009b34:	80800204 	addi	r2,r16,8
 2009b38:	003eb306 	br	2009608 <_malloc_r+0xb4>
 2009b3c:	19c016c4 	addi	r7,r3,91
 2009b40:	39cb883a 	add	r5,r7,r7
 2009b44:	003ec706 	br	2009664 <_malloc_r+0x110>
 2009b48:	3804d1ba 	srli	r2,r7,6
 2009b4c:	11000e04 	addi	r4,r2,56
 2009b50:	210b883a 	add	r5,r4,r4
 2009b54:	003fbe06 	br	2009a50 <_malloc_r+0x4fc>
 2009b58:	84ff5d26 	beq	r16,r19,20098d0 <_malloc_r+0x37c>
 2009b5c:	9c000217 	ldw	r16,8(r19)
 2009b60:	00bfff04 	movi	r2,-4
 2009b64:	80c00117 	ldw	r3,4(r16)
 2009b68:	1886703a 	and	r3,r3,r2
 2009b6c:	003f9706 	br	20099cc <_malloc_r+0x478>
 2009b70:	52800017 	ldw	r10,0(r10)
 2009b74:	18ffffc4 	addi	r3,r3,-1
 2009b78:	50805c1e 	bne	r10,r2,2009cec <_malloc_r+0x798>
 2009b7c:	190000cc 	andi	r4,r3,3
 2009b80:	50bffe04 	addi	r2,r10,-8
 2009b84:	203ffa1e 	bne	r4,zero,2009b70 <_malloc_r+0x61c>
 2009b88:	98800117 	ldw	r2,4(r19)
 2009b8c:	0146303a 	nor	r3,zero,r5
 2009b90:	1884703a 	and	r2,r3,r2
 2009b94:	98800115 	stw	r2,4(r19)
 2009b98:	294b883a 	add	r5,r5,r5
 2009b9c:	117f2e36 	bltu	r2,r5,2009858 <_malloc_r+0x304>
 2009ba0:	283f2d26 	beq	r5,zero,2009858 <_malloc_r+0x304>
 2009ba4:	1146703a 	and	r3,r2,r5
 2009ba8:	1800521e 	bne	r3,zero,2009cf4 <_malloc_r+0x7a0>
 2009bac:	6007883a 	mov	r3,r12
 2009bb0:	294b883a 	add	r5,r5,r5
 2009bb4:	1148703a 	and	r4,r2,r5
 2009bb8:	18c00104 	addi	r3,r3,4
 2009bbc:	203ffc26 	beq	r4,zero,2009bb0 <_malloc_r+0x65c>
 2009bc0:	003ef006 	br	2009784 <_malloc_r+0x230>
 2009bc4:	00805504 	movi	r2,340
 2009bc8:	10c01336 	bltu	r2,r3,2009c18 <_malloc_r+0x6c4>
 2009bcc:	8806d3fa 	srli	r3,r17,15
 2009bd0:	19c01dc4 	addi	r7,r3,119
 2009bd4:	39cb883a 	add	r5,r7,r7
 2009bd8:	003ea206 	br	2009664 <_malloc_r+0x110>
 2009bdc:	00c40004 	movi	r3,4096
 2009be0:	003f4d06 	br	2009918 <_malloc_r+0x3c4>
 2009be4:	00800044 	movi	r2,1
 2009be8:	a0800115 	stw	r2,4(r20)
 2009bec:	a021883a 	mov	r16,r20
 2009bf0:	0007883a 	mov	r3,zero
 2009bf4:	003f7506 	br	20099cc <_malloc_r+0x478>
 2009bf8:	200bd0ba 	srai	r5,r4,2
 2009bfc:	01800044 	movi	r6,1
 2009c00:	41000117 	ldw	r4,4(r8)
 2009c04:	314a983a 	sll	r5,r6,r5
 2009c08:	100d883a 	mov	r6,r2
 2009c0c:	2908b03a 	or	r4,r5,r4
 2009c10:	41000115 	stw	r4,4(r8)
 2009c14:	003f9d06 	br	2009a8c <_malloc_r+0x538>
 2009c18:	00815504 	movi	r2,1364
 2009c1c:	10c01336 	bltu	r2,r3,2009c6c <_malloc_r+0x718>
 2009c20:	8806d4ba 	srli	r3,r17,18
 2009c24:	19c01f04 	addi	r7,r3,124
 2009c28:	39cb883a 	add	r5,r7,r7
 2009c2c:	003e8d06 	br	2009664 <_malloc_r+0x110>
 2009c30:	ad400404 	addi	r21,r21,16
 2009c34:	003f1d06 	br	20098ac <_malloc_r+0x358>
 2009c38:	01001504 	movi	r4,84
 2009c3c:	20801c36 	bltu	r4,r2,2009cb0 <_malloc_r+0x75c>
 2009c40:	3804d33a 	srli	r2,r7,12
 2009c44:	11001b84 	addi	r4,r2,110
 2009c48:	210b883a 	add	r5,r4,r4
 2009c4c:	003f8006 	br	2009a50 <_malloc_r+0x4fc>
 2009c50:	3083ffcc 	andi	r2,r6,4095
 2009c54:	103f241e 	bne	r2,zero,20098e8 <_malloc_r+0x394>
 2009c58:	99000217 	ldw	r4,8(r19)
 2009c5c:	ad85883a 	add	r2,r21,r22
 2009c60:	10800054 	ori	r2,r2,1
 2009c64:	20800115 	stw	r2,4(r4)
 2009c68:	003f4a06 	br	2009994 <_malloc_r+0x440>
 2009c6c:	01403f04 	movi	r5,252
 2009c70:	01c01f84 	movi	r7,126
 2009c74:	003e7b06 	br	2009664 <_malloc_r+0x110>
 2009c78:	00c00044 	movi	r3,1
 2009c7c:	002b883a 	mov	r21,zero
 2009c80:	003f3006 	br	2009944 <_malloc_r+0x3f0>
 2009c84:	008080b4 	movhi	r2,514
 2009c88:	10aa6904 	addi	r2,r2,-22108
 2009c8c:	15000015 	stw	r20,0(r2)
 2009c90:	003f1b06 	br	2009900 <_malloc_r+0x3ac>
 2009c94:	9009883a 	mov	r4,r18
 2009c98:	81400204 	addi	r5,r16,8
 2009c9c:	20089200 	call	2008920 <_free_r>
 2009ca0:	008080b4 	movhi	r2,514
 2009ca4:	10aa8e04 	addi	r2,r2,-21960
 2009ca8:	10c00017 	ldw	r3,0(r2)
 2009cac:	003f3906 	br	2009994 <_malloc_r+0x440>
 2009cb0:	01005504 	movi	r4,340
 2009cb4:	20800436 	bltu	r4,r2,2009cc8 <_malloc_r+0x774>
 2009cb8:	3804d3fa 	srli	r2,r7,15
 2009cbc:	11001dc4 	addi	r4,r2,119
 2009cc0:	210b883a 	add	r5,r4,r4
 2009cc4:	003f6206 	br	2009a50 <_malloc_r+0x4fc>
 2009cc8:	01015504 	movi	r4,1364
 2009ccc:	20800436 	bltu	r4,r2,2009ce0 <_malloc_r+0x78c>
 2009cd0:	3804d4ba 	srli	r2,r7,18
 2009cd4:	11001f04 	addi	r4,r2,124
 2009cd8:	210b883a 	add	r5,r4,r4
 2009cdc:	003f5c06 	br	2009a50 <_malloc_r+0x4fc>
 2009ce0:	01403f04 	movi	r5,252
 2009ce4:	01001f84 	movi	r4,126
 2009ce8:	003f5906 	br	2009a50 <_malloc_r+0x4fc>
 2009cec:	98800117 	ldw	r2,4(r19)
 2009cf0:	003fa906 	br	2009b98 <_malloc_r+0x644>
 2009cf4:	6007883a 	mov	r3,r12
 2009cf8:	003ea206 	br	2009784 <_malloc_r+0x230>

02009cfc <memchr>:
 2009cfc:	208000cc 	andi	r2,r4,3
 2009d00:	280f883a 	mov	r7,r5
 2009d04:	10003526 	beq	r2,zero,2009ddc <memchr+0xe0>
 2009d08:	30bfffc4 	addi	r2,r6,-1
 2009d0c:	30001b26 	beq	r6,zero,2009d7c <memchr+0x80>
 2009d10:	21800003 	ldbu	r6,0(r4)
 2009d14:	28c03fcc 	andi	r3,r5,255
 2009d18:	30c01a26 	beq	r6,r3,2009d84 <memchr+0x88>
 2009d1c:	180d883a 	mov	r6,r3
 2009d20:	00000406 	br	2009d34 <memchr+0x38>
 2009d24:	10001526 	beq	r2,zero,2009d7c <memchr+0x80>
 2009d28:	20c00003 	ldbu	r3,0(r4)
 2009d2c:	10bfffc4 	addi	r2,r2,-1
 2009d30:	19801426 	beq	r3,r6,2009d84 <memchr+0x88>
 2009d34:	21000044 	addi	r4,r4,1
 2009d38:	20c000cc 	andi	r3,r4,3
 2009d3c:	183ff91e 	bne	r3,zero,2009d24 <memchr+0x28>
 2009d40:	024000c4 	movi	r9,3
 2009d44:	48801136 	bltu	r9,r2,2009d8c <memchr+0x90>
 2009d48:	10000c26 	beq	r2,zero,2009d7c <memchr+0x80>
 2009d4c:	20c00003 	ldbu	r3,0(r4)
 2009d50:	29403fcc 	andi	r5,r5,255
 2009d54:	19400b26 	beq	r3,r5,2009d84 <memchr+0x88>
 2009d58:	20c00044 	addi	r3,r4,1
 2009d5c:	2085883a 	add	r2,r4,r2
 2009d60:	39803fcc 	andi	r6,r7,255
 2009d64:	00000306 	br	2009d74 <memchr+0x78>
 2009d68:	18c00044 	addi	r3,r3,1
 2009d6c:	197fffc3 	ldbu	r5,-1(r3)
 2009d70:	29800426 	beq	r5,r6,2009d84 <memchr+0x88>
 2009d74:	1809883a 	mov	r4,r3
 2009d78:	18bffb1e 	bne	r3,r2,2009d68 <memchr+0x6c>
 2009d7c:	0005883a 	mov	r2,zero
 2009d80:	f800283a 	ret
 2009d84:	2005883a 	mov	r2,r4
 2009d88:	f800283a 	ret
 2009d8c:	28c03fcc 	andi	r3,r5,255
 2009d90:	1810923a 	slli	r8,r3,8
 2009d94:	02ffbff4 	movhi	r11,65279
 2009d98:	02a02074 	movhi	r10,32897
 2009d9c:	40c6b03a 	or	r3,r8,r3
 2009da0:	1810943a 	slli	r8,r3,16
 2009da4:	5affbfc4 	addi	r11,r11,-257
 2009da8:	52a02004 	addi	r10,r10,-32640
 2009dac:	40d0b03a 	or	r8,r8,r3
 2009db0:	20c00017 	ldw	r3,0(r4)
 2009db4:	40c6f03a 	xor	r3,r8,r3
 2009db8:	1acd883a 	add	r6,r3,r11
 2009dbc:	00c6303a 	nor	r3,zero,r3
 2009dc0:	30c6703a 	and	r3,r6,r3
 2009dc4:	1a86703a 	and	r3,r3,r10
 2009dc8:	183fdf1e 	bne	r3,zero,2009d48 <memchr+0x4c>
 2009dcc:	10bfff04 	addi	r2,r2,-4
 2009dd0:	21000104 	addi	r4,r4,4
 2009dd4:	48bff636 	bltu	r9,r2,2009db0 <memchr+0xb4>
 2009dd8:	003fdb06 	br	2009d48 <memchr+0x4c>
 2009ddc:	3005883a 	mov	r2,r6
 2009de0:	003fd706 	br	2009d40 <memchr+0x44>

02009de4 <memmove>:
 2009de4:	2005883a 	mov	r2,r4
 2009de8:	29000b2e 	bgeu	r5,r4,2009e18 <memmove+0x34>
 2009dec:	298f883a 	add	r7,r5,r6
 2009df0:	21c0092e 	bgeu	r4,r7,2009e18 <memmove+0x34>
 2009df4:	2187883a 	add	r3,r4,r6
 2009df8:	198bc83a 	sub	r5,r3,r6
 2009dfc:	30004b26 	beq	r6,zero,2009f2c <memmove+0x148>
 2009e00:	39ffffc4 	addi	r7,r7,-1
 2009e04:	39000003 	ldbu	r4,0(r7)
 2009e08:	18ffffc4 	addi	r3,r3,-1
 2009e0c:	19000005 	stb	r4,0(r3)
 2009e10:	197ffb1e 	bne	r3,r5,2009e00 <memmove+0x1c>
 2009e14:	f800283a 	ret
 2009e18:	00c003c4 	movi	r3,15
 2009e1c:	1980412e 	bgeu	r3,r6,2009f24 <memmove+0x140>
 2009e20:	1146b03a 	or	r3,r2,r5
 2009e24:	18c000cc 	andi	r3,r3,3
 2009e28:	1800411e 	bne	r3,zero,2009f30 <memmove+0x14c>
 2009e2c:	33fffc04 	addi	r15,r6,-16
 2009e30:	781ed13a 	srli	r15,r15,4
 2009e34:	28c00104 	addi	r3,r5,4
 2009e38:	13400104 	addi	r13,r2,4
 2009e3c:	781c913a 	slli	r14,r15,4
 2009e40:	2b000204 	addi	r12,r5,8
 2009e44:	12c00204 	addi	r11,r2,8
 2009e48:	73800504 	addi	r14,r14,20
 2009e4c:	2a800304 	addi	r10,r5,12
 2009e50:	12400304 	addi	r9,r2,12
 2009e54:	2b9d883a 	add	r14,r5,r14
 2009e58:	2811883a 	mov	r8,r5
 2009e5c:	100f883a 	mov	r7,r2
 2009e60:	41000017 	ldw	r4,0(r8)
 2009e64:	39c00404 	addi	r7,r7,16
 2009e68:	18c00404 	addi	r3,r3,16
 2009e6c:	393ffc15 	stw	r4,-16(r7)
 2009e70:	193ffc17 	ldw	r4,-16(r3)
 2009e74:	6b400404 	addi	r13,r13,16
 2009e78:	5ac00404 	addi	r11,r11,16
 2009e7c:	693ffc15 	stw	r4,-16(r13)
 2009e80:	61000017 	ldw	r4,0(r12)
 2009e84:	4a400404 	addi	r9,r9,16
 2009e88:	42000404 	addi	r8,r8,16
 2009e8c:	593ffc15 	stw	r4,-16(r11)
 2009e90:	51000017 	ldw	r4,0(r10)
 2009e94:	63000404 	addi	r12,r12,16
 2009e98:	52800404 	addi	r10,r10,16
 2009e9c:	493ffc15 	stw	r4,-16(r9)
 2009ea0:	1bbfef1e 	bne	r3,r14,2009e60 <memmove+0x7c>
 2009ea4:	79000044 	addi	r4,r15,1
 2009ea8:	2008913a 	slli	r4,r4,4
 2009eac:	328003cc 	andi	r10,r6,15
 2009eb0:	02c000c4 	movi	r11,3
 2009eb4:	1107883a 	add	r3,r2,r4
 2009eb8:	290b883a 	add	r5,r5,r4
 2009ebc:	5a801e2e 	bgeu	r11,r10,2009f38 <memmove+0x154>
 2009ec0:	1813883a 	mov	r9,r3
 2009ec4:	2811883a 	mov	r8,r5
 2009ec8:	500f883a 	mov	r7,r10
 2009ecc:	41000017 	ldw	r4,0(r8)
 2009ed0:	4a400104 	addi	r9,r9,4
 2009ed4:	39ffff04 	addi	r7,r7,-4
 2009ed8:	493fff15 	stw	r4,-4(r9)
 2009edc:	42000104 	addi	r8,r8,4
 2009ee0:	59fffa36 	bltu	r11,r7,2009ecc <memmove+0xe8>
 2009ee4:	513fff04 	addi	r4,r10,-4
 2009ee8:	2008d0ba 	srli	r4,r4,2
 2009eec:	318000cc 	andi	r6,r6,3
 2009ef0:	21000044 	addi	r4,r4,1
 2009ef4:	2109883a 	add	r4,r4,r4
 2009ef8:	2109883a 	add	r4,r4,r4
 2009efc:	1907883a 	add	r3,r3,r4
 2009f00:	290b883a 	add	r5,r5,r4
 2009f04:	30000926 	beq	r6,zero,2009f2c <memmove+0x148>
 2009f08:	198d883a 	add	r6,r3,r6
 2009f0c:	29c00003 	ldbu	r7,0(r5)
 2009f10:	18c00044 	addi	r3,r3,1
 2009f14:	29400044 	addi	r5,r5,1
 2009f18:	19ffffc5 	stb	r7,-1(r3)
 2009f1c:	19bffb1e 	bne	r3,r6,2009f0c <memmove+0x128>
 2009f20:	f800283a 	ret
 2009f24:	1007883a 	mov	r3,r2
 2009f28:	003ff606 	br	2009f04 <memmove+0x120>
 2009f2c:	f800283a 	ret
 2009f30:	1007883a 	mov	r3,r2
 2009f34:	003ff406 	br	2009f08 <memmove+0x124>
 2009f38:	500d883a 	mov	r6,r10
 2009f3c:	003ff106 	br	2009f04 <memmove+0x120>

02009f40 <_Balloc>:
 2009f40:	20801317 	ldw	r2,76(r4)
 2009f44:	defffc04 	addi	sp,sp,-16
 2009f48:	dc400115 	stw	r17,4(sp)
 2009f4c:	dc000015 	stw	r16,0(sp)
 2009f50:	dfc00315 	stw	ra,12(sp)
 2009f54:	dc800215 	stw	r18,8(sp)
 2009f58:	2023883a 	mov	r17,r4
 2009f5c:	2821883a 	mov	r16,r5
 2009f60:	10000f26 	beq	r2,zero,2009fa0 <_Balloc+0x60>
 2009f64:	8407883a 	add	r3,r16,r16
 2009f68:	18c7883a 	add	r3,r3,r3
 2009f6c:	10c7883a 	add	r3,r2,r3
 2009f70:	18800017 	ldw	r2,0(r3)
 2009f74:	10001126 	beq	r2,zero,2009fbc <_Balloc+0x7c>
 2009f78:	11000017 	ldw	r4,0(r2)
 2009f7c:	19000015 	stw	r4,0(r3)
 2009f80:	10000415 	stw	zero,16(r2)
 2009f84:	10000315 	stw	zero,12(r2)
 2009f88:	dfc00317 	ldw	ra,12(sp)
 2009f8c:	dc800217 	ldw	r18,8(sp)
 2009f90:	dc400117 	ldw	r17,4(sp)
 2009f94:	dc000017 	ldw	r16,0(sp)
 2009f98:	dec00404 	addi	sp,sp,16
 2009f9c:	f800283a 	ret
 2009fa0:	01400104 	movi	r5,4
 2009fa4:	01800844 	movi	r6,33
 2009fa8:	200cd400 	call	200cd40 <_calloc_r>
 2009fac:	88801315 	stw	r2,76(r17)
 2009fb0:	103fec1e 	bne	r2,zero,2009f64 <_Balloc+0x24>
 2009fb4:	0005883a 	mov	r2,zero
 2009fb8:	003ff306 	br	2009f88 <_Balloc+0x48>
 2009fbc:	01400044 	movi	r5,1
 2009fc0:	2c24983a 	sll	r18,r5,r16
 2009fc4:	8809883a 	mov	r4,r17
 2009fc8:	91800144 	addi	r6,r18,5
 2009fcc:	318d883a 	add	r6,r6,r6
 2009fd0:	318d883a 	add	r6,r6,r6
 2009fd4:	200cd400 	call	200cd40 <_calloc_r>
 2009fd8:	103ff626 	beq	r2,zero,2009fb4 <_Balloc+0x74>
 2009fdc:	14000115 	stw	r16,4(r2)
 2009fe0:	14800215 	stw	r18,8(r2)
 2009fe4:	003fe606 	br	2009f80 <_Balloc+0x40>

02009fe8 <_Bfree>:
 2009fe8:	28000826 	beq	r5,zero,200a00c <_Bfree+0x24>
 2009fec:	28c00117 	ldw	r3,4(r5)
 2009ff0:	20801317 	ldw	r2,76(r4)
 2009ff4:	18c7883a 	add	r3,r3,r3
 2009ff8:	18c7883a 	add	r3,r3,r3
 2009ffc:	10c5883a 	add	r2,r2,r3
 200a000:	10c00017 	ldw	r3,0(r2)
 200a004:	28c00015 	stw	r3,0(r5)
 200a008:	11400015 	stw	r5,0(r2)
 200a00c:	f800283a 	ret

0200a010 <__multadd>:
 200a010:	defff704 	addi	sp,sp,-36
 200a014:	dc800215 	stw	r18,8(sp)
 200a018:	2c800417 	ldw	r18,16(r5)
 200a01c:	ddc00715 	stw	r23,28(sp)
 200a020:	dd800615 	stw	r22,24(sp)
 200a024:	dd000415 	stw	r20,16(sp)
 200a028:	dcc00315 	stw	r19,12(sp)
 200a02c:	dc400115 	stw	r17,4(sp)
 200a030:	dc000015 	stw	r16,0(sp)
 200a034:	dfc00815 	stw	ra,32(sp)
 200a038:	dd400515 	stw	r21,20(sp)
 200a03c:	2827883a 	mov	r19,r5
 200a040:	2029883a 	mov	r20,r4
 200a044:	3023883a 	mov	r17,r6
 200a048:	3821883a 	mov	r16,r7
 200a04c:	2d800504 	addi	r22,r5,20
 200a050:	002f883a 	mov	r23,zero
 200a054:	b5400017 	ldw	r21,0(r22)
 200a058:	880b883a 	mov	r5,r17
 200a05c:	bdc00044 	addi	r23,r23,1
 200a060:	a93fffcc 	andi	r4,r21,65535
 200a064:	200e2dc0 	call	200e2dc <__mulsi3>
 200a068:	1421883a 	add	r16,r2,r16
 200a06c:	a808d43a 	srli	r4,r21,16
 200a070:	802ad43a 	srli	r21,r16,16
 200a074:	880b883a 	mov	r5,r17
 200a078:	200e2dc0 	call	200e2dc <__mulsi3>
 200a07c:	a88f883a 	add	r7,r21,r2
 200a080:	3804943a 	slli	r2,r7,16
 200a084:	80ffffcc 	andi	r3,r16,65535
 200a088:	b5800104 	addi	r22,r22,4
 200a08c:	10c7883a 	add	r3,r2,r3
 200a090:	b0ffff15 	stw	r3,-4(r22)
 200a094:	3820d43a 	srli	r16,r7,16
 200a098:	bcbfee16 	blt	r23,r18,200a054 <__multadd+0x44>
 200a09c:	80000926 	beq	r16,zero,200a0c4 <__multadd+0xb4>
 200a0a0:	98800217 	ldw	r2,8(r19)
 200a0a4:	9080130e 	bge	r18,r2,200a0f4 <__multadd+0xe4>
 200a0a8:	90800144 	addi	r2,r18,5
 200a0ac:	1085883a 	add	r2,r2,r2
 200a0b0:	1085883a 	add	r2,r2,r2
 200a0b4:	9885883a 	add	r2,r19,r2
 200a0b8:	14000015 	stw	r16,0(r2)
 200a0bc:	94800044 	addi	r18,r18,1
 200a0c0:	9c800415 	stw	r18,16(r19)
 200a0c4:	9805883a 	mov	r2,r19
 200a0c8:	dfc00817 	ldw	ra,32(sp)
 200a0cc:	ddc00717 	ldw	r23,28(sp)
 200a0d0:	dd800617 	ldw	r22,24(sp)
 200a0d4:	dd400517 	ldw	r21,20(sp)
 200a0d8:	dd000417 	ldw	r20,16(sp)
 200a0dc:	dcc00317 	ldw	r19,12(sp)
 200a0e0:	dc800217 	ldw	r18,8(sp)
 200a0e4:	dc400117 	ldw	r17,4(sp)
 200a0e8:	dc000017 	ldw	r16,0(sp)
 200a0ec:	dec00904 	addi	sp,sp,36
 200a0f0:	f800283a 	ret
 200a0f4:	99400117 	ldw	r5,4(r19)
 200a0f8:	a009883a 	mov	r4,r20
 200a0fc:	29400044 	addi	r5,r5,1
 200a100:	2009f400 	call	2009f40 <_Balloc>
 200a104:	99800417 	ldw	r6,16(r19)
 200a108:	11000304 	addi	r4,r2,12
 200a10c:	99400304 	addi	r5,r19,12
 200a110:	31800084 	addi	r6,r6,2
 200a114:	318d883a 	add	r6,r6,r6
 200a118:	318d883a 	add	r6,r6,r6
 200a11c:	1023883a 	mov	r17,r2
 200a120:	2003e380 	call	2003e38 <memcpy>
 200a124:	98000a26 	beq	r19,zero,200a150 <__multadd+0x140>
 200a128:	99000117 	ldw	r4,4(r19)
 200a12c:	a0c01317 	ldw	r3,76(r20)
 200a130:	2109883a 	add	r4,r4,r4
 200a134:	2109883a 	add	r4,r4,r4
 200a138:	1907883a 	add	r3,r3,r4
 200a13c:	18800017 	ldw	r2,0(r3)
 200a140:	98800015 	stw	r2,0(r19)
 200a144:	1cc00015 	stw	r19,0(r3)
 200a148:	8827883a 	mov	r19,r17
 200a14c:	003fd606 	br	200a0a8 <__multadd+0x98>
 200a150:	8827883a 	mov	r19,r17
 200a154:	003fd406 	br	200a0a8 <__multadd+0x98>

0200a158 <__s2b>:
 200a158:	defff904 	addi	sp,sp,-28
 200a15c:	dc400115 	stw	r17,4(sp)
 200a160:	dc000015 	stw	r16,0(sp)
 200a164:	2023883a 	mov	r17,r4
 200a168:	2821883a 	mov	r16,r5
 200a16c:	39000204 	addi	r4,r7,8
 200a170:	01400244 	movi	r5,9
 200a174:	dcc00315 	stw	r19,12(sp)
 200a178:	dc800215 	stw	r18,8(sp)
 200a17c:	dfc00615 	stw	ra,24(sp)
 200a180:	dd400515 	stw	r21,20(sp)
 200a184:	dd000415 	stw	r20,16(sp)
 200a188:	3825883a 	mov	r18,r7
 200a18c:	3027883a 	mov	r19,r6
 200a190:	200e21c0 	call	200e21c <__divsi3>
 200a194:	00c00044 	movi	r3,1
 200a198:	000b883a 	mov	r5,zero
 200a19c:	1880030e 	bge	r3,r2,200a1ac <__s2b+0x54>
 200a1a0:	18c7883a 	add	r3,r3,r3
 200a1a4:	29400044 	addi	r5,r5,1
 200a1a8:	18bffd16 	blt	r3,r2,200a1a0 <__s2b+0x48>
 200a1ac:	8809883a 	mov	r4,r17
 200a1b0:	2009f400 	call	2009f40 <_Balloc>
 200a1b4:	d8c00717 	ldw	r3,28(sp)
 200a1b8:	10c00515 	stw	r3,20(r2)
 200a1bc:	00c00044 	movi	r3,1
 200a1c0:	10c00415 	stw	r3,16(r2)
 200a1c4:	00c00244 	movi	r3,9
 200a1c8:	1cc0210e 	bge	r3,r19,200a250 <__s2b+0xf8>
 200a1cc:	80eb883a 	add	r21,r16,r3
 200a1d0:	a829883a 	mov	r20,r21
 200a1d4:	84e1883a 	add	r16,r16,r19
 200a1d8:	a1c00007 	ldb	r7,0(r20)
 200a1dc:	8809883a 	mov	r4,r17
 200a1e0:	a5000044 	addi	r20,r20,1
 200a1e4:	100b883a 	mov	r5,r2
 200a1e8:	01800284 	movi	r6,10
 200a1ec:	39fff404 	addi	r7,r7,-48
 200a1f0:	200a0100 	call	200a010 <__multadd>
 200a1f4:	a43ff81e 	bne	r20,r16,200a1d8 <__s2b+0x80>
 200a1f8:	ace1883a 	add	r16,r21,r19
 200a1fc:	843ffe04 	addi	r16,r16,-8
 200a200:	9c800a0e 	bge	r19,r18,200a22c <__s2b+0xd4>
 200a204:	94e5c83a 	sub	r18,r18,r19
 200a208:	84a5883a 	add	r18,r16,r18
 200a20c:	81c00007 	ldb	r7,0(r16)
 200a210:	8809883a 	mov	r4,r17
 200a214:	84000044 	addi	r16,r16,1
 200a218:	100b883a 	mov	r5,r2
 200a21c:	01800284 	movi	r6,10
 200a220:	39fff404 	addi	r7,r7,-48
 200a224:	200a0100 	call	200a010 <__multadd>
 200a228:	84bff81e 	bne	r16,r18,200a20c <__s2b+0xb4>
 200a22c:	dfc00617 	ldw	ra,24(sp)
 200a230:	dd400517 	ldw	r21,20(sp)
 200a234:	dd000417 	ldw	r20,16(sp)
 200a238:	dcc00317 	ldw	r19,12(sp)
 200a23c:	dc800217 	ldw	r18,8(sp)
 200a240:	dc400117 	ldw	r17,4(sp)
 200a244:	dc000017 	ldw	r16,0(sp)
 200a248:	dec00704 	addi	sp,sp,28
 200a24c:	f800283a 	ret
 200a250:	84000284 	addi	r16,r16,10
 200a254:	1827883a 	mov	r19,r3
 200a258:	003fe906 	br	200a200 <__s2b+0xa8>

0200a25c <__hi0bits>:
 200a25c:	20bfffec 	andhi	r2,r4,65535
 200a260:	1000141e 	bne	r2,zero,200a2b4 <__hi0bits+0x58>
 200a264:	2008943a 	slli	r4,r4,16
 200a268:	00800404 	movi	r2,16
 200a26c:	20ffc02c 	andhi	r3,r4,65280
 200a270:	1800021e 	bne	r3,zero,200a27c <__hi0bits+0x20>
 200a274:	2008923a 	slli	r4,r4,8
 200a278:	10800204 	addi	r2,r2,8
 200a27c:	20fc002c 	andhi	r3,r4,61440
 200a280:	1800021e 	bne	r3,zero,200a28c <__hi0bits+0x30>
 200a284:	2008913a 	slli	r4,r4,4
 200a288:	10800104 	addi	r2,r2,4
 200a28c:	20f0002c 	andhi	r3,r4,49152
 200a290:	1800031e 	bne	r3,zero,200a2a0 <__hi0bits+0x44>
 200a294:	2109883a 	add	r4,r4,r4
 200a298:	10800084 	addi	r2,r2,2
 200a29c:	2109883a 	add	r4,r4,r4
 200a2a0:	20000316 	blt	r4,zero,200a2b0 <__hi0bits+0x54>
 200a2a4:	2110002c 	andhi	r4,r4,16384
 200a2a8:	2000041e 	bne	r4,zero,200a2bc <__hi0bits+0x60>
 200a2ac:	00800804 	movi	r2,32
 200a2b0:	f800283a 	ret
 200a2b4:	0005883a 	mov	r2,zero
 200a2b8:	003fec06 	br	200a26c <__hi0bits+0x10>
 200a2bc:	10800044 	addi	r2,r2,1
 200a2c0:	f800283a 	ret

0200a2c4 <__lo0bits>:
 200a2c4:	20c00017 	ldw	r3,0(r4)
 200a2c8:	188001cc 	andi	r2,r3,7
 200a2cc:	10000826 	beq	r2,zero,200a2f0 <__lo0bits+0x2c>
 200a2d0:	1880004c 	andi	r2,r3,1
 200a2d4:	1000211e 	bne	r2,zero,200a35c <__lo0bits+0x98>
 200a2d8:	1880008c 	andi	r2,r3,2
 200a2dc:	1000211e 	bne	r2,zero,200a364 <__lo0bits+0xa0>
 200a2e0:	1806d0ba 	srli	r3,r3,2
 200a2e4:	00800084 	movi	r2,2
 200a2e8:	20c00015 	stw	r3,0(r4)
 200a2ec:	f800283a 	ret
 200a2f0:	18bfffcc 	andi	r2,r3,65535
 200a2f4:	10001326 	beq	r2,zero,200a344 <__lo0bits+0x80>
 200a2f8:	0005883a 	mov	r2,zero
 200a2fc:	19403fcc 	andi	r5,r3,255
 200a300:	2800021e 	bne	r5,zero,200a30c <__lo0bits+0x48>
 200a304:	1806d23a 	srli	r3,r3,8
 200a308:	10800204 	addi	r2,r2,8
 200a30c:	194003cc 	andi	r5,r3,15
 200a310:	2800021e 	bne	r5,zero,200a31c <__lo0bits+0x58>
 200a314:	1806d13a 	srli	r3,r3,4
 200a318:	10800104 	addi	r2,r2,4
 200a31c:	194000cc 	andi	r5,r3,3
 200a320:	2800021e 	bne	r5,zero,200a32c <__lo0bits+0x68>
 200a324:	1806d0ba 	srli	r3,r3,2
 200a328:	10800084 	addi	r2,r2,2
 200a32c:	1940004c 	andi	r5,r3,1
 200a330:	2800081e 	bne	r5,zero,200a354 <__lo0bits+0x90>
 200a334:	1806d07a 	srli	r3,r3,1
 200a338:	1800051e 	bne	r3,zero,200a350 <__lo0bits+0x8c>
 200a33c:	00800804 	movi	r2,32
 200a340:	f800283a 	ret
 200a344:	1806d43a 	srli	r3,r3,16
 200a348:	00800404 	movi	r2,16
 200a34c:	003feb06 	br	200a2fc <__lo0bits+0x38>
 200a350:	10800044 	addi	r2,r2,1
 200a354:	20c00015 	stw	r3,0(r4)
 200a358:	f800283a 	ret
 200a35c:	0005883a 	mov	r2,zero
 200a360:	f800283a 	ret
 200a364:	1806d07a 	srli	r3,r3,1
 200a368:	00800044 	movi	r2,1
 200a36c:	20c00015 	stw	r3,0(r4)
 200a370:	f800283a 	ret

0200a374 <__i2b>:
 200a374:	defffd04 	addi	sp,sp,-12
 200a378:	dc000015 	stw	r16,0(sp)
 200a37c:	04000044 	movi	r16,1
 200a380:	dc400115 	stw	r17,4(sp)
 200a384:	2823883a 	mov	r17,r5
 200a388:	800b883a 	mov	r5,r16
 200a38c:	dfc00215 	stw	ra,8(sp)
 200a390:	2009f400 	call	2009f40 <_Balloc>
 200a394:	14400515 	stw	r17,20(r2)
 200a398:	14000415 	stw	r16,16(r2)
 200a39c:	dfc00217 	ldw	ra,8(sp)
 200a3a0:	dc400117 	ldw	r17,4(sp)
 200a3a4:	dc000017 	ldw	r16,0(sp)
 200a3a8:	dec00304 	addi	sp,sp,12
 200a3ac:	f800283a 	ret

0200a3b0 <__multiply>:
 200a3b0:	deffef04 	addi	sp,sp,-68
 200a3b4:	dc400815 	stw	r17,32(sp)
 200a3b8:	dc000715 	stw	r16,28(sp)
 200a3bc:	2c400417 	ldw	r17,16(r5)
 200a3c0:	34000417 	ldw	r16,16(r6)
 200a3c4:	dd800d15 	stw	r22,52(sp)
 200a3c8:	dc800915 	stw	r18,36(sp)
 200a3cc:	dfc01015 	stw	ra,64(sp)
 200a3d0:	df000f15 	stw	fp,60(sp)
 200a3d4:	ddc00e15 	stw	r23,56(sp)
 200a3d8:	dd400c15 	stw	r21,48(sp)
 200a3dc:	dd000b15 	stw	r20,44(sp)
 200a3e0:	dcc00a15 	stw	r19,40(sp)
 200a3e4:	2825883a 	mov	r18,r5
 200a3e8:	302d883a 	mov	r22,r6
 200a3ec:	8c009116 	blt	r17,r16,200a634 <__multiply+0x284>
 200a3f0:	8005883a 	mov	r2,r16
 200a3f4:	8821883a 	mov	r16,r17
 200a3f8:	1023883a 	mov	r17,r2
 200a3fc:	90800217 	ldw	r2,8(r18)
 200a400:	8447883a 	add	r3,r16,r17
 200a404:	d8c00215 	stw	r3,8(sp)
 200a408:	91400117 	ldw	r5,4(r18)
 200a40c:	10c0010e 	bge	r2,r3,200a414 <__multiply+0x64>
 200a410:	29400044 	addi	r5,r5,1
 200a414:	2009f400 	call	2009f40 <_Balloc>
 200a418:	d8c00217 	ldw	r3,8(sp)
 200a41c:	d8800615 	stw	r2,24(sp)
 200a420:	18eb883a 	add	r21,r3,r3
 200a424:	ad6b883a 	add	r21,r21,r21
 200a428:	10c00504 	addi	r3,r2,20
 200a42c:	1d6b883a 	add	r21,r3,r21
 200a430:	d8c00115 	stw	r3,4(sp)
 200a434:	dd400315 	stw	r21,12(sp)
 200a438:	1805883a 	mov	r2,r3
 200a43c:	1d40042e 	bgeu	r3,r21,200a450 <__multiply+0xa0>
 200a440:	d8c00317 	ldw	r3,12(sp)
 200a444:	10000015 	stw	zero,0(r2)
 200a448:	10800104 	addi	r2,r2,4
 200a44c:	10fffc36 	bltu	r2,r3,200a440 <__multiply+0x90>
 200a450:	8c63883a 	add	r17,r17,r17
 200a454:	b5800504 	addi	r22,r22,20
 200a458:	8c63883a 	add	r17,r17,r17
 200a45c:	94800504 	addi	r18,r18,20
 200a460:	8421883a 	add	r16,r16,r16
 200a464:	b463883a 	add	r17,r22,r17
 200a468:	8421883a 	add	r16,r16,r16
 200a46c:	dd800015 	stw	r22,0(sp)
 200a470:	dc800415 	stw	r18,16(sp)
 200a474:	dc400515 	stw	r17,20(sp)
 200a478:	9429883a 	add	r20,r18,r16
 200a47c:	b4404f2e 	bgeu	r22,r17,200a5bc <__multiply+0x20c>
 200a480:	d8c00017 	ldw	r3,0(sp)
 200a484:	1c800017 	ldw	r18,0(r3)
 200a488:	943fffcc 	andi	r16,r18,65535
 200a48c:	80001e26 	beq	r16,zero,200a508 <__multiply+0x158>
 200a490:	dd800117 	ldw	r22,4(sp)
 200a494:	dd400417 	ldw	r21,16(sp)
 200a498:	0025883a 	mov	r18,zero
 200a49c:	adc00017 	ldw	r23,0(r21)
 200a4a0:	b4c00017 	ldw	r19,0(r22)
 200a4a4:	800b883a 	mov	r5,r16
 200a4a8:	b93fffcc 	andi	r4,r23,65535
 200a4ac:	200e2dc0 	call	200e2dc <__mulsi3>
 200a4b0:	9c7fffcc 	andi	r17,r19,65535
 200a4b4:	8885883a 	add	r2,r17,r2
 200a4b8:	b808d43a 	srli	r4,r23,16
 200a4bc:	14a3883a 	add	r17,r2,r18
 200a4c0:	9826d43a 	srli	r19,r19,16
 200a4c4:	8824d43a 	srli	r18,r17,16
 200a4c8:	800b883a 	mov	r5,r16
 200a4cc:	200e2dc0 	call	200e2dc <__mulsi3>
 200a4d0:	9885883a 	add	r2,r19,r2
 200a4d4:	14a7883a 	add	r19,r2,r18
 200a4d8:	88ffffcc 	andi	r3,r17,65535
 200a4dc:	9822943a 	slli	r17,r19,16
 200a4e0:	ad400104 	addi	r21,r21,4
 200a4e4:	b005883a 	mov	r2,r22
 200a4e8:	88c6b03a 	or	r3,r17,r3
 200a4ec:	b0c00015 	stw	r3,0(r22)
 200a4f0:	9824d43a 	srli	r18,r19,16
 200a4f4:	b5800104 	addi	r22,r22,4
 200a4f8:	ad3fe836 	bltu	r21,r20,200a49c <__multiply+0xec>
 200a4fc:	d8c00017 	ldw	r3,0(sp)
 200a500:	14800115 	stw	r18,4(r2)
 200a504:	1c800017 	ldw	r18,0(r3)
 200a508:	9024d43a 	srli	r18,r18,16
 200a50c:	90002226 	beq	r18,zero,200a598 <__multiply+0x1e8>
 200a510:	d8c00117 	ldw	r3,4(sp)
 200a514:	dd800417 	ldw	r22,16(sp)
 200a518:	002f883a 	mov	r23,zero
 200a51c:	1f000017 	ldw	fp,0(r3)
 200a520:	1823883a 	mov	r17,r3
 200a524:	182b883a 	mov	r21,r3
 200a528:	e021883a 	mov	r16,fp
 200a52c:	00000106 	br	200a534 <__multiply+0x184>
 200a530:	982b883a 	mov	r21,r19
 200a534:	b100000b 	ldhu	r4,0(r22)
 200a538:	8020d43a 	srli	r16,r16,16
 200a53c:	900b883a 	mov	r5,r18
 200a540:	200e2dc0 	call	200e2dc <__mulsi3>
 200a544:	1405883a 	add	r2,r2,r16
 200a548:	15ef883a 	add	r23,r2,r23
 200a54c:	b804943a 	slli	r2,r23,16
 200a550:	e0ffffcc 	andi	r3,fp,65535
 200a554:	8c400104 	addi	r17,r17,4
 200a558:	10c6b03a 	or	r3,r2,r3
 200a55c:	88ffff15 	stw	r3,-4(r17)
 200a560:	b5800104 	addi	r22,r22,4
 200a564:	b13fff17 	ldw	r4,-4(r22)
 200a568:	acc00104 	addi	r19,r21,4
 200a56c:	900b883a 	mov	r5,r18
 200a570:	2008d43a 	srli	r4,r4,16
 200a574:	9c000017 	ldw	r16,0(r19)
 200a578:	200e2dc0 	call	200e2dc <__mulsi3>
 200a57c:	b806d43a 	srli	r3,r23,16
 200a580:	813fffcc 	andi	r4,r16,65535
 200a584:	1105883a 	add	r2,r2,r4
 200a588:	10f9883a 	add	fp,r2,r3
 200a58c:	e02ed43a 	srli	r23,fp,16
 200a590:	b53fe736 	bltu	r22,r20,200a530 <__multiply+0x180>
 200a594:	af000115 	stw	fp,4(r21)
 200a598:	d8c00017 	ldw	r3,0(sp)
 200a59c:	d9000517 	ldw	r4,20(sp)
 200a5a0:	18c00104 	addi	r3,r3,4
 200a5a4:	d8c00015 	stw	r3,0(sp)
 200a5a8:	d8c00117 	ldw	r3,4(sp)
 200a5ac:	18c00104 	addi	r3,r3,4
 200a5b0:	d8c00115 	stw	r3,4(sp)
 200a5b4:	d8c00017 	ldw	r3,0(sp)
 200a5b8:	193fb136 	bltu	r3,r4,200a480 <__multiply+0xd0>
 200a5bc:	d8c00217 	ldw	r3,8(sp)
 200a5c0:	00c00c0e 	bge	zero,r3,200a5f4 <__multiply+0x244>
 200a5c4:	d8c00317 	ldw	r3,12(sp)
 200a5c8:	18bfff17 	ldw	r2,-4(r3)
 200a5cc:	1d7fff04 	addi	r21,r3,-4
 200a5d0:	10000326 	beq	r2,zero,200a5e0 <__multiply+0x230>
 200a5d4:	00000706 	br	200a5f4 <__multiply+0x244>
 200a5d8:	a8800017 	ldw	r2,0(r21)
 200a5dc:	1000051e 	bne	r2,zero,200a5f4 <__multiply+0x244>
 200a5e0:	d8c00217 	ldw	r3,8(sp)
 200a5e4:	ad7fff04 	addi	r21,r21,-4
 200a5e8:	18ffffc4 	addi	r3,r3,-1
 200a5ec:	d8c00215 	stw	r3,8(sp)
 200a5f0:	183ff91e 	bne	r3,zero,200a5d8 <__multiply+0x228>
 200a5f4:	d8c00617 	ldw	r3,24(sp)
 200a5f8:	d9000217 	ldw	r4,8(sp)
 200a5fc:	1805883a 	mov	r2,r3
 200a600:	19000415 	stw	r4,16(r3)
 200a604:	dfc01017 	ldw	ra,64(sp)
 200a608:	df000f17 	ldw	fp,60(sp)
 200a60c:	ddc00e17 	ldw	r23,56(sp)
 200a610:	dd800d17 	ldw	r22,52(sp)
 200a614:	dd400c17 	ldw	r21,48(sp)
 200a618:	dd000b17 	ldw	r20,44(sp)
 200a61c:	dcc00a17 	ldw	r19,40(sp)
 200a620:	dc800917 	ldw	r18,36(sp)
 200a624:	dc400817 	ldw	r17,32(sp)
 200a628:	dc000717 	ldw	r16,28(sp)
 200a62c:	dec01104 	addi	sp,sp,68
 200a630:	f800283a 	ret
 200a634:	3025883a 	mov	r18,r6
 200a638:	282d883a 	mov	r22,r5
 200a63c:	003f6f06 	br	200a3fc <__multiply+0x4c>

0200a640 <__pow5mult>:
 200a640:	defffa04 	addi	sp,sp,-24
 200a644:	dcc00315 	stw	r19,12(sp)
 200a648:	dc800215 	stw	r18,8(sp)
 200a64c:	dc000015 	stw	r16,0(sp)
 200a650:	dfc00515 	stw	ra,20(sp)
 200a654:	dd000415 	stw	r20,16(sp)
 200a658:	dc400115 	stw	r17,4(sp)
 200a65c:	308000cc 	andi	r2,r6,3
 200a660:	3021883a 	mov	r16,r6
 200a664:	2027883a 	mov	r19,r4
 200a668:	2825883a 	mov	r18,r5
 200a66c:	10002e1e 	bne	r2,zero,200a728 <__pow5mult+0xe8>
 200a670:	8021d0ba 	srai	r16,r16,2
 200a674:	80001a26 	beq	r16,zero,200a6e0 <__pow5mult+0xa0>
 200a678:	9c401217 	ldw	r17,72(r19)
 200a67c:	8800061e 	bne	r17,zero,200a698 <__pow5mult+0x58>
 200a680:	00003406 	br	200a754 <__pow5mult+0x114>
 200a684:	8021d07a 	srai	r16,r16,1
 200a688:	80001526 	beq	r16,zero,200a6e0 <__pow5mult+0xa0>
 200a68c:	88800017 	ldw	r2,0(r17)
 200a690:	10001c26 	beq	r2,zero,200a704 <__pow5mult+0xc4>
 200a694:	1023883a 	mov	r17,r2
 200a698:	80c0004c 	andi	r3,r16,1
 200a69c:	183ff926 	beq	r3,zero,200a684 <__pow5mult+0x44>
 200a6a0:	900b883a 	mov	r5,r18
 200a6a4:	880d883a 	mov	r6,r17
 200a6a8:	9809883a 	mov	r4,r19
 200a6ac:	200a3b00 	call	200a3b0 <__multiply>
 200a6b0:	90001b26 	beq	r18,zero,200a720 <__pow5mult+0xe0>
 200a6b4:	91c00117 	ldw	r7,4(r18)
 200a6b8:	98c01317 	ldw	r3,76(r19)
 200a6bc:	8021d07a 	srai	r16,r16,1
 200a6c0:	39cf883a 	add	r7,r7,r7
 200a6c4:	39cf883a 	add	r7,r7,r7
 200a6c8:	19c7883a 	add	r3,r3,r7
 200a6cc:	19000017 	ldw	r4,0(r3)
 200a6d0:	91000015 	stw	r4,0(r18)
 200a6d4:	1c800015 	stw	r18,0(r3)
 200a6d8:	1025883a 	mov	r18,r2
 200a6dc:	803feb1e 	bne	r16,zero,200a68c <__pow5mult+0x4c>
 200a6e0:	9005883a 	mov	r2,r18
 200a6e4:	dfc00517 	ldw	ra,20(sp)
 200a6e8:	dd000417 	ldw	r20,16(sp)
 200a6ec:	dcc00317 	ldw	r19,12(sp)
 200a6f0:	dc800217 	ldw	r18,8(sp)
 200a6f4:	dc400117 	ldw	r17,4(sp)
 200a6f8:	dc000017 	ldw	r16,0(sp)
 200a6fc:	dec00604 	addi	sp,sp,24
 200a700:	f800283a 	ret
 200a704:	9809883a 	mov	r4,r19
 200a708:	880b883a 	mov	r5,r17
 200a70c:	880d883a 	mov	r6,r17
 200a710:	200a3b00 	call	200a3b0 <__multiply>
 200a714:	88800015 	stw	r2,0(r17)
 200a718:	10000015 	stw	zero,0(r2)
 200a71c:	003fdd06 	br	200a694 <__pow5mult+0x54>
 200a720:	1025883a 	mov	r18,r2
 200a724:	003fd706 	br	200a684 <__pow5mult+0x44>
 200a728:	10bfffc4 	addi	r2,r2,-1
 200a72c:	1085883a 	add	r2,r2,r2
 200a730:	00c080b4 	movhi	r3,514
 200a734:	18e2da04 	addi	r3,r3,-29848
 200a738:	1085883a 	add	r2,r2,r2
 200a73c:	1885883a 	add	r2,r3,r2
 200a740:	11800017 	ldw	r6,0(r2)
 200a744:	000f883a 	mov	r7,zero
 200a748:	200a0100 	call	200a010 <__multadd>
 200a74c:	1025883a 	mov	r18,r2
 200a750:	003fc706 	br	200a670 <__pow5mult+0x30>
 200a754:	05000044 	movi	r20,1
 200a758:	9809883a 	mov	r4,r19
 200a75c:	a00b883a 	mov	r5,r20
 200a760:	2009f400 	call	2009f40 <_Balloc>
 200a764:	1023883a 	mov	r17,r2
 200a768:	00809c44 	movi	r2,625
 200a76c:	88800515 	stw	r2,20(r17)
 200a770:	8d000415 	stw	r20,16(r17)
 200a774:	9c401215 	stw	r17,72(r19)
 200a778:	88000015 	stw	zero,0(r17)
 200a77c:	003fc606 	br	200a698 <__pow5mult+0x58>

0200a780 <__lshift>:
 200a780:	defff904 	addi	sp,sp,-28
 200a784:	dd000415 	stw	r20,16(sp)
 200a788:	dcc00315 	stw	r19,12(sp)
 200a78c:	3029d17a 	srai	r20,r6,5
 200a790:	2cc00417 	ldw	r19,16(r5)
 200a794:	28800217 	ldw	r2,8(r5)
 200a798:	dd400515 	stw	r21,20(sp)
 200a79c:	a4e7883a 	add	r19,r20,r19
 200a7a0:	dc800215 	stw	r18,8(sp)
 200a7a4:	dc400115 	stw	r17,4(sp)
 200a7a8:	dc000015 	stw	r16,0(sp)
 200a7ac:	dfc00615 	stw	ra,24(sp)
 200a7b0:	9c000044 	addi	r16,r19,1
 200a7b4:	2823883a 	mov	r17,r5
 200a7b8:	302b883a 	mov	r21,r6
 200a7bc:	2025883a 	mov	r18,r4
 200a7c0:	29400117 	ldw	r5,4(r5)
 200a7c4:	1400030e 	bge	r2,r16,200a7d4 <__lshift+0x54>
 200a7c8:	1085883a 	add	r2,r2,r2
 200a7cc:	29400044 	addi	r5,r5,1
 200a7d0:	143ffd16 	blt	r2,r16,200a7c8 <__lshift+0x48>
 200a7d4:	9009883a 	mov	r4,r18
 200a7d8:	2009f400 	call	2009f40 <_Balloc>
 200a7dc:	11c00504 	addi	r7,r2,20
 200a7e0:	0500090e 	bge	zero,r20,200a808 <__lshift+0x88>
 200a7e4:	3811883a 	mov	r8,r7
 200a7e8:	0007883a 	mov	r3,zero
 200a7ec:	40000015 	stw	zero,0(r8)
 200a7f0:	18c00044 	addi	r3,r3,1
 200a7f4:	42000104 	addi	r8,r8,4
 200a7f8:	1d3ffc1e 	bne	r3,r20,200a7ec <__lshift+0x6c>
 200a7fc:	18c7883a 	add	r3,r3,r3
 200a800:	18c7883a 	add	r3,r3,r3
 200a804:	38cf883a 	add	r7,r7,r3
 200a808:	89000417 	ldw	r4,16(r17)
 200a80c:	88c00504 	addi	r3,r17,20
 200a810:	a98007cc 	andi	r6,r21,31
 200a814:	2109883a 	add	r4,r4,r4
 200a818:	2109883a 	add	r4,r4,r4
 200a81c:	1909883a 	add	r4,r3,r4
 200a820:	30002326 	beq	r6,zero,200a8b0 <__lshift+0x130>
 200a824:	01400804 	movi	r5,32
 200a828:	298bc83a 	sub	r5,r5,r6
 200a82c:	0013883a 	mov	r9,zero
 200a830:	1a000017 	ldw	r8,0(r3)
 200a834:	3815883a 	mov	r10,r7
 200a838:	39c00104 	addi	r7,r7,4
 200a83c:	4190983a 	sll	r8,r8,r6
 200a840:	18c00104 	addi	r3,r3,4
 200a844:	4a10b03a 	or	r8,r9,r8
 200a848:	3a3fff15 	stw	r8,-4(r7)
 200a84c:	1a3fff17 	ldw	r8,-4(r3)
 200a850:	4152d83a 	srl	r9,r8,r5
 200a854:	193ff636 	bltu	r3,r4,200a830 <__lshift+0xb0>
 200a858:	52400115 	stw	r9,4(r10)
 200a85c:	48001a1e 	bne	r9,zero,200a8c8 <__lshift+0x148>
 200a860:	843fffc4 	addi	r16,r16,-1
 200a864:	14000415 	stw	r16,16(r2)
 200a868:	88000826 	beq	r17,zero,200a88c <__lshift+0x10c>
 200a86c:	89000117 	ldw	r4,4(r17)
 200a870:	90c01317 	ldw	r3,76(r18)
 200a874:	2109883a 	add	r4,r4,r4
 200a878:	2109883a 	add	r4,r4,r4
 200a87c:	1907883a 	add	r3,r3,r4
 200a880:	19000017 	ldw	r4,0(r3)
 200a884:	89000015 	stw	r4,0(r17)
 200a888:	1c400015 	stw	r17,0(r3)
 200a88c:	dfc00617 	ldw	ra,24(sp)
 200a890:	dd400517 	ldw	r21,20(sp)
 200a894:	dd000417 	ldw	r20,16(sp)
 200a898:	dcc00317 	ldw	r19,12(sp)
 200a89c:	dc800217 	ldw	r18,8(sp)
 200a8a0:	dc400117 	ldw	r17,4(sp)
 200a8a4:	dc000017 	ldw	r16,0(sp)
 200a8a8:	dec00704 	addi	sp,sp,28
 200a8ac:	f800283a 	ret
 200a8b0:	19400017 	ldw	r5,0(r3)
 200a8b4:	39c00104 	addi	r7,r7,4
 200a8b8:	18c00104 	addi	r3,r3,4
 200a8bc:	397fff15 	stw	r5,-4(r7)
 200a8c0:	193ffb36 	bltu	r3,r4,200a8b0 <__lshift+0x130>
 200a8c4:	003fe606 	br	200a860 <__lshift+0xe0>
 200a8c8:	9c000084 	addi	r16,r19,2
 200a8cc:	003fe406 	br	200a860 <__lshift+0xe0>

0200a8d0 <__mcmp>:
 200a8d0:	20800417 	ldw	r2,16(r4)
 200a8d4:	28c00417 	ldw	r3,16(r5)
 200a8d8:	10c5c83a 	sub	r2,r2,r3
 200a8dc:	1000111e 	bne	r2,zero,200a924 <__mcmp+0x54>
 200a8e0:	18c7883a 	add	r3,r3,r3
 200a8e4:	18c7883a 	add	r3,r3,r3
 200a8e8:	21000504 	addi	r4,r4,20
 200a8ec:	29400504 	addi	r5,r5,20
 200a8f0:	20c5883a 	add	r2,r4,r3
 200a8f4:	28cb883a 	add	r5,r5,r3
 200a8f8:	00000106 	br	200a900 <__mcmp+0x30>
 200a8fc:	20800a2e 	bgeu	r4,r2,200a928 <__mcmp+0x58>
 200a900:	10bfff04 	addi	r2,r2,-4
 200a904:	297fff04 	addi	r5,r5,-4
 200a908:	11800017 	ldw	r6,0(r2)
 200a90c:	28c00017 	ldw	r3,0(r5)
 200a910:	30fffa26 	beq	r6,r3,200a8fc <__mcmp+0x2c>
 200a914:	30c00236 	bltu	r6,r3,200a920 <__mcmp+0x50>
 200a918:	00800044 	movi	r2,1
 200a91c:	f800283a 	ret
 200a920:	00bfffc4 	movi	r2,-1
 200a924:	f800283a 	ret
 200a928:	0005883a 	mov	r2,zero
 200a92c:	f800283a 	ret

0200a930 <__mdiff>:
 200a930:	defffb04 	addi	sp,sp,-20
 200a934:	dc000015 	stw	r16,0(sp)
 200a938:	2821883a 	mov	r16,r5
 200a93c:	dcc00315 	stw	r19,12(sp)
 200a940:	300b883a 	mov	r5,r6
 200a944:	2027883a 	mov	r19,r4
 200a948:	8009883a 	mov	r4,r16
 200a94c:	dc800215 	stw	r18,8(sp)
 200a950:	dfc00415 	stw	ra,16(sp)
 200a954:	dc400115 	stw	r17,4(sp)
 200a958:	3025883a 	mov	r18,r6
 200a95c:	200a8d00 	call	200a8d0 <__mcmp>
 200a960:	10005226 	beq	r2,zero,200aaac <__mdiff+0x17c>
 200a964:	10004c16 	blt	r2,zero,200aa98 <__mdiff+0x168>
 200a968:	0023883a 	mov	r17,zero
 200a96c:	81400117 	ldw	r5,4(r16)
 200a970:	9809883a 	mov	r4,r19
 200a974:	2009f400 	call	2009f40 <_Balloc>
 200a978:	83400417 	ldw	r13,16(r16)
 200a97c:	93800417 	ldw	r14,16(r18)
 200a980:	81000504 	addi	r4,r16,20
 200a984:	6b59883a 	add	r12,r13,r13
 200a988:	739d883a 	add	r14,r14,r14
 200a98c:	6319883a 	add	r12,r12,r12
 200a990:	91800504 	addi	r6,r18,20
 200a994:	739d883a 	add	r14,r14,r14
 200a998:	14400315 	stw	r17,12(r2)
 200a99c:	2319883a 	add	r12,r4,r12
 200a9a0:	339d883a 	add	r14,r6,r14
 200a9a4:	12400504 	addi	r9,r2,20
 200a9a8:	0007883a 	mov	r3,zero
 200a9ac:	22000017 	ldw	r8,0(r4)
 200a9b0:	32800017 	ldw	r10,0(r6)
 200a9b4:	4ac00104 	addi	r11,r9,4
 200a9b8:	41ffffcc 	andi	r7,r8,65535
 200a9bc:	38c7883a 	add	r3,r7,r3
 200a9c0:	51ffffcc 	andi	r7,r10,65535
 200a9c4:	19cfc83a 	sub	r7,r3,r7
 200a9c8:	4010d43a 	srli	r8,r8,16
 200a9cc:	5014d43a 	srli	r10,r10,16
 200a9d0:	3807d43a 	srai	r3,r7,16
 200a9d4:	39ffffcc 	andi	r7,r7,65535
 200a9d8:	4291c83a 	sub	r8,r8,r10
 200a9dc:	40c7883a 	add	r3,r8,r3
 200a9e0:	1810943a 	slli	r8,r3,16
 200a9e4:	31800104 	addi	r6,r6,4
 200a9e8:	21000104 	addi	r4,r4,4
 200a9ec:	41ceb03a 	or	r7,r8,r7
 200a9f0:	49c00015 	stw	r7,0(r9)
 200a9f4:	1807d43a 	srai	r3,r3,16
 200a9f8:	580b883a 	mov	r5,r11
 200a9fc:	5813883a 	mov	r9,r11
 200aa00:	33bfea36 	bltu	r6,r14,200a9ac <__mdiff+0x7c>
 200aa04:	2011883a 	mov	r8,r4
 200aa08:	2300152e 	bgeu	r4,r12,200aa60 <__mdiff+0x130>
 200aa0c:	21400017 	ldw	r5,0(r4)
 200aa10:	4a400104 	addi	r9,r9,4
 200aa14:	21000104 	addi	r4,r4,4
 200aa18:	29ffffcc 	andi	r7,r5,65535
 200aa1c:	38c7883a 	add	r3,r7,r3
 200aa20:	280ad43a 	srli	r5,r5,16
 200aa24:	180dd43a 	srai	r6,r3,16
 200aa28:	19ffffcc 	andi	r7,r3,65535
 200aa2c:	3147883a 	add	r3,r6,r5
 200aa30:	180a943a 	slli	r5,r3,16
 200aa34:	1807d43a 	srai	r3,r3,16
 200aa38:	29ceb03a 	or	r7,r5,r7
 200aa3c:	49ffff15 	stw	r7,-4(r9)
 200aa40:	233ff236 	bltu	r4,r12,200aa0c <__mdiff+0xdc>
 200aa44:	0206303a 	nor	r3,zero,r8
 200aa48:	1b07883a 	add	r3,r3,r12
 200aa4c:	1806d0ba 	srli	r3,r3,2
 200aa50:	18c00044 	addi	r3,r3,1
 200aa54:	18c7883a 	add	r3,r3,r3
 200aa58:	18c7883a 	add	r3,r3,r3
 200aa5c:	58cb883a 	add	r5,r11,r3
 200aa60:	28ffff04 	addi	r3,r5,-4
 200aa64:	3800041e 	bne	r7,zero,200aa78 <__mdiff+0x148>
 200aa68:	18ffff04 	addi	r3,r3,-4
 200aa6c:	19000017 	ldw	r4,0(r3)
 200aa70:	6b7fffc4 	addi	r13,r13,-1
 200aa74:	203ffc26 	beq	r4,zero,200aa68 <__mdiff+0x138>
 200aa78:	13400415 	stw	r13,16(r2)
 200aa7c:	dfc00417 	ldw	ra,16(sp)
 200aa80:	dcc00317 	ldw	r19,12(sp)
 200aa84:	dc800217 	ldw	r18,8(sp)
 200aa88:	dc400117 	ldw	r17,4(sp)
 200aa8c:	dc000017 	ldw	r16,0(sp)
 200aa90:	dec00504 	addi	sp,sp,20
 200aa94:	f800283a 	ret
 200aa98:	8005883a 	mov	r2,r16
 200aa9c:	04400044 	movi	r17,1
 200aaa0:	9021883a 	mov	r16,r18
 200aaa4:	1025883a 	mov	r18,r2
 200aaa8:	003fb006 	br	200a96c <__mdiff+0x3c>
 200aaac:	9809883a 	mov	r4,r19
 200aab0:	000b883a 	mov	r5,zero
 200aab4:	2009f400 	call	2009f40 <_Balloc>
 200aab8:	00c00044 	movi	r3,1
 200aabc:	10c00415 	stw	r3,16(r2)
 200aac0:	10000515 	stw	zero,20(r2)
 200aac4:	003fed06 	br	200aa7c <__mdiff+0x14c>

0200aac8 <__ulp>:
 200aac8:	295ffc2c 	andhi	r5,r5,32752
 200aacc:	00bf3034 	movhi	r2,64704
 200aad0:	2887883a 	add	r3,r5,r2
 200aad4:	00c0020e 	bge	zero,r3,200aae0 <__ulp+0x18>
 200aad8:	0005883a 	mov	r2,zero
 200aadc:	f800283a 	ret
 200aae0:	00c7c83a 	sub	r3,zero,r3
 200aae4:	180bd53a 	srai	r5,r3,20
 200aae8:	008004c4 	movi	r2,19
 200aaec:	11400a0e 	bge	r2,r5,200ab18 <__ulp+0x50>
 200aaf0:	00800c84 	movi	r2,50
 200aaf4:	0007883a 	mov	r3,zero
 200aaf8:	11400516 	blt	r2,r5,200ab10 <__ulp+0x48>
 200aafc:	00800cc4 	movi	r2,51
 200ab00:	114bc83a 	sub	r5,r2,r5
 200ab04:	00800044 	movi	r2,1
 200ab08:	1144983a 	sll	r2,r2,r5
 200ab0c:	f800283a 	ret
 200ab10:	00800044 	movi	r2,1
 200ab14:	f800283a 	ret
 200ab18:	00800234 	movhi	r2,8
 200ab1c:	1147d83a 	sra	r3,r2,r5
 200ab20:	0005883a 	mov	r2,zero
 200ab24:	f800283a 	ret

0200ab28 <__b2d>:
 200ab28:	defffa04 	addi	sp,sp,-24
 200ab2c:	dc000015 	stw	r16,0(sp)
 200ab30:	24000417 	ldw	r16,16(r4)
 200ab34:	dc400115 	stw	r17,4(sp)
 200ab38:	24400504 	addi	r17,r4,20
 200ab3c:	8421883a 	add	r16,r16,r16
 200ab40:	8421883a 	add	r16,r16,r16
 200ab44:	8c21883a 	add	r16,r17,r16
 200ab48:	dc800215 	stw	r18,8(sp)
 200ab4c:	84bfff17 	ldw	r18,-4(r16)
 200ab50:	dd000415 	stw	r20,16(sp)
 200ab54:	dcc00315 	stw	r19,12(sp)
 200ab58:	9009883a 	mov	r4,r18
 200ab5c:	2829883a 	mov	r20,r5
 200ab60:	dfc00515 	stw	ra,20(sp)
 200ab64:	200a25c0 	call	200a25c <__hi0bits>
 200ab68:	00c00804 	movi	r3,32
 200ab6c:	1887c83a 	sub	r3,r3,r2
 200ab70:	a0c00015 	stw	r3,0(r20)
 200ab74:	00c00284 	movi	r3,10
 200ab78:	84ffff04 	addi	r19,r16,-4
 200ab7c:	18801216 	blt	r3,r2,200abc8 <__b2d+0xa0>
 200ab80:	014002c4 	movi	r5,11
 200ab84:	2889c83a 	sub	r4,r5,r2
 200ab88:	9106d83a 	srl	r3,r18,r4
 200ab8c:	18cffc34 	orhi	r3,r3,16368
 200ab90:	8cc0282e 	bgeu	r17,r19,200ac34 <__b2d+0x10c>
 200ab94:	817ffe17 	ldw	r5,-8(r16)
 200ab98:	290ad83a 	srl	r5,r5,r4
 200ab9c:	10800544 	addi	r2,r2,21
 200aba0:	9084983a 	sll	r2,r18,r2
 200aba4:	2884b03a 	or	r2,r5,r2
 200aba8:	dfc00517 	ldw	ra,20(sp)
 200abac:	dd000417 	ldw	r20,16(sp)
 200abb0:	dcc00317 	ldw	r19,12(sp)
 200abb4:	dc800217 	ldw	r18,8(sp)
 200abb8:	dc400117 	ldw	r17,4(sp)
 200abbc:	dc000017 	ldw	r16,0(sp)
 200abc0:	dec00604 	addi	sp,sp,24
 200abc4:	f800283a 	ret
 200abc8:	113ffd44 	addi	r4,r2,-11
 200abcc:	8cc00f2e 	bgeu	r17,r19,200ac0c <__b2d+0xe4>
 200abd0:	81bffe04 	addi	r6,r16,-8
 200abd4:	817ffe17 	ldw	r5,-8(r16)
 200abd8:	20001326 	beq	r4,zero,200ac28 <__b2d+0x100>
 200abdc:	00c00ac4 	movi	r3,43
 200abe0:	1885c83a 	sub	r2,r3,r2
 200abe4:	2886d83a 	srl	r3,r5,r2
 200abe8:	9124983a 	sll	r18,r18,r4
 200abec:	90e4b03a 	or	r18,r18,r3
 200abf0:	90cffc34 	orhi	r3,r18,16368
 200abf4:	8980112e 	bgeu	r17,r6,200ac3c <__b2d+0x114>
 200abf8:	81bffd17 	ldw	r6,-12(r16)
 200abfc:	308cd83a 	srl	r6,r6,r2
 200ac00:	2904983a 	sll	r2,r5,r4
 200ac04:	1184b03a 	or	r2,r2,r6
 200ac08:	003fe706 	br	200aba8 <__b2d+0x80>
 200ac0c:	20000526 	beq	r4,zero,200ac24 <__b2d+0xfc>
 200ac10:	9124983a 	sll	r18,r18,r4
 200ac14:	000d883a 	mov	r6,zero
 200ac18:	000b883a 	mov	r5,zero
 200ac1c:	90cffc34 	orhi	r3,r18,16368
 200ac20:	003ff706 	br	200ac00 <__b2d+0xd8>
 200ac24:	000b883a 	mov	r5,zero
 200ac28:	90cffc34 	orhi	r3,r18,16368
 200ac2c:	2805883a 	mov	r2,r5
 200ac30:	003fdd06 	br	200aba8 <__b2d+0x80>
 200ac34:	000b883a 	mov	r5,zero
 200ac38:	003fd806 	br	200ab9c <__b2d+0x74>
 200ac3c:	000d883a 	mov	r6,zero
 200ac40:	003fef06 	br	200ac00 <__b2d+0xd8>

0200ac44 <__d2b>:
 200ac44:	defff704 	addi	sp,sp,-36
 200ac48:	dc000215 	stw	r16,8(sp)
 200ac4c:	3021883a 	mov	r16,r6
 200ac50:	dc400315 	stw	r17,12(sp)
 200ac54:	8022907a 	slli	r17,r16,1
 200ac58:	dd400715 	stw	r21,28(sp)
 200ac5c:	282b883a 	mov	r21,r5
 200ac60:	01400044 	movi	r5,1
 200ac64:	dd000615 	stw	r20,24(sp)
 200ac68:	dcc00515 	stw	r19,20(sp)
 200ac6c:	dc800415 	stw	r18,16(sp)
 200ac70:	dfc00815 	stw	ra,32(sp)
 200ac74:	3829883a 	mov	r20,r7
 200ac78:	dc800917 	ldw	r18,36(sp)
 200ac7c:	8822d57a 	srli	r17,r17,21
 200ac80:	2009f400 	call	2009f40 <_Balloc>
 200ac84:	1027883a 	mov	r19,r2
 200ac88:	00800434 	movhi	r2,16
 200ac8c:	10bfffc4 	addi	r2,r2,-1
 200ac90:	808c703a 	and	r6,r16,r2
 200ac94:	88000126 	beq	r17,zero,200ac9c <__d2b+0x58>
 200ac98:	31800434 	orhi	r6,r6,16
 200ac9c:	d9800015 	stw	r6,0(sp)
 200aca0:	a8001f26 	beq	r21,zero,200ad20 <__d2b+0xdc>
 200aca4:	d9000104 	addi	r4,sp,4
 200aca8:	dd400115 	stw	r21,4(sp)
 200acac:	200a2c40 	call	200a2c4 <__lo0bits>
 200acb0:	d8c00017 	ldw	r3,0(sp)
 200acb4:	1000291e 	bne	r2,zero,200ad5c <__d2b+0x118>
 200acb8:	d9000117 	ldw	r4,4(sp)
 200acbc:	99000515 	stw	r4,20(r19)
 200acc0:	1820c03a 	cmpne	r16,r3,zero
 200acc4:	84000044 	addi	r16,r16,1
 200acc8:	98c00615 	stw	r3,24(r19)
 200accc:	9c000415 	stw	r16,16(r19)
 200acd0:	88001b1e 	bne	r17,zero,200ad40 <__d2b+0xfc>
 200acd4:	800690ba 	slli	r3,r16,2
 200acd8:	10bef384 	addi	r2,r2,-1074
 200acdc:	a0800015 	stw	r2,0(r20)
 200ace0:	98c5883a 	add	r2,r19,r3
 200ace4:	11000417 	ldw	r4,16(r2)
 200ace8:	8020917a 	slli	r16,r16,5
 200acec:	200a25c0 	call	200a25c <__hi0bits>
 200acf0:	8085c83a 	sub	r2,r16,r2
 200acf4:	90800015 	stw	r2,0(r18)
 200acf8:	9805883a 	mov	r2,r19
 200acfc:	dfc00817 	ldw	ra,32(sp)
 200ad00:	dd400717 	ldw	r21,28(sp)
 200ad04:	dd000617 	ldw	r20,24(sp)
 200ad08:	dcc00517 	ldw	r19,20(sp)
 200ad0c:	dc800417 	ldw	r18,16(sp)
 200ad10:	dc400317 	ldw	r17,12(sp)
 200ad14:	dc000217 	ldw	r16,8(sp)
 200ad18:	dec00904 	addi	sp,sp,36
 200ad1c:	f800283a 	ret
 200ad20:	d809883a 	mov	r4,sp
 200ad24:	200a2c40 	call	200a2c4 <__lo0bits>
 200ad28:	d8c00017 	ldw	r3,0(sp)
 200ad2c:	04000044 	movi	r16,1
 200ad30:	9c000415 	stw	r16,16(r19)
 200ad34:	98c00515 	stw	r3,20(r19)
 200ad38:	10800804 	addi	r2,r2,32
 200ad3c:	883fe526 	beq	r17,zero,200acd4 <__d2b+0x90>
 200ad40:	8c7ef344 	addi	r17,r17,-1075
 200ad44:	88a3883a 	add	r17,r17,r2
 200ad48:	00c00d44 	movi	r3,53
 200ad4c:	a4400015 	stw	r17,0(r20)
 200ad50:	1885c83a 	sub	r2,r3,r2
 200ad54:	90800015 	stw	r2,0(r18)
 200ad58:	003fe706 	br	200acf8 <__d2b+0xb4>
 200ad5c:	01000804 	movi	r4,32
 200ad60:	2089c83a 	sub	r4,r4,r2
 200ad64:	1908983a 	sll	r4,r3,r4
 200ad68:	d9400117 	ldw	r5,4(sp)
 200ad6c:	1886d83a 	srl	r3,r3,r2
 200ad70:	2148b03a 	or	r4,r4,r5
 200ad74:	99000515 	stw	r4,20(r19)
 200ad78:	d8c00015 	stw	r3,0(sp)
 200ad7c:	003fd006 	br	200acc0 <__d2b+0x7c>

0200ad80 <__ratio>:
 200ad80:	defff904 	addi	sp,sp,-28
 200ad84:	dc400315 	stw	r17,12(sp)
 200ad88:	2823883a 	mov	r17,r5
 200ad8c:	d9400104 	addi	r5,sp,4
 200ad90:	dfc00615 	stw	ra,24(sp)
 200ad94:	dcc00515 	stw	r19,20(sp)
 200ad98:	dc800415 	stw	r18,16(sp)
 200ad9c:	2027883a 	mov	r19,r4
 200ada0:	dc000215 	stw	r16,8(sp)
 200ada4:	200ab280 	call	200ab28 <__b2d>
 200ada8:	8809883a 	mov	r4,r17
 200adac:	d80b883a 	mov	r5,sp
 200adb0:	1025883a 	mov	r18,r2
 200adb4:	1821883a 	mov	r16,r3
 200adb8:	200ab280 	call	200ab28 <__b2d>
 200adbc:	8a400417 	ldw	r9,16(r17)
 200adc0:	9a000417 	ldw	r8,16(r19)
 200adc4:	100d883a 	mov	r6,r2
 200adc8:	d8800017 	ldw	r2,0(sp)
 200adcc:	4251c83a 	sub	r8,r8,r9
 200add0:	4012917a 	slli	r9,r8,5
 200add4:	da000117 	ldw	r8,4(sp)
 200add8:	4091c83a 	sub	r8,r8,r2
 200addc:	4251883a 	add	r8,r8,r9
 200ade0:	02000d0e 	bge	zero,r8,200ae18 <__ratio+0x98>
 200ade4:	4010953a 	slli	r8,r8,20
 200ade8:	4421883a 	add	r16,r8,r16
 200adec:	9009883a 	mov	r4,r18
 200adf0:	800b883a 	mov	r5,r16
 200adf4:	180f883a 	mov	r7,r3
 200adf8:	200eba00 	call	200eba0 <__divdf3>
 200adfc:	dfc00617 	ldw	ra,24(sp)
 200ae00:	dcc00517 	ldw	r19,20(sp)
 200ae04:	dc800417 	ldw	r18,16(sp)
 200ae08:	dc400317 	ldw	r17,12(sp)
 200ae0c:	dc000217 	ldw	r16,8(sp)
 200ae10:	dec00704 	addi	sp,sp,28
 200ae14:	f800283a 	ret
 200ae18:	4010953a 	slli	r8,r8,20
 200ae1c:	1a07c83a 	sub	r3,r3,r8
 200ae20:	003ff206 	br	200adec <__ratio+0x6c>

0200ae24 <_mprec_log10>:
 200ae24:	defffe04 	addi	sp,sp,-8
 200ae28:	dc000015 	stw	r16,0(sp)
 200ae2c:	dfc00115 	stw	ra,4(sp)
 200ae30:	008005c4 	movi	r2,23
 200ae34:	2021883a 	mov	r16,r4
 200ae38:	11000d0e 	bge	r2,r4,200ae70 <_mprec_log10+0x4c>
 200ae3c:	0005883a 	mov	r2,zero
 200ae40:	00cffc34 	movhi	r3,16368
 200ae44:	843fffc4 	addi	r16,r16,-1
 200ae48:	1009883a 	mov	r4,r2
 200ae4c:	180b883a 	mov	r5,r3
 200ae50:	000d883a 	mov	r6,zero
 200ae54:	01d00934 	movhi	r7,16420
 200ae58:	200f7640 	call	200f764 <__muldf3>
 200ae5c:	803ff91e 	bne	r16,zero,200ae44 <_mprec_log10+0x20>
 200ae60:	dfc00117 	ldw	ra,4(sp)
 200ae64:	dc000017 	ldw	r16,0(sp)
 200ae68:	dec00204 	addi	sp,sp,8
 200ae6c:	f800283a 	ret
 200ae70:	202090fa 	slli	r16,r4,3
 200ae74:	008080b4 	movhi	r2,514
 200ae78:	10a2f104 	addi	r2,r2,-29756
 200ae7c:	1421883a 	add	r16,r2,r16
 200ae80:	80800017 	ldw	r2,0(r16)
 200ae84:	80c00117 	ldw	r3,4(r16)
 200ae88:	dfc00117 	ldw	ra,4(sp)
 200ae8c:	dc000017 	ldw	r16,0(sp)
 200ae90:	dec00204 	addi	sp,sp,8
 200ae94:	f800283a 	ret

0200ae98 <__copybits>:
 200ae98:	297fffc4 	addi	r5,r5,-1
 200ae9c:	280fd17a 	srai	r7,r5,5
 200aea0:	30c00417 	ldw	r3,16(r6)
 200aea4:	30800504 	addi	r2,r6,20
 200aea8:	39c00044 	addi	r7,r7,1
 200aeac:	18c7883a 	add	r3,r3,r3
 200aeb0:	39cf883a 	add	r7,r7,r7
 200aeb4:	18c7883a 	add	r3,r3,r3
 200aeb8:	39cf883a 	add	r7,r7,r7
 200aebc:	10c7883a 	add	r3,r2,r3
 200aec0:	21cf883a 	add	r7,r4,r7
 200aec4:	10c00d2e 	bgeu	r2,r3,200aefc <__copybits+0x64>
 200aec8:	200b883a 	mov	r5,r4
 200aecc:	12000017 	ldw	r8,0(r2)
 200aed0:	29400104 	addi	r5,r5,4
 200aed4:	10800104 	addi	r2,r2,4
 200aed8:	2a3fff15 	stw	r8,-4(r5)
 200aedc:	10fffb36 	bltu	r2,r3,200aecc <__copybits+0x34>
 200aee0:	1985c83a 	sub	r2,r3,r6
 200aee4:	10bffac4 	addi	r2,r2,-21
 200aee8:	1004d0ba 	srli	r2,r2,2
 200aeec:	10800044 	addi	r2,r2,1
 200aef0:	1085883a 	add	r2,r2,r2
 200aef4:	1085883a 	add	r2,r2,r2
 200aef8:	2089883a 	add	r4,r4,r2
 200aefc:	21c0032e 	bgeu	r4,r7,200af0c <__copybits+0x74>
 200af00:	20000015 	stw	zero,0(r4)
 200af04:	21000104 	addi	r4,r4,4
 200af08:	21fffd36 	bltu	r4,r7,200af00 <__copybits+0x68>
 200af0c:	f800283a 	ret

0200af10 <__any_on>:
 200af10:	20c00417 	ldw	r3,16(r4)
 200af14:	2805d17a 	srai	r2,r5,5
 200af18:	21000504 	addi	r4,r4,20
 200af1c:	18800d0e 	bge	r3,r2,200af54 <__any_on+0x44>
 200af20:	18c7883a 	add	r3,r3,r3
 200af24:	18c7883a 	add	r3,r3,r3
 200af28:	20c7883a 	add	r3,r4,r3
 200af2c:	20c0192e 	bgeu	r4,r3,200af94 <__any_on+0x84>
 200af30:	18bfff17 	ldw	r2,-4(r3)
 200af34:	18ffff04 	addi	r3,r3,-4
 200af38:	1000041e 	bne	r2,zero,200af4c <__any_on+0x3c>
 200af3c:	20c0142e 	bgeu	r4,r3,200af90 <__any_on+0x80>
 200af40:	18ffff04 	addi	r3,r3,-4
 200af44:	19400017 	ldw	r5,0(r3)
 200af48:	283ffc26 	beq	r5,zero,200af3c <__any_on+0x2c>
 200af4c:	00800044 	movi	r2,1
 200af50:	f800283a 	ret
 200af54:	10c00a0e 	bge	r2,r3,200af80 <__any_on+0x70>
 200af58:	1085883a 	add	r2,r2,r2
 200af5c:	1085883a 	add	r2,r2,r2
 200af60:	294007cc 	andi	r5,r5,31
 200af64:	2087883a 	add	r3,r4,r2
 200af68:	283ff026 	beq	r5,zero,200af2c <__any_on+0x1c>
 200af6c:	19800017 	ldw	r6,0(r3)
 200af70:	3144d83a 	srl	r2,r6,r5
 200af74:	114a983a 	sll	r5,r2,r5
 200af78:	29bff41e 	bne	r5,r6,200af4c <__any_on+0x3c>
 200af7c:	003feb06 	br	200af2c <__any_on+0x1c>
 200af80:	1085883a 	add	r2,r2,r2
 200af84:	1085883a 	add	r2,r2,r2
 200af88:	2087883a 	add	r3,r4,r2
 200af8c:	003fe706 	br	200af2c <__any_on+0x1c>
 200af90:	f800283a 	ret
 200af94:	0005883a 	mov	r2,zero
 200af98:	f800283a 	ret

0200af9c <_realloc_r>:
 200af9c:	defff604 	addi	sp,sp,-40
 200afa0:	dd000415 	stw	r20,16(sp)
 200afa4:	dc400115 	stw	r17,4(sp)
 200afa8:	dfc00915 	stw	ra,36(sp)
 200afac:	df000815 	stw	fp,32(sp)
 200afb0:	ddc00715 	stw	r23,28(sp)
 200afb4:	dd800615 	stw	r22,24(sp)
 200afb8:	dd400515 	stw	r21,20(sp)
 200afbc:	dcc00315 	stw	r19,12(sp)
 200afc0:	dc800215 	stw	r18,8(sp)
 200afc4:	dc000015 	stw	r16,0(sp)
 200afc8:	2829883a 	mov	r20,r5
 200afcc:	3023883a 	mov	r17,r6
 200afd0:	2800ad26 	beq	r5,zero,200b288 <_realloc_r+0x2ec>
 200afd4:	2025883a 	mov	r18,r4
 200afd8:	20112080 	call	2011208 <__malloc_lock>
 200afdc:	a0ffff17 	ldw	r3,-4(r20)
 200afe0:	043fff04 	movi	r16,-4
 200afe4:	890002c4 	addi	r4,r17,11
 200afe8:	01c00584 	movi	r7,22
 200afec:	a57ffe04 	addi	r21,r20,-8
 200aff0:	1c20703a 	and	r16,r3,r16
 200aff4:	39001d2e 	bgeu	r7,r4,200b06c <_realloc_r+0xd0>
 200aff8:	05bffe04 	movi	r22,-8
 200affc:	25ac703a 	and	r22,r4,r22
 200b000:	b00f883a 	mov	r7,r22
 200b004:	b0006516 	blt	r22,zero,200b19c <_realloc_r+0x200>
 200b008:	b4406436 	bltu	r22,r17,200b19c <_realloc_r+0x200>
 200b00c:	81c01a0e 	bge	r16,r7,200b078 <_realloc_r+0xdc>
 200b010:	070080b4 	movhi	fp,514
 200b014:	e724a404 	addi	fp,fp,-28016
 200b018:	e1400217 	ldw	r5,8(fp)
 200b01c:	ac11883a 	add	r8,r21,r16
 200b020:	2a006226 	beq	r5,r8,200b1ac <_realloc_r+0x210>
 200b024:	41800117 	ldw	r6,4(r8)
 200b028:	027fff84 	movi	r9,-2
 200b02c:	3252703a 	and	r9,r6,r9
 200b030:	4253883a 	add	r9,r8,r9
 200b034:	49000117 	ldw	r4,4(r9)
 200b038:	2100004c 	andi	r4,r4,1
 200b03c:	2000281e 	bne	r4,zero,200b0e0 <_realloc_r+0x144>
 200b040:	00bfff04 	movi	r2,-4
 200b044:	3084703a 	and	r2,r6,r2
 200b048:	1409883a 	add	r4,r2,r16
 200b04c:	21c05e16 	blt	r4,r7,200b1c8 <_realloc_r+0x22c>
 200b050:	40800317 	ldw	r2,12(r8)
 200b054:	41400217 	ldw	r5,8(r8)
 200b058:	a023883a 	mov	r17,r20
 200b05c:	2021883a 	mov	r16,r4
 200b060:	28800315 	stw	r2,12(r5)
 200b064:	11400215 	stw	r5,8(r2)
 200b068:	00000406 	br	200b07c <_realloc_r+0xe0>
 200b06c:	01c00404 	movi	r7,16
 200b070:	382d883a 	mov	r22,r7
 200b074:	003fe406 	br	200b008 <_realloc_r+0x6c>
 200b078:	a023883a 	mov	r17,r20
 200b07c:	858fc83a 	sub	r7,r16,r22
 200b080:	008003c4 	movi	r2,15
 200b084:	18c0004c 	andi	r3,r3,1
 200b088:	11c07236 	bltu	r2,r7,200b254 <_realloc_r+0x2b8>
 200b08c:	1c06b03a 	or	r3,r3,r16
 200b090:	a8c00115 	stw	r3,4(r21)
 200b094:	ac21883a 	add	r16,r21,r16
 200b098:	80800117 	ldw	r2,4(r16)
 200b09c:	10800054 	ori	r2,r2,1
 200b0a0:	80800115 	stw	r2,4(r16)
 200b0a4:	9009883a 	mov	r4,r18
 200b0a8:	20112280 	call	2011228 <__malloc_unlock>
 200b0ac:	8805883a 	mov	r2,r17
 200b0b0:	dfc00917 	ldw	ra,36(sp)
 200b0b4:	df000817 	ldw	fp,32(sp)
 200b0b8:	ddc00717 	ldw	r23,28(sp)
 200b0bc:	dd800617 	ldw	r22,24(sp)
 200b0c0:	dd400517 	ldw	r21,20(sp)
 200b0c4:	dd000417 	ldw	r20,16(sp)
 200b0c8:	dcc00317 	ldw	r19,12(sp)
 200b0cc:	dc800217 	ldw	r18,8(sp)
 200b0d0:	dc400117 	ldw	r17,4(sp)
 200b0d4:	dc000017 	ldw	r16,0(sp)
 200b0d8:	dec00a04 	addi	sp,sp,40
 200b0dc:	f800283a 	ret
 200b0e0:	18c0004c 	andi	r3,r3,1
 200b0e4:	1800081e 	bne	r3,zero,200b108 <_realloc_r+0x16c>
 200b0e8:	a4fffe17 	ldw	r19,-8(r20)
 200b0ec:	00bfff04 	movi	r2,-4
 200b0f0:	ace7c83a 	sub	r19,r21,r19
 200b0f4:	98c00117 	ldw	r3,4(r19)
 200b0f8:	1886703a 	and	r3,r3,r2
 200b0fc:	98000226 	beq	r19,zero,200b108 <_realloc_r+0x16c>
 200b100:	1c2f883a 	add	r23,r3,r16
 200b104:	b9c06d0e 	bge	r23,r7,200b2bc <_realloc_r+0x320>
 200b108:	880b883a 	mov	r5,r17
 200b10c:	9009883a 	mov	r4,r18
 200b110:	20095540 	call	2009554 <_malloc_r>
 200b114:	1023883a 	mov	r17,r2
 200b118:	1000ef26 	beq	r2,zero,200b4d8 <_realloc_r+0x53c>
 200b11c:	a0ffff17 	ldw	r3,-4(r20)
 200b120:	113ffe04 	addi	r4,r2,-8
 200b124:	00bfff84 	movi	r2,-2
 200b128:	1884703a 	and	r2,r3,r2
 200b12c:	a885883a 	add	r2,r21,r2
 200b130:	2080bf26 	beq	r4,r2,200b430 <_realloc_r+0x494>
 200b134:	81bfff04 	addi	r6,r16,-4
 200b138:	00800904 	movi	r2,36
 200b13c:	11808936 	bltu	r2,r6,200b364 <_realloc_r+0x3c8>
 200b140:	00c004c4 	movi	r3,19
 200b144:	19806c2e 	bgeu	r3,r6,200b2f8 <_realloc_r+0x35c>
 200b148:	a0c00017 	ldw	r3,0(r20)
 200b14c:	88c00015 	stw	r3,0(r17)
 200b150:	a0c00117 	ldw	r3,4(r20)
 200b154:	88c00115 	stw	r3,4(r17)
 200b158:	00c006c4 	movi	r3,27
 200b15c:	1980ac36 	bltu	r3,r6,200b410 <_realloc_r+0x474>
 200b160:	88800204 	addi	r2,r17,8
 200b164:	a0c00204 	addi	r3,r20,8
 200b168:	19000017 	ldw	r4,0(r3)
 200b16c:	11000015 	stw	r4,0(r2)
 200b170:	19000117 	ldw	r4,4(r3)
 200b174:	11000115 	stw	r4,4(r2)
 200b178:	18c00217 	ldw	r3,8(r3)
 200b17c:	10c00215 	stw	r3,8(r2)
 200b180:	a00b883a 	mov	r5,r20
 200b184:	9009883a 	mov	r4,r18
 200b188:	20089200 	call	2008920 <_free_r>
 200b18c:	9009883a 	mov	r4,r18
 200b190:	20112280 	call	2011228 <__malloc_unlock>
 200b194:	8805883a 	mov	r2,r17
 200b198:	003fc506 	br	200b0b0 <_realloc_r+0x114>
 200b19c:	00800304 	movi	r2,12
 200b1a0:	90800015 	stw	r2,0(r18)
 200b1a4:	0005883a 	mov	r2,zero
 200b1a8:	003fc106 	br	200b0b0 <_realloc_r+0x114>
 200b1ac:	29800117 	ldw	r6,4(r5)
 200b1b0:	00bfff04 	movi	r2,-4
 200b1b4:	b1000404 	addi	r4,r22,16
 200b1b8:	3084703a 	and	r2,r6,r2
 200b1bc:	140d883a 	add	r6,r2,r16
 200b1c0:	31005b0e 	bge	r6,r4,200b330 <_realloc_r+0x394>
 200b1c4:	2811883a 	mov	r8,r5
 200b1c8:	18c0004c 	andi	r3,r3,1
 200b1cc:	183fce1e 	bne	r3,zero,200b108 <_realloc_r+0x16c>
 200b1d0:	a4fffe17 	ldw	r19,-8(r20)
 200b1d4:	00ffff04 	movi	r3,-4
 200b1d8:	ace7c83a 	sub	r19,r21,r19
 200b1dc:	99000117 	ldw	r4,4(r19)
 200b1e0:	20c6703a 	and	r3,r4,r3
 200b1e4:	403fc526 	beq	r8,zero,200b0fc <_realloc_r+0x160>
 200b1e8:	1c2f883a 	add	r23,r3,r16
 200b1ec:	b8af883a 	add	r23,r23,r2
 200b1f0:	41406026 	beq	r8,r5,200b374 <_realloc_r+0x3d8>
 200b1f4:	b9ffc116 	blt	r23,r7,200b0fc <_realloc_r+0x160>
 200b1f8:	40c00217 	ldw	r3,8(r8)
 200b1fc:	40800317 	ldw	r2,12(r8)
 200b200:	81bfff04 	addi	r6,r16,-4
 200b204:	01000904 	movi	r4,36
 200b208:	18800315 	stw	r2,12(r3)
 200b20c:	10c00215 	stw	r3,8(r2)
 200b210:	99400217 	ldw	r5,8(r19)
 200b214:	98c00317 	ldw	r3,12(r19)
 200b218:	9c400204 	addi	r17,r19,8
 200b21c:	28c00315 	stw	r3,12(r5)
 200b220:	19400215 	stw	r5,8(r3)
 200b224:	21802d36 	bltu	r4,r6,200b2dc <_realloc_r+0x340>
 200b228:	008004c4 	movi	r2,19
 200b22c:	1180352e 	bgeu	r2,r6,200b304 <_realloc_r+0x368>
 200b230:	a0800017 	ldw	r2,0(r20)
 200b234:	98800215 	stw	r2,8(r19)
 200b238:	a0800117 	ldw	r2,4(r20)
 200b23c:	98800315 	stw	r2,12(r19)
 200b240:	008006c4 	movi	r2,27
 200b244:	11808036 	bltu	r2,r6,200b448 <_realloc_r+0x4ac>
 200b248:	98c00404 	addi	r3,r19,16
 200b24c:	a5000204 	addi	r20,r20,8
 200b250:	00002d06 	br	200b308 <_realloc_r+0x36c>
 200b254:	1d86b03a 	or	r3,r3,r22
 200b258:	ad8b883a 	add	r5,r21,r22
 200b25c:	a8c00115 	stw	r3,4(r21)
 200b260:	38800054 	ori	r2,r7,1
 200b264:	28800115 	stw	r2,4(r5)
 200b268:	29cf883a 	add	r7,r5,r7
 200b26c:	38800117 	ldw	r2,4(r7)
 200b270:	9009883a 	mov	r4,r18
 200b274:	29400204 	addi	r5,r5,8
 200b278:	10800054 	ori	r2,r2,1
 200b27c:	38800115 	stw	r2,4(r7)
 200b280:	20089200 	call	2008920 <_free_r>
 200b284:	003f8706 	br	200b0a4 <_realloc_r+0x108>
 200b288:	300b883a 	mov	r5,r6
 200b28c:	dfc00917 	ldw	ra,36(sp)
 200b290:	df000817 	ldw	fp,32(sp)
 200b294:	ddc00717 	ldw	r23,28(sp)
 200b298:	dd800617 	ldw	r22,24(sp)
 200b29c:	dd400517 	ldw	r21,20(sp)
 200b2a0:	dd000417 	ldw	r20,16(sp)
 200b2a4:	dcc00317 	ldw	r19,12(sp)
 200b2a8:	dc800217 	ldw	r18,8(sp)
 200b2ac:	dc400117 	ldw	r17,4(sp)
 200b2b0:	dc000017 	ldw	r16,0(sp)
 200b2b4:	dec00a04 	addi	sp,sp,40
 200b2b8:	20095541 	jmpi	2009554 <_malloc_r>
 200b2bc:	98800317 	ldw	r2,12(r19)
 200b2c0:	98c00217 	ldw	r3,8(r19)
 200b2c4:	81bfff04 	addi	r6,r16,-4
 200b2c8:	01000904 	movi	r4,36
 200b2cc:	18800315 	stw	r2,12(r3)
 200b2d0:	10c00215 	stw	r3,8(r2)
 200b2d4:	9c400204 	addi	r17,r19,8
 200b2d8:	21bfd32e 	bgeu	r4,r6,200b228 <_realloc_r+0x28c>
 200b2dc:	8809883a 	mov	r4,r17
 200b2e0:	a00b883a 	mov	r5,r20
 200b2e4:	2009de40 	call	2009de4 <memmove>
 200b2e8:	98c00117 	ldw	r3,4(r19)
 200b2ec:	b821883a 	mov	r16,r23
 200b2f0:	982b883a 	mov	r21,r19
 200b2f4:	003f6106 	br	200b07c <_realloc_r+0xe0>
 200b2f8:	8805883a 	mov	r2,r17
 200b2fc:	a007883a 	mov	r3,r20
 200b300:	003f9906 	br	200b168 <_realloc_r+0x1cc>
 200b304:	8807883a 	mov	r3,r17
 200b308:	a0800017 	ldw	r2,0(r20)
 200b30c:	b821883a 	mov	r16,r23
 200b310:	982b883a 	mov	r21,r19
 200b314:	18800015 	stw	r2,0(r3)
 200b318:	a0800117 	ldw	r2,4(r20)
 200b31c:	18800115 	stw	r2,4(r3)
 200b320:	a0800217 	ldw	r2,8(r20)
 200b324:	18800215 	stw	r2,8(r3)
 200b328:	98c00117 	ldw	r3,4(r19)
 200b32c:	003f5306 	br	200b07c <_realloc_r+0xe0>
 200b330:	adab883a 	add	r21,r21,r22
 200b334:	3585c83a 	sub	r2,r6,r22
 200b338:	e5400215 	stw	r21,8(fp)
 200b33c:	10800054 	ori	r2,r2,1
 200b340:	a8800115 	stw	r2,4(r21)
 200b344:	a0bfff17 	ldw	r2,-4(r20)
 200b348:	9009883a 	mov	r4,r18
 200b34c:	1080004c 	andi	r2,r2,1
 200b350:	b0acb03a 	or	r22,r22,r2
 200b354:	a5bfff15 	stw	r22,-4(r20)
 200b358:	20112280 	call	2011228 <__malloc_unlock>
 200b35c:	a005883a 	mov	r2,r20
 200b360:	003f5306 	br	200b0b0 <_realloc_r+0x114>
 200b364:	8809883a 	mov	r4,r17
 200b368:	a00b883a 	mov	r5,r20
 200b36c:	2009de40 	call	2009de4 <memmove>
 200b370:	003f8306 	br	200b180 <_realloc_r+0x1e4>
 200b374:	b0800404 	addi	r2,r22,16
 200b378:	b8bf6016 	blt	r23,r2,200b0fc <_realloc_r+0x160>
 200b37c:	98800317 	ldw	r2,12(r19)
 200b380:	98c00217 	ldw	r3,8(r19)
 200b384:	81bfff04 	addi	r6,r16,-4
 200b388:	01000904 	movi	r4,36
 200b38c:	18800315 	stw	r2,12(r3)
 200b390:	10c00215 	stw	r3,8(r2)
 200b394:	9c400204 	addi	r17,r19,8
 200b398:	21804336 	bltu	r4,r6,200b4a8 <_realloc_r+0x50c>
 200b39c:	008004c4 	movi	r2,19
 200b3a0:	11803f2e 	bgeu	r2,r6,200b4a0 <_realloc_r+0x504>
 200b3a4:	a0800017 	ldw	r2,0(r20)
 200b3a8:	98800215 	stw	r2,8(r19)
 200b3ac:	a0800117 	ldw	r2,4(r20)
 200b3b0:	98800315 	stw	r2,12(r19)
 200b3b4:	008006c4 	movi	r2,27
 200b3b8:	11803f36 	bltu	r2,r6,200b4b8 <_realloc_r+0x51c>
 200b3bc:	98800404 	addi	r2,r19,16
 200b3c0:	a5000204 	addi	r20,r20,8
 200b3c4:	a0c00017 	ldw	r3,0(r20)
 200b3c8:	10c00015 	stw	r3,0(r2)
 200b3cc:	a0c00117 	ldw	r3,4(r20)
 200b3d0:	10c00115 	stw	r3,4(r2)
 200b3d4:	a0c00217 	ldw	r3,8(r20)
 200b3d8:	10c00215 	stw	r3,8(r2)
 200b3dc:	9d87883a 	add	r3,r19,r22
 200b3e0:	bd85c83a 	sub	r2,r23,r22
 200b3e4:	e0c00215 	stw	r3,8(fp)
 200b3e8:	10800054 	ori	r2,r2,1
 200b3ec:	18800115 	stw	r2,4(r3)
 200b3f0:	98800117 	ldw	r2,4(r19)
 200b3f4:	9009883a 	mov	r4,r18
 200b3f8:	1080004c 	andi	r2,r2,1
 200b3fc:	b0acb03a 	or	r22,r22,r2
 200b400:	9d800115 	stw	r22,4(r19)
 200b404:	20112280 	call	2011228 <__malloc_unlock>
 200b408:	8805883a 	mov	r2,r17
 200b40c:	003f2806 	br	200b0b0 <_realloc_r+0x114>
 200b410:	a0c00217 	ldw	r3,8(r20)
 200b414:	88c00215 	stw	r3,8(r17)
 200b418:	a0c00317 	ldw	r3,12(r20)
 200b41c:	88c00315 	stw	r3,12(r17)
 200b420:	30801126 	beq	r6,r2,200b468 <_realloc_r+0x4cc>
 200b424:	88800404 	addi	r2,r17,16
 200b428:	a0c00404 	addi	r3,r20,16
 200b42c:	003f4e06 	br	200b168 <_realloc_r+0x1cc>
 200b430:	893fff17 	ldw	r4,-4(r17)
 200b434:	00bfff04 	movi	r2,-4
 200b438:	a023883a 	mov	r17,r20
 200b43c:	2084703a 	and	r2,r4,r2
 200b440:	80a1883a 	add	r16,r16,r2
 200b444:	003f0d06 	br	200b07c <_realloc_r+0xe0>
 200b448:	a0800217 	ldw	r2,8(r20)
 200b44c:	98800415 	stw	r2,16(r19)
 200b450:	a0800317 	ldw	r2,12(r20)
 200b454:	98800515 	stw	r2,20(r19)
 200b458:	31000a26 	beq	r6,r4,200b484 <_realloc_r+0x4e8>
 200b45c:	98c00604 	addi	r3,r19,24
 200b460:	a5000404 	addi	r20,r20,16
 200b464:	003fa806 	br	200b308 <_realloc_r+0x36c>
 200b468:	a1000417 	ldw	r4,16(r20)
 200b46c:	88800604 	addi	r2,r17,24
 200b470:	a0c00604 	addi	r3,r20,24
 200b474:	89000415 	stw	r4,16(r17)
 200b478:	a1000517 	ldw	r4,20(r20)
 200b47c:	89000515 	stw	r4,20(r17)
 200b480:	003f3906 	br	200b168 <_realloc_r+0x1cc>
 200b484:	a0800417 	ldw	r2,16(r20)
 200b488:	a5000604 	addi	r20,r20,24
 200b48c:	98c00804 	addi	r3,r19,32
 200b490:	98800615 	stw	r2,24(r19)
 200b494:	a0bfff17 	ldw	r2,-4(r20)
 200b498:	98800715 	stw	r2,28(r19)
 200b49c:	003f9a06 	br	200b308 <_realloc_r+0x36c>
 200b4a0:	8805883a 	mov	r2,r17
 200b4a4:	003fc706 	br	200b3c4 <_realloc_r+0x428>
 200b4a8:	8809883a 	mov	r4,r17
 200b4ac:	a00b883a 	mov	r5,r20
 200b4b0:	2009de40 	call	2009de4 <memmove>
 200b4b4:	003fc906 	br	200b3dc <_realloc_r+0x440>
 200b4b8:	a0800217 	ldw	r2,8(r20)
 200b4bc:	98800415 	stw	r2,16(r19)
 200b4c0:	a0800317 	ldw	r2,12(r20)
 200b4c4:	98800515 	stw	r2,20(r19)
 200b4c8:	31000726 	beq	r6,r4,200b4e8 <_realloc_r+0x54c>
 200b4cc:	98800604 	addi	r2,r19,24
 200b4d0:	a5000404 	addi	r20,r20,16
 200b4d4:	003fbb06 	br	200b3c4 <_realloc_r+0x428>
 200b4d8:	9009883a 	mov	r4,r18
 200b4dc:	20112280 	call	2011228 <__malloc_unlock>
 200b4e0:	0005883a 	mov	r2,zero
 200b4e4:	003ef206 	br	200b0b0 <_realloc_r+0x114>
 200b4e8:	a0c00417 	ldw	r3,16(r20)
 200b4ec:	a5000604 	addi	r20,r20,24
 200b4f0:	98800804 	addi	r2,r19,32
 200b4f4:	98c00615 	stw	r3,24(r19)
 200b4f8:	a0ffff17 	ldw	r3,-4(r20)
 200b4fc:	98c00715 	stw	r3,28(r19)
 200b500:	003fb006 	br	200b3c4 <_realloc_r+0x428>

0200b504 <__fpclassifyd>:
 200b504:	00a00034 	movhi	r2,32768
 200b508:	10bfffc4 	addi	r2,r2,-1
 200b50c:	2884703a 	and	r2,r5,r2
 200b510:	10000726 	beq	r2,zero,200b530 <__fpclassifyd+0x2c>
 200b514:	00fffc34 	movhi	r3,65520
 200b518:	019ff834 	movhi	r6,32736
 200b51c:	28c7883a 	add	r3,r5,r3
 200b520:	31bfffc4 	addi	r6,r6,-1
 200b524:	30c00536 	bltu	r6,r3,200b53c <__fpclassifyd+0x38>
 200b528:	00800104 	movi	r2,4
 200b52c:	f800283a 	ret
 200b530:	2000021e 	bne	r4,zero,200b53c <__fpclassifyd+0x38>
 200b534:	00800084 	movi	r2,2
 200b538:	f800283a 	ret
 200b53c:	00dffc34 	movhi	r3,32752
 200b540:	019ff834 	movhi	r6,32736
 200b544:	28cb883a 	add	r5,r5,r3
 200b548:	31bfffc4 	addi	r6,r6,-1
 200b54c:	317ff62e 	bgeu	r6,r5,200b528 <__fpclassifyd+0x24>
 200b550:	01400434 	movhi	r5,16
 200b554:	297fffc4 	addi	r5,r5,-1
 200b558:	28800236 	bltu	r5,r2,200b564 <__fpclassifyd+0x60>
 200b55c:	008000c4 	movi	r2,3
 200b560:	f800283a 	ret
 200b564:	10c00226 	beq	r2,r3,200b570 <__fpclassifyd+0x6c>
 200b568:	0005883a 	mov	r2,zero
 200b56c:	f800283a 	ret
 200b570:	2005003a 	cmpeq	r2,r4,zero
 200b574:	f800283a 	ret

0200b578 <_sbrk_r>:
 200b578:	defffd04 	addi	sp,sp,-12
 200b57c:	dc000015 	stw	r16,0(sp)
 200b580:	040080b4 	movhi	r16,514
 200b584:	dc400115 	stw	r17,4(sp)
 200b588:	842a7c04 	addi	r16,r16,-22032
 200b58c:	2023883a 	mov	r17,r4
 200b590:	2809883a 	mov	r4,r5
 200b594:	dfc00215 	stw	ra,8(sp)
 200b598:	80000015 	stw	zero,0(r16)
 200b59c:	201141c0 	call	201141c <sbrk>
 200b5a0:	00ffffc4 	movi	r3,-1
 200b5a4:	10c00526 	beq	r2,r3,200b5bc <_sbrk_r+0x44>
 200b5a8:	dfc00217 	ldw	ra,8(sp)
 200b5ac:	dc400117 	ldw	r17,4(sp)
 200b5b0:	dc000017 	ldw	r16,0(sp)
 200b5b4:	dec00304 	addi	sp,sp,12
 200b5b8:	f800283a 	ret
 200b5bc:	80c00017 	ldw	r3,0(r16)
 200b5c0:	183ff926 	beq	r3,zero,200b5a8 <_sbrk_r+0x30>
 200b5c4:	88c00015 	stw	r3,0(r17)
 200b5c8:	003ff706 	br	200b5a8 <_sbrk_r+0x30>

0200b5cc <__sread>:
 200b5cc:	defffe04 	addi	sp,sp,-8
 200b5d0:	dc000015 	stw	r16,0(sp)
 200b5d4:	2821883a 	mov	r16,r5
 200b5d8:	2940038f 	ldh	r5,14(r5)
 200b5dc:	dfc00115 	stw	ra,4(sp)
 200b5e0:	200d2040 	call	200d204 <_read_r>
 200b5e4:	10000716 	blt	r2,zero,200b604 <__sread+0x38>
 200b5e8:	80c01417 	ldw	r3,80(r16)
 200b5ec:	1887883a 	add	r3,r3,r2
 200b5f0:	80c01415 	stw	r3,80(r16)
 200b5f4:	dfc00117 	ldw	ra,4(sp)
 200b5f8:	dc000017 	ldw	r16,0(sp)
 200b5fc:	dec00204 	addi	sp,sp,8
 200b600:	f800283a 	ret
 200b604:	80c0030b 	ldhu	r3,12(r16)
 200b608:	18fbffcc 	andi	r3,r3,61439
 200b60c:	80c0030d 	sth	r3,12(r16)
 200b610:	dfc00117 	ldw	ra,4(sp)
 200b614:	dc000017 	ldw	r16,0(sp)
 200b618:	dec00204 	addi	sp,sp,8
 200b61c:	f800283a 	ret

0200b620 <__seofread>:
 200b620:	0005883a 	mov	r2,zero
 200b624:	f800283a 	ret

0200b628 <__swrite>:
 200b628:	2880030b 	ldhu	r2,12(r5)
 200b62c:	defffb04 	addi	sp,sp,-20
 200b630:	dcc00315 	stw	r19,12(sp)
 200b634:	dc800215 	stw	r18,8(sp)
 200b638:	dc400115 	stw	r17,4(sp)
 200b63c:	dc000015 	stw	r16,0(sp)
 200b640:	dfc00415 	stw	ra,16(sp)
 200b644:	10c0400c 	andi	r3,r2,256
 200b648:	2821883a 	mov	r16,r5
 200b64c:	2027883a 	mov	r19,r4
 200b650:	3025883a 	mov	r18,r6
 200b654:	3823883a 	mov	r17,r7
 200b658:	18000526 	beq	r3,zero,200b670 <__swrite+0x48>
 200b65c:	2940038f 	ldh	r5,14(r5)
 200b660:	000d883a 	mov	r6,zero
 200b664:	01c00084 	movi	r7,2
 200b668:	200d1a80 	call	200d1a8 <_lseek_r>
 200b66c:	8080030b 	ldhu	r2,12(r16)
 200b670:	8140038f 	ldh	r5,14(r16)
 200b674:	10bbffcc 	andi	r2,r2,61439
 200b678:	9809883a 	mov	r4,r19
 200b67c:	900d883a 	mov	r6,r18
 200b680:	880f883a 	mov	r7,r17
 200b684:	8080030d 	sth	r2,12(r16)
 200b688:	dfc00417 	ldw	ra,16(sp)
 200b68c:	dcc00317 	ldw	r19,12(sp)
 200b690:	dc800217 	ldw	r18,8(sp)
 200b694:	dc400117 	ldw	r17,4(sp)
 200b698:	dc000017 	ldw	r16,0(sp)
 200b69c:	dec00504 	addi	sp,sp,20
 200b6a0:	200cc901 	jmpi	200cc90 <_write_r>

0200b6a4 <__sseek>:
 200b6a4:	defffe04 	addi	sp,sp,-8
 200b6a8:	dc000015 	stw	r16,0(sp)
 200b6ac:	2821883a 	mov	r16,r5
 200b6b0:	2940038f 	ldh	r5,14(r5)
 200b6b4:	dfc00115 	stw	ra,4(sp)
 200b6b8:	200d1a80 	call	200d1a8 <_lseek_r>
 200b6bc:	00ffffc4 	movi	r3,-1
 200b6c0:	10c00826 	beq	r2,r3,200b6e4 <__sseek+0x40>
 200b6c4:	80c0030b 	ldhu	r3,12(r16)
 200b6c8:	80801415 	stw	r2,80(r16)
 200b6cc:	18c40014 	ori	r3,r3,4096
 200b6d0:	80c0030d 	sth	r3,12(r16)
 200b6d4:	dfc00117 	ldw	ra,4(sp)
 200b6d8:	dc000017 	ldw	r16,0(sp)
 200b6dc:	dec00204 	addi	sp,sp,8
 200b6e0:	f800283a 	ret
 200b6e4:	80c0030b 	ldhu	r3,12(r16)
 200b6e8:	18fbffcc 	andi	r3,r3,61439
 200b6ec:	80c0030d 	sth	r3,12(r16)
 200b6f0:	dfc00117 	ldw	ra,4(sp)
 200b6f4:	dc000017 	ldw	r16,0(sp)
 200b6f8:	dec00204 	addi	sp,sp,8
 200b6fc:	f800283a 	ret

0200b700 <__sclose>:
 200b700:	2940038f 	ldh	r5,14(r5)
 200b704:	200ccec1 	jmpi	200ccec <_close_r>

0200b708 <strcmp>:
 200b708:	2144b03a 	or	r2,r4,r5
 200b70c:	108000cc 	andi	r2,r2,3
 200b710:	1000171e 	bne	r2,zero,200b770 <strcmp+0x68>
 200b714:	20800017 	ldw	r2,0(r4)
 200b718:	28c00017 	ldw	r3,0(r5)
 200b71c:	10c0141e 	bne	r2,r3,200b770 <strcmp+0x68>
 200b720:	027fbff4 	movhi	r9,65279
 200b724:	4a7fbfc4 	addi	r9,r9,-257
 200b728:	0086303a 	nor	r3,zero,r2
 200b72c:	02202074 	movhi	r8,32897
 200b730:	1245883a 	add	r2,r2,r9
 200b734:	42202004 	addi	r8,r8,-32640
 200b738:	10c4703a 	and	r2,r2,r3
 200b73c:	1204703a 	and	r2,r2,r8
 200b740:	10000226 	beq	r2,zero,200b74c <strcmp+0x44>
 200b744:	00001706 	br	200b7a4 <strcmp+0x9c>
 200b748:	1000161e 	bne	r2,zero,200b7a4 <strcmp+0x9c>
 200b74c:	21000104 	addi	r4,r4,4
 200b750:	20c00017 	ldw	r3,0(r4)
 200b754:	29400104 	addi	r5,r5,4
 200b758:	29800017 	ldw	r6,0(r5)
 200b75c:	1a4f883a 	add	r7,r3,r9
 200b760:	00c4303a 	nor	r2,zero,r3
 200b764:	3884703a 	and	r2,r7,r2
 200b768:	1204703a 	and	r2,r2,r8
 200b76c:	19bff626 	beq	r3,r6,200b748 <strcmp+0x40>
 200b770:	20800007 	ldb	r2,0(r4)
 200b774:	1000051e 	bne	r2,zero,200b78c <strcmp+0x84>
 200b778:	00000606 	br	200b794 <strcmp+0x8c>
 200b77c:	21000044 	addi	r4,r4,1
 200b780:	20800007 	ldb	r2,0(r4)
 200b784:	29400044 	addi	r5,r5,1
 200b788:	10000226 	beq	r2,zero,200b794 <strcmp+0x8c>
 200b78c:	28c00007 	ldb	r3,0(r5)
 200b790:	10fffa26 	beq	r2,r3,200b77c <strcmp+0x74>
 200b794:	20800003 	ldbu	r2,0(r4)
 200b798:	28c00003 	ldbu	r3,0(r5)
 200b79c:	10c5c83a 	sub	r2,r2,r3
 200b7a0:	f800283a 	ret
 200b7a4:	0005883a 	mov	r2,zero
 200b7a8:	f800283a 	ret

0200b7ac <__sprint_r.part.0>:
 200b7ac:	28801917 	ldw	r2,100(r5)
 200b7b0:	defff604 	addi	sp,sp,-40
 200b7b4:	dd400515 	stw	r21,20(sp)
 200b7b8:	dcc00315 	stw	r19,12(sp)
 200b7bc:	dfc00915 	stw	ra,36(sp)
 200b7c0:	df000815 	stw	fp,32(sp)
 200b7c4:	ddc00715 	stw	r23,28(sp)
 200b7c8:	dd800615 	stw	r22,24(sp)
 200b7cc:	dd000415 	stw	r20,16(sp)
 200b7d0:	dc800215 	stw	r18,8(sp)
 200b7d4:	dc400115 	stw	r17,4(sp)
 200b7d8:	dc000015 	stw	r16,0(sp)
 200b7dc:	1088000c 	andi	r2,r2,8192
 200b7e0:	2827883a 	mov	r19,r5
 200b7e4:	302b883a 	mov	r21,r6
 200b7e8:	10002d26 	beq	r2,zero,200b8a0 <__sprint_r.part.0+0xf4>
 200b7ec:	30800217 	ldw	r2,8(r6)
 200b7f0:	35800017 	ldw	r22,0(r6)
 200b7f4:	10002826 	beq	r2,zero,200b898 <__sprint_r.part.0+0xec>
 200b7f8:	2029883a 	mov	r20,r4
 200b7fc:	b5c00104 	addi	r23,r22,4
 200b800:	04bfffc4 	movi	r18,-1
 200b804:	bc400017 	ldw	r17,0(r23)
 200b808:	b4000017 	ldw	r16,0(r22)
 200b80c:	0039883a 	mov	fp,zero
 200b810:	8822d0ba 	srli	r17,r17,2
 200b814:	04400316 	blt	zero,r17,200b824 <__sprint_r.part.0+0x78>
 200b818:	00001806 	br	200b87c <__sprint_r.part.0+0xd0>
 200b81c:	84000104 	addi	r16,r16,4
 200b820:	8f001526 	beq	r17,fp,200b878 <__sprint_r.part.0+0xcc>
 200b824:	81400017 	ldw	r5,0(r16)
 200b828:	a009883a 	mov	r4,r20
 200b82c:	980d883a 	mov	r6,r19
 200b830:	200cf1c0 	call	200cf1c <_fputwc_r>
 200b834:	e7000044 	addi	fp,fp,1
 200b838:	14bff81e 	bne	r2,r18,200b81c <__sprint_r.part.0+0x70>
 200b83c:	9005883a 	mov	r2,r18
 200b840:	a8000215 	stw	zero,8(r21)
 200b844:	a8000115 	stw	zero,4(r21)
 200b848:	dfc00917 	ldw	ra,36(sp)
 200b84c:	df000817 	ldw	fp,32(sp)
 200b850:	ddc00717 	ldw	r23,28(sp)
 200b854:	dd800617 	ldw	r22,24(sp)
 200b858:	dd400517 	ldw	r21,20(sp)
 200b85c:	dd000417 	ldw	r20,16(sp)
 200b860:	dcc00317 	ldw	r19,12(sp)
 200b864:	dc800217 	ldw	r18,8(sp)
 200b868:	dc400117 	ldw	r17,4(sp)
 200b86c:	dc000017 	ldw	r16,0(sp)
 200b870:	dec00a04 	addi	sp,sp,40
 200b874:	f800283a 	ret
 200b878:	a8800217 	ldw	r2,8(r21)
 200b87c:	8c63883a 	add	r17,r17,r17
 200b880:	8c63883a 	add	r17,r17,r17
 200b884:	1445c83a 	sub	r2,r2,r17
 200b888:	a8800215 	stw	r2,8(r21)
 200b88c:	b5800204 	addi	r22,r22,8
 200b890:	bdc00204 	addi	r23,r23,8
 200b894:	103fdb1e 	bne	r2,zero,200b804 <__sprint_r.part.0+0x58>
 200b898:	0005883a 	mov	r2,zero
 200b89c:	003fe806 	br	200b840 <__sprint_r.part.0+0x94>
 200b8a0:	2008c100 	call	2008c10 <__sfvwrite_r>
 200b8a4:	003fe606 	br	200b840 <__sprint_r.part.0+0x94>

0200b8a8 <__sprint_r>:
 200b8a8:	30c00217 	ldw	r3,8(r6)
 200b8ac:	18000126 	beq	r3,zero,200b8b4 <__sprint_r+0xc>
 200b8b0:	200b7ac1 	jmpi	200b7ac <__sprint_r.part.0>
 200b8b4:	30000115 	stw	zero,4(r6)
 200b8b8:	0005883a 	mov	r2,zero
 200b8bc:	f800283a 	ret

0200b8c0 <___vfiprintf_internal_r>:
 200b8c0:	deffca04 	addi	sp,sp,-216
 200b8c4:	dcc02f15 	stw	r19,188(sp)
 200b8c8:	dfc03515 	stw	ra,212(sp)
 200b8cc:	df003415 	stw	fp,208(sp)
 200b8d0:	ddc03315 	stw	r23,204(sp)
 200b8d4:	dd803215 	stw	r22,200(sp)
 200b8d8:	dd403115 	stw	r21,196(sp)
 200b8dc:	dd003015 	stw	r20,192(sp)
 200b8e0:	dc802e15 	stw	r18,184(sp)
 200b8e4:	dc402d15 	stw	r17,180(sp)
 200b8e8:	dc002c15 	stw	r16,176(sp)
 200b8ec:	d9002215 	stw	r4,136(sp)
 200b8f0:	d9402115 	stw	r5,132(sp)
 200b8f4:	d9c02315 	stw	r7,140(sp)
 200b8f8:	3027883a 	mov	r19,r6
 200b8fc:	20000226 	beq	r4,zero,200b908 <___vfiprintf_internal_r+0x48>
 200b900:	20800e17 	ldw	r2,56(r4)
 200b904:	10018d26 	beq	r2,zero,200bf3c <___vfiprintf_internal_r+0x67c>
 200b908:	d8c02117 	ldw	r3,132(sp)
 200b90c:	1880030b 	ldhu	r2,12(r3)
 200b910:	10c8000c 	andi	r3,r2,8192
 200b914:	1800071e 	bne	r3,zero,200b934 <___vfiprintf_internal_r+0x74>
 200b918:	d9402117 	ldw	r5,132(sp)
 200b91c:	00f7ffc4 	movi	r3,-8193
 200b920:	10880014 	ori	r2,r2,8192
 200b924:	29001917 	ldw	r4,100(r5)
 200b928:	2880030d 	sth	r2,12(r5)
 200b92c:	20c6703a 	and	r3,r4,r3
 200b930:	28c01915 	stw	r3,100(r5)
 200b934:	10c0020c 	andi	r3,r2,8
 200b938:	18016126 	beq	r3,zero,200bec0 <___vfiprintf_internal_r+0x600>
 200b93c:	d9002117 	ldw	r4,132(sp)
 200b940:	20c00417 	ldw	r3,16(r4)
 200b944:	18015e26 	beq	r3,zero,200bec0 <___vfiprintf_internal_r+0x600>
 200b948:	1080068c 	andi	r2,r2,26
 200b94c:	00c00284 	movi	r3,10
 200b950:	10c16426 	beq	r2,r3,200bee4 <___vfiprintf_internal_r+0x624>
 200b954:	d9001a04 	addi	r4,sp,104
 200b958:	d94019c4 	addi	r5,sp,103
 200b95c:	044080b4 	movhi	r17,514
 200b960:	2145c83a 	sub	r2,r4,r5
 200b964:	8c632304 	addi	r17,r17,-29556
 200b968:	d9001e15 	stw	r4,120(sp)
 200b96c:	d9401f15 	stw	r5,124(sp)
 200b970:	dec01a15 	stw	sp,104(sp)
 200b974:	d8001c15 	stw	zero,112(sp)
 200b978:	d8001b15 	stw	zero,108(sp)
 200b97c:	d8002715 	stw	zero,156(sp)
 200b980:	d8002515 	stw	zero,148(sp)
 200b984:	d8802815 	stw	r2,160(sp)
 200b988:	d829883a 	mov	r20,sp
 200b98c:	982d883a 	mov	r22,r19
 200b990:	b0800007 	ldb	r2,0(r22)
 200b994:	10038126 	beq	r2,zero,200c79c <___vfiprintf_internal_r+0xedc>
 200b998:	01000944 	movi	r4,37
 200b99c:	11037f26 	beq	r2,r4,200c79c <___vfiprintf_internal_r+0xedc>
 200b9a0:	b005883a 	mov	r2,r22
 200b9a4:	00000106 	br	200b9ac <___vfiprintf_internal_r+0xec>
 200b9a8:	19000326 	beq	r3,r4,200b9b8 <___vfiprintf_internal_r+0xf8>
 200b9ac:	10800044 	addi	r2,r2,1
 200b9b0:	10c00007 	ldb	r3,0(r2)
 200b9b4:	183ffc1e 	bne	r3,zero,200b9a8 <___vfiprintf_internal_r+0xe8>
 200b9b8:	15a1c83a 	sub	r16,r2,r22
 200b9bc:	102b883a 	mov	r21,r2
 200b9c0:	80001026 	beq	r16,zero,200ba04 <___vfiprintf_internal_r+0x144>
 200b9c4:	d8c01c17 	ldw	r3,112(sp)
 200b9c8:	d8801b17 	ldw	r2,108(sp)
 200b9cc:	a5800015 	stw	r22,0(r20)
 200b9d0:	80c7883a 	add	r3,r16,r3
 200b9d4:	10800044 	addi	r2,r2,1
 200b9d8:	a4000115 	stw	r16,4(r20)
 200b9dc:	d8c01c15 	stw	r3,112(sp)
 200b9e0:	d8801b15 	stw	r2,108(sp)
 200b9e4:	010001c4 	movi	r4,7
 200b9e8:	2080730e 	bge	r4,r2,200bbb8 <___vfiprintf_internal_r+0x2f8>
 200b9ec:	1803781e 	bne	r3,zero,200c7d0 <___vfiprintf_internal_r+0xf10>
 200b9f0:	d8c02517 	ldw	r3,148(sp)
 200b9f4:	d8001b15 	stw	zero,108(sp)
 200b9f8:	d829883a 	mov	r20,sp
 200b9fc:	1c07883a 	add	r3,r3,r16
 200ba00:	d8c02515 	stw	r3,148(sp)
 200ba04:	a8800007 	ldb	r2,0(r21)
 200ba08:	1002a126 	beq	r2,zero,200c490 <___vfiprintf_internal_r+0xbd0>
 200ba0c:	a8800044 	addi	r2,r21,1
 200ba10:	a9800047 	ldb	r6,1(r21)
 200ba14:	d8001d85 	stb	zero,118(sp)
 200ba18:	d8002005 	stb	zero,128(sp)
 200ba1c:	043fffc4 	movi	r16,-1
 200ba20:	d8002415 	stw	zero,144(sp)
 200ba24:	0025883a 	mov	r18,zero
 200ba28:	05401604 	movi	r21,88
 200ba2c:	04c00244 	movi	r19,9
 200ba30:	15800044 	addi	r22,r2,1
 200ba34:	30bff804 	addi	r2,r6,-32
 200ba38:	a8823d36 	bltu	r21,r2,200c330 <___vfiprintf_internal_r+0xa70>
 200ba3c:	100490ba 	slli	r2,r2,2
 200ba40:	01008074 	movhi	r4,513
 200ba44:	212e9504 	addi	r4,r4,-17836
 200ba48:	1105883a 	add	r2,r2,r4
 200ba4c:	10800017 	ldw	r2,0(r2)
 200ba50:	1000683a 	jmp	r2
 200ba54:	0200c170 	cmpltui	r8,zero,773
 200ba58:	0200c330 	cmpltui	r8,zero,780
 200ba5c:	0200c330 	cmpltui	r8,zero,780
 200ba60:	0200c18c 	andi	r8,zero,774
 200ba64:	0200c330 	cmpltui	r8,zero,780
 200ba68:	0200c330 	cmpltui	r8,zero,780
 200ba6c:	0200c330 	cmpltui	r8,zero,780
 200ba70:	0200c330 	cmpltui	r8,zero,780
 200ba74:	0200c330 	cmpltui	r8,zero,780
 200ba78:	0200c330 	cmpltui	r8,zero,780
 200ba7c:	0200c19c 	xori	r8,zero,774
 200ba80:	0200c1c4 	movi	r8,775
 200ba84:	0200c330 	cmpltui	r8,zero,780
 200ba88:	0200bf44 	movi	r8,765
 200ba8c:	0200c0c8 	cmpgei	r8,zero,771
 200ba90:	0200c330 	cmpltui	r8,zero,780
 200ba94:	0200c038 	rdprs	r8,zero,768
 200ba98:	0200c048 	cmpgei	r8,zero,769
 200ba9c:	0200c048 	cmpgei	r8,zero,769
 200baa0:	0200c048 	cmpgei	r8,zero,769
 200baa4:	0200c048 	cmpgei	r8,zero,769
 200baa8:	0200c048 	cmpgei	r8,zero,769
 200baac:	0200c048 	cmpgei	r8,zero,769
 200bab0:	0200c048 	cmpgei	r8,zero,769
 200bab4:	0200c048 	cmpgei	r8,zero,769
 200bab8:	0200c048 	cmpgei	r8,zero,769
 200babc:	0200c330 	cmpltui	r8,zero,780
 200bac0:	0200c330 	cmpltui	r8,zero,780
 200bac4:	0200c330 	cmpltui	r8,zero,780
 200bac8:	0200c330 	cmpltui	r8,zero,780
 200bacc:	0200c330 	cmpltui	r8,zero,780
 200bad0:	0200c330 	cmpltui	r8,zero,780
 200bad4:	0200c330 	cmpltui	r8,zero,780
 200bad8:	0200c330 	cmpltui	r8,zero,780
 200badc:	0200c330 	cmpltui	r8,zero,780
 200bae0:	0200c330 	cmpltui	r8,zero,780
 200bae4:	0200c080 	call	200c08 <__alt_mem_sdram-0x1dff3f8>
 200bae8:	0200c330 	cmpltui	r8,zero,780
 200baec:	0200c330 	cmpltui	r8,zero,780
 200baf0:	0200c330 	cmpltui	r8,zero,780
 200baf4:	0200c330 	cmpltui	r8,zero,780
 200baf8:	0200c330 	cmpltui	r8,zero,780
 200bafc:	0200c330 	cmpltui	r8,zero,780
 200bb00:	0200c330 	cmpltui	r8,zero,780
 200bb04:	0200c330 	cmpltui	r8,zero,780
 200bb08:	0200c330 	cmpltui	r8,zero,780
 200bb0c:	0200c330 	cmpltui	r8,zero,780
 200bb10:	0200bc00 	call	200bc0 <__alt_mem_sdram-0x1dff440>
 200bb14:	0200c330 	cmpltui	r8,zero,780
 200bb18:	0200c330 	cmpltui	r8,zero,780
 200bb1c:	0200c330 	cmpltui	r8,zero,780
 200bb20:	0200c330 	cmpltui	r8,zero,780
 200bb24:	0200c330 	cmpltui	r8,zero,780
 200bb28:	0200bbcc 	andi	r8,zero,751
 200bb2c:	0200c330 	cmpltui	r8,zero,780
 200bb30:	0200c330 	cmpltui	r8,zero,780
 200bb34:	0200bfb4 	movhi	r8,766
 200bb38:	0200c330 	cmpltui	r8,zero,780
 200bb3c:	0200c330 	cmpltui	r8,zero,780
 200bb40:	0200c330 	cmpltui	r8,zero,780
 200bb44:	0200c330 	cmpltui	r8,zero,780
 200bb48:	0200c330 	cmpltui	r8,zero,780
 200bb4c:	0200c330 	cmpltui	r8,zero,780
 200bb50:	0200c330 	cmpltui	r8,zero,780
 200bb54:	0200c330 	cmpltui	r8,zero,780
 200bb58:	0200c330 	cmpltui	r8,zero,780
 200bb5c:	0200c330 	cmpltui	r8,zero,780
 200bb60:	0200c00c 	andi	r8,zero,768
 200bb64:	0200c1d8 	cmpnei	r8,zero,775
 200bb68:	0200c330 	cmpltui	r8,zero,780
 200bb6c:	0200c330 	cmpltui	r8,zero,780
 200bb70:	0200c330 	cmpltui	r8,zero,780
 200bb74:	0200c294 	movui	r8,778
 200bb78:	0200c1d8 	cmpnei	r8,zero,775
 200bb7c:	0200c330 	cmpltui	r8,zero,780
 200bb80:	0200c330 	cmpltui	r8,zero,780
 200bb84:	0200c2a4 	muli	r8,zero,778
 200bb88:	0200c330 	cmpltui	r8,zero,780
 200bb8c:	0200c118 	cmpnei	r8,zero,772
 200bb90:	0200bc04 	movi	r8,752
 200bb94:	0200c2bc 	xorhi	r8,zero,778
 200bb98:	0200c2fc 	xorhi	r8,zero,779
 200bb9c:	0200c330 	cmpltui	r8,zero,780
 200bba0:	0200c210 	cmplti	r8,zero,776
 200bba4:	0200c330 	cmpltui	r8,zero,780
 200bba8:	0200bbd0 	cmplti	r8,zero,751
 200bbac:	0200c330 	cmpltui	r8,zero,780
 200bbb0:	0200c330 	cmpltui	r8,zero,780
 200bbb4:	0200c258 	cmpnei	r8,zero,777
 200bbb8:	a5000204 	addi	r20,r20,8
 200bbbc:	d8c02517 	ldw	r3,148(sp)
 200bbc0:	1c07883a 	add	r3,r3,r16
 200bbc4:	d8c02515 	stw	r3,148(sp)
 200bbc8:	003f8e06 	br	200ba04 <___vfiprintf_internal_r+0x144>
 200bbcc:	94800414 	ori	r18,r18,16
 200bbd0:	9080080c 	andi	r2,r18,32
 200bbd4:	1001cd1e 	bne	r2,zero,200c30c <___vfiprintf_internal_r+0xa4c>
 200bbd8:	9080040c 	andi	r2,r18,16
 200bbdc:	10034e26 	beq	r2,zero,200c918 <___vfiprintf_internal_r+0x1058>
 200bbe0:	d9002317 	ldw	r4,140(sp)
 200bbe4:	002f883a 	mov	r23,zero
 200bbe8:	00800044 	movi	r2,1
 200bbec:	24c00017 	ldw	r19,0(r4)
 200bbf0:	21000104 	addi	r4,r4,4
 200bbf4:	d9002315 	stw	r4,140(sp)
 200bbf8:	9807883a 	mov	r3,r19
 200bbfc:	00000c06 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200bc00:	94800414 	ori	r18,r18,16
 200bc04:	9080080c 	andi	r2,r18,32
 200bc08:	1001501e 	bne	r2,zero,200c14c <___vfiprintf_internal_r+0x88c>
 200bc0c:	9080040c 	andi	r2,r18,16
 200bc10:	10033726 	beq	r2,zero,200c8f0 <___vfiprintf_internal_r+0x1030>
 200bc14:	d9002317 	ldw	r4,140(sp)
 200bc18:	002f883a 	mov	r23,zero
 200bc1c:	0005883a 	mov	r2,zero
 200bc20:	24c00017 	ldw	r19,0(r4)
 200bc24:	21000104 	addi	r4,r4,4
 200bc28:	d9002315 	stw	r4,140(sp)
 200bc2c:	9807883a 	mov	r3,r19
 200bc30:	d8001d85 	stb	zero,118(sp)
 200bc34:	dc002015 	stw	r16,128(sp)
 200bc38:	0015883a 	mov	r10,zero
 200bc3c:	80000216 	blt	r16,zero,200bc48 <___vfiprintf_internal_r+0x388>
 200bc40:	013fdfc4 	movi	r4,-129
 200bc44:	9124703a 	and	r18,r18,r4
 200bc48:	1801ec1e 	bne	r3,zero,200c3fc <___vfiprintf_internal_r+0xb3c>
 200bc4c:	8002b826 	beq	r16,zero,200c730 <___vfiprintf_internal_r+0xe70>
 200bc50:	10803fcc 	andi	r2,r2,255
 200bc54:	00c00044 	movi	r3,1
 200bc58:	10c20726 	beq	r2,r3,200c478 <___vfiprintf_internal_r+0xbb8>
 200bc5c:	00c00084 	movi	r3,2
 200bc60:	df001a04 	addi	fp,sp,104
 200bc64:	10c0bb1e 	bne	r2,r3,200bf54 <___vfiprintf_internal_r+0x694>
 200bc68:	d9002717 	ldw	r4,156(sp)
 200bc6c:	988003cc 	andi	r2,r19,15
 200bc70:	b806973a 	slli	r3,r23,28
 200bc74:	2085883a 	add	r2,r4,r2
 200bc78:	9826d13a 	srli	r19,r19,4
 200bc7c:	10800003 	ldbu	r2,0(r2)
 200bc80:	b82ed13a 	srli	r23,r23,4
 200bc84:	e73fffc4 	addi	fp,fp,-1
 200bc88:	1ce6b03a 	or	r19,r3,r19
 200bc8c:	e0800005 	stb	r2,0(fp)
 200bc90:	9dc4b03a 	or	r2,r19,r23
 200bc94:	103ff51e 	bne	r2,zero,200bc6c <___vfiprintf_internal_r+0x3ac>
 200bc98:	d8c01e17 	ldw	r3,120(sp)
 200bc9c:	1f07c83a 	sub	r3,r3,fp
 200bca0:	d8c02015 	stw	r3,128(sp)
 200bca4:	dd402017 	ldw	r21,128(sp)
 200bca8:	ac00010e 	bge	r21,r16,200bcb0 <___vfiprintf_internal_r+0x3f0>
 200bcac:	802b883a 	mov	r21,r16
 200bcb0:	52803fcc 	andi	r10,r10,255
 200bcb4:	5280201c 	xori	r10,r10,128
 200bcb8:	52bfe004 	addi	r10,r10,-128
 200bcbc:	50000126 	beq	r10,zero,200bcc4 <___vfiprintf_internal_r+0x404>
 200bcc0:	ad400044 	addi	r21,r21,1
 200bcc4:	91c0008c 	andi	r7,r18,2
 200bcc8:	38000126 	beq	r7,zero,200bcd0 <___vfiprintf_internal_r+0x410>
 200bccc:	ad400084 	addi	r21,r21,2
 200bcd0:	95c0210c 	andi	r23,r18,132
 200bcd4:	b801ad1e 	bne	r23,zero,200c38c <___vfiprintf_internal_r+0xacc>
 200bcd8:	d9002417 	ldw	r4,144(sp)
 200bcdc:	2567c83a 	sub	r19,r4,r21
 200bce0:	04c1aa0e 	bge	zero,r19,200c38c <___vfiprintf_internal_r+0xacc>
 200bce4:	00c00404 	movi	r3,16
 200bce8:	d8801c17 	ldw	r2,112(sp)
 200bcec:	1cc37f0e 	bge	r3,r19,200caec <___vfiprintf_internal_r+0x122c>
 200bcf0:	010080b4 	movhi	r4,514
 200bcf4:	21232704 	addi	r4,r4,-29540
 200bcf8:	dc002915 	stw	r16,164(sp)
 200bcfc:	d9801b17 	ldw	r6,108(sp)
 200bd00:	9821883a 	mov	r16,r19
 200bd04:	d9002615 	stw	r4,152(sp)
 200bd08:	02c001c4 	movi	r11,7
 200bd0c:	3827883a 	mov	r19,r7
 200bd10:	00000506 	br	200bd28 <___vfiprintf_internal_r+0x468>
 200bd14:	31400084 	addi	r5,r6,2
 200bd18:	a5000204 	addi	r20,r20,8
 200bd1c:	200d883a 	mov	r6,r4
 200bd20:	843ffc04 	addi	r16,r16,-16
 200bd24:	1c000f0e 	bge	r3,r16,200bd64 <___vfiprintf_internal_r+0x4a4>
 200bd28:	014080b4 	movhi	r5,514
 200bd2c:	10800404 	addi	r2,r2,16
 200bd30:	31000044 	addi	r4,r6,1
 200bd34:	29632704 	addi	r5,r5,-29540
 200bd38:	a1400015 	stw	r5,0(r20)
 200bd3c:	a0c00115 	stw	r3,4(r20)
 200bd40:	d8801c15 	stw	r2,112(sp)
 200bd44:	d9001b15 	stw	r4,108(sp)
 200bd48:	593ff20e 	bge	r11,r4,200bd14 <___vfiprintf_internal_r+0x454>
 200bd4c:	1001811e 	bne	r2,zero,200c354 <___vfiprintf_internal_r+0xa94>
 200bd50:	843ffc04 	addi	r16,r16,-16
 200bd54:	000d883a 	mov	r6,zero
 200bd58:	01400044 	movi	r5,1
 200bd5c:	d829883a 	mov	r20,sp
 200bd60:	1c3ff116 	blt	r3,r16,200bd28 <___vfiprintf_internal_r+0x468>
 200bd64:	980f883a 	mov	r7,r19
 200bd68:	8027883a 	mov	r19,r16
 200bd6c:	dc002917 	ldw	r16,164(sp)
 200bd70:	d8c02617 	ldw	r3,152(sp)
 200bd74:	9885883a 	add	r2,r19,r2
 200bd78:	a4c00115 	stw	r19,4(r20)
 200bd7c:	a0c00015 	stw	r3,0(r20)
 200bd80:	d8801c15 	stw	r2,112(sp)
 200bd84:	d9401b15 	stw	r5,108(sp)
 200bd88:	00c001c4 	movi	r3,7
 200bd8c:	19427416 	blt	r3,r5,200c760 <___vfiprintf_internal_r+0xea0>
 200bd90:	d8c01d87 	ldb	r3,118(sp)
 200bd94:	a5000204 	addi	r20,r20,8
 200bd98:	29000044 	addi	r4,r5,1
 200bd9c:	1801801e 	bne	r3,zero,200c3a0 <___vfiprintf_internal_r+0xae0>
 200bda0:	38000c26 	beq	r7,zero,200bdd4 <___vfiprintf_internal_r+0x514>
 200bda4:	d8c01d04 	addi	r3,sp,116
 200bda8:	10800084 	addi	r2,r2,2
 200bdac:	a0c00015 	stw	r3,0(r20)
 200bdb0:	00c00084 	movi	r3,2
 200bdb4:	a0c00115 	stw	r3,4(r20)
 200bdb8:	d8801c15 	stw	r2,112(sp)
 200bdbc:	d9001b15 	stw	r4,108(sp)
 200bdc0:	00c001c4 	movi	r3,7
 200bdc4:	19025516 	blt	r3,r4,200c71c <___vfiprintf_internal_r+0xe5c>
 200bdc8:	200b883a 	mov	r5,r4
 200bdcc:	a5000204 	addi	r20,r20,8
 200bdd0:	21000044 	addi	r4,r4,1
 200bdd4:	00c02004 	movi	r3,128
 200bdd8:	b8c21326 	beq	r23,r3,200c628 <___vfiprintf_internal_r+0xd68>
 200bddc:	d8c02017 	ldw	r3,128(sp)
 200bde0:	80e1c83a 	sub	r16,r16,r3
 200bde4:	0400230e 	bge	zero,r16,200be74 <___vfiprintf_internal_r+0x5b4>
 200bde8:	04c00404 	movi	r19,16
 200bdec:	9c03240e 	bge	r19,r16,200ca80 <___vfiprintf_internal_r+0x11c0>
 200bdf0:	00c080b4 	movhi	r3,514
 200bdf4:	18e32304 	addi	r3,r3,-29556
 200bdf8:	d8c02615 	stw	r3,152(sp)
 200bdfc:	05c001c4 	movi	r23,7
 200be00:	00000506 	br	200be18 <___vfiprintf_internal_r+0x558>
 200be04:	29000084 	addi	r4,r5,2
 200be08:	a5000204 	addi	r20,r20,8
 200be0c:	180b883a 	mov	r5,r3
 200be10:	843ffc04 	addi	r16,r16,-16
 200be14:	9c000d0e 	bge	r19,r16,200be4c <___vfiprintf_internal_r+0x58c>
 200be18:	10800404 	addi	r2,r2,16
 200be1c:	28c00044 	addi	r3,r5,1
 200be20:	a4400015 	stw	r17,0(r20)
 200be24:	a4c00115 	stw	r19,4(r20)
 200be28:	d8801c15 	stw	r2,112(sp)
 200be2c:	d8c01b15 	stw	r3,108(sp)
 200be30:	b8fff40e 	bge	r23,r3,200be04 <___vfiprintf_internal_r+0x544>
 200be34:	1001671e 	bne	r2,zero,200c3d4 <___vfiprintf_internal_r+0xb14>
 200be38:	843ffc04 	addi	r16,r16,-16
 200be3c:	01000044 	movi	r4,1
 200be40:	000b883a 	mov	r5,zero
 200be44:	d829883a 	mov	r20,sp
 200be48:	9c3ff316 	blt	r19,r16,200be18 <___vfiprintf_internal_r+0x558>
 200be4c:	d8c02617 	ldw	r3,152(sp)
 200be50:	1405883a 	add	r2,r2,r16
 200be54:	a4000115 	stw	r16,4(r20)
 200be58:	a0c00015 	stw	r3,0(r20)
 200be5c:	d8801c15 	stw	r2,112(sp)
 200be60:	d9001b15 	stw	r4,108(sp)
 200be64:	00c001c4 	movi	r3,7
 200be68:	19019516 	blt	r3,r4,200c4c0 <___vfiprintf_internal_r+0xc00>
 200be6c:	a5000204 	addi	r20,r20,8
 200be70:	21000044 	addi	r4,r4,1
 200be74:	d8c02017 	ldw	r3,128(sp)
 200be78:	a7000015 	stw	fp,0(r20)
 200be7c:	d9001b15 	stw	r4,108(sp)
 200be80:	10c5883a 	add	r2,r2,r3
 200be84:	a0c00115 	stw	r3,4(r20)
 200be88:	d8801c15 	stw	r2,112(sp)
 200be8c:	00c001c4 	movi	r3,7
 200be90:	1901930e 	bge	r3,r4,200c4e0 <___vfiprintf_internal_r+0xc20>
 200be94:	1002431e 	bne	r2,zero,200c7a4 <___vfiprintf_internal_r+0xee4>
 200be98:	d8001b15 	stw	zero,108(sp)
 200be9c:	9480010c 	andi	r18,r18,4
 200bea0:	9002391e 	bne	r18,zero,200c788 <___vfiprintf_internal_r+0xec8>
 200bea4:	d8802417 	ldw	r2,144(sp)
 200bea8:	a880010e 	bge	r21,r2,200beb0 <___vfiprintf_internal_r+0x5f0>
 200beac:	102b883a 	mov	r21,r2
 200beb0:	d8c02517 	ldw	r3,148(sp)
 200beb4:	1d47883a 	add	r3,r3,r21
 200beb8:	d8c02515 	stw	r3,148(sp)
 200bebc:	0001cd06 	br	200c5f4 <___vfiprintf_internal_r+0xd34>
 200bec0:	d9002217 	ldw	r4,136(sp)
 200bec4:	d9402117 	ldw	r5,132(sp)
 200bec8:	20067140 	call	2006714 <__swsetup_r>
 200becc:	10000e1e 	bne	r2,zero,200bf08 <___vfiprintf_internal_r+0x648>
 200bed0:	d9402117 	ldw	r5,132(sp)
 200bed4:	00c00284 	movi	r3,10
 200bed8:	2880030b 	ldhu	r2,12(r5)
 200bedc:	1080068c 	andi	r2,r2,26
 200bee0:	10fe9c1e 	bne	r2,r3,200b954 <___vfiprintf_internal_r+0x94>
 200bee4:	d8c02117 	ldw	r3,132(sp)
 200bee8:	1880038f 	ldh	r2,14(r3)
 200beec:	103e9916 	blt	r2,zero,200b954 <___vfiprintf_internal_r+0x94>
 200bef0:	d9002217 	ldw	r4,136(sp)
 200bef4:	d9c02317 	ldw	r7,140(sp)
 200bef8:	180b883a 	mov	r5,r3
 200befc:	980d883a 	mov	r6,r19
 200bf00:	200cbd40 	call	200cbd4 <__sbprintf>
 200bf04:	00000106 	br	200bf0c <___vfiprintf_internal_r+0x64c>
 200bf08:	00bfffc4 	movi	r2,-1
 200bf0c:	dfc03517 	ldw	ra,212(sp)
 200bf10:	df003417 	ldw	fp,208(sp)
 200bf14:	ddc03317 	ldw	r23,204(sp)
 200bf18:	dd803217 	ldw	r22,200(sp)
 200bf1c:	dd403117 	ldw	r21,196(sp)
 200bf20:	dd003017 	ldw	r20,192(sp)
 200bf24:	dcc02f17 	ldw	r19,188(sp)
 200bf28:	dc802e17 	ldw	r18,184(sp)
 200bf2c:	dc402d17 	ldw	r17,180(sp)
 200bf30:	dc002c17 	ldw	r16,176(sp)
 200bf34:	dec03604 	addi	sp,sp,216
 200bf38:	f800283a 	ret
 200bf3c:	20087ac0 	call	20087ac <__sinit>
 200bf40:	003e7106 	br	200b908 <___vfiprintf_internal_r+0x48>
 200bf44:	b005883a 	mov	r2,r22
 200bf48:	94800114 	ori	r18,r18,4
 200bf4c:	b1800007 	ldb	r6,0(r22)
 200bf50:	003eb706 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200bf54:	9806d0fa 	srli	r3,r19,3
 200bf58:	b808977a 	slli	r4,r23,29
 200bf5c:	b82ed0fa 	srli	r23,r23,3
 200bf60:	9cc001cc 	andi	r19,r19,7
 200bf64:	98800c04 	addi	r2,r19,48
 200bf68:	e73fffc4 	addi	fp,fp,-1
 200bf6c:	20e6b03a 	or	r19,r4,r3
 200bf70:	e0800005 	stb	r2,0(fp)
 200bf74:	9dc6b03a 	or	r3,r19,r23
 200bf78:	183ff61e 	bne	r3,zero,200bf54 <___vfiprintf_internal_r+0x694>
 200bf7c:	90c0004c 	andi	r3,r18,1
 200bf80:	e009883a 	mov	r4,fp
 200bf84:	183f4426 	beq	r3,zero,200bc98 <___vfiprintf_internal_r+0x3d8>
 200bf88:	10803fcc 	andi	r2,r2,255
 200bf8c:	1080201c 	xori	r2,r2,128
 200bf90:	10bfe004 	addi	r2,r2,-128
 200bf94:	00c00c04 	movi	r3,48
 200bf98:	10ff3f26 	beq	r2,r3,200bc98 <___vfiprintf_internal_r+0x3d8>
 200bf9c:	20ffffc5 	stb	r3,-1(r4)
 200bfa0:	d8c01e17 	ldw	r3,120(sp)
 200bfa4:	e73fffc4 	addi	fp,fp,-1
 200bfa8:	1f07c83a 	sub	r3,r3,fp
 200bfac:	d8c02015 	stw	r3,128(sp)
 200bfb0:	003f3c06 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200bfb4:	d8c02003 	ldbu	r3,128(sp)
 200bfb8:	010080b4 	movhi	r4,514
 200bfbc:	2122be04 	addi	r4,r4,-29960
 200bfc0:	d8c01d85 	stb	r3,118(sp)
 200bfc4:	d9002715 	stw	r4,156(sp)
 200bfc8:	9080080c 	andi	r2,r18,32
 200bfcc:	1000a926 	beq	r2,zero,200c274 <___vfiprintf_internal_r+0x9b4>
 200bfd0:	d9002317 	ldw	r4,140(sp)
 200bfd4:	24c00017 	ldw	r19,0(r4)
 200bfd8:	25c00117 	ldw	r23,4(r4)
 200bfdc:	21000204 	addi	r4,r4,8
 200bfe0:	d9002315 	stw	r4,140(sp)
 200bfe4:	9080004c 	andi	r2,r18,1
 200bfe8:	1001f626 	beq	r2,zero,200c7c4 <___vfiprintf_internal_r+0xf04>
 200bfec:	9dc6b03a 	or	r3,r19,r23
 200bff0:	18023d26 	beq	r3,zero,200c8e8 <___vfiprintf_internal_r+0x1028>
 200bff4:	00800c04 	movi	r2,48
 200bff8:	d8801d05 	stb	r2,116(sp)
 200bffc:	d9801d45 	stb	r6,117(sp)
 200c000:	94800094 	ori	r18,r18,2
 200c004:	00800084 	movi	r2,2
 200c008:	003f0906 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c00c:	d9002317 	ldw	r4,140(sp)
 200c010:	05400044 	movi	r21,1
 200c014:	d8001d85 	stb	zero,118(sp)
 200c018:	20800017 	ldw	r2,0(r4)
 200c01c:	21000104 	addi	r4,r4,4
 200c020:	d9002315 	stw	r4,140(sp)
 200c024:	d8801005 	stb	r2,64(sp)
 200c028:	dd402015 	stw	r21,128(sp)
 200c02c:	df001004 	addi	fp,sp,64
 200c030:	0021883a 	mov	r16,zero
 200c034:	003f2306 	br	200bcc4 <___vfiprintf_internal_r+0x404>
 200c038:	94802014 	ori	r18,r18,128
 200c03c:	b005883a 	mov	r2,r22
 200c040:	b1800007 	ldb	r6,0(r22)
 200c044:	003e7a06 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c048:	b039883a 	mov	fp,r22
 200c04c:	d8002415 	stw	zero,144(sp)
 200c050:	35fff404 	addi	r23,r6,-48
 200c054:	0009883a 	mov	r4,zero
 200c058:	01400284 	movi	r5,10
 200c05c:	200e2dc0 	call	200e2dc <__mulsi3>
 200c060:	e1800007 	ldb	r6,0(fp)
 200c064:	15c9883a 	add	r4,r2,r23
 200c068:	b5800044 	addi	r22,r22,1
 200c06c:	35fff404 	addi	r23,r6,-48
 200c070:	b039883a 	mov	fp,r22
 200c074:	9dfff82e 	bgeu	r19,r23,200c058 <___vfiprintf_internal_r+0x798>
 200c078:	d9002415 	stw	r4,144(sp)
 200c07c:	003e6d06 	br	200ba34 <___vfiprintf_internal_r+0x174>
 200c080:	d8c02003 	ldbu	r3,128(sp)
 200c084:	94800414 	ori	r18,r18,16
 200c088:	9080080c 	andi	r2,r18,32
 200c08c:	d8c01d85 	stb	r3,118(sp)
 200c090:	d8c02317 	ldw	r3,140(sp)
 200c094:	10005526 	beq	r2,zero,200c1ec <___vfiprintf_internal_r+0x92c>
 200c098:	d9002317 	ldw	r4,140(sp)
 200c09c:	18800117 	ldw	r2,4(r3)
 200c0a0:	1cc00017 	ldw	r19,0(r3)
 200c0a4:	21000204 	addi	r4,r4,8
 200c0a8:	d9002315 	stw	r4,140(sp)
 200c0ac:	102f883a 	mov	r23,r2
 200c0b0:	1001f716 	blt	r2,zero,200c890 <___vfiprintf_internal_r+0xfd0>
 200c0b4:	da801d83 	ldbu	r10,118(sp)
 200c0b8:	dc002015 	stw	r16,128(sp)
 200c0bc:	00800044 	movi	r2,1
 200c0c0:	9dc6b03a 	or	r3,r19,r23
 200c0c4:	003edd06 	br	200bc3c <___vfiprintf_internal_r+0x37c>
 200c0c8:	b1800007 	ldb	r6,0(r22)
 200c0cc:	01000a84 	movi	r4,42
 200c0d0:	b0800044 	addi	r2,r22,1
 200c0d4:	3102ae26 	beq	r6,r4,200cb90 <___vfiprintf_internal_r+0x12d0>
 200c0d8:	35fff404 	addi	r23,r6,-48
 200c0dc:	102d883a 	mov	r22,r2
 200c0e0:	0021883a 	mov	r16,zero
 200c0e4:	9dfe5336 	bltu	r19,r23,200ba34 <___vfiprintf_internal_r+0x174>
 200c0e8:	0009883a 	mov	r4,zero
 200c0ec:	01400284 	movi	r5,10
 200c0f0:	200e2dc0 	call	200e2dc <__mulsi3>
 200c0f4:	b1800007 	ldb	r6,0(r22)
 200c0f8:	b889883a 	add	r4,r23,r2
 200c0fc:	b5800044 	addi	r22,r22,1
 200c100:	35fff404 	addi	r23,r6,-48
 200c104:	9dfff92e 	bgeu	r19,r23,200c0ec <___vfiprintf_internal_r+0x82c>
 200c108:	2021883a 	mov	r16,r4
 200c10c:	203e490e 	bge	r4,zero,200ba34 <___vfiprintf_internal_r+0x174>
 200c110:	043fffc4 	movi	r16,-1
 200c114:	003e4706 	br	200ba34 <___vfiprintf_internal_r+0x174>
 200c118:	d8c02003 	ldbu	r3,128(sp)
 200c11c:	9080080c 	andi	r2,r18,32
 200c120:	d8c01d85 	stb	r3,118(sp)
 200c124:	10020e26 	beq	r2,zero,200c960 <___vfiprintf_internal_r+0x10a0>
 200c128:	d9002317 	ldw	r4,140(sp)
 200c12c:	d9402517 	ldw	r5,148(sp)
 200c130:	20800017 	ldw	r2,0(r4)
 200c134:	2807d7fa 	srai	r3,r5,31
 200c138:	21000104 	addi	r4,r4,4
 200c13c:	d9002315 	stw	r4,140(sp)
 200c140:	11400015 	stw	r5,0(r2)
 200c144:	10c00115 	stw	r3,4(r2)
 200c148:	003e1106 	br	200b990 <___vfiprintf_internal_r+0xd0>
 200c14c:	d8802317 	ldw	r2,140(sp)
 200c150:	d8c02317 	ldw	r3,140(sp)
 200c154:	14c00017 	ldw	r19,0(r2)
 200c158:	15c00117 	ldw	r23,4(r2)
 200c15c:	18c00204 	addi	r3,r3,8
 200c160:	d8c02315 	stw	r3,140(sp)
 200c164:	0005883a 	mov	r2,zero
 200c168:	9dc6b03a 	or	r3,r19,r23
 200c16c:	003eb006 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c170:	d8802007 	ldb	r2,128(sp)
 200c174:	1001d91e 	bne	r2,zero,200c8dc <___vfiprintf_internal_r+0x101c>
 200c178:	00c00804 	movi	r3,32
 200c17c:	d8c02005 	stb	r3,128(sp)
 200c180:	b005883a 	mov	r2,r22
 200c184:	b1800007 	ldb	r6,0(r22)
 200c188:	003e2906 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c18c:	94800054 	ori	r18,r18,1
 200c190:	b005883a 	mov	r2,r22
 200c194:	b1800007 	ldb	r6,0(r22)
 200c198:	003e2506 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c19c:	d9002317 	ldw	r4,140(sp)
 200c1a0:	d9402317 	ldw	r5,140(sp)
 200c1a4:	21000017 	ldw	r4,0(r4)
 200c1a8:	28c00104 	addi	r3,r5,4
 200c1ac:	d9002415 	stw	r4,144(sp)
 200c1b0:	20023b16 	blt	r4,zero,200caa0 <___vfiprintf_internal_r+0x11e0>
 200c1b4:	d8c02315 	stw	r3,140(sp)
 200c1b8:	b005883a 	mov	r2,r22
 200c1bc:	b1800007 	ldb	r6,0(r22)
 200c1c0:	003e1b06 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c1c4:	00c00ac4 	movi	r3,43
 200c1c8:	d8c02005 	stb	r3,128(sp)
 200c1cc:	b005883a 	mov	r2,r22
 200c1d0:	b1800007 	ldb	r6,0(r22)
 200c1d4:	003e1606 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c1d8:	d8c02003 	ldbu	r3,128(sp)
 200c1dc:	9080080c 	andi	r2,r18,32
 200c1e0:	d8c01d85 	stb	r3,118(sp)
 200c1e4:	d8c02317 	ldw	r3,140(sp)
 200c1e8:	103fab1e 	bne	r2,zero,200c098 <___vfiprintf_internal_r+0x7d8>
 200c1ec:	9080040c 	andi	r2,r18,16
 200c1f0:	1001e626 	beq	r2,zero,200c98c <___vfiprintf_internal_r+0x10cc>
 200c1f4:	1cc00017 	ldw	r19,0(r3)
 200c1f8:	d9402317 	ldw	r5,140(sp)
 200c1fc:	982fd7fa 	srai	r23,r19,31
 200c200:	29400104 	addi	r5,r5,4
 200c204:	d9402315 	stw	r5,140(sp)
 200c208:	b805883a 	mov	r2,r23
 200c20c:	003fa806 	br	200c0b0 <___vfiprintf_internal_r+0x7f0>
 200c210:	d9402317 	ldw	r5,140(sp)
 200c214:	d8001d85 	stb	zero,118(sp)
 200c218:	2f000017 	ldw	fp,0(r5)
 200c21c:	2cc00104 	addi	r19,r5,4
 200c220:	e0023826 	beq	fp,zero,200cb04 <___vfiprintf_internal_r+0x1244>
 200c224:	e009883a 	mov	r4,fp
 200c228:	80022316 	blt	r16,zero,200cab8 <___vfiprintf_internal_r+0x11f8>
 200c22c:	000b883a 	mov	r5,zero
 200c230:	800d883a 	mov	r6,r16
 200c234:	2009cfc0 	call	2009cfc <memchr>
 200c238:	10024e26 	beq	r2,zero,200cb74 <___vfiprintf_internal_r+0x12b4>
 200c23c:	1705c83a 	sub	r2,r2,fp
 200c240:	d8802015 	stw	r2,128(sp)
 200c244:	8081e816 	blt	r16,r2,200c9e8 <___vfiprintf_internal_r+0x1128>
 200c248:	da801d83 	ldbu	r10,118(sp)
 200c24c:	dcc02315 	stw	r19,140(sp)
 200c250:	0021883a 	mov	r16,zero
 200c254:	003e9306 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200c258:	00c080b4 	movhi	r3,514
 200c25c:	18e2c304 	addi	r3,r3,-29940
 200c260:	d8c02715 	stw	r3,156(sp)
 200c264:	d8c02003 	ldbu	r3,128(sp)
 200c268:	9080080c 	andi	r2,r18,32
 200c26c:	d8c01d85 	stb	r3,118(sp)
 200c270:	103f571e 	bne	r2,zero,200bfd0 <___vfiprintf_internal_r+0x710>
 200c274:	9080040c 	andi	r2,r18,16
 200c278:	1001b126 	beq	r2,zero,200c940 <___vfiprintf_internal_r+0x1080>
 200c27c:	d9402317 	ldw	r5,140(sp)
 200c280:	002f883a 	mov	r23,zero
 200c284:	2cc00017 	ldw	r19,0(r5)
 200c288:	29400104 	addi	r5,r5,4
 200c28c:	d9402315 	stw	r5,140(sp)
 200c290:	003f5406 	br	200bfe4 <___vfiprintf_internal_r+0x724>
 200c294:	94801014 	ori	r18,r18,64
 200c298:	b005883a 	mov	r2,r22
 200c29c:	b1800007 	ldb	r6,0(r22)
 200c2a0:	003de306 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c2a4:	b1800007 	ldb	r6,0(r22)
 200c2a8:	00c01b04 	movi	r3,108
 200c2ac:	b005883a 	mov	r2,r22
 200c2b0:	30c1f726 	beq	r6,r3,200ca90 <___vfiprintf_internal_r+0x11d0>
 200c2b4:	94800414 	ori	r18,r18,16
 200c2b8:	003ddd06 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c2bc:	d8c02317 	ldw	r3,140(sp)
 200c2c0:	00800c04 	movi	r2,48
 200c2c4:	010080b4 	movhi	r4,514
 200c2c8:	1cc00017 	ldw	r19,0(r3)
 200c2cc:	d8801d05 	stb	r2,116(sp)
 200c2d0:	18c00104 	addi	r3,r3,4
 200c2d4:	00801e04 	movi	r2,120
 200c2d8:	2122c304 	addi	r4,r4,-29940
 200c2dc:	d8801d45 	stb	r2,117(sp)
 200c2e0:	d8c02315 	stw	r3,140(sp)
 200c2e4:	002f883a 	mov	r23,zero
 200c2e8:	94800094 	ori	r18,r18,2
 200c2ec:	d9002715 	stw	r4,156(sp)
 200c2f0:	00800084 	movi	r2,2
 200c2f4:	9807883a 	mov	r3,r19
 200c2f8:	003e4d06 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c2fc:	94800814 	ori	r18,r18,32
 200c300:	b005883a 	mov	r2,r22
 200c304:	b1800007 	ldb	r6,0(r22)
 200c308:	003dc906 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c30c:	d8802317 	ldw	r2,140(sp)
 200c310:	d8c02317 	ldw	r3,140(sp)
 200c314:	14c00017 	ldw	r19,0(r2)
 200c318:	15c00117 	ldw	r23,4(r2)
 200c31c:	18c00204 	addi	r3,r3,8
 200c320:	d8c02315 	stw	r3,140(sp)
 200c324:	00800044 	movi	r2,1
 200c328:	9dc6b03a 	or	r3,r19,r23
 200c32c:	003e4006 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c330:	d8c02003 	ldbu	r3,128(sp)
 200c334:	d8c01d85 	stb	r3,118(sp)
 200c338:	30005526 	beq	r6,zero,200c490 <___vfiprintf_internal_r+0xbd0>
 200c33c:	05400044 	movi	r21,1
 200c340:	d9801005 	stb	r6,64(sp)
 200c344:	d8001d85 	stb	zero,118(sp)
 200c348:	dd402015 	stw	r21,128(sp)
 200c34c:	df001004 	addi	fp,sp,64
 200c350:	003f3706 	br	200c030 <___vfiprintf_internal_r+0x770>
 200c354:	d9002217 	ldw	r4,136(sp)
 200c358:	d9402117 	ldw	r5,132(sp)
 200c35c:	d9801a04 	addi	r6,sp,104
 200c360:	d8c02a15 	stw	r3,168(sp)
 200c364:	dac02b15 	stw	r11,172(sp)
 200c368:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c36c:	d8c02a17 	ldw	r3,168(sp)
 200c370:	dac02b17 	ldw	r11,172(sp)
 200c374:	10004c1e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c378:	d9801b17 	ldw	r6,108(sp)
 200c37c:	d8801c17 	ldw	r2,112(sp)
 200c380:	d829883a 	mov	r20,sp
 200c384:	31400044 	addi	r5,r6,1
 200c388:	003e6506 	br	200bd20 <___vfiprintf_internal_r+0x460>
 200c38c:	d9401b17 	ldw	r5,108(sp)
 200c390:	d8801c17 	ldw	r2,112(sp)
 200c394:	29000044 	addi	r4,r5,1
 200c398:	d8c01d87 	ldb	r3,118(sp)
 200c39c:	183e8026 	beq	r3,zero,200bda0 <___vfiprintf_internal_r+0x4e0>
 200c3a0:	00c00044 	movi	r3,1
 200c3a4:	d9401d84 	addi	r5,sp,118
 200c3a8:	10c5883a 	add	r2,r2,r3
 200c3ac:	a1400015 	stw	r5,0(r20)
 200c3b0:	a0c00115 	stw	r3,4(r20)
 200c3b4:	d8801c15 	stw	r2,112(sp)
 200c3b8:	d9001b15 	stw	r4,108(sp)
 200c3bc:	014001c4 	movi	r5,7
 200c3c0:	2900cd16 	blt	r5,r4,200c6f8 <___vfiprintf_internal_r+0xe38>
 200c3c4:	200b883a 	mov	r5,r4
 200c3c8:	a5000204 	addi	r20,r20,8
 200c3cc:	21000044 	addi	r4,r4,1
 200c3d0:	003e7306 	br	200bda0 <___vfiprintf_internal_r+0x4e0>
 200c3d4:	d9002217 	ldw	r4,136(sp)
 200c3d8:	d9402117 	ldw	r5,132(sp)
 200c3dc:	d9801a04 	addi	r6,sp,104
 200c3e0:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c3e4:	1000301e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c3e8:	d9401b17 	ldw	r5,108(sp)
 200c3ec:	d8801c17 	ldw	r2,112(sp)
 200c3f0:	d829883a 	mov	r20,sp
 200c3f4:	29000044 	addi	r4,r5,1
 200c3f8:	003e8506 	br	200be10 <___vfiprintf_internal_r+0x550>
 200c3fc:	10803fcc 	andi	r2,r2,255
 200c400:	00c00044 	movi	r3,1
 200c404:	10fe151e 	bne	r2,r3,200bc5c <___vfiprintf_internal_r+0x39c>
 200c408:	b800021e 	bne	r23,zero,200c414 <___vfiprintf_internal_r+0xb54>
 200c40c:	00800244 	movi	r2,9
 200c410:	14c0192e 	bgeu	r2,r19,200c478 <___vfiprintf_internal_r+0xbb8>
 200c414:	dd401a04 	addi	r21,sp,104
 200c418:	5039883a 	mov	fp,r10
 200c41c:	9809883a 	mov	r4,r19
 200c420:	b80b883a 	mov	r5,r23
 200c424:	01800284 	movi	r6,10
 200c428:	000f883a 	mov	r7,zero
 200c42c:	200db940 	call	200db94 <__umoddi3>
 200c430:	10800c04 	addi	r2,r2,48
 200c434:	ad7fffc4 	addi	r21,r21,-1
 200c438:	9809883a 	mov	r4,r19
 200c43c:	b80b883a 	mov	r5,r23
 200c440:	01800284 	movi	r6,10
 200c444:	000f883a 	mov	r7,zero
 200c448:	a8800005 	stb	r2,0(r21)
 200c44c:	200d5540 	call	200d554 <__udivdi3>
 200c450:	1027883a 	mov	r19,r2
 200c454:	10c4b03a 	or	r2,r2,r3
 200c458:	182f883a 	mov	r23,r3
 200c45c:	103fef1e 	bne	r2,zero,200c41c <___vfiprintf_internal_r+0xb5c>
 200c460:	d8c01e17 	ldw	r3,120(sp)
 200c464:	e015883a 	mov	r10,fp
 200c468:	a839883a 	mov	fp,r21
 200c46c:	1d47c83a 	sub	r3,r3,r21
 200c470:	d8c02015 	stw	r3,128(sp)
 200c474:	003e0b06 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200c478:	d9002817 	ldw	r4,160(sp)
 200c47c:	9cc00c04 	addi	r19,r19,48
 200c480:	dcc019c5 	stb	r19,103(sp)
 200c484:	d9002015 	stw	r4,128(sp)
 200c488:	df0019c4 	addi	fp,sp,103
 200c48c:	003e0506 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200c490:	d8801c17 	ldw	r2,112(sp)
 200c494:	10000426 	beq	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c498:	d9002217 	ldw	r4,136(sp)
 200c49c:	d9402117 	ldw	r5,132(sp)
 200c4a0:	d9801a04 	addi	r6,sp,104
 200c4a4:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c4a8:	d8c02117 	ldw	r3,132(sp)
 200c4ac:	1880030b 	ldhu	r2,12(r3)
 200c4b0:	1080100c 	andi	r2,r2,64
 200c4b4:	103e941e 	bne	r2,zero,200bf08 <___vfiprintf_internal_r+0x648>
 200c4b8:	d8802517 	ldw	r2,148(sp)
 200c4bc:	003e9306 	br	200bf0c <___vfiprintf_internal_r+0x64c>
 200c4c0:	1000e91e 	bne	r2,zero,200c868 <___vfiprintf_internal_r+0xfa8>
 200c4c4:	d8802017 	ldw	r2,128(sp)
 200c4c8:	00c00044 	movi	r3,1
 200c4cc:	df000015 	stw	fp,0(sp)
 200c4d0:	d8800115 	stw	r2,4(sp)
 200c4d4:	d8801c15 	stw	r2,112(sp)
 200c4d8:	d8c01b15 	stw	r3,108(sp)
 200c4dc:	d829883a 	mov	r20,sp
 200c4e0:	a2000204 	addi	r8,r20,8
 200c4e4:	9480010c 	andi	r18,r18,4
 200c4e8:	90003626 	beq	r18,zero,200c5c4 <___vfiprintf_internal_r+0xd04>
 200c4ec:	d9002417 	ldw	r4,144(sp)
 200c4f0:	2565c83a 	sub	r18,r4,r21
 200c4f4:	0480330e 	bge	zero,r18,200c5c4 <___vfiprintf_internal_r+0xd04>
 200c4f8:	04000404 	movi	r16,16
 200c4fc:	84818b0e 	bge	r16,r18,200cb2c <___vfiprintf_internal_r+0x126c>
 200c500:	00c080b4 	movhi	r3,514
 200c504:	18e32704 	addi	r3,r3,-29540
 200c508:	d9001b17 	ldw	r4,108(sp)
 200c50c:	d8c02615 	stw	r3,152(sp)
 200c510:	04c001c4 	movi	r19,7
 200c514:	dd002217 	ldw	r20,136(sp)
 200c518:	ddc02117 	ldw	r23,132(sp)
 200c51c:	00000506 	br	200c534 <___vfiprintf_internal_r+0xc74>
 200c520:	21400084 	addi	r5,r4,2
 200c524:	42000204 	addi	r8,r8,8
 200c528:	1809883a 	mov	r4,r3
 200c52c:	94bffc04 	addi	r18,r18,-16
 200c530:	84800f0e 	bge	r16,r18,200c570 <___vfiprintf_internal_r+0xcb0>
 200c534:	014080b4 	movhi	r5,514
 200c538:	10800404 	addi	r2,r2,16
 200c53c:	20c00044 	addi	r3,r4,1
 200c540:	29632704 	addi	r5,r5,-29540
 200c544:	41400015 	stw	r5,0(r8)
 200c548:	44000115 	stw	r16,4(r8)
 200c54c:	d8801c15 	stw	r2,112(sp)
 200c550:	d8c01b15 	stw	r3,108(sp)
 200c554:	98fff20e 	bge	r19,r3,200c520 <___vfiprintf_internal_r+0xc60>
 200c558:	1000291e 	bne	r2,zero,200c600 <___vfiprintf_internal_r+0xd40>
 200c55c:	94bffc04 	addi	r18,r18,-16
 200c560:	01400044 	movi	r5,1
 200c564:	0009883a 	mov	r4,zero
 200c568:	d811883a 	mov	r8,sp
 200c56c:	84bff116 	blt	r16,r18,200c534 <___vfiprintf_internal_r+0xc74>
 200c570:	d8c02617 	ldw	r3,152(sp)
 200c574:	1485883a 	add	r2,r2,r18
 200c578:	44800115 	stw	r18,4(r8)
 200c57c:	40c00015 	stw	r3,0(r8)
 200c580:	d8801c15 	stw	r2,112(sp)
 200c584:	d9401b15 	stw	r5,108(sp)
 200c588:	00c001c4 	movi	r3,7
 200c58c:	19400d0e 	bge	r3,r5,200c5c4 <___vfiprintf_internal_r+0xd04>
 200c590:	1000061e 	bne	r2,zero,200c5ac <___vfiprintf_internal_r+0xcec>
 200c594:	d9002417 	ldw	r4,144(sp)
 200c598:	a9011116 	blt	r21,r4,200c9e0 <___vfiprintf_internal_r+0x1120>
 200c59c:	d9402517 	ldw	r5,148(sp)
 200c5a0:	2d4b883a 	add	r5,r5,r21
 200c5a4:	d9402515 	stw	r5,148(sp)
 200c5a8:	00001206 	br	200c5f4 <___vfiprintf_internal_r+0xd34>
 200c5ac:	d9002217 	ldw	r4,136(sp)
 200c5b0:	d9402117 	ldw	r5,132(sp)
 200c5b4:	d9801a04 	addi	r6,sp,104
 200c5b8:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c5bc:	103fba1e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c5c0:	d8801c17 	ldw	r2,112(sp)
 200c5c4:	d9002417 	ldw	r4,144(sp)
 200c5c8:	a900010e 	bge	r21,r4,200c5d0 <___vfiprintf_internal_r+0xd10>
 200c5cc:	202b883a 	mov	r21,r4
 200c5d0:	d9402517 	ldw	r5,148(sp)
 200c5d4:	2d4b883a 	add	r5,r5,r21
 200c5d8:	d9402515 	stw	r5,148(sp)
 200c5dc:	10000526 	beq	r2,zero,200c5f4 <___vfiprintf_internal_r+0xd34>
 200c5e0:	d9002217 	ldw	r4,136(sp)
 200c5e4:	d9402117 	ldw	r5,132(sp)
 200c5e8:	d9801a04 	addi	r6,sp,104
 200c5ec:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c5f0:	103fad1e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c5f4:	d8001b15 	stw	zero,108(sp)
 200c5f8:	d829883a 	mov	r20,sp
 200c5fc:	003ce406 	br	200b990 <___vfiprintf_internal_r+0xd0>
 200c600:	a009883a 	mov	r4,r20
 200c604:	b80b883a 	mov	r5,r23
 200c608:	d9801a04 	addi	r6,sp,104
 200c60c:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c610:	103fa51e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c614:	d9001b17 	ldw	r4,108(sp)
 200c618:	d8801c17 	ldw	r2,112(sp)
 200c61c:	d811883a 	mov	r8,sp
 200c620:	21400044 	addi	r5,r4,1
 200c624:	003fc106 	br	200c52c <___vfiprintf_internal_r+0xc6c>
 200c628:	d8c02417 	ldw	r3,144(sp)
 200c62c:	1d6fc83a 	sub	r23,r3,r21
 200c630:	05fdea0e 	bge	zero,r23,200bddc <___vfiprintf_internal_r+0x51c>
 200c634:	04c00404 	movi	r19,16
 200c638:	9dc1490e 	bge	r19,r23,200cb60 <___vfiprintf_internal_r+0x12a0>
 200c63c:	010080b4 	movhi	r4,514
 200c640:	21232304 	addi	r4,r4,-29556
 200c644:	d9002615 	stw	r4,152(sp)
 200c648:	028001c4 	movi	r10,7
 200c64c:	00000506 	br	200c664 <___vfiprintf_internal_r+0xda4>
 200c650:	29800084 	addi	r6,r5,2
 200c654:	a5000204 	addi	r20,r20,8
 200c658:	180b883a 	mov	r5,r3
 200c65c:	bdfffc04 	addi	r23,r23,-16
 200c660:	9dc00d0e 	bge	r19,r23,200c698 <___vfiprintf_internal_r+0xdd8>
 200c664:	10800404 	addi	r2,r2,16
 200c668:	28c00044 	addi	r3,r5,1
 200c66c:	a4400015 	stw	r17,0(r20)
 200c670:	a4c00115 	stw	r19,4(r20)
 200c674:	d8801c15 	stw	r2,112(sp)
 200c678:	d8c01b15 	stw	r3,108(sp)
 200c67c:	50fff40e 	bge	r10,r3,200c650 <___vfiprintf_internal_r+0xd90>
 200c680:	1000111e 	bne	r2,zero,200c6c8 <___vfiprintf_internal_r+0xe08>
 200c684:	bdfffc04 	addi	r23,r23,-16
 200c688:	01800044 	movi	r6,1
 200c68c:	000b883a 	mov	r5,zero
 200c690:	d829883a 	mov	r20,sp
 200c694:	9dfff316 	blt	r19,r23,200c664 <___vfiprintf_internal_r+0xda4>
 200c698:	d8c02617 	ldw	r3,152(sp)
 200c69c:	15c5883a 	add	r2,r2,r23
 200c6a0:	a5c00115 	stw	r23,4(r20)
 200c6a4:	a0c00015 	stw	r3,0(r20)
 200c6a8:	d8801c15 	stw	r2,112(sp)
 200c6ac:	d9801b15 	stw	r6,108(sp)
 200c6b0:	00c001c4 	movi	r3,7
 200c6b4:	19806716 	blt	r3,r6,200c854 <___vfiprintf_internal_r+0xf94>
 200c6b8:	a5000204 	addi	r20,r20,8
 200c6bc:	31000044 	addi	r4,r6,1
 200c6c0:	300b883a 	mov	r5,r6
 200c6c4:	003dc506 	br	200bddc <___vfiprintf_internal_r+0x51c>
 200c6c8:	d9002217 	ldw	r4,136(sp)
 200c6cc:	d9402117 	ldw	r5,132(sp)
 200c6d0:	d9801a04 	addi	r6,sp,104
 200c6d4:	da802a15 	stw	r10,168(sp)
 200c6d8:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c6dc:	da802a17 	ldw	r10,168(sp)
 200c6e0:	103f711e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c6e4:	d9401b17 	ldw	r5,108(sp)
 200c6e8:	d8801c17 	ldw	r2,112(sp)
 200c6ec:	d829883a 	mov	r20,sp
 200c6f0:	29800044 	addi	r6,r5,1
 200c6f4:	003fd906 	br	200c65c <___vfiprintf_internal_r+0xd9c>
 200c6f8:	1000401e 	bne	r2,zero,200c7fc <___vfiprintf_internal_r+0xf3c>
 200c6fc:	38003b26 	beq	r7,zero,200c7ec <___vfiprintf_internal_r+0xf2c>
 200c700:	d9001d04 	addi	r4,sp,116
 200c704:	00800084 	movi	r2,2
 200c708:	d9000015 	stw	r4,0(sp)
 200c70c:	d8800115 	stw	r2,4(sp)
 200c710:	1809883a 	mov	r4,r3
 200c714:	d829883a 	mov	r20,sp
 200c718:	003dab06 	br	200bdc8 <___vfiprintf_internal_r+0x508>
 200c71c:	1000431e 	bne	r2,zero,200c82c <___vfiprintf_internal_r+0xf6c>
 200c720:	01000044 	movi	r4,1
 200c724:	000b883a 	mov	r5,zero
 200c728:	d829883a 	mov	r20,sp
 200c72c:	003da906 	br	200bdd4 <___vfiprintf_internal_r+0x514>
 200c730:	10803fcc 	andi	r2,r2,255
 200c734:	1000081e 	bne	r2,zero,200c758 <___vfiprintf_internal_r+0xe98>
 200c738:	9080004c 	andi	r2,r18,1
 200c73c:	10000626 	beq	r2,zero,200c758 <___vfiprintf_internal_r+0xe98>
 200c740:	d9002817 	ldw	r4,160(sp)
 200c744:	00800c04 	movi	r2,48
 200c748:	d88019c5 	stb	r2,103(sp)
 200c74c:	d9002015 	stw	r4,128(sp)
 200c750:	df0019c4 	addi	fp,sp,103
 200c754:	003d5306 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200c758:	df001a04 	addi	fp,sp,104
 200c75c:	003d5106 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200c760:	1000931e 	bne	r2,zero,200c9b0 <___vfiprintf_internal_r+0x10f0>
 200c764:	d8c01d87 	ldb	r3,118(sp)
 200c768:	18005326 	beq	r3,zero,200c8b8 <___vfiprintf_internal_r+0xff8>
 200c76c:	00800044 	movi	r2,1
 200c770:	d8c01d84 	addi	r3,sp,118
 200c774:	1009883a 	mov	r4,r2
 200c778:	d8c00015 	stw	r3,0(sp)
 200c77c:	d8800115 	stw	r2,4(sp)
 200c780:	d829883a 	mov	r20,sp
 200c784:	003f0f06 	br	200c3c4 <___vfiprintf_internal_r+0xb04>
 200c788:	d8c02417 	ldw	r3,144(sp)
 200c78c:	d811883a 	mov	r8,sp
 200c790:	1d65c83a 	sub	r18,r3,r21
 200c794:	04bf5816 	blt	zero,r18,200c4f8 <___vfiprintf_internal_r+0xc38>
 200c798:	003f7e06 	br	200c594 <___vfiprintf_internal_r+0xcd4>
 200c79c:	b02b883a 	mov	r21,r22
 200c7a0:	003c9806 	br	200ba04 <___vfiprintf_internal_r+0x144>
 200c7a4:	d9002217 	ldw	r4,136(sp)
 200c7a8:	d9402117 	ldw	r5,132(sp)
 200c7ac:	d9801a04 	addi	r6,sp,104
 200c7b0:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c7b4:	103f3c1e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c7b8:	d8801c17 	ldw	r2,112(sp)
 200c7bc:	d811883a 	mov	r8,sp
 200c7c0:	003f4806 	br	200c4e4 <___vfiprintf_internal_r+0xc24>
 200c7c4:	00800084 	movi	r2,2
 200c7c8:	9dc6b03a 	or	r3,r19,r23
 200c7cc:	003d1806 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c7d0:	d9002217 	ldw	r4,136(sp)
 200c7d4:	d9402117 	ldw	r5,132(sp)
 200c7d8:	d9801a04 	addi	r6,sp,104
 200c7dc:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c7e0:	103f311e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c7e4:	d829883a 	mov	r20,sp
 200c7e8:	003cf406 	br	200bbbc <___vfiprintf_internal_r+0x2fc>
 200c7ec:	000b883a 	mov	r5,zero
 200c7f0:	1809883a 	mov	r4,r3
 200c7f4:	d829883a 	mov	r20,sp
 200c7f8:	003d7606 	br	200bdd4 <___vfiprintf_internal_r+0x514>
 200c7fc:	d9002217 	ldw	r4,136(sp)
 200c800:	d9402117 	ldw	r5,132(sp)
 200c804:	d9801a04 	addi	r6,sp,104
 200c808:	d9c02a15 	stw	r7,168(sp)
 200c80c:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c810:	d9c02a17 	ldw	r7,168(sp)
 200c814:	103f241e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c818:	d9401b17 	ldw	r5,108(sp)
 200c81c:	d8801c17 	ldw	r2,112(sp)
 200c820:	d829883a 	mov	r20,sp
 200c824:	29000044 	addi	r4,r5,1
 200c828:	003d5d06 	br	200bda0 <___vfiprintf_internal_r+0x4e0>
 200c82c:	d9002217 	ldw	r4,136(sp)
 200c830:	d9402117 	ldw	r5,132(sp)
 200c834:	d9801a04 	addi	r6,sp,104
 200c838:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c83c:	103f1a1e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c840:	d9401b17 	ldw	r5,108(sp)
 200c844:	d8801c17 	ldw	r2,112(sp)
 200c848:	d829883a 	mov	r20,sp
 200c84c:	29000044 	addi	r4,r5,1
 200c850:	003d6006 	br	200bdd4 <___vfiprintf_internal_r+0x514>
 200c854:	10009b1e 	bne	r2,zero,200cac4 <___vfiprintf_internal_r+0x1204>
 200c858:	01000044 	movi	r4,1
 200c85c:	000b883a 	mov	r5,zero
 200c860:	d829883a 	mov	r20,sp
 200c864:	003d5d06 	br	200bddc <___vfiprintf_internal_r+0x51c>
 200c868:	d9002217 	ldw	r4,136(sp)
 200c86c:	d9402117 	ldw	r5,132(sp)
 200c870:	d9801a04 	addi	r6,sp,104
 200c874:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c878:	103f0b1e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c87c:	d9001b17 	ldw	r4,108(sp)
 200c880:	d8801c17 	ldw	r2,112(sp)
 200c884:	d829883a 	mov	r20,sp
 200c888:	21000044 	addi	r4,r4,1
 200c88c:	003d7906 	br	200be74 <___vfiprintf_internal_r+0x5b4>
 200c890:	04e7c83a 	sub	r19,zero,r19
 200c894:	9804c03a 	cmpne	r2,r19,zero
 200c898:	05efc83a 	sub	r23,zero,r23
 200c89c:	b8afc83a 	sub	r23,r23,r2
 200c8a0:	02800b44 	movi	r10,45
 200c8a4:	da801d85 	stb	r10,118(sp)
 200c8a8:	dc002015 	stw	r16,128(sp)
 200c8ac:	00800044 	movi	r2,1
 200c8b0:	9dc6b03a 	or	r3,r19,r23
 200c8b4:	003ce106 	br	200bc3c <___vfiprintf_internal_r+0x37c>
 200c8b8:	000b883a 	mov	r5,zero
 200c8bc:	01000044 	movi	r4,1
 200c8c0:	d829883a 	mov	r20,sp
 200c8c4:	383d4326 	beq	r7,zero,200bdd4 <___vfiprintf_internal_r+0x514>
 200c8c8:	00800084 	movi	r2,2
 200c8cc:	d8c01d04 	addi	r3,sp,116
 200c8d0:	d8c00015 	stw	r3,0(sp)
 200c8d4:	d8800115 	stw	r2,4(sp)
 200c8d8:	003d3b06 	br	200bdc8 <___vfiprintf_internal_r+0x508>
 200c8dc:	b1800007 	ldb	r6,0(r22)
 200c8e0:	b005883a 	mov	r2,r22
 200c8e4:	003c5206 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200c8e8:	00800084 	movi	r2,2
 200c8ec:	003cd006 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c8f0:	9080100c 	andi	r2,r18,64
 200c8f4:	10003e26 	beq	r2,zero,200c9f0 <___vfiprintf_internal_r+0x1130>
 200c8f8:	d9402317 	ldw	r5,140(sp)
 200c8fc:	002f883a 	mov	r23,zero
 200c900:	0005883a 	mov	r2,zero
 200c904:	2cc0000b 	ldhu	r19,0(r5)
 200c908:	29400104 	addi	r5,r5,4
 200c90c:	d9402315 	stw	r5,140(sp)
 200c910:	9807883a 	mov	r3,r19
 200c914:	003cc606 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c918:	9080100c 	andi	r2,r18,64
 200c91c:	10004226 	beq	r2,zero,200ca28 <___vfiprintf_internal_r+0x1168>
 200c920:	d9402317 	ldw	r5,140(sp)
 200c924:	002f883a 	mov	r23,zero
 200c928:	00800044 	movi	r2,1
 200c92c:	2cc0000b 	ldhu	r19,0(r5)
 200c930:	29400104 	addi	r5,r5,4
 200c934:	d9402315 	stw	r5,140(sp)
 200c938:	9807883a 	mov	r3,r19
 200c93c:	003cbc06 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200c940:	9080100c 	andi	r2,r18,64
 200c944:	10003226 	beq	r2,zero,200ca10 <___vfiprintf_internal_r+0x1150>
 200c948:	d8802317 	ldw	r2,140(sp)
 200c94c:	002f883a 	mov	r23,zero
 200c950:	14c0000b 	ldhu	r19,0(r2)
 200c954:	10800104 	addi	r2,r2,4
 200c958:	d8802315 	stw	r2,140(sp)
 200c95c:	003da106 	br	200bfe4 <___vfiprintf_internal_r+0x724>
 200c960:	9080040c 	andi	r2,r18,16
 200c964:	10003f1e 	bne	r2,zero,200ca64 <___vfiprintf_internal_r+0x11a4>
 200c968:	9480100c 	andi	r18,r18,64
 200c96c:	90007526 	beq	r18,zero,200cb44 <___vfiprintf_internal_r+0x1284>
 200c970:	d9402317 	ldw	r5,140(sp)
 200c974:	d8c02517 	ldw	r3,148(sp)
 200c978:	28800017 	ldw	r2,0(r5)
 200c97c:	29400104 	addi	r5,r5,4
 200c980:	d9402315 	stw	r5,140(sp)
 200c984:	10c0000d 	sth	r3,0(r2)
 200c988:	003c0106 	br	200b990 <___vfiprintf_internal_r+0xd0>
 200c98c:	9080100c 	andi	r2,r18,64
 200c990:	10002d26 	beq	r2,zero,200ca48 <___vfiprintf_internal_r+0x1188>
 200c994:	1cc0000f 	ldh	r19,0(r3)
 200c998:	d8802317 	ldw	r2,140(sp)
 200c99c:	982fd7fa 	srai	r23,r19,31
 200c9a0:	10800104 	addi	r2,r2,4
 200c9a4:	d8802315 	stw	r2,140(sp)
 200c9a8:	b805883a 	mov	r2,r23
 200c9ac:	003dc006 	br	200c0b0 <___vfiprintf_internal_r+0x7f0>
 200c9b0:	d9002217 	ldw	r4,136(sp)
 200c9b4:	d9402117 	ldw	r5,132(sp)
 200c9b8:	d9801a04 	addi	r6,sp,104
 200c9bc:	d9c02a15 	stw	r7,168(sp)
 200c9c0:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200c9c4:	d9c02a17 	ldw	r7,168(sp)
 200c9c8:	103eb71e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200c9cc:	d9401b17 	ldw	r5,108(sp)
 200c9d0:	d8801c17 	ldw	r2,112(sp)
 200c9d4:	d829883a 	mov	r20,sp
 200c9d8:	29000044 	addi	r4,r5,1
 200c9dc:	003e6e06 	br	200c398 <___vfiprintf_internal_r+0xad8>
 200c9e0:	202b883a 	mov	r21,r4
 200c9e4:	003eed06 	br	200c59c <___vfiprintf_internal_r+0xcdc>
 200c9e8:	dc002015 	stw	r16,128(sp)
 200c9ec:	003e1606 	br	200c248 <___vfiprintf_internal_r+0x988>
 200c9f0:	d8802317 	ldw	r2,140(sp)
 200c9f4:	002f883a 	mov	r23,zero
 200c9f8:	14c00017 	ldw	r19,0(r2)
 200c9fc:	10800104 	addi	r2,r2,4
 200ca00:	d8802315 	stw	r2,140(sp)
 200ca04:	9807883a 	mov	r3,r19
 200ca08:	0005883a 	mov	r2,zero
 200ca0c:	003c8806 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200ca10:	d8c02317 	ldw	r3,140(sp)
 200ca14:	002f883a 	mov	r23,zero
 200ca18:	1cc00017 	ldw	r19,0(r3)
 200ca1c:	18c00104 	addi	r3,r3,4
 200ca20:	d8c02315 	stw	r3,140(sp)
 200ca24:	003d6f06 	br	200bfe4 <___vfiprintf_internal_r+0x724>
 200ca28:	d8802317 	ldw	r2,140(sp)
 200ca2c:	002f883a 	mov	r23,zero
 200ca30:	14c00017 	ldw	r19,0(r2)
 200ca34:	10800104 	addi	r2,r2,4
 200ca38:	d8802315 	stw	r2,140(sp)
 200ca3c:	9807883a 	mov	r3,r19
 200ca40:	00800044 	movi	r2,1
 200ca44:	003c7a06 	br	200bc30 <___vfiprintf_internal_r+0x370>
 200ca48:	1cc00017 	ldw	r19,0(r3)
 200ca4c:	d8c02317 	ldw	r3,140(sp)
 200ca50:	982fd7fa 	srai	r23,r19,31
 200ca54:	18c00104 	addi	r3,r3,4
 200ca58:	d8c02315 	stw	r3,140(sp)
 200ca5c:	b805883a 	mov	r2,r23
 200ca60:	003d9306 	br	200c0b0 <___vfiprintf_internal_r+0x7f0>
 200ca64:	d8c02317 	ldw	r3,140(sp)
 200ca68:	d9002517 	ldw	r4,148(sp)
 200ca6c:	18800017 	ldw	r2,0(r3)
 200ca70:	18c00104 	addi	r3,r3,4
 200ca74:	d8c02315 	stw	r3,140(sp)
 200ca78:	11000015 	stw	r4,0(r2)
 200ca7c:	003bc406 	br	200b990 <___vfiprintf_internal_r+0xd0>
 200ca80:	014080b4 	movhi	r5,514
 200ca84:	29632304 	addi	r5,r5,-29556
 200ca88:	d9402615 	stw	r5,152(sp)
 200ca8c:	003cef06 	br	200be4c <___vfiprintf_internal_r+0x58c>
 200ca90:	b0800044 	addi	r2,r22,1
 200ca94:	94800814 	ori	r18,r18,32
 200ca98:	b1800047 	ldb	r6,1(r22)
 200ca9c:	003be406 	br	200ba30 <___vfiprintf_internal_r+0x170>
 200caa0:	d8802417 	ldw	r2,144(sp)
 200caa4:	d8c02315 	stw	r3,140(sp)
 200caa8:	0085c83a 	sub	r2,zero,r2
 200caac:	d8802415 	stw	r2,144(sp)
 200cab0:	b005883a 	mov	r2,r22
 200cab4:	003d2406 	br	200bf48 <___vfiprintf_internal_r+0x688>
 200cab8:	20043a00 	call	20043a0 <strlen>
 200cabc:	d8802015 	stw	r2,128(sp)
 200cac0:	003de106 	br	200c248 <___vfiprintf_internal_r+0x988>
 200cac4:	d9002217 	ldw	r4,136(sp)
 200cac8:	d9402117 	ldw	r5,132(sp)
 200cacc:	d9801a04 	addi	r6,sp,104
 200cad0:	200b7ac0 	call	200b7ac <__sprint_r.part.0>
 200cad4:	103e741e 	bne	r2,zero,200c4a8 <___vfiprintf_internal_r+0xbe8>
 200cad8:	d9401b17 	ldw	r5,108(sp)
 200cadc:	d8801c17 	ldw	r2,112(sp)
 200cae0:	d829883a 	mov	r20,sp
 200cae4:	29000044 	addi	r4,r5,1
 200cae8:	003cbc06 	br	200bddc <___vfiprintf_internal_r+0x51c>
 200caec:	014080b4 	movhi	r5,514
 200caf0:	29632704 	addi	r5,r5,-29540
 200caf4:	d9402615 	stw	r5,152(sp)
 200caf8:	d9401b17 	ldw	r5,108(sp)
 200cafc:	29400044 	addi	r5,r5,1
 200cb00:	003c9b06 	br	200bd70 <___vfiprintf_internal_r+0x4b0>
 200cb04:	00800184 	movi	r2,6
 200cb08:	1400012e 	bgeu	r2,r16,200cb10 <___vfiprintf_internal_r+0x1250>
 200cb0c:	1021883a 	mov	r16,r2
 200cb10:	dc002015 	stw	r16,128(sp)
 200cb14:	802b883a 	mov	r21,r16
 200cb18:	80001b16 	blt	r16,zero,200cb88 <___vfiprintf_internal_r+0x12c8>
 200cb1c:	070080b4 	movhi	fp,514
 200cb20:	dcc02315 	stw	r19,140(sp)
 200cb24:	e722c804 	addi	fp,fp,-29920
 200cb28:	003d4106 	br	200c030 <___vfiprintf_internal_r+0x770>
 200cb2c:	014080b4 	movhi	r5,514
 200cb30:	29632704 	addi	r5,r5,-29540
 200cb34:	d9402615 	stw	r5,152(sp)
 200cb38:	d9401b17 	ldw	r5,108(sp)
 200cb3c:	29400044 	addi	r5,r5,1
 200cb40:	003e8b06 	br	200c570 <___vfiprintf_internal_r+0xcb0>
 200cb44:	d9002317 	ldw	r4,140(sp)
 200cb48:	d9402517 	ldw	r5,148(sp)
 200cb4c:	20800017 	ldw	r2,0(r4)
 200cb50:	21000104 	addi	r4,r4,4
 200cb54:	d9002315 	stw	r4,140(sp)
 200cb58:	11400015 	stw	r5,0(r2)
 200cb5c:	003b8c06 	br	200b990 <___vfiprintf_internal_r+0xd0>
 200cb60:	014080b4 	movhi	r5,514
 200cb64:	29632304 	addi	r5,r5,-29556
 200cb68:	d9402615 	stw	r5,152(sp)
 200cb6c:	200d883a 	mov	r6,r4
 200cb70:	003ec906 	br	200c698 <___vfiprintf_internal_r+0xdd8>
 200cb74:	dc002015 	stw	r16,128(sp)
 200cb78:	da801d83 	ldbu	r10,118(sp)
 200cb7c:	dcc02315 	stw	r19,140(sp)
 200cb80:	0021883a 	mov	r16,zero
 200cb84:	003c4706 	br	200bca4 <___vfiprintf_internal_r+0x3e4>
 200cb88:	002b883a 	mov	r21,zero
 200cb8c:	003fe306 	br	200cb1c <___vfiprintf_internal_r+0x125c>
 200cb90:	d9402317 	ldw	r5,140(sp)
 200cb94:	2c000017 	ldw	r16,0(r5)
 200cb98:	28c00104 	addi	r3,r5,4
 200cb9c:	d8c02315 	stw	r3,140(sp)
 200cba0:	803fbd0e 	bge	r16,zero,200ca98 <___vfiprintf_internal_r+0x11d8>
 200cba4:	043fffc4 	movi	r16,-1
 200cba8:	b1800047 	ldb	r6,1(r22)
 200cbac:	003ba006 	br	200ba30 <___vfiprintf_internal_r+0x170>

0200cbb0 <__vfiprintf_internal>:
 200cbb0:	2007883a 	mov	r3,r4
 200cbb4:	010080b4 	movhi	r4,514
 200cbb8:	212a6704 	addi	r4,r4,-22116
 200cbbc:	21000017 	ldw	r4,0(r4)
 200cbc0:	2805883a 	mov	r2,r5
 200cbc4:	300f883a 	mov	r7,r6
 200cbc8:	180b883a 	mov	r5,r3
 200cbcc:	100d883a 	mov	r6,r2
 200cbd0:	200b8c01 	jmpi	200b8c0 <___vfiprintf_internal_r>

0200cbd4 <__sbprintf>:
 200cbd4:	2880030b 	ldhu	r2,12(r5)
 200cbd8:	2ac01917 	ldw	r11,100(r5)
 200cbdc:	2a80038b 	ldhu	r10,14(r5)
 200cbe0:	2a400717 	ldw	r9,28(r5)
 200cbe4:	2a000917 	ldw	r8,36(r5)
 200cbe8:	defee204 	addi	sp,sp,-1144
 200cbec:	00c10004 	movi	r3,1024
 200cbf0:	dc011a15 	stw	r16,1128(sp)
 200cbf4:	10bfff4c 	andi	r2,r2,65533
 200cbf8:	2821883a 	mov	r16,r5
 200cbfc:	d8cb883a 	add	r5,sp,r3
 200cc00:	dc811c15 	stw	r18,1136(sp)
 200cc04:	dc411b15 	stw	r17,1132(sp)
 200cc08:	dfc11d15 	stw	ra,1140(sp)
 200cc0c:	2025883a 	mov	r18,r4
 200cc10:	d881030d 	sth	r2,1036(sp)
 200cc14:	dac11915 	stw	r11,1124(sp)
 200cc18:	da81038d 	sth	r10,1038(sp)
 200cc1c:	da410715 	stw	r9,1052(sp)
 200cc20:	da010915 	stw	r8,1060(sp)
 200cc24:	dec10015 	stw	sp,1024(sp)
 200cc28:	dec10415 	stw	sp,1040(sp)
 200cc2c:	d8c10215 	stw	r3,1032(sp)
 200cc30:	d8c10515 	stw	r3,1044(sp)
 200cc34:	d8010615 	stw	zero,1048(sp)
 200cc38:	200b8c00 	call	200b8c0 <___vfiprintf_internal_r>
 200cc3c:	1023883a 	mov	r17,r2
 200cc40:	10000416 	blt	r2,zero,200cc54 <__sbprintf+0x80>
 200cc44:	9009883a 	mov	r4,r18
 200cc48:	d9410004 	addi	r5,sp,1024
 200cc4c:	20083c00 	call	20083c0 <_fflush_r>
 200cc50:	10000d1e 	bne	r2,zero,200cc88 <__sbprintf+0xb4>
 200cc54:	d8c1030b 	ldhu	r3,1036(sp)
 200cc58:	18c0100c 	andi	r3,r3,64
 200cc5c:	18000326 	beq	r3,zero,200cc6c <__sbprintf+0x98>
 200cc60:	8080030b 	ldhu	r2,12(r16)
 200cc64:	10801014 	ori	r2,r2,64
 200cc68:	8080030d 	sth	r2,12(r16)
 200cc6c:	8805883a 	mov	r2,r17
 200cc70:	dfc11d17 	ldw	ra,1140(sp)
 200cc74:	dc811c17 	ldw	r18,1136(sp)
 200cc78:	dc411b17 	ldw	r17,1132(sp)
 200cc7c:	dc011a17 	ldw	r16,1128(sp)
 200cc80:	dec11e04 	addi	sp,sp,1144
 200cc84:	f800283a 	ret
 200cc88:	047fffc4 	movi	r17,-1
 200cc8c:	003ff106 	br	200cc54 <__sbprintf+0x80>

0200cc90 <_write_r>:
 200cc90:	defffd04 	addi	sp,sp,-12
 200cc94:	dc000015 	stw	r16,0(sp)
 200cc98:	040080b4 	movhi	r16,514
 200cc9c:	dc400115 	stw	r17,4(sp)
 200cca0:	842a7c04 	addi	r16,r16,-22032
 200cca4:	2023883a 	mov	r17,r4
 200cca8:	2809883a 	mov	r4,r5
 200ccac:	300b883a 	mov	r5,r6
 200ccb0:	380d883a 	mov	r6,r7
 200ccb4:	dfc00215 	stw	ra,8(sp)
 200ccb8:	80000015 	stw	zero,0(r16)
 200ccbc:	20116e80 	call	20116e8 <write>
 200ccc0:	00ffffc4 	movi	r3,-1
 200ccc4:	10c00526 	beq	r2,r3,200ccdc <_write_r+0x4c>
 200ccc8:	dfc00217 	ldw	ra,8(sp)
 200cccc:	dc400117 	ldw	r17,4(sp)
 200ccd0:	dc000017 	ldw	r16,0(sp)
 200ccd4:	dec00304 	addi	sp,sp,12
 200ccd8:	f800283a 	ret
 200ccdc:	80c00017 	ldw	r3,0(r16)
 200cce0:	183ff926 	beq	r3,zero,200ccc8 <_write_r+0x38>
 200cce4:	88c00015 	stw	r3,0(r17)
 200cce8:	003ff706 	br	200ccc8 <_write_r+0x38>

0200ccec <_close_r>:
 200ccec:	defffd04 	addi	sp,sp,-12
 200ccf0:	dc000015 	stw	r16,0(sp)
 200ccf4:	040080b4 	movhi	r16,514
 200ccf8:	dc400115 	stw	r17,4(sp)
 200ccfc:	842a7c04 	addi	r16,r16,-22032
 200cd00:	2023883a 	mov	r17,r4
 200cd04:	2809883a 	mov	r4,r5
 200cd08:	dfc00215 	stw	ra,8(sp)
 200cd0c:	80000015 	stw	zero,0(r16)
 200cd10:	2010b500 	call	2010b50 <close>
 200cd14:	00ffffc4 	movi	r3,-1
 200cd18:	10c00526 	beq	r2,r3,200cd30 <_close_r+0x44>
 200cd1c:	dfc00217 	ldw	ra,8(sp)
 200cd20:	dc400117 	ldw	r17,4(sp)
 200cd24:	dc000017 	ldw	r16,0(sp)
 200cd28:	dec00304 	addi	sp,sp,12
 200cd2c:	f800283a 	ret
 200cd30:	80c00017 	ldw	r3,0(r16)
 200cd34:	183ff926 	beq	r3,zero,200cd1c <_close_r+0x30>
 200cd38:	88c00015 	stw	r3,0(r17)
 200cd3c:	003ff706 	br	200cd1c <_close_r+0x30>

0200cd40 <_calloc_r>:
 200cd40:	defffe04 	addi	sp,sp,-8
 200cd44:	dc000015 	stw	r16,0(sp)
 200cd48:	2021883a 	mov	r16,r4
 200cd4c:	2809883a 	mov	r4,r5
 200cd50:	300b883a 	mov	r5,r6
 200cd54:	dfc00115 	stw	ra,4(sp)
 200cd58:	200e2dc0 	call	200e2dc <__mulsi3>
 200cd5c:	8009883a 	mov	r4,r16
 200cd60:	100b883a 	mov	r5,r2
 200cd64:	20095540 	call	2009554 <_malloc_r>
 200cd68:	1021883a 	mov	r16,r2
 200cd6c:	10002826 	beq	r2,zero,200ce10 <_calloc_r+0xd0>
 200cd70:	11bfff17 	ldw	r6,-4(r2)
 200cd74:	00bfff04 	movi	r2,-4
 200cd78:	00c00904 	movi	r3,36
 200cd7c:	308c703a 	and	r6,r6,r2
 200cd80:	308d883a 	add	r6,r6,r2
 200cd84:	19801436 	bltu	r3,r6,200cdd8 <_calloc_r+0x98>
 200cd88:	008004c4 	movi	r2,19
 200cd8c:	11800936 	bltu	r2,r6,200cdb4 <_calloc_r+0x74>
 200cd90:	8005883a 	mov	r2,r16
 200cd94:	10000015 	stw	zero,0(r2)
 200cd98:	10000115 	stw	zero,4(r2)
 200cd9c:	10000215 	stw	zero,8(r2)
 200cda0:	8005883a 	mov	r2,r16
 200cda4:	dfc00117 	ldw	ra,4(sp)
 200cda8:	dc000017 	ldw	r16,0(sp)
 200cdac:	dec00204 	addi	sp,sp,8
 200cdb0:	f800283a 	ret
 200cdb4:	80000015 	stw	zero,0(r16)
 200cdb8:	80000115 	stw	zero,4(r16)
 200cdbc:	008006c4 	movi	r2,27
 200cdc0:	11800d2e 	bgeu	r2,r6,200cdf8 <_calloc_r+0xb8>
 200cdc4:	80000215 	stw	zero,8(r16)
 200cdc8:	80000315 	stw	zero,12(r16)
 200cdcc:	30c00c26 	beq	r6,r3,200ce00 <_calloc_r+0xc0>
 200cdd0:	80800404 	addi	r2,r16,16
 200cdd4:	003fef06 	br	200cd94 <_calloc_r+0x54>
 200cdd8:	8009883a 	mov	r4,r16
 200cddc:	000b883a 	mov	r5,zero
 200cde0:	2003f700 	call	2003f70 <memset>
 200cde4:	8005883a 	mov	r2,r16
 200cde8:	dfc00117 	ldw	ra,4(sp)
 200cdec:	dc000017 	ldw	r16,0(sp)
 200cdf0:	dec00204 	addi	sp,sp,8
 200cdf4:	f800283a 	ret
 200cdf8:	80800204 	addi	r2,r16,8
 200cdfc:	003fe506 	br	200cd94 <_calloc_r+0x54>
 200ce00:	80000415 	stw	zero,16(r16)
 200ce04:	80800604 	addi	r2,r16,24
 200ce08:	80000515 	stw	zero,20(r16)
 200ce0c:	003fe106 	br	200cd94 <_calloc_r+0x54>
 200ce10:	0005883a 	mov	r2,zero
 200ce14:	003fe306 	br	200cda4 <_calloc_r+0x64>

0200ce18 <_fclose_r>:
 200ce18:	28003926 	beq	r5,zero,200cf00 <_fclose_r+0xe8>
 200ce1c:	defffc04 	addi	sp,sp,-16
 200ce20:	dc400115 	stw	r17,4(sp)
 200ce24:	dc000015 	stw	r16,0(sp)
 200ce28:	dfc00315 	stw	ra,12(sp)
 200ce2c:	dc800215 	stw	r18,8(sp)
 200ce30:	2023883a 	mov	r17,r4
 200ce34:	2821883a 	mov	r16,r5
 200ce38:	20000226 	beq	r4,zero,200ce44 <_fclose_r+0x2c>
 200ce3c:	20800e17 	ldw	r2,56(r4)
 200ce40:	10002726 	beq	r2,zero,200cee0 <_fclose_r+0xc8>
 200ce44:	8080030f 	ldh	r2,12(r16)
 200ce48:	1000071e 	bne	r2,zero,200ce68 <_fclose_r+0x50>
 200ce4c:	0005883a 	mov	r2,zero
 200ce50:	dfc00317 	ldw	ra,12(sp)
 200ce54:	dc800217 	ldw	r18,8(sp)
 200ce58:	dc400117 	ldw	r17,4(sp)
 200ce5c:	dc000017 	ldw	r16,0(sp)
 200ce60:	dec00404 	addi	sp,sp,16
 200ce64:	f800283a 	ret
 200ce68:	8809883a 	mov	r4,r17
 200ce6c:	800b883a 	mov	r5,r16
 200ce70:	20081b80 	call	20081b8 <__sflush_r>
 200ce74:	1025883a 	mov	r18,r2
 200ce78:	80800b17 	ldw	r2,44(r16)
 200ce7c:	10000426 	beq	r2,zero,200ce90 <_fclose_r+0x78>
 200ce80:	81400717 	ldw	r5,28(r16)
 200ce84:	8809883a 	mov	r4,r17
 200ce88:	103ee83a 	callr	r2
 200ce8c:	10001616 	blt	r2,zero,200cee8 <_fclose_r+0xd0>
 200ce90:	8080030b 	ldhu	r2,12(r16)
 200ce94:	1080200c 	andi	r2,r2,128
 200ce98:	1000151e 	bne	r2,zero,200cef0 <_fclose_r+0xd8>
 200ce9c:	81400c17 	ldw	r5,48(r16)
 200cea0:	28000526 	beq	r5,zero,200ceb8 <_fclose_r+0xa0>
 200cea4:	80801004 	addi	r2,r16,64
 200cea8:	28800226 	beq	r5,r2,200ceb4 <_fclose_r+0x9c>
 200ceac:	8809883a 	mov	r4,r17
 200ceb0:	20089200 	call	2008920 <_free_r>
 200ceb4:	80000c15 	stw	zero,48(r16)
 200ceb8:	81401117 	ldw	r5,68(r16)
 200cebc:	28000326 	beq	r5,zero,200cecc <_fclose_r+0xb4>
 200cec0:	8809883a 	mov	r4,r17
 200cec4:	20089200 	call	2008920 <_free_r>
 200cec8:	80001115 	stw	zero,68(r16)
 200cecc:	20087bc0 	call	20087bc <__sfp_lock_acquire>
 200ced0:	8000030d 	sth	zero,12(r16)
 200ced4:	20087c00 	call	20087c0 <__sfp_lock_release>
 200ced8:	9005883a 	mov	r2,r18
 200cedc:	003fdc06 	br	200ce50 <_fclose_r+0x38>
 200cee0:	20087ac0 	call	20087ac <__sinit>
 200cee4:	003fd706 	br	200ce44 <_fclose_r+0x2c>
 200cee8:	04bfffc4 	movi	r18,-1
 200ceec:	003fe806 	br	200ce90 <_fclose_r+0x78>
 200cef0:	81400417 	ldw	r5,16(r16)
 200cef4:	8809883a 	mov	r4,r17
 200cef8:	20089200 	call	2008920 <_free_r>
 200cefc:	003fe706 	br	200ce9c <_fclose_r+0x84>
 200cf00:	0005883a 	mov	r2,zero
 200cf04:	f800283a 	ret

0200cf08 <fclose>:
 200cf08:	008080b4 	movhi	r2,514
 200cf0c:	10aa6704 	addi	r2,r2,-22116
 200cf10:	200b883a 	mov	r5,r4
 200cf14:	11000017 	ldw	r4,0(r2)
 200cf18:	200ce181 	jmpi	200ce18 <_fclose_r>

0200cf1c <_fputwc_r>:
 200cf1c:	3080030b 	ldhu	r2,12(r6)
 200cf20:	defff804 	addi	sp,sp,-32
 200cf24:	dcc00415 	stw	r19,16(sp)
 200cf28:	dc800315 	stw	r18,12(sp)
 200cf2c:	dc000115 	stw	r16,4(sp)
 200cf30:	dfc00715 	stw	ra,28(sp)
 200cf34:	dd400615 	stw	r21,24(sp)
 200cf38:	dd000515 	stw	r20,20(sp)
 200cf3c:	dc400215 	stw	r17,8(sp)
 200cf40:	10c8000c 	andi	r3,r2,8192
 200cf44:	3021883a 	mov	r16,r6
 200cf48:	2027883a 	mov	r19,r4
 200cf4c:	2825883a 	mov	r18,r5
 200cf50:	1800051e 	bne	r3,zero,200cf68 <_fputwc_r+0x4c>
 200cf54:	30c01917 	ldw	r3,100(r6)
 200cf58:	10880014 	ori	r2,r2,8192
 200cf5c:	3080030d 	sth	r2,12(r6)
 200cf60:	18880014 	ori	r2,r3,8192
 200cf64:	30801915 	stw	r2,100(r6)
 200cf68:	20093440 	call	2009344 <__locale_mb_cur_max>
 200cf6c:	00c00044 	movi	r3,1
 200cf70:	10c03e26 	beq	r2,r3,200d06c <_fputwc_r+0x150>
 200cf74:	9809883a 	mov	r4,r19
 200cf78:	d80b883a 	mov	r5,sp
 200cf7c:	900d883a 	mov	r6,r18
 200cf80:	81c01704 	addi	r7,r16,92
 200cf84:	200d2600 	call	200d260 <_wcrtomb_r>
 200cf88:	1029883a 	mov	r20,r2
 200cf8c:	00bfffc4 	movi	r2,-1
 200cf90:	a0802026 	beq	r20,r2,200d014 <_fputwc_r+0xf8>
 200cf94:	d9400003 	ldbu	r5,0(sp)
 200cf98:	a0001c26 	beq	r20,zero,200d00c <_fputwc_r+0xf0>
 200cf9c:	0023883a 	mov	r17,zero
 200cfa0:	05400284 	movi	r21,10
 200cfa4:	00000906 	br	200cfcc <_fputwc_r+0xb0>
 200cfa8:	80800017 	ldw	r2,0(r16)
 200cfac:	11400005 	stb	r5,0(r2)
 200cfb0:	80c00017 	ldw	r3,0(r16)
 200cfb4:	18c00044 	addi	r3,r3,1
 200cfb8:	80c00015 	stw	r3,0(r16)
 200cfbc:	8c400044 	addi	r17,r17,1
 200cfc0:	dc45883a 	add	r2,sp,r17
 200cfc4:	8d00112e 	bgeu	r17,r20,200d00c <_fputwc_r+0xf0>
 200cfc8:	11400003 	ldbu	r5,0(r2)
 200cfcc:	80c00217 	ldw	r3,8(r16)
 200cfd0:	18ffffc4 	addi	r3,r3,-1
 200cfd4:	80c00215 	stw	r3,8(r16)
 200cfd8:	183ff30e 	bge	r3,zero,200cfa8 <_fputwc_r+0x8c>
 200cfdc:	80800617 	ldw	r2,24(r16)
 200cfe0:	18801916 	blt	r3,r2,200d048 <_fputwc_r+0x12c>
 200cfe4:	80800017 	ldw	r2,0(r16)
 200cfe8:	11400005 	stb	r5,0(r2)
 200cfec:	80800017 	ldw	r2,0(r16)
 200cff0:	10c00003 	ldbu	r3,0(r2)
 200cff4:	10800044 	addi	r2,r2,1
 200cff8:	1d402326 	beq	r3,r21,200d088 <_fputwc_r+0x16c>
 200cffc:	80800015 	stw	r2,0(r16)
 200d000:	8c400044 	addi	r17,r17,1
 200d004:	dc45883a 	add	r2,sp,r17
 200d008:	8d3fef36 	bltu	r17,r20,200cfc8 <_fputwc_r+0xac>
 200d00c:	9005883a 	mov	r2,r18
 200d010:	00000406 	br	200d024 <_fputwc_r+0x108>
 200d014:	80c0030b 	ldhu	r3,12(r16)
 200d018:	a005883a 	mov	r2,r20
 200d01c:	18c01014 	ori	r3,r3,64
 200d020:	80c0030d 	sth	r3,12(r16)
 200d024:	dfc00717 	ldw	ra,28(sp)
 200d028:	dd400617 	ldw	r21,24(sp)
 200d02c:	dd000517 	ldw	r20,20(sp)
 200d030:	dcc00417 	ldw	r19,16(sp)
 200d034:	dc800317 	ldw	r18,12(sp)
 200d038:	dc400217 	ldw	r17,8(sp)
 200d03c:	dc000117 	ldw	r16,4(sp)
 200d040:	dec00804 	addi	sp,sp,32
 200d044:	f800283a 	ret
 200d048:	9809883a 	mov	r4,r19
 200d04c:	29403fcc 	andi	r5,r5,255
 200d050:	800d883a 	mov	r6,r16
 200d054:	20065c00 	call	20065c0 <__swbuf_r>
 200d058:	10bfffe0 	cmpeqi	r2,r2,-1
 200d05c:	10803fcc 	andi	r2,r2,255
 200d060:	103fd626 	beq	r2,zero,200cfbc <_fputwc_r+0xa0>
 200d064:	00bfffc4 	movi	r2,-1
 200d068:	003fee06 	br	200d024 <_fputwc_r+0x108>
 200d06c:	90ffffc4 	addi	r3,r18,-1
 200d070:	01003f84 	movi	r4,254
 200d074:	20ffbf36 	bltu	r4,r3,200cf74 <_fputwc_r+0x58>
 200d078:	900b883a 	mov	r5,r18
 200d07c:	dc800005 	stb	r18,0(sp)
 200d080:	1029883a 	mov	r20,r2
 200d084:	003fc506 	br	200cf9c <_fputwc_r+0x80>
 200d088:	9809883a 	mov	r4,r19
 200d08c:	a80b883a 	mov	r5,r21
 200d090:	800d883a 	mov	r6,r16
 200d094:	20065c00 	call	20065c0 <__swbuf_r>
 200d098:	10bfffe0 	cmpeqi	r2,r2,-1
 200d09c:	003fef06 	br	200d05c <_fputwc_r+0x140>

0200d0a0 <fputwc>:
 200d0a0:	008080b4 	movhi	r2,514
 200d0a4:	defffc04 	addi	sp,sp,-16
 200d0a8:	10aa6704 	addi	r2,r2,-22116
 200d0ac:	dc000115 	stw	r16,4(sp)
 200d0b0:	14000017 	ldw	r16,0(r2)
 200d0b4:	dc400215 	stw	r17,8(sp)
 200d0b8:	dfc00315 	stw	ra,12(sp)
 200d0bc:	2023883a 	mov	r17,r4
 200d0c0:	280d883a 	mov	r6,r5
 200d0c4:	80000626 	beq	r16,zero,200d0e0 <fputwc+0x40>
 200d0c8:	80800e17 	ldw	r2,56(r16)
 200d0cc:	1000041e 	bne	r2,zero,200d0e0 <fputwc+0x40>
 200d0d0:	8009883a 	mov	r4,r16
 200d0d4:	d9400015 	stw	r5,0(sp)
 200d0d8:	20087ac0 	call	20087ac <__sinit>
 200d0dc:	d9800017 	ldw	r6,0(sp)
 200d0e0:	8009883a 	mov	r4,r16
 200d0e4:	880b883a 	mov	r5,r17
 200d0e8:	dfc00317 	ldw	ra,12(sp)
 200d0ec:	dc400217 	ldw	r17,8(sp)
 200d0f0:	dc000117 	ldw	r16,4(sp)
 200d0f4:	dec00404 	addi	sp,sp,16
 200d0f8:	200cf1c1 	jmpi	200cf1c <_fputwc_r>

0200d0fc <_fstat_r>:
 200d0fc:	defffd04 	addi	sp,sp,-12
 200d100:	dc000015 	stw	r16,0(sp)
 200d104:	040080b4 	movhi	r16,514
 200d108:	dc400115 	stw	r17,4(sp)
 200d10c:	842a7c04 	addi	r16,r16,-22032
 200d110:	2023883a 	mov	r17,r4
 200d114:	2809883a 	mov	r4,r5
 200d118:	300b883a 	mov	r5,r6
 200d11c:	dfc00215 	stw	ra,8(sp)
 200d120:	80000015 	stw	zero,0(r16)
 200d124:	2010ca40 	call	2010ca4 <fstat>
 200d128:	00ffffc4 	movi	r3,-1
 200d12c:	10c00526 	beq	r2,r3,200d144 <_fstat_r+0x48>
 200d130:	dfc00217 	ldw	ra,8(sp)
 200d134:	dc400117 	ldw	r17,4(sp)
 200d138:	dc000017 	ldw	r16,0(sp)
 200d13c:	dec00304 	addi	sp,sp,12
 200d140:	f800283a 	ret
 200d144:	80c00017 	ldw	r3,0(r16)
 200d148:	183ff926 	beq	r3,zero,200d130 <_fstat_r+0x34>
 200d14c:	88c00015 	stw	r3,0(r17)
 200d150:	003ff706 	br	200d130 <_fstat_r+0x34>

0200d154 <_isatty_r>:
 200d154:	defffd04 	addi	sp,sp,-12
 200d158:	dc000015 	stw	r16,0(sp)
 200d15c:	040080b4 	movhi	r16,514
 200d160:	dc400115 	stw	r17,4(sp)
 200d164:	842a7c04 	addi	r16,r16,-22032
 200d168:	2023883a 	mov	r17,r4
 200d16c:	2809883a 	mov	r4,r5
 200d170:	dfc00215 	stw	ra,8(sp)
 200d174:	80000015 	stw	zero,0(r16)
 200d178:	2010fb80 	call	2010fb8 <isatty>
 200d17c:	00ffffc4 	movi	r3,-1
 200d180:	10c00526 	beq	r2,r3,200d198 <_isatty_r+0x44>
 200d184:	dfc00217 	ldw	ra,8(sp)
 200d188:	dc400117 	ldw	r17,4(sp)
 200d18c:	dc000017 	ldw	r16,0(sp)
 200d190:	dec00304 	addi	sp,sp,12
 200d194:	f800283a 	ret
 200d198:	80c00017 	ldw	r3,0(r16)
 200d19c:	183ff926 	beq	r3,zero,200d184 <_isatty_r+0x30>
 200d1a0:	88c00015 	stw	r3,0(r17)
 200d1a4:	003ff706 	br	200d184 <_isatty_r+0x30>

0200d1a8 <_lseek_r>:
 200d1a8:	defffd04 	addi	sp,sp,-12
 200d1ac:	dc000015 	stw	r16,0(sp)
 200d1b0:	040080b4 	movhi	r16,514
 200d1b4:	dc400115 	stw	r17,4(sp)
 200d1b8:	842a7c04 	addi	r16,r16,-22032
 200d1bc:	2023883a 	mov	r17,r4
 200d1c0:	2809883a 	mov	r4,r5
 200d1c4:	300b883a 	mov	r5,r6
 200d1c8:	380d883a 	mov	r6,r7
 200d1cc:	dfc00215 	stw	ra,8(sp)
 200d1d0:	80000015 	stw	zero,0(r16)
 200d1d4:	20110b40 	call	20110b4 <lseek>
 200d1d8:	00ffffc4 	movi	r3,-1
 200d1dc:	10c00526 	beq	r2,r3,200d1f4 <_lseek_r+0x4c>
 200d1e0:	dfc00217 	ldw	ra,8(sp)
 200d1e4:	dc400117 	ldw	r17,4(sp)
 200d1e8:	dc000017 	ldw	r16,0(sp)
 200d1ec:	dec00304 	addi	sp,sp,12
 200d1f0:	f800283a 	ret
 200d1f4:	80c00017 	ldw	r3,0(r16)
 200d1f8:	183ff926 	beq	r3,zero,200d1e0 <_lseek_r+0x38>
 200d1fc:	88c00015 	stw	r3,0(r17)
 200d200:	003ff706 	br	200d1e0 <_lseek_r+0x38>

0200d204 <_read_r>:
 200d204:	defffd04 	addi	sp,sp,-12
 200d208:	dc000015 	stw	r16,0(sp)
 200d20c:	040080b4 	movhi	r16,514
 200d210:	dc400115 	stw	r17,4(sp)
 200d214:	842a7c04 	addi	r16,r16,-22032
 200d218:	2023883a 	mov	r17,r4
 200d21c:	2809883a 	mov	r4,r5
 200d220:	300b883a 	mov	r5,r6
 200d224:	380d883a 	mov	r6,r7
 200d228:	dfc00215 	stw	ra,8(sp)
 200d22c:	80000015 	stw	zero,0(r16)
 200d230:	20112980 	call	2011298 <read>
 200d234:	00ffffc4 	movi	r3,-1
 200d238:	10c00526 	beq	r2,r3,200d250 <_read_r+0x4c>
 200d23c:	dfc00217 	ldw	ra,8(sp)
 200d240:	dc400117 	ldw	r17,4(sp)
 200d244:	dc000017 	ldw	r16,0(sp)
 200d248:	dec00304 	addi	sp,sp,12
 200d24c:	f800283a 	ret
 200d250:	80c00017 	ldw	r3,0(r16)
 200d254:	183ff926 	beq	r3,zero,200d23c <_read_r+0x38>
 200d258:	88c00015 	stw	r3,0(r17)
 200d25c:	003ff706 	br	200d23c <_read_r+0x38>

0200d260 <_wcrtomb_r>:
 200d260:	defff604 	addi	sp,sp,-40
 200d264:	008080b4 	movhi	r2,514
 200d268:	dc800815 	stw	r18,32(sp)
 200d26c:	dc400715 	stw	r17,28(sp)
 200d270:	dc000615 	stw	r16,24(sp)
 200d274:	10aa6b04 	addi	r2,r2,-22100
 200d278:	dfc00915 	stw	ra,36(sp)
 200d27c:	2021883a 	mov	r16,r4
 200d280:	3823883a 	mov	r17,r7
 200d284:	14800017 	ldw	r18,0(r2)
 200d288:	28001426 	beq	r5,zero,200d2dc <_wcrtomb_r+0x7c>
 200d28c:	d9400415 	stw	r5,16(sp)
 200d290:	d9800515 	stw	r6,20(sp)
 200d294:	20093380 	call	2009338 <__locale_charset>
 200d298:	d9400417 	ldw	r5,16(sp)
 200d29c:	d9800517 	ldw	r6,20(sp)
 200d2a0:	8009883a 	mov	r4,r16
 200d2a4:	dc400015 	stw	r17,0(sp)
 200d2a8:	100f883a 	mov	r7,r2
 200d2ac:	903ee83a 	callr	r18
 200d2b0:	00ffffc4 	movi	r3,-1
 200d2b4:	10c0031e 	bne	r2,r3,200d2c4 <_wcrtomb_r+0x64>
 200d2b8:	88000015 	stw	zero,0(r17)
 200d2bc:	00c02284 	movi	r3,138
 200d2c0:	80c00015 	stw	r3,0(r16)
 200d2c4:	dfc00917 	ldw	ra,36(sp)
 200d2c8:	dc800817 	ldw	r18,32(sp)
 200d2cc:	dc400717 	ldw	r17,28(sp)
 200d2d0:	dc000617 	ldw	r16,24(sp)
 200d2d4:	dec00a04 	addi	sp,sp,40
 200d2d8:	f800283a 	ret
 200d2dc:	20093380 	call	2009338 <__locale_charset>
 200d2e0:	8009883a 	mov	r4,r16
 200d2e4:	dc400015 	stw	r17,0(sp)
 200d2e8:	d9400104 	addi	r5,sp,4
 200d2ec:	000d883a 	mov	r6,zero
 200d2f0:	100f883a 	mov	r7,r2
 200d2f4:	903ee83a 	callr	r18
 200d2f8:	003fed06 	br	200d2b0 <_wcrtomb_r+0x50>

0200d2fc <wcrtomb>:
 200d2fc:	defff604 	addi	sp,sp,-40
 200d300:	008080b4 	movhi	r2,514
 200d304:	dc800615 	stw	r18,24(sp)
 200d308:	dc400515 	stw	r17,20(sp)
 200d30c:	dc000415 	stw	r16,16(sp)
 200d310:	10aa6704 	addi	r2,r2,-22116
 200d314:	dfc00915 	stw	ra,36(sp)
 200d318:	dd000815 	stw	r20,32(sp)
 200d31c:	dcc00715 	stw	r19,28(sp)
 200d320:	2021883a 	mov	r16,r4
 200d324:	3025883a 	mov	r18,r6
 200d328:	14400017 	ldw	r17,0(r2)
 200d32c:	20001826 	beq	r4,zero,200d390 <wcrtomb+0x94>
 200d330:	008080b4 	movhi	r2,514
 200d334:	10aa6b04 	addi	r2,r2,-22100
 200d338:	15000017 	ldw	r20,0(r2)
 200d33c:	2827883a 	mov	r19,r5
 200d340:	20093380 	call	2009338 <__locale_charset>
 200d344:	8809883a 	mov	r4,r17
 200d348:	dc800015 	stw	r18,0(sp)
 200d34c:	800b883a 	mov	r5,r16
 200d350:	980d883a 	mov	r6,r19
 200d354:	100f883a 	mov	r7,r2
 200d358:	a03ee83a 	callr	r20
 200d35c:	00ffffc4 	movi	r3,-1
 200d360:	10c0031e 	bne	r2,r3,200d370 <wcrtomb+0x74>
 200d364:	90000015 	stw	zero,0(r18)
 200d368:	00c02284 	movi	r3,138
 200d36c:	88c00015 	stw	r3,0(r17)
 200d370:	dfc00917 	ldw	ra,36(sp)
 200d374:	dd000817 	ldw	r20,32(sp)
 200d378:	dcc00717 	ldw	r19,28(sp)
 200d37c:	dc800617 	ldw	r18,24(sp)
 200d380:	dc400517 	ldw	r17,20(sp)
 200d384:	dc000417 	ldw	r16,16(sp)
 200d388:	dec00a04 	addi	sp,sp,40
 200d38c:	f800283a 	ret
 200d390:	008080b4 	movhi	r2,514
 200d394:	10aa6b04 	addi	r2,r2,-22100
 200d398:	14000017 	ldw	r16,0(r2)
 200d39c:	20093380 	call	2009338 <__locale_charset>
 200d3a0:	8809883a 	mov	r4,r17
 200d3a4:	dc800015 	stw	r18,0(sp)
 200d3a8:	d9400104 	addi	r5,sp,4
 200d3ac:	000d883a 	mov	r6,zero
 200d3b0:	100f883a 	mov	r7,r2
 200d3b4:	803ee83a 	callr	r16
 200d3b8:	003fe806 	br	200d35c <wcrtomb+0x60>

0200d3bc <__ascii_wctomb>:
 200d3bc:	28000526 	beq	r5,zero,200d3d4 <__ascii_wctomb+0x18>
 200d3c0:	00803fc4 	movi	r2,255
 200d3c4:	11800536 	bltu	r2,r6,200d3dc <__ascii_wctomb+0x20>
 200d3c8:	29800005 	stb	r6,0(r5)
 200d3cc:	00800044 	movi	r2,1
 200d3d0:	f800283a 	ret
 200d3d4:	0005883a 	mov	r2,zero
 200d3d8:	f800283a 	ret
 200d3dc:	00802284 	movi	r2,138
 200d3e0:	20800015 	stw	r2,0(r4)
 200d3e4:	00bfffc4 	movi	r2,-1
 200d3e8:	f800283a 	ret

0200d3ec <_wctomb_r>:
 200d3ec:	008080b4 	movhi	r2,514
 200d3f0:	defff904 	addi	sp,sp,-28
 200d3f4:	10aa6b04 	addi	r2,r2,-22100
 200d3f8:	dfc00615 	stw	ra,24(sp)
 200d3fc:	dc400515 	stw	r17,20(sp)
 200d400:	dc000415 	stw	r16,16(sp)
 200d404:	3823883a 	mov	r17,r7
 200d408:	14000017 	ldw	r16,0(r2)
 200d40c:	d9000115 	stw	r4,4(sp)
 200d410:	d9400215 	stw	r5,8(sp)
 200d414:	d9800315 	stw	r6,12(sp)
 200d418:	20093380 	call	2009338 <__locale_charset>
 200d41c:	d9000117 	ldw	r4,4(sp)
 200d420:	d9400217 	ldw	r5,8(sp)
 200d424:	d9800317 	ldw	r6,12(sp)
 200d428:	dc400015 	stw	r17,0(sp)
 200d42c:	100f883a 	mov	r7,r2
 200d430:	803ee83a 	callr	r16
 200d434:	dfc00617 	ldw	ra,24(sp)
 200d438:	dc400517 	ldw	r17,20(sp)
 200d43c:	dc000417 	ldw	r16,16(sp)
 200d440:	dec00704 	addi	sp,sp,28
 200d444:	f800283a 	ret

0200d448 <__muldi3>:
 200d448:	defff604 	addi	sp,sp,-40
 200d44c:	dd800615 	stw	r22,24(sp)
 200d450:	dd400515 	stw	r21,20(sp)
 200d454:	25bfffcc 	andi	r22,r4,65535
 200d458:	357fffcc 	andi	r21,r6,65535
 200d45c:	dc400115 	stw	r17,4(sp)
 200d460:	2022d43a 	srli	r17,r4,16
 200d464:	dcc00315 	stw	r19,12(sp)
 200d468:	dc800215 	stw	r18,8(sp)
 200d46c:	2027883a 	mov	r19,r4
 200d470:	2825883a 	mov	r18,r5
 200d474:	a809883a 	mov	r4,r21
 200d478:	b00b883a 	mov	r5,r22
 200d47c:	dfc00915 	stw	ra,36(sp)
 200d480:	df000815 	stw	fp,32(sp)
 200d484:	ddc00715 	stw	r23,28(sp)
 200d488:	3839883a 	mov	fp,r7
 200d48c:	302ed43a 	srli	r23,r6,16
 200d490:	dd000415 	stw	r20,16(sp)
 200d494:	dc000015 	stw	r16,0(sp)
 200d498:	3029883a 	mov	r20,r6
 200d49c:	200e2dc0 	call	200e2dc <__mulsi3>
 200d4a0:	a809883a 	mov	r4,r21
 200d4a4:	880b883a 	mov	r5,r17
 200d4a8:	1021883a 	mov	r16,r2
 200d4ac:	200e2dc0 	call	200e2dc <__mulsi3>
 200d4b0:	880b883a 	mov	r5,r17
 200d4b4:	b809883a 	mov	r4,r23
 200d4b8:	102b883a 	mov	r21,r2
 200d4bc:	200e2dc0 	call	200e2dc <__mulsi3>
 200d4c0:	b809883a 	mov	r4,r23
 200d4c4:	b00b883a 	mov	r5,r22
 200d4c8:	1023883a 	mov	r17,r2
 200d4cc:	200e2dc0 	call	200e2dc <__mulsi3>
 200d4d0:	8012d43a 	srli	r9,r16,16
 200d4d4:	a885883a 	add	r2,r21,r2
 200d4d8:	1251883a 	add	r8,r2,r9
 200d4dc:	4540022e 	bgeu	r8,r21,200d4e8 <__muldi3+0xa0>
 200d4e0:	00800074 	movhi	r2,1
 200d4e4:	88a3883a 	add	r17,r17,r2
 200d4e8:	4006d43a 	srli	r3,r8,16
 200d4ec:	4010943a 	slli	r8,r8,16
 200d4f0:	9809883a 	mov	r4,r19
 200d4f4:	e00b883a 	mov	r5,fp
 200d4f8:	843fffcc 	andi	r16,r16,65535
 200d4fc:	88e3883a 	add	r17,r17,r3
 200d500:	4421883a 	add	r16,r8,r16
 200d504:	200e2dc0 	call	200e2dc <__mulsi3>
 200d508:	a009883a 	mov	r4,r20
 200d50c:	900b883a 	mov	r5,r18
 200d510:	1027883a 	mov	r19,r2
 200d514:	200e2dc0 	call	200e2dc <__mulsi3>
 200d518:	9885883a 	add	r2,r19,r2
 200d51c:	1447883a 	add	r3,r2,r17
 200d520:	8005883a 	mov	r2,r16
 200d524:	dfc00917 	ldw	ra,36(sp)
 200d528:	df000817 	ldw	fp,32(sp)
 200d52c:	ddc00717 	ldw	r23,28(sp)
 200d530:	dd800617 	ldw	r22,24(sp)
 200d534:	dd400517 	ldw	r21,20(sp)
 200d538:	dd000417 	ldw	r20,16(sp)
 200d53c:	dcc00317 	ldw	r19,12(sp)
 200d540:	dc800217 	ldw	r18,8(sp)
 200d544:	dc400117 	ldw	r17,4(sp)
 200d548:	dc000017 	ldw	r16,0(sp)
 200d54c:	dec00a04 	addi	sp,sp,40
 200d550:	f800283a 	ret

0200d554 <__udivdi3>:
 200d554:	defff504 	addi	sp,sp,-44
 200d558:	dcc00415 	stw	r19,16(sp)
 200d55c:	dc000115 	stw	r16,4(sp)
 200d560:	dfc00a15 	stw	ra,40(sp)
 200d564:	df000915 	stw	fp,36(sp)
 200d568:	ddc00815 	stw	r23,32(sp)
 200d56c:	dd800715 	stw	r22,28(sp)
 200d570:	dd400615 	stw	r21,24(sp)
 200d574:	dd000515 	stw	r20,20(sp)
 200d578:	dc800315 	stw	r18,12(sp)
 200d57c:	dc400215 	stw	r17,8(sp)
 200d580:	2027883a 	mov	r19,r4
 200d584:	2821883a 	mov	r16,r5
 200d588:	3800471e 	bne	r7,zero,200d6a8 <__udivdi3+0x154>
 200d58c:	3025883a 	mov	r18,r6
 200d590:	2023883a 	mov	r17,r4
 200d594:	2980592e 	bgeu	r5,r6,200d6fc <__udivdi3+0x1a8>
 200d598:	00bfffd4 	movui	r2,65535
 200d59c:	2829883a 	mov	r20,r5
 200d5a0:	1180b236 	bltu	r2,r6,200d86c <__udivdi3+0x318>
 200d5a4:	00803fc4 	movi	r2,255
 200d5a8:	1181622e 	bgeu	r2,r6,200db34 <__udivdi3+0x5e0>
 200d5ac:	00800204 	movi	r2,8
 200d5b0:	1007883a 	mov	r3,r2
 200d5b4:	3084d83a 	srl	r2,r6,r2
 200d5b8:	010080b4 	movhi	r4,514
 200d5bc:	21232b04 	addi	r4,r4,-29524
 200d5c0:	2085883a 	add	r2,r4,r2
 200d5c4:	11000003 	ldbu	r4,0(r2)
 200d5c8:	20c9883a 	add	r4,r4,r3
 200d5cc:	00c00804 	movi	r3,32
 200d5d0:	1907c83a 	sub	r3,r3,r4
 200d5d4:	18000526 	beq	r3,zero,200d5ec <__udivdi3+0x98>
 200d5d8:	80e0983a 	sll	r16,r16,r3
 200d5dc:	9908d83a 	srl	r4,r19,r4
 200d5e0:	30e4983a 	sll	r18,r6,r3
 200d5e4:	98e2983a 	sll	r17,r19,r3
 200d5e8:	8128b03a 	or	r20,r16,r4
 200d5ec:	902ad43a 	srli	r21,r18,16
 200d5f0:	a009883a 	mov	r4,r20
 200d5f4:	95bfffcc 	andi	r22,r18,65535
 200d5f8:	a80b883a 	mov	r5,r21
 200d5fc:	200e2d40 	call	200e2d4 <__umodsi3>
 200d600:	a009883a 	mov	r4,r20
 200d604:	a80b883a 	mov	r5,r21
 200d608:	102f883a 	mov	r23,r2
 200d60c:	200e2cc0 	call	200e2cc <__udivsi3>
 200d610:	1009883a 	mov	r4,r2
 200d614:	b00b883a 	mov	r5,r22
 200d618:	1021883a 	mov	r16,r2
 200d61c:	200e2dc0 	call	200e2dc <__mulsi3>
 200d620:	b82e943a 	slli	r23,r23,16
 200d624:	8808d43a 	srli	r4,r17,16
 200d628:	b906b03a 	or	r3,r23,r4
 200d62c:	1880052e 	bgeu	r3,r2,200d644 <__udivdi3+0xf0>
 200d630:	1c87883a 	add	r3,r3,r18
 200d634:	813fffc4 	addi	r4,r16,-1
 200d638:	1c800136 	bltu	r3,r18,200d640 <__udivdi3+0xec>
 200d63c:	18815236 	bltu	r3,r2,200db88 <__udivdi3+0x634>
 200d640:	2021883a 	mov	r16,r4
 200d644:	18a7c83a 	sub	r19,r3,r2
 200d648:	9809883a 	mov	r4,r19
 200d64c:	a80b883a 	mov	r5,r21
 200d650:	200e2d40 	call	200e2d4 <__umodsi3>
 200d654:	1029883a 	mov	r20,r2
 200d658:	9809883a 	mov	r4,r19
 200d65c:	a80b883a 	mov	r5,r21
 200d660:	a028943a 	slli	r20,r20,16
 200d664:	200e2cc0 	call	200e2cc <__udivsi3>
 200d668:	1009883a 	mov	r4,r2
 200d66c:	b00b883a 	mov	r5,r22
 200d670:	8c7fffcc 	andi	r17,r17,65535
 200d674:	1027883a 	mov	r19,r2
 200d678:	a462b03a 	or	r17,r20,r17
 200d67c:	200e2dc0 	call	200e2dc <__mulsi3>
 200d680:	8880052e 	bgeu	r17,r2,200d698 <__udivdi3+0x144>
 200d684:	8ca3883a 	add	r17,r17,r18
 200d688:	98ffffc4 	addi	r3,r19,-1
 200d68c:	8c811036 	bltu	r17,r18,200dad0 <__udivdi3+0x57c>
 200d690:	88810f2e 	bgeu	r17,r2,200dad0 <__udivdi3+0x57c>
 200d694:	9cffff84 	addi	r19,r19,-2
 200d698:	8020943a 	slli	r16,r16,16
 200d69c:	0007883a 	mov	r3,zero
 200d6a0:	9c04b03a 	or	r2,r19,r16
 200d6a4:	00006006 	br	200d828 <__udivdi3+0x2d4>
 200d6a8:	29c05d36 	bltu	r5,r7,200d820 <__udivdi3+0x2cc>
 200d6ac:	00bfffd4 	movui	r2,65535
 200d6b0:	11c0692e 	bgeu	r2,r7,200d858 <__udivdi3+0x304>
 200d6b4:	00804034 	movhi	r2,256
 200d6b8:	10bfffc4 	addi	r2,r2,-1
 200d6bc:	11c10e2e 	bgeu	r2,r7,200daf8 <__udivdi3+0x5a4>
 200d6c0:	01400604 	movi	r5,24
 200d6c4:	2811883a 	mov	r8,r5
 200d6c8:	394ad83a 	srl	r5,r7,r5
 200d6cc:	008080b4 	movhi	r2,514
 200d6d0:	10a32b04 	addi	r2,r2,-29524
 200d6d4:	114b883a 	add	r5,r2,r5
 200d6d8:	29400003 	ldbu	r5,0(r5)
 200d6dc:	00c00804 	movi	r3,32
 200d6e0:	2a0b883a 	add	r5,r5,r8
 200d6e4:	196fc83a 	sub	r23,r3,r5
 200d6e8:	b8006b1e 	bne	r23,zero,200d898 <__udivdi3+0x344>
 200d6ec:	3c011436 	bltu	r7,r16,200db40 <__udivdi3+0x5ec>
 200d6f0:	9985403a 	cmpgeu	r2,r19,r6
 200d6f4:	0007883a 	mov	r3,zero
 200d6f8:	00004b06 	br	200d828 <__udivdi3+0x2d4>
 200d6fc:	3000041e 	bne	r6,zero,200d710 <__udivdi3+0x1bc>
 200d700:	01000044 	movi	r4,1
 200d704:	000b883a 	mov	r5,zero
 200d708:	200e2cc0 	call	200e2cc <__udivsi3>
 200d70c:	1025883a 	mov	r18,r2
 200d710:	00bfffd4 	movui	r2,65535
 200d714:	14805b2e 	bgeu	r2,r18,200d884 <__udivdi3+0x330>
 200d718:	00804034 	movhi	r2,256
 200d71c:	10bfffc4 	addi	r2,r2,-1
 200d720:	1480fe2e 	bgeu	r2,r18,200db1c <__udivdi3+0x5c8>
 200d724:	00800604 	movi	r2,24
 200d728:	1007883a 	mov	r3,r2
 200d72c:	9084d83a 	srl	r2,r18,r2
 200d730:	010080b4 	movhi	r4,514
 200d734:	21232b04 	addi	r4,r4,-29524
 200d738:	2085883a 	add	r2,r4,r2
 200d73c:	11800003 	ldbu	r6,0(r2)
 200d740:	01c00804 	movi	r7,32
 200d744:	30c7883a 	add	r3,r6,r3
 200d748:	38cfc83a 	sub	r7,r7,r3
 200d74c:	3800a71e 	bne	r7,zero,200d9ec <__udivdi3+0x498>
 200d750:	9028d43a 	srli	r20,r18,16
 200d754:	84a1c83a 	sub	r16,r16,r18
 200d758:	957fffcc 	andi	r21,r18,65535
 200d75c:	00c00044 	movi	r3,1
 200d760:	8009883a 	mov	r4,r16
 200d764:	a00b883a 	mov	r5,r20
 200d768:	d8c00015 	stw	r3,0(sp)
 200d76c:	200e2d40 	call	200e2d4 <__umodsi3>
 200d770:	8009883a 	mov	r4,r16
 200d774:	a00b883a 	mov	r5,r20
 200d778:	102d883a 	mov	r22,r2
 200d77c:	200e2cc0 	call	200e2cc <__udivsi3>
 200d780:	1009883a 	mov	r4,r2
 200d784:	a80b883a 	mov	r5,r21
 200d788:	1021883a 	mov	r16,r2
 200d78c:	200e2dc0 	call	200e2dc <__mulsi3>
 200d790:	b02c943a 	slli	r22,r22,16
 200d794:	880ed43a 	srli	r7,r17,16
 200d798:	d8c00017 	ldw	r3,0(sp)
 200d79c:	b1ccb03a 	or	r6,r22,r7
 200d7a0:	3080052e 	bgeu	r6,r2,200d7b8 <__udivdi3+0x264>
 200d7a4:	348d883a 	add	r6,r6,r18
 200d7a8:	813fffc4 	addi	r4,r16,-1
 200d7ac:	34800136 	bltu	r6,r18,200d7b4 <__udivdi3+0x260>
 200d7b0:	3080f236 	bltu	r6,r2,200db7c <__udivdi3+0x628>
 200d7b4:	2021883a 	mov	r16,r4
 200d7b8:	30a7c83a 	sub	r19,r6,r2
 200d7bc:	9809883a 	mov	r4,r19
 200d7c0:	a00b883a 	mov	r5,r20
 200d7c4:	d8c00015 	stw	r3,0(sp)
 200d7c8:	200e2d40 	call	200e2d4 <__umodsi3>
 200d7cc:	102d883a 	mov	r22,r2
 200d7d0:	9809883a 	mov	r4,r19
 200d7d4:	a00b883a 	mov	r5,r20
 200d7d8:	b02c943a 	slli	r22,r22,16
 200d7dc:	200e2cc0 	call	200e2cc <__udivsi3>
 200d7e0:	1009883a 	mov	r4,r2
 200d7e4:	a80b883a 	mov	r5,r21
 200d7e8:	8c7fffcc 	andi	r17,r17,65535
 200d7ec:	1027883a 	mov	r19,r2
 200d7f0:	b462b03a 	or	r17,r22,r17
 200d7f4:	200e2dc0 	call	200e2dc <__mulsi3>
 200d7f8:	d8c00017 	ldw	r3,0(sp)
 200d7fc:	8880052e 	bgeu	r17,r2,200d814 <__udivdi3+0x2c0>
 200d800:	8ca3883a 	add	r17,r17,r18
 200d804:	993fffc4 	addi	r4,r19,-1
 200d808:	8c80af36 	bltu	r17,r18,200dac8 <__udivdi3+0x574>
 200d80c:	8880ae2e 	bgeu	r17,r2,200dac8 <__udivdi3+0x574>
 200d810:	9cffff84 	addi	r19,r19,-2
 200d814:	8020943a 	slli	r16,r16,16
 200d818:	9c04b03a 	or	r2,r19,r16
 200d81c:	00000206 	br	200d828 <__udivdi3+0x2d4>
 200d820:	0007883a 	mov	r3,zero
 200d824:	0005883a 	mov	r2,zero
 200d828:	dfc00a17 	ldw	ra,40(sp)
 200d82c:	df000917 	ldw	fp,36(sp)
 200d830:	ddc00817 	ldw	r23,32(sp)
 200d834:	dd800717 	ldw	r22,28(sp)
 200d838:	dd400617 	ldw	r21,24(sp)
 200d83c:	dd000517 	ldw	r20,20(sp)
 200d840:	dcc00417 	ldw	r19,16(sp)
 200d844:	dc800317 	ldw	r18,12(sp)
 200d848:	dc400217 	ldw	r17,8(sp)
 200d84c:	dc000117 	ldw	r16,4(sp)
 200d850:	dec00b04 	addi	sp,sp,44
 200d854:	f800283a 	ret
 200d858:	00803fc4 	movi	r2,255
 200d85c:	11c0a92e 	bgeu	r2,r7,200db04 <__udivdi3+0x5b0>
 200d860:	01400204 	movi	r5,8
 200d864:	2811883a 	mov	r8,r5
 200d868:	003f9706 	br	200d6c8 <__udivdi3+0x174>
 200d86c:	00804034 	movhi	r2,256
 200d870:	10bfffc4 	addi	r2,r2,-1
 200d874:	1180a62e 	bgeu	r2,r6,200db10 <__udivdi3+0x5bc>
 200d878:	00800604 	movi	r2,24
 200d87c:	1007883a 	mov	r3,r2
 200d880:	003f4c06 	br	200d5b4 <__udivdi3+0x60>
 200d884:	00803fc4 	movi	r2,255
 200d888:	1480a72e 	bgeu	r2,r18,200db28 <__udivdi3+0x5d4>
 200d88c:	00800204 	movi	r2,8
 200d890:	1007883a 	mov	r3,r2
 200d894:	003fa506 	br	200d72c <__udivdi3+0x1d8>
 200d898:	3178d83a 	srl	fp,r6,r5
 200d89c:	3dce983a 	sll	r7,r7,r23
 200d8a0:	8168d83a 	srl	r20,r16,r5
 200d8a4:	9950d83a 	srl	r8,r19,r5
 200d8a8:	3f38b03a 	or	fp,r7,fp
 200d8ac:	e024d43a 	srli	r18,fp,16
 200d8b0:	85e0983a 	sll	r16,r16,r23
 200d8b4:	a009883a 	mov	r4,r20
 200d8b8:	900b883a 	mov	r5,r18
 200d8bc:	8220b03a 	or	r16,r16,r8
 200d8c0:	35ea983a 	sll	r21,r6,r23
 200d8c4:	200e2d40 	call	200e2d4 <__umodsi3>
 200d8c8:	a009883a 	mov	r4,r20
 200d8cc:	900b883a 	mov	r5,r18
 200d8d0:	1023883a 	mov	r17,r2
 200d8d4:	e5bfffcc 	andi	r22,fp,65535
 200d8d8:	200e2cc0 	call	200e2cc <__udivsi3>
 200d8dc:	1009883a 	mov	r4,r2
 200d8e0:	b00b883a 	mov	r5,r22
 200d8e4:	1029883a 	mov	r20,r2
 200d8e8:	200e2dc0 	call	200e2dc <__mulsi3>
 200d8ec:	8806943a 	slli	r3,r17,16
 200d8f0:	8014d43a 	srli	r10,r16,16
 200d8f4:	1a92b03a 	or	r9,r3,r10
 200d8f8:	4880042e 	bgeu	r9,r2,200d90c <__udivdi3+0x3b8>
 200d8fc:	4f13883a 	add	r9,r9,fp
 200d900:	a0ffffc4 	addi	r3,r20,-1
 200d904:	4f00952e 	bgeu	r9,fp,200db5c <__udivdi3+0x608>
 200d908:	1829883a 	mov	r20,r3
 200d90c:	48a3c83a 	sub	r17,r9,r2
 200d910:	8809883a 	mov	r4,r17
 200d914:	900b883a 	mov	r5,r18
 200d918:	200e2d40 	call	200e2d4 <__umodsi3>
 200d91c:	8809883a 	mov	r4,r17
 200d920:	900b883a 	mov	r5,r18
 200d924:	d8800015 	stw	r2,0(sp)
 200d928:	200e2cc0 	call	200e2cc <__udivsi3>
 200d92c:	1009883a 	mov	r4,r2
 200d930:	b00b883a 	mov	r5,r22
 200d934:	1023883a 	mov	r17,r2
 200d938:	200e2dc0 	call	200e2dc <__mulsi3>
 200d93c:	d8c00017 	ldw	r3,0(sp)
 200d940:	823fffcc 	andi	r8,r16,65535
 200d944:	1806943a 	slli	r3,r3,16
 200d948:	1a20b03a 	or	r16,r3,r8
 200d94c:	8080042e 	bgeu	r16,r2,200d960 <__udivdi3+0x40c>
 200d950:	8721883a 	add	r16,r16,fp
 200d954:	88ffffc4 	addi	r3,r17,-1
 200d958:	87007c2e 	bgeu	r16,fp,200db4c <__udivdi3+0x5f8>
 200d95c:	1823883a 	mov	r17,r3
 200d960:	a028943a 	slli	r20,r20,16
 200d964:	acbfffcc 	andi	r18,r21,65535
 200d968:	900b883a 	mov	r5,r18
 200d96c:	8d28b03a 	or	r20,r17,r20
 200d970:	a022d43a 	srli	r17,r20,16
 200d974:	a5bfffcc 	andi	r22,r20,65535
 200d978:	b009883a 	mov	r4,r22
 200d97c:	a82ad43a 	srli	r21,r21,16
 200d980:	80a1c83a 	sub	r16,r16,r2
 200d984:	200e2dc0 	call	200e2dc <__mulsi3>
 200d988:	8809883a 	mov	r4,r17
 200d98c:	900b883a 	mov	r5,r18
 200d990:	1039883a 	mov	fp,r2
 200d994:	200e2dc0 	call	200e2dc <__mulsi3>
 200d998:	8809883a 	mov	r4,r17
 200d99c:	a80b883a 	mov	r5,r21
 200d9a0:	1025883a 	mov	r18,r2
 200d9a4:	200e2dc0 	call	200e2dc <__mulsi3>
 200d9a8:	b009883a 	mov	r4,r22
 200d9ac:	a80b883a 	mov	r5,r21
 200d9b0:	1023883a 	mov	r17,r2
 200d9b4:	200e2dc0 	call	200e2dc <__mulsi3>
 200d9b8:	e006d43a 	srli	r3,fp,16
 200d9bc:	9085883a 	add	r2,r18,r2
 200d9c0:	10c7883a 	add	r3,r2,r3
 200d9c4:	1c80022e 	bgeu	r3,r18,200d9d0 <__udivdi3+0x47c>
 200d9c8:	00800074 	movhi	r2,1
 200d9cc:	88a3883a 	add	r17,r17,r2
 200d9d0:	1808d43a 	srli	r4,r3,16
 200d9d4:	8909883a 	add	r4,r17,r4
 200d9d8:	81004436 	bltu	r16,r4,200daec <__udivdi3+0x598>
 200d9dc:	81003e26 	beq	r16,r4,200dad8 <__udivdi3+0x584>
 200d9e0:	a005883a 	mov	r2,r20
 200d9e4:	0007883a 	mov	r3,zero
 200d9e8:	003f8f06 	br	200d828 <__udivdi3+0x2d4>
 200d9ec:	91e4983a 	sll	r18,r18,r7
 200d9f0:	80eed83a 	srl	r23,r16,r3
 200d9f4:	81cc983a 	sll	r6,r16,r7
 200d9f8:	9028d43a 	srli	r20,r18,16
 200d9fc:	98c6d83a 	srl	r3,r19,r3
 200da00:	b809883a 	mov	r4,r23
 200da04:	a00b883a 	mov	r5,r20
 200da08:	30ecb03a 	or	r22,r6,r3
 200da0c:	99e2983a 	sll	r17,r19,r7
 200da10:	200e2d40 	call	200e2d4 <__umodsi3>
 200da14:	b809883a 	mov	r4,r23
 200da18:	a00b883a 	mov	r5,r20
 200da1c:	1021883a 	mov	r16,r2
 200da20:	957fffcc 	andi	r21,r18,65535
 200da24:	200e2cc0 	call	200e2cc <__udivsi3>
 200da28:	a80b883a 	mov	r5,r21
 200da2c:	1009883a 	mov	r4,r2
 200da30:	102f883a 	mov	r23,r2
 200da34:	200e2dc0 	call	200e2dc <__mulsi3>
 200da38:	8020943a 	slli	r16,r16,16
 200da3c:	b00ad43a 	srli	r5,r22,16
 200da40:	814cb03a 	or	r6,r16,r5
 200da44:	3080062e 	bgeu	r6,r2,200da60 <__udivdi3+0x50c>
 200da48:	348d883a 	add	r6,r6,r18
 200da4c:	b8ffffc4 	addi	r3,r23,-1
 200da50:	34804836 	bltu	r6,r18,200db74 <__udivdi3+0x620>
 200da54:	3080472e 	bgeu	r6,r2,200db74 <__udivdi3+0x620>
 200da58:	bdffff84 	addi	r23,r23,-2
 200da5c:	348d883a 	add	r6,r6,r18
 200da60:	30a7c83a 	sub	r19,r6,r2
 200da64:	9809883a 	mov	r4,r19
 200da68:	a00b883a 	mov	r5,r20
 200da6c:	200e2d40 	call	200e2d4 <__umodsi3>
 200da70:	9809883a 	mov	r4,r19
 200da74:	a00b883a 	mov	r5,r20
 200da78:	1039883a 	mov	fp,r2
 200da7c:	200e2cc0 	call	200e2cc <__udivsi3>
 200da80:	1009883a 	mov	r4,r2
 200da84:	a80b883a 	mov	r5,r21
 200da88:	e038943a 	slli	fp,fp,16
 200da8c:	1027883a 	mov	r19,r2
 200da90:	200e2dc0 	call	200e2dc <__mulsi3>
 200da94:	b1bfffcc 	andi	r6,r22,65535
 200da98:	e18cb03a 	or	r6,fp,r6
 200da9c:	3080062e 	bgeu	r6,r2,200dab8 <__udivdi3+0x564>
 200daa0:	348d883a 	add	r6,r6,r18
 200daa4:	98ffffc4 	addi	r3,r19,-1
 200daa8:	34803036 	bltu	r6,r18,200db6c <__udivdi3+0x618>
 200daac:	30802f2e 	bgeu	r6,r2,200db6c <__udivdi3+0x618>
 200dab0:	9cffff84 	addi	r19,r19,-2
 200dab4:	348d883a 	add	r6,r6,r18
 200dab8:	b82e943a 	slli	r23,r23,16
 200dabc:	30a1c83a 	sub	r16,r6,r2
 200dac0:	9dc6b03a 	or	r3,r19,r23
 200dac4:	003f2606 	br	200d760 <__udivdi3+0x20c>
 200dac8:	2027883a 	mov	r19,r4
 200dacc:	003f5106 	br	200d814 <__udivdi3+0x2c0>
 200dad0:	1827883a 	mov	r19,r3
 200dad4:	003ef006 	br	200d698 <__udivdi3+0x144>
 200dad8:	1808943a 	slli	r4,r3,16
 200dadc:	9dc6983a 	sll	r3,r19,r23
 200dae0:	e73fffcc 	andi	fp,fp,65535
 200dae4:	2709883a 	add	r4,r4,fp
 200dae8:	193fbd2e 	bgeu	r3,r4,200d9e0 <__udivdi3+0x48c>
 200daec:	a0bfffc4 	addi	r2,r20,-1
 200daf0:	0007883a 	mov	r3,zero
 200daf4:	003f4c06 	br	200d828 <__udivdi3+0x2d4>
 200daf8:	01400404 	movi	r5,16
 200dafc:	2811883a 	mov	r8,r5
 200db00:	003ef106 	br	200d6c8 <__udivdi3+0x174>
 200db04:	000b883a 	mov	r5,zero
 200db08:	0011883a 	mov	r8,zero
 200db0c:	003eee06 	br	200d6c8 <__udivdi3+0x174>
 200db10:	00800404 	movi	r2,16
 200db14:	1007883a 	mov	r3,r2
 200db18:	003ea606 	br	200d5b4 <__udivdi3+0x60>
 200db1c:	00800404 	movi	r2,16
 200db20:	1007883a 	mov	r3,r2
 200db24:	003f0106 	br	200d72c <__udivdi3+0x1d8>
 200db28:	0005883a 	mov	r2,zero
 200db2c:	0007883a 	mov	r3,zero
 200db30:	003efe06 	br	200d72c <__udivdi3+0x1d8>
 200db34:	0005883a 	mov	r2,zero
 200db38:	0007883a 	mov	r3,zero
 200db3c:	003e9d06 	br	200d5b4 <__udivdi3+0x60>
 200db40:	0007883a 	mov	r3,zero
 200db44:	00800044 	movi	r2,1
 200db48:	003f3706 	br	200d828 <__udivdi3+0x2d4>
 200db4c:	80bf832e 	bgeu	r16,r2,200d95c <__udivdi3+0x408>
 200db50:	8c7fff84 	addi	r17,r17,-2
 200db54:	8721883a 	add	r16,r16,fp
 200db58:	003f8106 	br	200d960 <__udivdi3+0x40c>
 200db5c:	48bf6a2e 	bgeu	r9,r2,200d908 <__udivdi3+0x3b4>
 200db60:	a53fff84 	addi	r20,r20,-2
 200db64:	4f13883a 	add	r9,r9,fp
 200db68:	003f6806 	br	200d90c <__udivdi3+0x3b8>
 200db6c:	1827883a 	mov	r19,r3
 200db70:	003fd106 	br	200dab8 <__udivdi3+0x564>
 200db74:	182f883a 	mov	r23,r3
 200db78:	003fb906 	br	200da60 <__udivdi3+0x50c>
 200db7c:	843fff84 	addi	r16,r16,-2
 200db80:	348d883a 	add	r6,r6,r18
 200db84:	003f0c06 	br	200d7b8 <__udivdi3+0x264>
 200db88:	843fff84 	addi	r16,r16,-2
 200db8c:	1c87883a 	add	r3,r3,r18
 200db90:	003eac06 	br	200d644 <__udivdi3+0xf0>

0200db94 <__umoddi3>:
 200db94:	defff404 	addi	sp,sp,-48
 200db98:	dd800815 	stw	r22,32(sp)
 200db9c:	dc400315 	stw	r17,12(sp)
 200dba0:	dc000215 	stw	r16,8(sp)
 200dba4:	dfc00b15 	stw	ra,44(sp)
 200dba8:	df000a15 	stw	fp,40(sp)
 200dbac:	ddc00915 	stw	r23,36(sp)
 200dbb0:	dd400715 	stw	r21,28(sp)
 200dbb4:	dd000615 	stw	r20,24(sp)
 200dbb8:	dcc00515 	stw	r19,20(sp)
 200dbbc:	dc800415 	stw	r18,16(sp)
 200dbc0:	2021883a 	mov	r16,r4
 200dbc4:	2823883a 	mov	r17,r5
 200dbc8:	282d883a 	mov	r22,r5
 200dbcc:	38003c1e 	bne	r7,zero,200dcc0 <__umoddi3+0x12c>
 200dbd0:	3027883a 	mov	r19,r6
 200dbd4:	2029883a 	mov	r20,r4
 200dbd8:	2980522e 	bgeu	r5,r6,200dd24 <__umoddi3+0x190>
 200dbdc:	00bfffd4 	movui	r2,65535
 200dbe0:	1180a436 	bltu	r2,r6,200de74 <__umoddi3+0x2e0>
 200dbe4:	00803fc4 	movi	r2,255
 200dbe8:	11815e2e 	bgeu	r2,r6,200e164 <__umoddi3+0x5d0>
 200dbec:	01400204 	movi	r5,8
 200dbf0:	2805883a 	mov	r2,r5
 200dbf4:	314ad83a 	srl	r5,r6,r5
 200dbf8:	00c080b4 	movhi	r3,514
 200dbfc:	18e32b04 	addi	r3,r3,-29524
 200dc00:	194b883a 	add	r5,r3,r5
 200dc04:	29000003 	ldbu	r4,0(r5)
 200dc08:	2089883a 	add	r4,r4,r2
 200dc0c:	00800804 	movi	r2,32
 200dc10:	1105c83a 	sub	r2,r2,r4
 200dc14:	10010c26 	beq	r2,zero,200e048 <__umoddi3+0x4b4>
 200dc18:	88a2983a 	sll	r17,r17,r2
 200dc1c:	8108d83a 	srl	r4,r16,r4
 200dc20:	30a6983a 	sll	r19,r6,r2
 200dc24:	80a8983a 	sll	r20,r16,r2
 200dc28:	1025883a 	mov	r18,r2
 200dc2c:	892cb03a 	or	r22,r17,r4
 200dc30:	9822d43a 	srli	r17,r19,16
 200dc34:	b009883a 	mov	r4,r22
 200dc38:	9d7fffcc 	andi	r21,r19,65535
 200dc3c:	880b883a 	mov	r5,r17
 200dc40:	200e2d40 	call	200e2d4 <__umodsi3>
 200dc44:	b009883a 	mov	r4,r22
 200dc48:	880b883a 	mov	r5,r17
 200dc4c:	102f883a 	mov	r23,r2
 200dc50:	200e2cc0 	call	200e2cc <__udivsi3>
 200dc54:	1009883a 	mov	r4,r2
 200dc58:	a80b883a 	mov	r5,r21
 200dc5c:	200e2dc0 	call	200e2dc <__mulsi3>
 200dc60:	b82e943a 	slli	r23,r23,16
 200dc64:	a008d43a 	srli	r4,r20,16
 200dc68:	b906b03a 	or	r3,r23,r4
 200dc6c:	1880042e 	bgeu	r3,r2,200dc80 <__umoddi3+0xec>
 200dc70:	1cc7883a 	add	r3,r3,r19
 200dc74:	1cc00236 	bltu	r3,r19,200dc80 <__umoddi3+0xec>
 200dc78:	1880012e 	bgeu	r3,r2,200dc80 <__umoddi3+0xec>
 200dc7c:	1cc7883a 	add	r3,r3,r19
 200dc80:	18a1c83a 	sub	r16,r3,r2
 200dc84:	8009883a 	mov	r4,r16
 200dc88:	880b883a 	mov	r5,r17
 200dc8c:	200e2d40 	call	200e2d4 <__umodsi3>
 200dc90:	8009883a 	mov	r4,r16
 200dc94:	880b883a 	mov	r5,r17
 200dc98:	102d883a 	mov	r22,r2
 200dc9c:	200e2cc0 	call	200e2cc <__udivsi3>
 200dca0:	1009883a 	mov	r4,r2
 200dca4:	a80b883a 	mov	r5,r21
 200dca8:	b02c943a 	slli	r22,r22,16
 200dcac:	200e2dc0 	call	200e2dc <__mulsi3>
 200dcb0:	a13fffcc 	andi	r4,r20,65535
 200dcb4:	b106b03a 	or	r3,r22,r4
 200dcb8:	1880572e 	bgeu	r3,r2,200de18 <__umoddi3+0x284>
 200dcbc:	00005206 	br	200de08 <__umoddi3+0x274>
 200dcc0:	29c05936 	bltu	r5,r7,200de28 <__umoddi3+0x294>
 200dcc4:	00bfffd4 	movui	r2,65535
 200dcc8:	11c0652e 	bgeu	r2,r7,200de60 <__umoddi3+0x2cc>
 200dccc:	00804034 	movhi	r2,256
 200dcd0:	10bfffc4 	addi	r2,r2,-1
 200dcd4:	11c1172e 	bgeu	r2,r7,200e134 <__umoddi3+0x5a0>
 200dcd8:	01400604 	movi	r5,24
 200dcdc:	282b883a 	mov	r21,r5
 200dce0:	394ad83a 	srl	r5,r7,r5
 200dce4:	00c080b4 	movhi	r3,514
 200dce8:	18e32b04 	addi	r3,r3,-29524
 200dcec:	194b883a 	add	r5,r3,r5
 200dcf0:	28800003 	ldbu	r2,0(r5)
 200dcf4:	00c00804 	movi	r3,32
 200dcf8:	156b883a 	add	r21,r2,r21
 200dcfc:	1d69c83a 	sub	r20,r3,r21
 200dd00:	a000671e 	bne	r20,zero,200dea0 <__umoddi3+0x30c>
 200dd04:	3c400136 	bltu	r7,r17,200dd0c <__umoddi3+0x178>
 200dd08:	81812336 	bltu	r16,r6,200e198 <__umoddi3+0x604>
 200dd0c:	8185c83a 	sub	r2,r16,r6
 200dd10:	89e3c83a 	sub	r17,r17,r7
 200dd14:	8087803a 	cmpltu	r3,r16,r2
 200dd18:	88edc83a 	sub	r22,r17,r3
 200dd1c:	b007883a 	mov	r3,r22
 200dd20:	00004306 	br	200de30 <__umoddi3+0x29c>
 200dd24:	3000041e 	bne	r6,zero,200dd38 <__umoddi3+0x1a4>
 200dd28:	01000044 	movi	r4,1
 200dd2c:	000b883a 	mov	r5,zero
 200dd30:	200e2cc0 	call	200e2cc <__udivsi3>
 200dd34:	1027883a 	mov	r19,r2
 200dd38:	00bfffd4 	movui	r2,65535
 200dd3c:	14c0532e 	bgeu	r2,r19,200de8c <__umoddi3+0x2f8>
 200dd40:	00804034 	movhi	r2,256
 200dd44:	10bfffc4 	addi	r2,r2,-1
 200dd48:	14c1032e 	bgeu	r2,r19,200e158 <__umoddi3+0x5c4>
 200dd4c:	00800604 	movi	r2,24
 200dd50:	1007883a 	mov	r3,r2
 200dd54:	9884d83a 	srl	r2,r19,r2
 200dd58:	010080b4 	movhi	r4,514
 200dd5c:	21232b04 	addi	r4,r4,-29524
 200dd60:	2085883a 	add	r2,r4,r2
 200dd64:	11000003 	ldbu	r4,0(r2)
 200dd68:	00800804 	movi	r2,32
 200dd6c:	20c7883a 	add	r3,r4,r3
 200dd70:	10c5c83a 	sub	r2,r2,r3
 200dd74:	1000b61e 	bne	r2,zero,200e050 <__umoddi3+0x4bc>
 200dd78:	982ad43a 	srli	r21,r19,16
 200dd7c:	8ce3c83a 	sub	r17,r17,r19
 200dd80:	9dbfffcc 	andi	r22,r19,65535
 200dd84:	0025883a 	mov	r18,zero
 200dd88:	8809883a 	mov	r4,r17
 200dd8c:	a80b883a 	mov	r5,r21
 200dd90:	200e2d40 	call	200e2d4 <__umodsi3>
 200dd94:	8809883a 	mov	r4,r17
 200dd98:	a80b883a 	mov	r5,r21
 200dd9c:	102f883a 	mov	r23,r2
 200dda0:	200e2cc0 	call	200e2cc <__udivsi3>
 200dda4:	1009883a 	mov	r4,r2
 200dda8:	b00b883a 	mov	r5,r22
 200ddac:	200e2dc0 	call	200e2dc <__mulsi3>
 200ddb0:	b82e943a 	slli	r23,r23,16
 200ddb4:	a008d43a 	srli	r4,r20,16
 200ddb8:	b906b03a 	or	r3,r23,r4
 200ddbc:	1880032e 	bgeu	r3,r2,200ddcc <__umoddi3+0x238>
 200ddc0:	1cc7883a 	add	r3,r3,r19
 200ddc4:	1cc00136 	bltu	r3,r19,200ddcc <__umoddi3+0x238>
 200ddc8:	1880f136 	bltu	r3,r2,200e190 <__umoddi3+0x5fc>
 200ddcc:	18a1c83a 	sub	r16,r3,r2
 200ddd0:	8009883a 	mov	r4,r16
 200ddd4:	a80b883a 	mov	r5,r21
 200ddd8:	200e2d40 	call	200e2d4 <__umodsi3>
 200dddc:	8009883a 	mov	r4,r16
 200dde0:	a80b883a 	mov	r5,r21
 200dde4:	1023883a 	mov	r17,r2
 200dde8:	200e2cc0 	call	200e2cc <__udivsi3>
 200ddec:	1009883a 	mov	r4,r2
 200ddf0:	b00b883a 	mov	r5,r22
 200ddf4:	8822943a 	slli	r17,r17,16
 200ddf8:	200e2dc0 	call	200e2dc <__mulsi3>
 200ddfc:	a13fffcc 	andi	r4,r20,65535
 200de00:	8906b03a 	or	r3,r17,r4
 200de04:	1880042e 	bgeu	r3,r2,200de18 <__umoddi3+0x284>
 200de08:	1cc7883a 	add	r3,r3,r19
 200de0c:	1cc00236 	bltu	r3,r19,200de18 <__umoddi3+0x284>
 200de10:	1880012e 	bgeu	r3,r2,200de18 <__umoddi3+0x284>
 200de14:	1cc7883a 	add	r3,r3,r19
 200de18:	1887c83a 	sub	r3,r3,r2
 200de1c:	1c84d83a 	srl	r2,r3,r18
 200de20:	0007883a 	mov	r3,zero
 200de24:	00000206 	br	200de30 <__umoddi3+0x29c>
 200de28:	2005883a 	mov	r2,r4
 200de2c:	2807883a 	mov	r3,r5
 200de30:	dfc00b17 	ldw	ra,44(sp)
 200de34:	df000a17 	ldw	fp,40(sp)
 200de38:	ddc00917 	ldw	r23,36(sp)
 200de3c:	dd800817 	ldw	r22,32(sp)
 200de40:	dd400717 	ldw	r21,28(sp)
 200de44:	dd000617 	ldw	r20,24(sp)
 200de48:	dcc00517 	ldw	r19,20(sp)
 200de4c:	dc800417 	ldw	r18,16(sp)
 200de50:	dc400317 	ldw	r17,12(sp)
 200de54:	dc000217 	ldw	r16,8(sp)
 200de58:	dec00c04 	addi	sp,sp,48
 200de5c:	f800283a 	ret
 200de60:	00803fc4 	movi	r2,255
 200de64:	11c0b02e 	bgeu	r2,r7,200e128 <__umoddi3+0x594>
 200de68:	01400204 	movi	r5,8
 200de6c:	282b883a 	mov	r21,r5
 200de70:	003f9b06 	br	200dce0 <__umoddi3+0x14c>
 200de74:	00804034 	movhi	r2,256
 200de78:	10bfffc4 	addi	r2,r2,-1
 200de7c:	1180b02e 	bgeu	r2,r6,200e140 <__umoddi3+0x5ac>
 200de80:	01400604 	movi	r5,24
 200de84:	2805883a 	mov	r2,r5
 200de88:	003f5a06 	br	200dbf4 <__umoddi3+0x60>
 200de8c:	00803fc4 	movi	r2,255
 200de90:	14c0ae2e 	bgeu	r2,r19,200e14c <__umoddi3+0x5b8>
 200de94:	00800204 	movi	r2,8
 200de98:	1007883a 	mov	r3,r2
 200de9c:	003fad06 	br	200dd54 <__umoddi3+0x1c0>
 200dea0:	3d0a983a 	sll	r5,r7,r20
 200dea4:	356cd83a 	srl	r22,r6,r21
 200dea8:	8d78d83a 	srl	fp,r17,r21
 200deac:	8d10983a 	sll	r8,r17,r20
 200deb0:	2dacb03a 	or	r22,r5,r22
 200deb4:	b02ed43a 	srli	r23,r22,16
 200deb8:	8564d83a 	srl	r18,r16,r21
 200debc:	e009883a 	mov	r4,fp
 200dec0:	b80b883a 	mov	r5,r23
 200dec4:	44a4b03a 	or	r18,r8,r18
 200dec8:	3526983a 	sll	r19,r6,r20
 200decc:	200e2d40 	call	200e2d4 <__umodsi3>
 200ded0:	e009883a 	mov	r4,fp
 200ded4:	b80b883a 	mov	r5,r23
 200ded8:	b47fffcc 	andi	r17,r22,65535
 200dedc:	d8800015 	stw	r2,0(sp)
 200dee0:	200e2cc0 	call	200e2cc <__udivsi3>
 200dee4:	1009883a 	mov	r4,r2
 200dee8:	880b883a 	mov	r5,r17
 200deec:	1039883a 	mov	fp,r2
 200def0:	200e2dc0 	call	200e2dc <__mulsi3>
 200def4:	d9800017 	ldw	r6,0(sp)
 200def8:	9008d43a 	srli	r4,r18,16
 200defc:	8520983a 	sll	r16,r16,r20
 200df00:	300c943a 	slli	r6,r6,16
 200df04:	3106b03a 	or	r3,r6,r4
 200df08:	1880042e 	bgeu	r3,r2,200df1c <__umoddi3+0x388>
 200df0c:	1d87883a 	add	r3,r3,r22
 200df10:	e13fffc4 	addi	r4,fp,-1
 200df14:	1d809a2e 	bgeu	r3,r22,200e180 <__umoddi3+0x5ec>
 200df18:	2039883a 	mov	fp,r4
 200df1c:	1887c83a 	sub	r3,r3,r2
 200df20:	1809883a 	mov	r4,r3
 200df24:	b80b883a 	mov	r5,r23
 200df28:	d8c00115 	stw	r3,4(sp)
 200df2c:	200e2d40 	call	200e2d4 <__umodsi3>
 200df30:	d8c00117 	ldw	r3,4(sp)
 200df34:	b80b883a 	mov	r5,r23
 200df38:	d8800015 	stw	r2,0(sp)
 200df3c:	1809883a 	mov	r4,r3
 200df40:	200e2cc0 	call	200e2cc <__udivsi3>
 200df44:	880b883a 	mov	r5,r17
 200df48:	1009883a 	mov	r4,r2
 200df4c:	102f883a 	mov	r23,r2
 200df50:	200e2dc0 	call	200e2dc <__mulsi3>
 200df54:	d9800017 	ldw	r6,0(sp)
 200df58:	947fffcc 	andi	r17,r18,65535
 200df5c:	300c943a 	slli	r6,r6,16
 200df60:	3464b03a 	or	r18,r6,r17
 200df64:	9080042e 	bgeu	r18,r2,200df78 <__umoddi3+0x3e4>
 200df68:	95a5883a 	add	r18,r18,r22
 200df6c:	b8ffffc4 	addi	r3,r23,-1
 200df70:	95807f2e 	bgeu	r18,r22,200e170 <__umoddi3+0x5dc>
 200df74:	182f883a 	mov	r23,r3
 200df78:	e038943a 	slli	fp,fp,16
 200df7c:	980cd43a 	srli	r6,r19,16
 200df80:	98ffffcc 	andi	r3,r19,65535
 200df84:	bf38b03a 	or	fp,r23,fp
 200df88:	e02ed43a 	srli	r23,fp,16
 200df8c:	e73fffcc 	andi	fp,fp,65535
 200df90:	180b883a 	mov	r5,r3
 200df94:	e009883a 	mov	r4,fp
 200df98:	d9800015 	stw	r6,0(sp)
 200df9c:	d8c00115 	stw	r3,4(sp)
 200dfa0:	90a5c83a 	sub	r18,r18,r2
 200dfa4:	200e2dc0 	call	200e2dc <__mulsi3>
 200dfa8:	d8c00117 	ldw	r3,4(sp)
 200dfac:	b809883a 	mov	r4,r23
 200dfb0:	1023883a 	mov	r17,r2
 200dfb4:	180b883a 	mov	r5,r3
 200dfb8:	200e2dc0 	call	200e2dc <__mulsi3>
 200dfbc:	d9800017 	ldw	r6,0(sp)
 200dfc0:	b809883a 	mov	r4,r23
 200dfc4:	d8800115 	stw	r2,4(sp)
 200dfc8:	300b883a 	mov	r5,r6
 200dfcc:	302f883a 	mov	r23,r6
 200dfd0:	200e2dc0 	call	200e2dc <__mulsi3>
 200dfd4:	e009883a 	mov	r4,fp
 200dfd8:	b80b883a 	mov	r5,r23
 200dfdc:	d8800015 	stw	r2,0(sp)
 200dfe0:	200e2dc0 	call	200e2dc <__mulsi3>
 200dfe4:	d8c00117 	ldw	r3,4(sp)
 200dfe8:	880cd43a 	srli	r6,r17,16
 200dfec:	d9c00017 	ldw	r7,0(sp)
 200dff0:	1885883a 	add	r2,r3,r2
 200dff4:	118d883a 	add	r6,r2,r6
 200dff8:	30c0022e 	bgeu	r6,r3,200e004 <__umoddi3+0x470>
 200dffc:	00800074 	movhi	r2,1
 200e000:	388f883a 	add	r7,r7,r2
 200e004:	3006d43a 	srli	r3,r6,16
 200e008:	300c943a 	slli	r6,r6,16
 200e00c:	8c7fffcc 	andi	r17,r17,65535
 200e010:	38c7883a 	add	r3,r7,r3
 200e014:	3463883a 	add	r17,r6,r17
 200e018:	90c03d36 	bltu	r18,r3,200e110 <__umoddi3+0x57c>
 200e01c:	90c06026 	beq	r18,r3,200e1a0 <__umoddi3+0x60c>
 200e020:	90c9c83a 	sub	r4,r18,r3
 200e024:	880f883a 	mov	r7,r17
 200e028:	81cfc83a 	sub	r7,r16,r7
 200e02c:	81c7803a 	cmpltu	r3,r16,r7
 200e030:	20c7c83a 	sub	r3,r4,r3
 200e034:	1d44983a 	sll	r2,r3,r21
 200e038:	3d0ed83a 	srl	r7,r7,r20
 200e03c:	1d06d83a 	srl	r3,r3,r20
 200e040:	11c4b03a 	or	r2,r2,r7
 200e044:	003f7a06 	br	200de30 <__umoddi3+0x29c>
 200e048:	0025883a 	mov	r18,zero
 200e04c:	003ef806 	br	200dc30 <__umoddi3+0x9c>
 200e050:	98a6983a 	sll	r19,r19,r2
 200e054:	88e8d83a 	srl	r20,r17,r3
 200e058:	80c6d83a 	srl	r3,r16,r3
 200e05c:	982ad43a 	srli	r21,r19,16
 200e060:	88a2983a 	sll	r17,r17,r2
 200e064:	a009883a 	mov	r4,r20
 200e068:	a80b883a 	mov	r5,r21
 200e06c:	88eeb03a 	or	r23,r17,r3
 200e070:	1025883a 	mov	r18,r2
 200e074:	200e2d40 	call	200e2d4 <__umodsi3>
 200e078:	a009883a 	mov	r4,r20
 200e07c:	a80b883a 	mov	r5,r21
 200e080:	1023883a 	mov	r17,r2
 200e084:	9dbfffcc 	andi	r22,r19,65535
 200e088:	200e2cc0 	call	200e2cc <__udivsi3>
 200e08c:	1009883a 	mov	r4,r2
 200e090:	b00b883a 	mov	r5,r22
 200e094:	200e2dc0 	call	200e2dc <__mulsi3>
 200e098:	8822943a 	slli	r17,r17,16
 200e09c:	b808d43a 	srli	r4,r23,16
 200e0a0:	84a8983a 	sll	r20,r16,r18
 200e0a4:	8906b03a 	or	r3,r17,r4
 200e0a8:	1880042e 	bgeu	r3,r2,200e0bc <__umoddi3+0x528>
 200e0ac:	1cc7883a 	add	r3,r3,r19
 200e0b0:	1cc00236 	bltu	r3,r19,200e0bc <__umoddi3+0x528>
 200e0b4:	1880012e 	bgeu	r3,r2,200e0bc <__umoddi3+0x528>
 200e0b8:	1cc7883a 	add	r3,r3,r19
 200e0bc:	18a1c83a 	sub	r16,r3,r2
 200e0c0:	8009883a 	mov	r4,r16
 200e0c4:	a80b883a 	mov	r5,r21
 200e0c8:	200e2d40 	call	200e2d4 <__umodsi3>
 200e0cc:	8009883a 	mov	r4,r16
 200e0d0:	a80b883a 	mov	r5,r21
 200e0d4:	1039883a 	mov	fp,r2
 200e0d8:	200e2cc0 	call	200e2cc <__udivsi3>
 200e0dc:	1009883a 	mov	r4,r2
 200e0e0:	b00b883a 	mov	r5,r22
 200e0e4:	200e2dc0 	call	200e2dc <__mulsi3>
 200e0e8:	e006943a 	slli	r3,fp,16
 200e0ec:	b93fffcc 	andi	r4,r23,65535
 200e0f0:	1906b03a 	or	r3,r3,r4
 200e0f4:	1880042e 	bgeu	r3,r2,200e108 <__umoddi3+0x574>
 200e0f8:	1cc7883a 	add	r3,r3,r19
 200e0fc:	1cc00236 	bltu	r3,r19,200e108 <__umoddi3+0x574>
 200e100:	1880012e 	bgeu	r3,r2,200e108 <__umoddi3+0x574>
 200e104:	1cc7883a 	add	r3,r3,r19
 200e108:	18a3c83a 	sub	r17,r3,r2
 200e10c:	003f1e06 	br	200dd88 <__umoddi3+0x1f4>
 200e110:	8ccfc83a 	sub	r7,r17,r19
 200e114:	1d89c83a 	sub	r4,r3,r22
 200e118:	89e3803a 	cmpltu	r17,r17,r7
 200e11c:	2463c83a 	sub	r17,r4,r17
 200e120:	9449c83a 	sub	r4,r18,r17
 200e124:	003fc006 	br	200e028 <__umoddi3+0x494>
 200e128:	000b883a 	mov	r5,zero
 200e12c:	002b883a 	mov	r21,zero
 200e130:	003eeb06 	br	200dce0 <__umoddi3+0x14c>
 200e134:	01400404 	movi	r5,16
 200e138:	282b883a 	mov	r21,r5
 200e13c:	003ee806 	br	200dce0 <__umoddi3+0x14c>
 200e140:	01400404 	movi	r5,16
 200e144:	2805883a 	mov	r2,r5
 200e148:	003eaa06 	br	200dbf4 <__umoddi3+0x60>
 200e14c:	0005883a 	mov	r2,zero
 200e150:	0007883a 	mov	r3,zero
 200e154:	003eff06 	br	200dd54 <__umoddi3+0x1c0>
 200e158:	00800404 	movi	r2,16
 200e15c:	1007883a 	mov	r3,r2
 200e160:	003efc06 	br	200dd54 <__umoddi3+0x1c0>
 200e164:	000b883a 	mov	r5,zero
 200e168:	0005883a 	mov	r2,zero
 200e16c:	003ea106 	br	200dbf4 <__umoddi3+0x60>
 200e170:	90bf802e 	bgeu	r18,r2,200df74 <__umoddi3+0x3e0>
 200e174:	bdffff84 	addi	r23,r23,-2
 200e178:	95a5883a 	add	r18,r18,r22
 200e17c:	003f7e06 	br	200df78 <__umoddi3+0x3e4>
 200e180:	18bf652e 	bgeu	r3,r2,200df18 <__umoddi3+0x384>
 200e184:	e73fff84 	addi	fp,fp,-2
 200e188:	1d87883a 	add	r3,r3,r22
 200e18c:	003f6306 	br	200df1c <__umoddi3+0x388>
 200e190:	1cc7883a 	add	r3,r3,r19
 200e194:	003f0d06 	br	200ddcc <__umoddi3+0x238>
 200e198:	8005883a 	mov	r2,r16
 200e19c:	003edf06 	br	200dd1c <__umoddi3+0x188>
 200e1a0:	847fdb36 	bltu	r16,r17,200e110 <__umoddi3+0x57c>
 200e1a4:	880f883a 	mov	r7,r17
 200e1a8:	0009883a 	mov	r4,zero
 200e1ac:	003f9e06 	br	200e028 <__umoddi3+0x494>

0200e1b0 <udivmodsi4>:
 200e1b0:	2900182e 	bgeu	r5,r4,200e214 <udivmodsi4+0x64>
 200e1b4:	28001716 	blt	r5,zero,200e214 <udivmodsi4+0x64>
 200e1b8:	00800804 	movi	r2,32
 200e1bc:	00c00044 	movi	r3,1
 200e1c0:	00000206 	br	200e1cc <udivmodsi4+0x1c>
 200e1c4:	10001126 	beq	r2,zero,200e20c <udivmodsi4+0x5c>
 200e1c8:	28000516 	blt	r5,zero,200e1e0 <udivmodsi4+0x30>
 200e1cc:	294b883a 	add	r5,r5,r5
 200e1d0:	10bfffc4 	addi	r2,r2,-1
 200e1d4:	18c7883a 	add	r3,r3,r3
 200e1d8:	293ffa36 	bltu	r5,r4,200e1c4 <udivmodsi4+0x14>
 200e1dc:	18000b26 	beq	r3,zero,200e20c <udivmodsi4+0x5c>
 200e1e0:	0005883a 	mov	r2,zero
 200e1e4:	21400236 	bltu	r4,r5,200e1f0 <udivmodsi4+0x40>
 200e1e8:	2149c83a 	sub	r4,r4,r5
 200e1ec:	10c4b03a 	or	r2,r2,r3
 200e1f0:	1806d07a 	srli	r3,r3,1
 200e1f4:	280ad07a 	srli	r5,r5,1
 200e1f8:	183ffa1e 	bne	r3,zero,200e1e4 <udivmodsi4+0x34>
 200e1fc:	3000011e 	bne	r6,zero,200e204 <udivmodsi4+0x54>
 200e200:	f800283a 	ret
 200e204:	2005883a 	mov	r2,r4
 200e208:	f800283a 	ret
 200e20c:	0005883a 	mov	r2,zero
 200e210:	003ffa06 	br	200e1fc <udivmodsi4+0x4c>
 200e214:	00c00044 	movi	r3,1
 200e218:	003ff106 	br	200e1e0 <udivmodsi4+0x30>

0200e21c <__divsi3>:
 200e21c:	defffe04 	addi	sp,sp,-8
 200e220:	dfc00115 	stw	ra,4(sp)
 200e224:	dc000015 	stw	r16,0(sp)
 200e228:	20000b16 	blt	r4,zero,200e258 <__divsi3+0x3c>
 200e22c:	0021883a 	mov	r16,zero
 200e230:	28000c16 	blt	r5,zero,200e264 <__divsi3+0x48>
 200e234:	000d883a 	mov	r6,zero
 200e238:	200e1b00 	call	200e1b0 <udivmodsi4>
 200e23c:	0407c83a 	sub	r3,zero,r16
 200e240:	1884f03a 	xor	r2,r3,r2
 200e244:	1405883a 	add	r2,r2,r16
 200e248:	dfc00117 	ldw	ra,4(sp)
 200e24c:	dc000017 	ldw	r16,0(sp)
 200e250:	dec00204 	addi	sp,sp,8
 200e254:	f800283a 	ret
 200e258:	0109c83a 	sub	r4,zero,r4
 200e25c:	04000044 	movi	r16,1
 200e260:	283ff40e 	bge	r5,zero,200e234 <__divsi3+0x18>
 200e264:	014bc83a 	sub	r5,zero,r5
 200e268:	8400005c 	xori	r16,r16,1
 200e26c:	003ff106 	br	200e234 <__divsi3+0x18>

0200e270 <__modsi3>:
 200e270:	defffd04 	addi	sp,sp,-12
 200e274:	dfc00215 	stw	ra,8(sp)
 200e278:	dc400115 	stw	r17,4(sp)
 200e27c:	dc000015 	stw	r16,0(sp)
 200e280:	20000c16 	blt	r4,zero,200e2b4 <__modsi3+0x44>
 200e284:	0023883a 	mov	r17,zero
 200e288:	0021883a 	mov	r16,zero
 200e28c:	28000d16 	blt	r5,zero,200e2c4 <__modsi3+0x54>
 200e290:	01800044 	movi	r6,1
 200e294:	200e1b00 	call	200e1b0 <udivmodsi4>
 200e298:	1404f03a 	xor	r2,r2,r16
 200e29c:	8885883a 	add	r2,r17,r2
 200e2a0:	dfc00217 	ldw	ra,8(sp)
 200e2a4:	dc400117 	ldw	r17,4(sp)
 200e2a8:	dc000017 	ldw	r16,0(sp)
 200e2ac:	dec00304 	addi	sp,sp,12
 200e2b0:	f800283a 	ret
 200e2b4:	0109c83a 	sub	r4,zero,r4
 200e2b8:	04400044 	movi	r17,1
 200e2bc:	043fffc4 	movi	r16,-1
 200e2c0:	283ff30e 	bge	r5,zero,200e290 <__modsi3+0x20>
 200e2c4:	014bc83a 	sub	r5,zero,r5
 200e2c8:	003ff106 	br	200e290 <__modsi3+0x20>

0200e2cc <__udivsi3>:
 200e2cc:	000d883a 	mov	r6,zero
 200e2d0:	200e1b01 	jmpi	200e1b0 <udivmodsi4>

0200e2d4 <__umodsi3>:
 200e2d4:	01800044 	movi	r6,1
 200e2d8:	200e1b01 	jmpi	200e1b0 <udivmodsi4>

0200e2dc <__mulsi3>:
 200e2dc:	0005883a 	mov	r2,zero
 200e2e0:	20000726 	beq	r4,zero,200e300 <__mulsi3+0x24>
 200e2e4:	20c0004c 	andi	r3,r4,1
 200e2e8:	2008d07a 	srli	r4,r4,1
 200e2ec:	18000126 	beq	r3,zero,200e2f4 <__mulsi3+0x18>
 200e2f0:	1145883a 	add	r2,r2,r5
 200e2f4:	294b883a 	add	r5,r5,r5
 200e2f8:	203ffa1e 	bne	r4,zero,200e2e4 <__mulsi3+0x8>
 200e2fc:	f800283a 	ret
 200e300:	f800283a 	ret

0200e304 <__adddf3>:
 200e304:	02000434 	movhi	r8,16
 200e308:	423fffc4 	addi	r8,r8,-1
 200e30c:	defffb04 	addi	sp,sp,-20
 200e310:	2a12703a 	and	r9,r5,r8
 200e314:	2806d7fa 	srli	r3,r5,31
 200e318:	3a10703a 	and	r8,r7,r8
 200e31c:	3804d53a 	srli	r2,r7,20
 200e320:	3014d77a 	srli	r10,r6,29
 200e324:	dc000015 	stw	r16,0(sp)
 200e328:	481290fa 	slli	r9,r9,3
 200e32c:	2820d53a 	srli	r16,r5,20
 200e330:	401090fa 	slli	r8,r8,3
 200e334:	200ad77a 	srli	r5,r4,29
 200e338:	380ed7fa 	srli	r7,r7,31
 200e33c:	dc800215 	stw	r18,8(sp)
 200e340:	dc400115 	stw	r17,4(sp)
 200e344:	dfc00415 	stw	ra,16(sp)
 200e348:	dcc00315 	stw	r19,12(sp)
 200e34c:	1c803fcc 	andi	r18,r3,255
 200e350:	8401ffcc 	andi	r16,r16,2047
 200e354:	494ab03a 	or	r5,r9,r5
 200e358:	202290fa 	slli	r17,r4,3
 200e35c:	1081ffcc 	andi	r2,r2,2047
 200e360:	4290b03a 	or	r8,r8,r10
 200e364:	300c90fa 	slli	r6,r6,3
 200e368:	91c07026 	beq	r18,r7,200e52c <__adddf3+0x228>
 200e36c:	8087c83a 	sub	r3,r16,r2
 200e370:	00c0b30e 	bge	zero,r3,200e640 <__adddf3+0x33c>
 200e374:	10002a1e 	bne	r2,zero,200e420 <__adddf3+0x11c>
 200e378:	4184b03a 	or	r2,r8,r6
 200e37c:	1000991e 	bne	r2,zero,200e5e4 <__adddf3+0x2e0>
 200e380:	888001cc 	andi	r2,r17,7
 200e384:	10005b26 	beq	r2,zero,200e4f4 <__adddf3+0x1f0>
 200e388:	88c003cc 	andi	r3,r17,15
 200e38c:	00800104 	movi	r2,4
 200e390:	18805826 	beq	r3,r2,200e4f4 <__adddf3+0x1f0>
 200e394:	89800104 	addi	r6,r17,4
 200e398:	3463803a 	cmpltu	r17,r6,r17
 200e39c:	2c4b883a 	add	r5,r5,r17
 200e3a0:	2880202c 	andhi	r2,r5,128
 200e3a4:	9007883a 	mov	r3,r18
 200e3a8:	3023883a 	mov	r17,r6
 200e3ac:	10005426 	beq	r2,zero,200e500 <__adddf3+0x1fc>
 200e3b0:	84000044 	addi	r16,r16,1
 200e3b4:	0081ffc4 	movi	r2,2047
 200e3b8:	8080c126 	beq	r16,r2,200e6c0 <__adddf3+0x3bc>
 200e3bc:	013fe034 	movhi	r4,65408
 200e3c0:	213fffc4 	addi	r4,r4,-1
 200e3c4:	290a703a 	and	r5,r5,r4
 200e3c8:	2804977a 	slli	r2,r5,29
 200e3cc:	280a927a 	slli	r5,r5,9
 200e3d0:	8822d0fa 	srli	r17,r17,3
 200e3d4:	8401ffcc 	andi	r16,r16,2047
 200e3d8:	2808d33a 	srli	r4,r5,12
 200e3dc:	1444b03a 	or	r2,r2,r17
 200e3e0:	8401ffcc 	andi	r16,r16,2047
 200e3e4:	800a953a 	slli	r5,r16,20
 200e3e8:	18c03fcc 	andi	r3,r3,255
 200e3ec:	04000434 	movhi	r16,16
 200e3f0:	180697fa 	slli	r3,r3,31
 200e3f4:	843fffc4 	addi	r16,r16,-1
 200e3f8:	2420703a 	and	r16,r4,r16
 200e3fc:	8160b03a 	or	r16,r16,r5
 200e400:	80c6b03a 	or	r3,r16,r3
 200e404:	dfc00417 	ldw	ra,16(sp)
 200e408:	dcc00317 	ldw	r19,12(sp)
 200e40c:	dc800217 	ldw	r18,8(sp)
 200e410:	dc400117 	ldw	r17,4(sp)
 200e414:	dc000017 	ldw	r16,0(sp)
 200e418:	dec00504 	addi	sp,sp,20
 200e41c:	f800283a 	ret
 200e420:	0081ffc4 	movi	r2,2047
 200e424:	80bfd626 	beq	r16,r2,200e380 <__adddf3+0x7c>
 200e428:	42002034 	orhi	r8,r8,128
 200e42c:	00800e04 	movi	r2,56
 200e430:	10c0a616 	blt	r2,r3,200e6cc <__adddf3+0x3c8>
 200e434:	008007c4 	movi	r2,31
 200e438:	10c0c916 	blt	r2,r3,200e760 <__adddf3+0x45c>
 200e43c:	00800804 	movi	r2,32
 200e440:	10c5c83a 	sub	r2,r2,r3
 200e444:	408e983a 	sll	r7,r8,r2
 200e448:	30c8d83a 	srl	r4,r6,r3
 200e44c:	3084983a 	sll	r2,r6,r2
 200e450:	40c6d83a 	srl	r3,r8,r3
 200e454:	390cb03a 	or	r6,r7,r4
 200e458:	1004c03a 	cmpne	r2,r2,zero
 200e45c:	308cb03a 	or	r6,r6,r2
 200e460:	898dc83a 	sub	r6,r17,r6
 200e464:	89a3803a 	cmpltu	r17,r17,r6
 200e468:	28cbc83a 	sub	r5,r5,r3
 200e46c:	2c4bc83a 	sub	r5,r5,r17
 200e470:	3023883a 	mov	r17,r6
 200e474:	2880202c 	andhi	r2,r5,128
 200e478:	10006d26 	beq	r2,zero,200e630 <__adddf3+0x32c>
 200e47c:	04c02034 	movhi	r19,128
 200e480:	9cffffc4 	addi	r19,r19,-1
 200e484:	2ce6703a 	and	r19,r5,r19
 200e488:	98007e26 	beq	r19,zero,200e684 <__adddf3+0x380>
 200e48c:	9809883a 	mov	r4,r19
 200e490:	2010a9c0 	call	2010a9c <__clzsi2>
 200e494:	10fffe04 	addi	r3,r2,-8
 200e498:	010007c4 	movi	r4,31
 200e49c:	20c07f16 	blt	r4,r3,200e69c <__adddf3+0x398>
 200e4a0:	01400a04 	movi	r5,40
 200e4a4:	2885c83a 	sub	r2,r5,r2
 200e4a8:	888ad83a 	srl	r5,r17,r2
 200e4ac:	98e6983a 	sll	r19,r19,r3
 200e4b0:	88e2983a 	sll	r17,r17,r3
 200e4b4:	2ce6b03a 	or	r19,r5,r19
 200e4b8:	1c007c16 	blt	r3,r16,200e6ac <__adddf3+0x3a8>
 200e4bc:	1c21c83a 	sub	r16,r3,r16
 200e4c0:	81400044 	addi	r5,r16,1
 200e4c4:	00c007c4 	movi	r3,31
 200e4c8:	19409816 	blt	r3,r5,200e72c <__adddf3+0x428>
 200e4cc:	1c21c83a 	sub	r16,r3,r16
 200e4d0:	8c08983a 	sll	r4,r17,r16
 200e4d4:	8946d83a 	srl	r3,r17,r5
 200e4d8:	9c20983a 	sll	r16,r19,r16
 200e4dc:	2008c03a 	cmpne	r4,r4,zero
 200e4e0:	994ad83a 	srl	r5,r19,r5
 200e4e4:	1c06b03a 	or	r3,r3,r16
 200e4e8:	1922b03a 	or	r17,r3,r4
 200e4ec:	0021883a 	mov	r16,zero
 200e4f0:	003fa306 	br	200e380 <__adddf3+0x7c>
 200e4f4:	2880202c 	andhi	r2,r5,128
 200e4f8:	9007883a 	mov	r3,r18
 200e4fc:	103fac1e 	bne	r2,zero,200e3b0 <__adddf3+0xac>
 200e500:	2804977a 	slli	r2,r5,29
 200e504:	8822d0fa 	srli	r17,r17,3
 200e508:	0101ffc4 	movi	r4,2047
 200e50c:	280ad0fa 	srli	r5,r5,3
 200e510:	1444b03a 	or	r2,r2,r17
 200e514:	81002c26 	beq	r16,r4,200e5c8 <__adddf3+0x2c4>
 200e518:	8120703a 	and	r16,r16,r4
 200e51c:	01000434 	movhi	r4,16
 200e520:	213fffc4 	addi	r4,r4,-1
 200e524:	2908703a 	and	r4,r5,r4
 200e528:	003fad06 	br	200e3e0 <__adddf3+0xdc>
 200e52c:	8089c83a 	sub	r4,r16,r2
 200e530:	01006a0e 	bge	zero,r4,200e6dc <__adddf3+0x3d8>
 200e534:	10003326 	beq	r2,zero,200e604 <__adddf3+0x300>
 200e538:	0081ffc4 	movi	r2,2047
 200e53c:	80bf9026 	beq	r16,r2,200e380 <__adddf3+0x7c>
 200e540:	42002034 	orhi	r8,r8,128
 200e544:	00800e04 	movi	r2,56
 200e548:	1100b116 	blt	r2,r4,200e810 <__adddf3+0x50c>
 200e54c:	008007c4 	movi	r2,31
 200e550:	1100e216 	blt	r2,r4,200e8dc <__adddf3+0x5d8>
 200e554:	00800804 	movi	r2,32
 200e558:	1105c83a 	sub	r2,r2,r4
 200e55c:	4092983a 	sll	r9,r8,r2
 200e560:	310ed83a 	srl	r7,r6,r4
 200e564:	3084983a 	sll	r2,r6,r2
 200e568:	4110d83a 	srl	r8,r8,r4
 200e56c:	49ccb03a 	or	r6,r9,r7
 200e570:	1004c03a 	cmpne	r2,r2,zero
 200e574:	308cb03a 	or	r6,r6,r2
 200e578:	344d883a 	add	r6,r6,r17
 200e57c:	3463803a 	cmpltu	r17,r6,r17
 200e580:	414b883a 	add	r5,r8,r5
 200e584:	2c4b883a 	add	r5,r5,r17
 200e588:	3023883a 	mov	r17,r6
 200e58c:	2880202c 	andhi	r2,r5,128
 200e590:	10002726 	beq	r2,zero,200e630 <__adddf3+0x32c>
 200e594:	84000044 	addi	r16,r16,1
 200e598:	0081ffc4 	movi	r2,2047
 200e59c:	8080ae26 	beq	r16,r2,200e858 <__adddf3+0x554>
 200e5a0:	00bfe034 	movhi	r2,65408
 200e5a4:	10bfffc4 	addi	r2,r2,-1
 200e5a8:	288a703a 	and	r5,r5,r2
 200e5ac:	880cd07a 	srli	r6,r17,1
 200e5b0:	280897fa 	slli	r4,r5,31
 200e5b4:	88c0004c 	andi	r3,r17,1
 200e5b8:	30e2b03a 	or	r17,r6,r3
 200e5bc:	280ad07a 	srli	r5,r5,1
 200e5c0:	8922b03a 	or	r17,r17,r4
 200e5c4:	003f6e06 	br	200e380 <__adddf3+0x7c>
 200e5c8:	1148b03a 	or	r4,r2,r5
 200e5cc:	20003c26 	beq	r4,zero,200e6c0 <__adddf3+0x3bc>
 200e5d0:	29000234 	orhi	r4,r5,8
 200e5d4:	01400434 	movhi	r5,16
 200e5d8:	297fffc4 	addi	r5,r5,-1
 200e5dc:	2148703a 	and	r4,r4,r5
 200e5e0:	003f7f06 	br	200e3e0 <__adddf3+0xdc>
 200e5e4:	18ffffc4 	addi	r3,r3,-1
 200e5e8:	18004d1e 	bne	r3,zero,200e720 <__adddf3+0x41c>
 200e5ec:	898dc83a 	sub	r6,r17,r6
 200e5f0:	89a3803a 	cmpltu	r17,r17,r6
 200e5f4:	2a0bc83a 	sub	r5,r5,r8
 200e5f8:	2c4bc83a 	sub	r5,r5,r17
 200e5fc:	3023883a 	mov	r17,r6
 200e600:	003f9c06 	br	200e474 <__adddf3+0x170>
 200e604:	4184b03a 	or	r2,r8,r6
 200e608:	103f5d26 	beq	r2,zero,200e380 <__adddf3+0x7c>
 200e60c:	213fffc4 	addi	r4,r4,-1
 200e610:	203fd926 	beq	r4,zero,200e578 <__adddf3+0x274>
 200e614:	0081ffc4 	movi	r2,2047
 200e618:	80bfca1e 	bne	r16,r2,200e544 <__adddf3+0x240>
 200e61c:	003f5806 	br	200e380 <__adddf3+0x7c>
 200e620:	10c8b03a 	or	r4,r2,r3
 200e624:	20008b26 	beq	r4,zero,200e854 <__adddf3+0x550>
 200e628:	100b883a 	mov	r5,r2
 200e62c:	1823883a 	mov	r17,r3
 200e630:	888001cc 	andi	r2,r17,7
 200e634:	103f541e 	bne	r2,zero,200e388 <__adddf3+0x84>
 200e638:	9007883a 	mov	r3,r18
 200e63c:	003fb006 	br	200e500 <__adddf3+0x1fc>
 200e640:	1800531e 	bne	r3,zero,200e790 <__adddf3+0x48c>
 200e644:	80800044 	addi	r2,r16,1
 200e648:	1081ffcc 	andi	r2,r2,2047
 200e64c:	00c00044 	movi	r3,1
 200e650:	1880990e 	bge	r3,r2,200e8b8 <__adddf3+0x5b4>
 200e654:	8985c83a 	sub	r2,r17,r6
 200e658:	8887803a 	cmpltu	r3,r17,r2
 200e65c:	2a27c83a 	sub	r19,r5,r8
 200e660:	98e7c83a 	sub	r19,r19,r3
 200e664:	98c0202c 	andhi	r3,r19,128
 200e668:	18006226 	beq	r3,zero,200e7f4 <__adddf3+0x4f0>
 200e66c:	3463c83a 	sub	r17,r6,r17
 200e670:	4151c83a 	sub	r8,r8,r5
 200e674:	344d803a 	cmpltu	r6,r6,r17
 200e678:	41a7c83a 	sub	r19,r8,r6
 200e67c:	3825883a 	mov	r18,r7
 200e680:	983f821e 	bne	r19,zero,200e48c <__adddf3+0x188>
 200e684:	8809883a 	mov	r4,r17
 200e688:	2010a9c0 	call	2010a9c <__clzsi2>
 200e68c:	10800804 	addi	r2,r2,32
 200e690:	10fffe04 	addi	r3,r2,-8
 200e694:	010007c4 	movi	r4,31
 200e698:	20ff810e 	bge	r4,r3,200e4a0 <__adddf3+0x19c>
 200e69c:	14fff604 	addi	r19,r2,-40
 200e6a0:	8ce6983a 	sll	r19,r17,r19
 200e6a4:	0023883a 	mov	r17,zero
 200e6a8:	1c3f840e 	bge	r3,r16,200e4bc <__adddf3+0x1b8>
 200e6ac:	017fe034 	movhi	r5,65408
 200e6b0:	297fffc4 	addi	r5,r5,-1
 200e6b4:	80e1c83a 	sub	r16,r16,r3
 200e6b8:	994a703a 	and	r5,r19,r5
 200e6bc:	003f3006 	br	200e380 <__adddf3+0x7c>
 200e6c0:	0009883a 	mov	r4,zero
 200e6c4:	0005883a 	mov	r2,zero
 200e6c8:	003f4506 	br	200e3e0 <__adddf3+0xdc>
 200e6cc:	418cb03a 	or	r6,r8,r6
 200e6d0:	300cc03a 	cmpne	r6,r6,zero
 200e6d4:	0007883a 	mov	r3,zero
 200e6d8:	003f6106 	br	200e460 <__adddf3+0x15c>
 200e6dc:	2000921e 	bne	r4,zero,200e928 <__adddf3+0x624>
 200e6e0:	80800044 	addi	r2,r16,1
 200e6e4:	11c1ffcc 	andi	r7,r2,2047
 200e6e8:	01000044 	movi	r4,1
 200e6ec:	21c0610e 	bge	r4,r7,200e874 <__adddf3+0x570>
 200e6f0:	0101ffc4 	movi	r4,2047
 200e6f4:	1100a326 	beq	r2,r4,200e984 <__adddf3+0x680>
 200e6f8:	344d883a 	add	r6,r6,r17
 200e6fc:	3463803a 	cmpltu	r17,r6,r17
 200e700:	414b883a 	add	r5,r8,r5
 200e704:	2c4b883a 	add	r5,r5,r17
 200e708:	282297fa 	slli	r17,r5,31
 200e70c:	300cd07a 	srli	r6,r6,1
 200e710:	280ad07a 	srli	r5,r5,1
 200e714:	1021883a 	mov	r16,r2
 200e718:	89a2b03a 	or	r17,r17,r6
 200e71c:	003f1806 	br	200e380 <__adddf3+0x7c>
 200e720:	0081ffc4 	movi	r2,2047
 200e724:	80bf411e 	bne	r16,r2,200e42c <__adddf3+0x128>
 200e728:	003f1506 	br	200e380 <__adddf3+0x7c>
 200e72c:	80bff844 	addi	r2,r16,-31
 200e730:	00c00804 	movi	r3,32
 200e734:	9884d83a 	srl	r2,r19,r2
 200e738:	28c04a26 	beq	r5,r3,200e864 <__adddf3+0x560>
 200e73c:	00c00fc4 	movi	r3,63
 200e740:	1c21c83a 	sub	r16,r3,r16
 200e744:	9c26983a 	sll	r19,r19,r16
 200e748:	9c62b03a 	or	r17,r19,r17
 200e74c:	8822c03a 	cmpne	r17,r17,zero
 200e750:	88a2b03a 	or	r17,r17,r2
 200e754:	000b883a 	mov	r5,zero
 200e758:	0021883a 	mov	r16,zero
 200e75c:	003fb406 	br	200e630 <__adddf3+0x32c>
 200e760:	18bff804 	addi	r2,r3,-32
 200e764:	01000804 	movi	r4,32
 200e768:	4084d83a 	srl	r2,r8,r2
 200e76c:	19003f26 	beq	r3,r4,200e86c <__adddf3+0x568>
 200e770:	01001004 	movi	r4,64
 200e774:	20c7c83a 	sub	r3,r4,r3
 200e778:	40d0983a 	sll	r8,r8,r3
 200e77c:	418cb03a 	or	r6,r8,r6
 200e780:	300cc03a 	cmpne	r6,r6,zero
 200e784:	308cb03a 	or	r6,r6,r2
 200e788:	0007883a 	mov	r3,zero
 200e78c:	003f3406 	br	200e460 <__adddf3+0x15c>
 200e790:	80002326 	beq	r16,zero,200e820 <__adddf3+0x51c>
 200e794:	0101ffc4 	movi	r4,2047
 200e798:	11005e26 	beq	r2,r4,200e914 <__adddf3+0x610>
 200e79c:	00c7c83a 	sub	r3,zero,r3
 200e7a0:	29402034 	orhi	r5,r5,128
 200e7a4:	01000e04 	movi	r4,56
 200e7a8:	20c07216 	blt	r4,r3,200e974 <__adddf3+0x670>
 200e7ac:	010007c4 	movi	r4,31
 200e7b0:	20c0ce16 	blt	r4,r3,200eaec <__adddf3+0x7e8>
 200e7b4:	01000804 	movi	r4,32
 200e7b8:	20c9c83a 	sub	r4,r4,r3
 200e7bc:	2914983a 	sll	r10,r5,r4
 200e7c0:	88d2d83a 	srl	r9,r17,r3
 200e7c4:	8908983a 	sll	r4,r17,r4
 200e7c8:	28c6d83a 	srl	r3,r5,r3
 200e7cc:	5262b03a 	or	r17,r10,r9
 200e7d0:	2008c03a 	cmpne	r4,r4,zero
 200e7d4:	8922b03a 	or	r17,r17,r4
 200e7d8:	3463c83a 	sub	r17,r6,r17
 200e7dc:	40c7c83a 	sub	r3,r8,r3
 200e7e0:	344d803a 	cmpltu	r6,r6,r17
 200e7e4:	198bc83a 	sub	r5,r3,r6
 200e7e8:	1021883a 	mov	r16,r2
 200e7ec:	3825883a 	mov	r18,r7
 200e7f0:	003f2006 	br	200e474 <__adddf3+0x170>
 200e7f4:	9886b03a 	or	r3,r19,r2
 200e7f8:	1800141e 	bne	r3,zero,200e84c <__adddf3+0x548>
 200e7fc:	0007883a 	mov	r3,zero
 200e800:	000b883a 	mov	r5,zero
 200e804:	0023883a 	mov	r17,zero
 200e808:	0021883a 	mov	r16,zero
 200e80c:	003f3c06 	br	200e500 <__adddf3+0x1fc>
 200e810:	418cb03a 	or	r6,r8,r6
 200e814:	300cc03a 	cmpne	r6,r6,zero
 200e818:	0011883a 	mov	r8,zero
 200e81c:	003f5606 	br	200e578 <__adddf3+0x274>
 200e820:	2c48b03a 	or	r4,r5,r17
 200e824:	20003b26 	beq	r4,zero,200e914 <__adddf3+0x610>
 200e828:	00c6303a 	nor	r3,zero,r3
 200e82c:	1800371e 	bne	r3,zero,200e90c <__adddf3+0x608>
 200e830:	3463c83a 	sub	r17,r6,r17
 200e834:	414bc83a 	sub	r5,r8,r5
 200e838:	344d803a 	cmpltu	r6,r6,r17
 200e83c:	298bc83a 	sub	r5,r5,r6
 200e840:	1021883a 	mov	r16,r2
 200e844:	3825883a 	mov	r18,r7
 200e848:	003f0a06 	br	200e474 <__adddf3+0x170>
 200e84c:	1023883a 	mov	r17,r2
 200e850:	003f0d06 	br	200e488 <__adddf3+0x184>
 200e854:	0007883a 	mov	r3,zero
 200e858:	000b883a 	mov	r5,zero
 200e85c:	0023883a 	mov	r17,zero
 200e860:	003f2706 	br	200e500 <__adddf3+0x1fc>
 200e864:	0027883a 	mov	r19,zero
 200e868:	003fb706 	br	200e748 <__adddf3+0x444>
 200e86c:	0011883a 	mov	r8,zero
 200e870:	003fc206 	br	200e77c <__adddf3+0x478>
 200e874:	2c44b03a 	or	r2,r5,r17
 200e878:	8000871e 	bne	r16,zero,200ea98 <__adddf3+0x794>
 200e87c:	1000b126 	beq	r2,zero,200eb44 <__adddf3+0x840>
 200e880:	4184b03a 	or	r2,r8,r6
 200e884:	103ebe26 	beq	r2,zero,200e380 <__adddf3+0x7c>
 200e888:	3445883a 	add	r2,r6,r17
 200e88c:	1463803a 	cmpltu	r17,r2,r17
 200e890:	414b883a 	add	r5,r8,r5
 200e894:	2c4b883a 	add	r5,r5,r17
 200e898:	28c0202c 	andhi	r3,r5,128
 200e89c:	1023883a 	mov	r17,r2
 200e8a0:	183f6326 	beq	r3,zero,200e630 <__adddf3+0x32c>
 200e8a4:	00bfe034 	movhi	r2,65408
 200e8a8:	10bfffc4 	addi	r2,r2,-1
 200e8ac:	2021883a 	mov	r16,r4
 200e8b0:	288a703a 	and	r5,r5,r2
 200e8b4:	003eb206 	br	200e380 <__adddf3+0x7c>
 200e8b8:	2c44b03a 	or	r2,r5,r17
 200e8bc:	8000251e 	bne	r16,zero,200e954 <__adddf3+0x650>
 200e8c0:	10004b1e 	bne	r2,zero,200e9f0 <__adddf3+0x6ec>
 200e8c4:	4184b03a 	or	r2,r8,r6
 200e8c8:	103fe226 	beq	r2,zero,200e854 <__adddf3+0x550>
 200e8cc:	400b883a 	mov	r5,r8
 200e8d0:	3023883a 	mov	r17,r6
 200e8d4:	3825883a 	mov	r18,r7
 200e8d8:	003ea906 	br	200e380 <__adddf3+0x7c>
 200e8dc:	20bff804 	addi	r2,r4,-32
 200e8e0:	01c00804 	movi	r7,32
 200e8e4:	4084d83a 	srl	r2,r8,r2
 200e8e8:	21c07e26 	beq	r4,r7,200eae4 <__adddf3+0x7e0>
 200e8ec:	01c01004 	movi	r7,64
 200e8f0:	3909c83a 	sub	r4,r7,r4
 200e8f4:	4110983a 	sll	r8,r8,r4
 200e8f8:	418cb03a 	or	r6,r8,r6
 200e8fc:	300cc03a 	cmpne	r6,r6,zero
 200e900:	308cb03a 	or	r6,r6,r2
 200e904:	0011883a 	mov	r8,zero
 200e908:	003f1b06 	br	200e578 <__adddf3+0x274>
 200e90c:	0101ffc4 	movi	r4,2047
 200e910:	113fa41e 	bne	r2,r4,200e7a4 <__adddf3+0x4a0>
 200e914:	400b883a 	mov	r5,r8
 200e918:	3023883a 	mov	r17,r6
 200e91c:	1021883a 	mov	r16,r2
 200e920:	3825883a 	mov	r18,r7
 200e924:	003e9606 	br	200e380 <__adddf3+0x7c>
 200e928:	80001a1e 	bne	r16,zero,200e994 <__adddf3+0x690>
 200e92c:	2c4eb03a 	or	r7,r5,r17
 200e930:	38005526 	beq	r7,zero,200ea88 <__adddf3+0x784>
 200e934:	0108303a 	nor	r4,zero,r4
 200e938:	2000511e 	bne	r4,zero,200ea80 <__adddf3+0x77c>
 200e93c:	89a3883a 	add	r17,r17,r6
 200e940:	414b883a 	add	r5,r8,r5
 200e944:	898d803a 	cmpltu	r6,r17,r6
 200e948:	298b883a 	add	r5,r5,r6
 200e94c:	1021883a 	mov	r16,r2
 200e950:	003f0e06 	br	200e58c <__adddf3+0x288>
 200e954:	1000341e 	bne	r2,zero,200ea28 <__adddf3+0x724>
 200e958:	4184b03a 	or	r2,r8,r6
 200e95c:	10006f26 	beq	r2,zero,200eb1c <__adddf3+0x818>
 200e960:	400b883a 	mov	r5,r8
 200e964:	3023883a 	mov	r17,r6
 200e968:	3825883a 	mov	r18,r7
 200e96c:	0401ffc4 	movi	r16,2047
 200e970:	003e8306 	br	200e380 <__adddf3+0x7c>
 200e974:	2c62b03a 	or	r17,r5,r17
 200e978:	8822c03a 	cmpne	r17,r17,zero
 200e97c:	0007883a 	mov	r3,zero
 200e980:	003f9506 	br	200e7d8 <__adddf3+0x4d4>
 200e984:	1021883a 	mov	r16,r2
 200e988:	000b883a 	mov	r5,zero
 200e98c:	0023883a 	mov	r17,zero
 200e990:	003edb06 	br	200e500 <__adddf3+0x1fc>
 200e994:	01c1ffc4 	movi	r7,2047
 200e998:	11c03b26 	beq	r2,r7,200ea88 <__adddf3+0x784>
 200e99c:	0109c83a 	sub	r4,zero,r4
 200e9a0:	29402034 	orhi	r5,r5,128
 200e9a4:	01c00e04 	movi	r7,56
 200e9a8:	39006216 	blt	r7,r4,200eb34 <__adddf3+0x830>
 200e9ac:	01c007c4 	movi	r7,31
 200e9b0:	39006b16 	blt	r7,r4,200eb60 <__adddf3+0x85c>
 200e9b4:	01c00804 	movi	r7,32
 200e9b8:	390fc83a 	sub	r7,r7,r4
 200e9bc:	29d4983a 	sll	r10,r5,r7
 200e9c0:	8912d83a 	srl	r9,r17,r4
 200e9c4:	89ce983a 	sll	r7,r17,r7
 200e9c8:	2908d83a 	srl	r4,r5,r4
 200e9cc:	5262b03a 	or	r17,r10,r9
 200e9d0:	380ac03a 	cmpne	r5,r7,zero
 200e9d4:	8962b03a 	or	r17,r17,r5
 200e9d8:	89a3883a 	add	r17,r17,r6
 200e9dc:	2211883a 	add	r8,r4,r8
 200e9e0:	898d803a 	cmpltu	r6,r17,r6
 200e9e4:	418b883a 	add	r5,r8,r6
 200e9e8:	1021883a 	mov	r16,r2
 200e9ec:	003ee706 	br	200e58c <__adddf3+0x288>
 200e9f0:	4184b03a 	or	r2,r8,r6
 200e9f4:	103e6226 	beq	r2,zero,200e380 <__adddf3+0x7c>
 200e9f8:	8987c83a 	sub	r3,r17,r6
 200e9fc:	88c9803a 	cmpltu	r4,r17,r3
 200ea00:	2a05c83a 	sub	r2,r5,r8
 200ea04:	1105c83a 	sub	r2,r2,r4
 200ea08:	1100202c 	andhi	r4,r2,128
 200ea0c:	203f0426 	beq	r4,zero,200e620 <__adddf3+0x31c>
 200ea10:	3463c83a 	sub	r17,r6,r17
 200ea14:	414bc83a 	sub	r5,r8,r5
 200ea18:	344d803a 	cmpltu	r6,r6,r17
 200ea1c:	298bc83a 	sub	r5,r5,r6
 200ea20:	3825883a 	mov	r18,r7
 200ea24:	003e5606 	br	200e380 <__adddf3+0x7c>
 200ea28:	4184b03a 	or	r2,r8,r6
 200ea2c:	10002b26 	beq	r2,zero,200eadc <__adddf3+0x7d8>
 200ea30:	2804d0fa 	srli	r2,r5,3
 200ea34:	8822d0fa 	srli	r17,r17,3
 200ea38:	280a977a 	slli	r5,r5,29
 200ea3c:	10c0022c 	andhi	r3,r2,8
 200ea40:	2c62b03a 	or	r17,r5,r17
 200ea44:	18000826 	beq	r3,zero,200ea68 <__adddf3+0x764>
 200ea48:	4008d0fa 	srli	r4,r8,3
 200ea4c:	20c0022c 	andhi	r3,r4,8
 200ea50:	1800051e 	bne	r3,zero,200ea68 <__adddf3+0x764>
 200ea54:	300cd0fa 	srli	r6,r6,3
 200ea58:	4010977a 	slli	r8,r8,29
 200ea5c:	2005883a 	mov	r2,r4
 200ea60:	3825883a 	mov	r18,r7
 200ea64:	41a2b03a 	or	r17,r8,r6
 200ea68:	880ad77a 	srli	r5,r17,29
 200ea6c:	100490fa 	slli	r2,r2,3
 200ea70:	882290fa 	slli	r17,r17,3
 200ea74:	0401ffc4 	movi	r16,2047
 200ea78:	288ab03a 	or	r5,r5,r2
 200ea7c:	003e4006 	br	200e380 <__adddf3+0x7c>
 200ea80:	01c1ffc4 	movi	r7,2047
 200ea84:	11ffc71e 	bne	r2,r7,200e9a4 <__adddf3+0x6a0>
 200ea88:	400b883a 	mov	r5,r8
 200ea8c:	3023883a 	mov	r17,r6
 200ea90:	1021883a 	mov	r16,r2
 200ea94:	003e3a06 	br	200e380 <__adddf3+0x7c>
 200ea98:	10002d26 	beq	r2,zero,200eb50 <__adddf3+0x84c>
 200ea9c:	4184b03a 	or	r2,r8,r6
 200eaa0:	10000e26 	beq	r2,zero,200eadc <__adddf3+0x7d8>
 200eaa4:	2804d0fa 	srli	r2,r5,3
 200eaa8:	8822d0fa 	srli	r17,r17,3
 200eaac:	280a977a 	slli	r5,r5,29
 200eab0:	10c0022c 	andhi	r3,r2,8
 200eab4:	2c62b03a 	or	r17,r5,r17
 200eab8:	183feb26 	beq	r3,zero,200ea68 <__adddf3+0x764>
 200eabc:	4008d0fa 	srli	r4,r8,3
 200eac0:	20c0022c 	andhi	r3,r4,8
 200eac4:	183fe81e 	bne	r3,zero,200ea68 <__adddf3+0x764>
 200eac8:	300cd0fa 	srli	r6,r6,3
 200eacc:	4010977a 	slli	r8,r8,29
 200ead0:	2005883a 	mov	r2,r4
 200ead4:	41a2b03a 	or	r17,r8,r6
 200ead8:	003fe306 	br	200ea68 <__adddf3+0x764>
 200eadc:	0401ffc4 	movi	r16,2047
 200eae0:	003e2706 	br	200e380 <__adddf3+0x7c>
 200eae4:	0011883a 	mov	r8,zero
 200eae8:	003f8306 	br	200e8f8 <__adddf3+0x5f4>
 200eaec:	193ff804 	addi	r4,r3,-32
 200eaf0:	02400804 	movi	r9,32
 200eaf4:	2908d83a 	srl	r4,r5,r4
 200eaf8:	1a402526 	beq	r3,r9,200eb90 <__adddf3+0x88c>
 200eafc:	02401004 	movi	r9,64
 200eb00:	48c7c83a 	sub	r3,r9,r3
 200eb04:	28ca983a 	sll	r5,r5,r3
 200eb08:	2c62b03a 	or	r17,r5,r17
 200eb0c:	8822c03a 	cmpne	r17,r17,zero
 200eb10:	8922b03a 	or	r17,r17,r4
 200eb14:	0007883a 	mov	r3,zero
 200eb18:	003f2f06 	br	200e7d8 <__adddf3+0x4d4>
 200eb1c:	01402034 	movhi	r5,128
 200eb20:	0007883a 	mov	r3,zero
 200eb24:	297fffc4 	addi	r5,r5,-1
 200eb28:	047ffe04 	movi	r17,-8
 200eb2c:	0401ffc4 	movi	r16,2047
 200eb30:	003e7306 	br	200e500 <__adddf3+0x1fc>
 200eb34:	2c62b03a 	or	r17,r5,r17
 200eb38:	8822c03a 	cmpne	r17,r17,zero
 200eb3c:	0009883a 	mov	r4,zero
 200eb40:	003fa506 	br	200e9d8 <__adddf3+0x6d4>
 200eb44:	400b883a 	mov	r5,r8
 200eb48:	3023883a 	mov	r17,r6
 200eb4c:	003e0c06 	br	200e380 <__adddf3+0x7c>
 200eb50:	400b883a 	mov	r5,r8
 200eb54:	3023883a 	mov	r17,r6
 200eb58:	0401ffc4 	movi	r16,2047
 200eb5c:	003e0806 	br	200e380 <__adddf3+0x7c>
 200eb60:	21fff804 	addi	r7,r4,-32
 200eb64:	02400804 	movi	r9,32
 200eb68:	29ced83a 	srl	r7,r5,r7
 200eb6c:	22400a26 	beq	r4,r9,200eb98 <__adddf3+0x894>
 200eb70:	02401004 	movi	r9,64
 200eb74:	4909c83a 	sub	r4,r9,r4
 200eb78:	290a983a 	sll	r5,r5,r4
 200eb7c:	2c62b03a 	or	r17,r5,r17
 200eb80:	8822c03a 	cmpne	r17,r17,zero
 200eb84:	89e2b03a 	or	r17,r17,r7
 200eb88:	0009883a 	mov	r4,zero
 200eb8c:	003f9206 	br	200e9d8 <__adddf3+0x6d4>
 200eb90:	000b883a 	mov	r5,zero
 200eb94:	003fdc06 	br	200eb08 <__adddf3+0x804>
 200eb98:	000b883a 	mov	r5,zero
 200eb9c:	003ff706 	br	200eb7c <__adddf3+0x878>

0200eba0 <__divdf3>:
 200eba0:	defff004 	addi	sp,sp,-64
 200eba4:	dc800815 	stw	r18,32(sp)
 200eba8:	2824d53a 	srli	r18,r5,20
 200ebac:	dd800c15 	stw	r22,48(sp)
 200ebb0:	282cd7fa 	srli	r22,r5,31
 200ebb4:	dc000615 	stw	r16,24(sp)
 200ebb8:	04000434 	movhi	r16,16
 200ebbc:	df000e15 	stw	fp,56(sp)
 200ebc0:	dd000a15 	stw	r20,40(sp)
 200ebc4:	dcc00915 	stw	r19,36(sp)
 200ebc8:	dc400715 	stw	r17,28(sp)
 200ebcc:	843fffc4 	addi	r16,r16,-1
 200ebd0:	dfc00f15 	stw	ra,60(sp)
 200ebd4:	ddc00d15 	stw	r23,52(sp)
 200ebd8:	dd400b15 	stw	r21,44(sp)
 200ebdc:	9481ffcc 	andi	r18,r18,2047
 200ebe0:	2029883a 	mov	r20,r4
 200ebe4:	2027883a 	mov	r19,r4
 200ebe8:	2c22703a 	and	r17,r5,r16
 200ebec:	b7003fcc 	andi	fp,r22,255
 200ebf0:	90005e26 	beq	r18,zero,200ed6c <__divdf3+0x1cc>
 200ebf4:	0081ffc4 	movi	r2,2047
 200ebf8:	90803526 	beq	r18,r2,200ecd0 <__divdf3+0x130>
 200ebfc:	8c000434 	orhi	r16,r17,16
 200ec00:	2004d77a 	srli	r2,r4,29
 200ec04:	802090fa 	slli	r16,r16,3
 200ec08:	202690fa 	slli	r19,r4,3
 200ec0c:	94bf0044 	addi	r18,r18,-1023
 200ec10:	80a2b03a 	or	r17,r16,r2
 200ec14:	0029883a 	mov	r20,zero
 200ec18:	0011883a 	mov	r8,zero
 200ec1c:	380ad53a 	srli	r5,r7,20
 200ec20:	382ed7fa 	srli	r23,r7,31
 200ec24:	04000434 	movhi	r16,16
 200ec28:	843fffc4 	addi	r16,r16,-1
 200ec2c:	2941ffcc 	andi	r5,r5,2047
 200ec30:	302b883a 	mov	r21,r6
 200ec34:	3c20703a 	and	r16,r7,r16
 200ec38:	ba403fcc 	andi	r9,r23,255
 200ec3c:	28006726 	beq	r5,zero,200eddc <__divdf3+0x23c>
 200ec40:	0081ffc4 	movi	r2,2047
 200ec44:	28805f26 	beq	r5,r2,200edc4 <__divdf3+0x224>
 200ec48:	84000434 	orhi	r16,r16,16
 200ec4c:	3004d77a 	srli	r2,r6,29
 200ec50:	802090fa 	slli	r16,r16,3
 200ec54:	302a90fa 	slli	r21,r6,3
 200ec58:	297f0044 	addi	r5,r5,-1023
 200ec5c:	80a0b03a 	or	r16,r16,r2
 200ec60:	000f883a 	mov	r7,zero
 200ec64:	3d06b03a 	or	r3,r7,r20
 200ec68:	180690ba 	slli	r3,r3,2
 200ec6c:	00808074 	movhi	r2,513
 200ec70:	10bb2404 	addi	r2,r2,-4976
 200ec74:	1885883a 	add	r2,r3,r2
 200ec78:	10800017 	ldw	r2,0(r2)
 200ec7c:	b5c8f03a 	xor	r4,r22,r23
 200ec80:	200d883a 	mov	r6,r4
 200ec84:	25003fcc 	andi	r20,r4,255
 200ec88:	9165c83a 	sub	r18,r18,r5
 200ec8c:	1000683a 	jmp	r2
 200ec90:	0200eed8 	cmpnei	r8,zero,955
 200ec94:	0200ed08 	cmpgei	r8,zero,948
 200ec98:	0200ee9c 	xori	r8,zero,954
 200ec9c:	0200ecec 	andhi	r8,zero,947
 200eca0:	0200ee9c 	xori	r8,zero,954
 200eca4:	0200ee70 	cmpltui	r8,zero,953
 200eca8:	0200ee9c 	xori	r8,zero,954
 200ecac:	0200ecec 	andhi	r8,zero,947
 200ecb0:	0200ed08 	cmpgei	r8,zero,948
 200ecb4:	0200ed08 	cmpgei	r8,zero,948
 200ecb8:	0200ee70 	cmpltui	r8,zero,953
 200ecbc:	0200ecec 	andhi	r8,zero,947
 200ecc0:	0200ecfc 	xorhi	r8,zero,947
 200ecc4:	0200ecfc 	xorhi	r8,zero,947
 200ecc8:	0200ecfc 	xorhi	r8,zero,947
 200eccc:	0200eeac 	andhi	r8,zero,954
 200ecd0:	8904b03a 	or	r2,r17,r4
 200ecd4:	1000631e 	bne	r2,zero,200ee64 <__divdf3+0x2c4>
 200ecd8:	05000204 	movi	r20,8
 200ecdc:	0023883a 	mov	r17,zero
 200ece0:	0027883a 	mov	r19,zero
 200ece4:	02000084 	movi	r8,2
 200ece8:	003fcc06 	br	200ec1c <__divdf3+0x7c>
 200ecec:	8023883a 	mov	r17,r16
 200ecf0:	a827883a 	mov	r19,r21
 200ecf4:	4839883a 	mov	fp,r9
 200ecf8:	3811883a 	mov	r8,r7
 200ecfc:	00800084 	movi	r2,2
 200ed00:	4081531e 	bne	r8,r2,200f250 <__divdf3+0x6b0>
 200ed04:	e029883a 	mov	r20,fp
 200ed08:	a180004c 	andi	r6,r20,1
 200ed0c:	0201ffc4 	movi	r8,2047
 200ed10:	000b883a 	mov	r5,zero
 200ed14:	0027883a 	mov	r19,zero
 200ed18:	4010953a 	slli	r8,r8,20
 200ed1c:	30c03fcc 	andi	r3,r6,255
 200ed20:	04000434 	movhi	r16,16
 200ed24:	180697fa 	slli	r3,r3,31
 200ed28:	843fffc4 	addi	r16,r16,-1
 200ed2c:	2c20703a 	and	r16,r5,r16
 200ed30:	8220b03a 	or	r16,r16,r8
 200ed34:	80c6b03a 	or	r3,r16,r3
 200ed38:	9805883a 	mov	r2,r19
 200ed3c:	dfc00f17 	ldw	ra,60(sp)
 200ed40:	df000e17 	ldw	fp,56(sp)
 200ed44:	ddc00d17 	ldw	r23,52(sp)
 200ed48:	dd800c17 	ldw	r22,48(sp)
 200ed4c:	dd400b17 	ldw	r21,44(sp)
 200ed50:	dd000a17 	ldw	r20,40(sp)
 200ed54:	dcc00917 	ldw	r19,36(sp)
 200ed58:	dc800817 	ldw	r18,32(sp)
 200ed5c:	dc400717 	ldw	r17,28(sp)
 200ed60:	dc000617 	ldw	r16,24(sp)
 200ed64:	dec01004 	addi	sp,sp,64
 200ed68:	f800283a 	ret
 200ed6c:	8904b03a 	or	r2,r17,r4
 200ed70:	10003726 	beq	r2,zero,200ee50 <__divdf3+0x2b0>
 200ed74:	88014d26 	beq	r17,zero,200f2ac <__divdf3+0x70c>
 200ed78:	8809883a 	mov	r4,r17
 200ed7c:	d9800215 	stw	r6,8(sp)
 200ed80:	d9c00515 	stw	r7,20(sp)
 200ed84:	2010a9c0 	call	2010a9c <__clzsi2>
 200ed88:	d9800217 	ldw	r6,8(sp)
 200ed8c:	d9c00517 	ldw	r7,20(sp)
 200ed90:	1007883a 	mov	r3,r2
 200ed94:	01000a04 	movi	r4,40
 200ed98:	1cfffe04 	addi	r19,r3,-8
 200ed9c:	20c9c83a 	sub	r4,r4,r3
 200eda0:	8cca983a 	sll	r5,r17,r19
 200eda4:	a108d83a 	srl	r4,r20,r4
 200eda8:	a4e6983a 	sll	r19,r20,r19
 200edac:	2162b03a 	or	r17,r4,r5
 200edb0:	04bf0344 	movi	r18,-1011
 200edb4:	90e5c83a 	sub	r18,r18,r3
 200edb8:	0029883a 	mov	r20,zero
 200edbc:	0011883a 	mov	r8,zero
 200edc0:	003f9606 	br	200ec1c <__divdf3+0x7c>
 200edc4:	8184b03a 	or	r2,r16,r6
 200edc8:	10001f1e 	bne	r2,zero,200ee48 <__divdf3+0x2a8>
 200edcc:	0021883a 	mov	r16,zero
 200edd0:	002b883a 	mov	r21,zero
 200edd4:	01c00084 	movi	r7,2
 200edd8:	003fa206 	br	200ec64 <__divdf3+0xc4>
 200eddc:	8184b03a 	or	r2,r16,r6
 200ede0:	10001526 	beq	r2,zero,200ee38 <__divdf3+0x298>
 200ede4:	80013d26 	beq	r16,zero,200f2dc <__divdf3+0x73c>
 200ede8:	8009883a 	mov	r4,r16
 200edec:	d9800215 	stw	r6,8(sp)
 200edf0:	da000315 	stw	r8,12(sp)
 200edf4:	da400415 	stw	r9,16(sp)
 200edf8:	2010a9c0 	call	2010a9c <__clzsi2>
 200edfc:	d9800217 	ldw	r6,8(sp)
 200ee00:	da000317 	ldw	r8,12(sp)
 200ee04:	da400417 	ldw	r9,16(sp)
 200ee08:	1007883a 	mov	r3,r2
 200ee0c:	01000a04 	movi	r4,40
 200ee10:	1d7ffe04 	addi	r21,r3,-8
 200ee14:	20c9c83a 	sub	r4,r4,r3
 200ee18:	8560983a 	sll	r16,r16,r21
 200ee1c:	3108d83a 	srl	r4,r6,r4
 200ee20:	356a983a 	sll	r21,r6,r21
 200ee24:	2420b03a 	or	r16,r4,r16
 200ee28:	017f0344 	movi	r5,-1011
 200ee2c:	28cbc83a 	sub	r5,r5,r3
 200ee30:	000f883a 	mov	r7,zero
 200ee34:	003f8b06 	br	200ec64 <__divdf3+0xc4>
 200ee38:	0021883a 	mov	r16,zero
 200ee3c:	002b883a 	mov	r21,zero
 200ee40:	01c00044 	movi	r7,1
 200ee44:	003f8706 	br	200ec64 <__divdf3+0xc4>
 200ee48:	01c000c4 	movi	r7,3
 200ee4c:	003f8506 	br	200ec64 <__divdf3+0xc4>
 200ee50:	05000104 	movi	r20,4
 200ee54:	0023883a 	mov	r17,zero
 200ee58:	0027883a 	mov	r19,zero
 200ee5c:	02000044 	movi	r8,1
 200ee60:	003f6e06 	br	200ec1c <__divdf3+0x7c>
 200ee64:	05000304 	movi	r20,12
 200ee68:	020000c4 	movi	r8,3
 200ee6c:	003f6b06 	br	200ec1c <__divdf3+0x7c>
 200ee70:	01400434 	movhi	r5,16
 200ee74:	000d883a 	mov	r6,zero
 200ee78:	297fffc4 	addi	r5,r5,-1
 200ee7c:	04ffffc4 	movi	r19,-1
 200ee80:	0201ffc4 	movi	r8,2047
 200ee84:	003fa406 	br	200ed18 <__divdf3+0x178>
 200ee88:	043f0084 	movi	r16,-1022
 200ee8c:	84a1c83a 	sub	r16,r16,r18
 200ee90:	00800e04 	movi	r2,56
 200ee94:	14014d0e 	bge	r2,r16,200f3cc <__divdf3+0x82c>
 200ee98:	a180004c 	andi	r6,r20,1
 200ee9c:	0011883a 	mov	r8,zero
 200eea0:	000b883a 	mov	r5,zero
 200eea4:	0027883a 	mov	r19,zero
 200eea8:	003f9b06 	br	200ed18 <__divdf3+0x178>
 200eeac:	8880022c 	andhi	r2,r17,8
 200eeb0:	1000f026 	beq	r2,zero,200f274 <__divdf3+0x6d4>
 200eeb4:	8080022c 	andhi	r2,r16,8
 200eeb8:	1000ee1e 	bne	r2,zero,200f274 <__divdf3+0x6d4>
 200eebc:	00800434 	movhi	r2,16
 200eec0:	81400234 	orhi	r5,r16,8
 200eec4:	10bfffc4 	addi	r2,r2,-1
 200eec8:	b80d883a 	mov	r6,r23
 200eecc:	288a703a 	and	r5,r5,r2
 200eed0:	a827883a 	mov	r19,r21
 200eed4:	003fea06 	br	200ee80 <__divdf3+0x2e0>
 200eed8:	84411c36 	bltu	r16,r17,200f34c <__divdf3+0x7ac>
 200eedc:	8c011a26 	beq	r17,r16,200f348 <__divdf3+0x7a8>
 200eee0:	94bfffc4 	addi	r18,r18,-1
 200eee4:	dcc00015 	stw	r19,0(sp)
 200eee8:	8811883a 	mov	r8,r17
 200eeec:	002d883a 	mov	r22,zero
 200eef0:	a80cd63a 	srli	r6,r21,24
 200eef4:	8020923a 	slli	r16,r16,8
 200eef8:	a82a923a 	slli	r21,r21,8
 200eefc:	4009883a 	mov	r4,r8
 200ef00:	342eb03a 	or	r23,r6,r16
 200ef04:	dd400115 	stw	r21,4(sp)
 200ef08:	b82ad43a 	srli	r21,r23,16
 200ef0c:	da000315 	stw	r8,12(sp)
 200ef10:	bcffffcc 	andi	r19,r23,65535
 200ef14:	a80b883a 	mov	r5,r21
 200ef18:	200e2cc0 	call	200e2cc <__udivsi3>
 200ef1c:	1009883a 	mov	r4,r2
 200ef20:	980b883a 	mov	r5,r19
 200ef24:	1023883a 	mov	r17,r2
 200ef28:	200e2dc0 	call	200e2dc <__mulsi3>
 200ef2c:	da000317 	ldw	r8,12(sp)
 200ef30:	a80b883a 	mov	r5,r21
 200ef34:	1039883a 	mov	fp,r2
 200ef38:	4009883a 	mov	r4,r8
 200ef3c:	200e2d40 	call	200e2d4 <__umodsi3>
 200ef40:	d8c00017 	ldw	r3,0(sp)
 200ef44:	1004943a 	slli	r2,r2,16
 200ef48:	1810d43a 	srli	r8,r3,16
 200ef4c:	120eb03a 	or	r7,r2,r8
 200ef50:	3f00062e 	bgeu	r7,fp,200ef6c <__divdf3+0x3cc>
 200ef54:	3dcf883a 	add	r7,r7,r23
 200ef58:	88bfffc4 	addi	r2,r17,-1
 200ef5c:	3dc10a36 	bltu	r7,r23,200f388 <__divdf3+0x7e8>
 200ef60:	3f01092e 	bgeu	r7,fp,200f388 <__divdf3+0x7e8>
 200ef64:	8c7fff84 	addi	r17,r17,-2
 200ef68:	3dcf883a 	add	r7,r7,r23
 200ef6c:	3f39c83a 	sub	fp,r7,fp
 200ef70:	e009883a 	mov	r4,fp
 200ef74:	a80b883a 	mov	r5,r21
 200ef78:	200e2cc0 	call	200e2cc <__udivsi3>
 200ef7c:	1009883a 	mov	r4,r2
 200ef80:	980b883a 	mov	r5,r19
 200ef84:	1021883a 	mov	r16,r2
 200ef88:	200e2dc0 	call	200e2dc <__mulsi3>
 200ef8c:	e009883a 	mov	r4,fp
 200ef90:	a80b883a 	mov	r5,r21
 200ef94:	d8800315 	stw	r2,12(sp)
 200ef98:	200e2d40 	call	200e2d4 <__umodsi3>
 200ef9c:	d9000017 	ldw	r4,0(sp)
 200efa0:	1004943a 	slli	r2,r2,16
 200efa4:	da000317 	ldw	r8,12(sp)
 200efa8:	20ffffcc 	andi	r3,r4,65535
 200efac:	10ceb03a 	or	r7,r2,r3
 200efb0:	3a00062e 	bgeu	r7,r8,200efcc <__divdf3+0x42c>
 200efb4:	3dcf883a 	add	r7,r7,r23
 200efb8:	80bfffc4 	addi	r2,r16,-1
 200efbc:	3dc0f036 	bltu	r7,r23,200f380 <__divdf3+0x7e0>
 200efc0:	3a00ef2e 	bgeu	r7,r8,200f380 <__divdf3+0x7e0>
 200efc4:	843fff84 	addi	r16,r16,-2
 200efc8:	3dcf883a 	add	r7,r7,r23
 200efcc:	d8c00117 	ldw	r3,4(sp)
 200efd0:	8822943a 	slli	r17,r17,16
 200efd4:	3a0fc83a 	sub	r7,r7,r8
 200efd8:	1806d43a 	srli	r3,r3,16
 200efdc:	8462b03a 	or	r17,r16,r17
 200efe0:	8affffcc 	andi	r11,r17,65535
 200efe4:	d8c00015 	stw	r3,0(sp)
 200efe8:	d8c00117 	ldw	r3,4(sp)
 200efec:	8820d43a 	srli	r16,r17,16
 200eff0:	5809883a 	mov	r4,r11
 200eff4:	1f3fffcc 	andi	fp,r3,65535
 200eff8:	e00b883a 	mov	r5,fp
 200effc:	d9c00515 	stw	r7,20(sp)
 200f000:	dac00215 	stw	r11,8(sp)
 200f004:	200e2dc0 	call	200e2dc <__mulsi3>
 200f008:	8009883a 	mov	r4,r16
 200f00c:	e00b883a 	mov	r5,fp
 200f010:	d8800415 	stw	r2,16(sp)
 200f014:	200e2dc0 	call	200e2dc <__mulsi3>
 200f018:	d9400017 	ldw	r5,0(sp)
 200f01c:	8009883a 	mov	r4,r16
 200f020:	d8800315 	stw	r2,12(sp)
 200f024:	200e2dc0 	call	200e2dc <__mulsi3>
 200f028:	dac00217 	ldw	r11,8(sp)
 200f02c:	d9400017 	ldw	r5,0(sp)
 200f030:	d8800215 	stw	r2,8(sp)
 200f034:	5809883a 	mov	r4,r11
 200f038:	200e2dc0 	call	200e2dc <__mulsi3>
 200f03c:	da400417 	ldw	r9,16(sp)
 200f040:	da800317 	ldw	r10,12(sp)
 200f044:	d9c00517 	ldw	r7,20(sp)
 200f048:	480ad43a 	srli	r5,r9,16
 200f04c:	5085883a 	add	r2,r10,r2
 200f050:	db000217 	ldw	r12,8(sp)
 200f054:	1151883a 	add	r8,r2,r5
 200f058:	4280022e 	bgeu	r8,r10,200f064 <__divdf3+0x4c4>
 200f05c:	00800074 	movhi	r2,1
 200f060:	6099883a 	add	r12,r12,r2
 200f064:	400ad43a 	srli	r5,r8,16
 200f068:	4010943a 	slli	r8,r8,16
 200f06c:	4c3fffcc 	andi	r16,r9,65535
 200f070:	6149883a 	add	r4,r12,r5
 200f074:	4411883a 	add	r8,r8,r16
 200f078:	3900a736 	bltu	r7,r4,200f318 <__divdf3+0x778>
 200f07c:	3900c426 	beq	r7,r4,200f390 <__divdf3+0x7f0>
 200f080:	3909c83a 	sub	r4,r7,r4
 200f084:	b221c83a 	sub	r16,r22,r8
 200f088:	b42d803a 	cmpltu	r22,r22,r16
 200f08c:	25adc83a 	sub	r22,r4,r22
 200f090:	b5c0c626 	beq	r22,r23,200f3ac <__divdf3+0x80c>
 200f094:	b009883a 	mov	r4,r22
 200f098:	a80b883a 	mov	r5,r21
 200f09c:	200e2cc0 	call	200e2cc <__udivsi3>
 200f0a0:	1009883a 	mov	r4,r2
 200f0a4:	980b883a 	mov	r5,r19
 200f0a8:	d8800315 	stw	r2,12(sp)
 200f0ac:	200e2dc0 	call	200e2dc <__mulsi3>
 200f0b0:	a80b883a 	mov	r5,r21
 200f0b4:	b009883a 	mov	r4,r22
 200f0b8:	d8800415 	stw	r2,16(sp)
 200f0bc:	200e2d40 	call	200e2d4 <__umodsi3>
 200f0c0:	1004943a 	slli	r2,r2,16
 200f0c4:	800ed43a 	srli	r7,r16,16
 200f0c8:	da400417 	ldw	r9,16(sp)
 200f0cc:	da000317 	ldw	r8,12(sp)
 200f0d0:	11cab03a 	or	r5,r2,r7
 200f0d4:	2a40062e 	bgeu	r5,r9,200f0f0 <__divdf3+0x550>
 200f0d8:	2dcb883a 	add	r5,r5,r23
 200f0dc:	40bfffc4 	addi	r2,r8,-1
 200f0e0:	2dc0b436 	bltu	r5,r23,200f3b4 <__divdf3+0x814>
 200f0e4:	2a40b32e 	bgeu	r5,r9,200f3b4 <__divdf3+0x814>
 200f0e8:	423fff84 	addi	r8,r8,-2
 200f0ec:	2dcb883a 	add	r5,r5,r23
 200f0f0:	2a6dc83a 	sub	r22,r5,r9
 200f0f4:	b009883a 	mov	r4,r22
 200f0f8:	a80b883a 	mov	r5,r21
 200f0fc:	da000315 	stw	r8,12(sp)
 200f100:	200e2cc0 	call	200e2cc <__udivsi3>
 200f104:	980b883a 	mov	r5,r19
 200f108:	1009883a 	mov	r4,r2
 200f10c:	d8800415 	stw	r2,16(sp)
 200f110:	200e2dc0 	call	200e2dc <__mulsi3>
 200f114:	b009883a 	mov	r4,r22
 200f118:	a80b883a 	mov	r5,r21
 200f11c:	1027883a 	mov	r19,r2
 200f120:	200e2d40 	call	200e2d4 <__umodsi3>
 200f124:	1004943a 	slli	r2,r2,16
 200f128:	843fffcc 	andi	r16,r16,65535
 200f12c:	da000317 	ldw	r8,12(sp)
 200f130:	140eb03a 	or	r7,r2,r16
 200f134:	da400417 	ldw	r9,16(sp)
 200f138:	3cc0062e 	bgeu	r7,r19,200f154 <__divdf3+0x5b4>
 200f13c:	3dcf883a 	add	r7,r7,r23
 200f140:	48bfffc4 	addi	r2,r9,-1
 200f144:	3dc09d36 	bltu	r7,r23,200f3bc <__divdf3+0x81c>
 200f148:	3cc09c2e 	bgeu	r7,r19,200f3bc <__divdf3+0x81c>
 200f14c:	4a7fff84 	addi	r9,r9,-2
 200f150:	3dcf883a 	add	r7,r7,r23
 200f154:	4010943a 	slli	r8,r8,16
 200f158:	3cebc83a 	sub	r21,r7,r19
 200f15c:	e00b883a 	mov	r5,fp
 200f160:	4a26b03a 	or	r19,r9,r8
 200f164:	99ffffcc 	andi	r7,r19,65535
 200f168:	9820d43a 	srli	r16,r19,16
 200f16c:	3809883a 	mov	r4,r7
 200f170:	d9c00515 	stw	r7,20(sp)
 200f174:	200e2dc0 	call	200e2dc <__mulsi3>
 200f178:	8009883a 	mov	r4,r16
 200f17c:	e00b883a 	mov	r5,fp
 200f180:	102d883a 	mov	r22,r2
 200f184:	200e2dc0 	call	200e2dc <__mulsi3>
 200f188:	d9400017 	ldw	r5,0(sp)
 200f18c:	8009883a 	mov	r4,r16
 200f190:	1039883a 	mov	fp,r2
 200f194:	200e2dc0 	call	200e2dc <__mulsi3>
 200f198:	d9c00517 	ldw	r7,20(sp)
 200f19c:	d9400017 	ldw	r5,0(sp)
 200f1a0:	1021883a 	mov	r16,r2
 200f1a4:	3809883a 	mov	r4,r7
 200f1a8:	200e2dc0 	call	200e2dc <__mulsi3>
 200f1ac:	b008d43a 	srli	r4,r22,16
 200f1b0:	e085883a 	add	r2,fp,r2
 200f1b4:	1109883a 	add	r4,r2,r4
 200f1b8:	2700022e 	bgeu	r4,fp,200f1c4 <__divdf3+0x624>
 200f1bc:	00800074 	movhi	r2,1
 200f1c0:	80a1883a 	add	r16,r16,r2
 200f1c4:	200ad43a 	srli	r5,r4,16
 200f1c8:	2008943a 	slli	r4,r4,16
 200f1cc:	b5bfffcc 	andi	r22,r22,65535
 200f1d0:	8145883a 	add	r2,r16,r5
 200f1d4:	2589883a 	add	r4,r4,r22
 200f1d8:	a8802c36 	bltu	r21,r2,200f28c <__divdf3+0x6ec>
 200f1dc:	a880a426 	beq	r21,r2,200f470 <__divdf3+0x8d0>
 200f1e0:	9cc00054 	ori	r19,r19,1
 200f1e4:	9200ffc4 	addi	r8,r18,1023
 200f1e8:	023f270e 	bge	zero,r8,200ee88 <__divdf3+0x2e8>
 200f1ec:	988001cc 	andi	r2,r19,7
 200f1f0:	10000726 	beq	r2,zero,200f210 <__divdf3+0x670>
 200f1f4:	990003cc 	andi	r4,r19,15
 200f1f8:	00800104 	movi	r2,4
 200f1fc:	20800426 	beq	r4,r2,200f210 <__divdf3+0x670>
 200f200:	9885883a 	add	r2,r19,r2
 200f204:	14e7803a 	cmpltu	r19,r2,r19
 200f208:	8ce3883a 	add	r17,r17,r19
 200f20c:	1027883a 	mov	r19,r2
 200f210:	8880402c 	andhi	r2,r17,256
 200f214:	10000426 	beq	r2,zero,200f228 <__divdf3+0x688>
 200f218:	00bfc034 	movhi	r2,65280
 200f21c:	10bfffc4 	addi	r2,r2,-1
 200f220:	92010004 	addi	r8,r18,1024
 200f224:	88a2703a 	and	r17,r17,r2
 200f228:	0081ff84 	movi	r2,2046
 200f22c:	123eb616 	blt	r2,r8,200ed08 <__divdf3+0x168>
 200f230:	9826d0fa 	srli	r19,r19,3
 200f234:	8804977a 	slli	r2,r17,29
 200f238:	8820927a 	slli	r16,r17,9
 200f23c:	4201ffcc 	andi	r8,r8,2047
 200f240:	14e6b03a 	or	r19,r2,r19
 200f244:	800ad33a 	srli	r5,r16,12
 200f248:	a180004c 	andi	r6,r20,1
 200f24c:	003eb206 	br	200ed18 <__divdf3+0x178>
 200f250:	008000c4 	movi	r2,3
 200f254:	4080ac26 	beq	r8,r2,200f508 <__divdf3+0x968>
 200f258:	00800044 	movi	r2,1
 200f25c:	4080591e 	bne	r8,r2,200f3c4 <__divdf3+0x824>
 200f260:	e00d883a 	mov	r6,fp
 200f264:	0011883a 	mov	r8,zero
 200f268:	000b883a 	mov	r5,zero
 200f26c:	0027883a 	mov	r19,zero
 200f270:	003ea906 	br	200ed18 <__divdf3+0x178>
 200f274:	00800434 	movhi	r2,16
 200f278:	89400234 	orhi	r5,r17,8
 200f27c:	10bfffc4 	addi	r2,r2,-1
 200f280:	b00d883a 	mov	r6,r22
 200f284:	288a703a 	and	r5,r5,r2
 200f288:	003efd06 	br	200ee80 <__divdf3+0x2e0>
 200f28c:	adcf883a 	add	r7,r21,r23
 200f290:	997fffc4 	addi	r5,r19,-1
 200f294:	3dc0412e 	bgeu	r7,r23,200f39c <__divdf3+0x7fc>
 200f298:	2827883a 	mov	r19,r5
 200f29c:	38bfd01e 	bne	r7,r2,200f1e0 <__divdf3+0x640>
 200f2a0:	d8c00117 	ldw	r3,4(sp)
 200f2a4:	193fce1e 	bne	r3,r4,200f1e0 <__divdf3+0x640>
 200f2a8:	003fce06 	br	200f1e4 <__divdf3+0x644>
 200f2ac:	d9800215 	stw	r6,8(sp)
 200f2b0:	d9c00515 	stw	r7,20(sp)
 200f2b4:	2010a9c0 	call	2010a9c <__clzsi2>
 200f2b8:	10c00804 	addi	r3,r2,32
 200f2bc:	010009c4 	movi	r4,39
 200f2c0:	d9800217 	ldw	r6,8(sp)
 200f2c4:	d9c00517 	ldw	r7,20(sp)
 200f2c8:	20feb20e 	bge	r4,r3,200ed94 <__divdf3+0x1f4>
 200f2cc:	117ffe04 	addi	r5,r2,-8
 200f2d0:	a162983a 	sll	r17,r20,r5
 200f2d4:	0027883a 	mov	r19,zero
 200f2d8:	003eb506 	br	200edb0 <__divdf3+0x210>
 200f2dc:	3009883a 	mov	r4,r6
 200f2e0:	d9800215 	stw	r6,8(sp)
 200f2e4:	da000315 	stw	r8,12(sp)
 200f2e8:	da400415 	stw	r9,16(sp)
 200f2ec:	2010a9c0 	call	2010a9c <__clzsi2>
 200f2f0:	10c00804 	addi	r3,r2,32
 200f2f4:	010009c4 	movi	r4,39
 200f2f8:	d9800217 	ldw	r6,8(sp)
 200f2fc:	da000317 	ldw	r8,12(sp)
 200f300:	da400417 	ldw	r9,16(sp)
 200f304:	20fec10e 	bge	r4,r3,200ee0c <__divdf3+0x26c>
 200f308:	10bffe04 	addi	r2,r2,-8
 200f30c:	a8a0983a 	sll	r16,r21,r2
 200f310:	002b883a 	mov	r21,zero
 200f314:	003ec406 	br	200ee28 <__divdf3+0x288>
 200f318:	d8c00117 	ldw	r3,4(sp)
 200f31c:	b0ed883a 	add	r22,r22,r3
 200f320:	b0c5803a 	cmpltu	r2,r22,r3
 200f324:	15c5883a 	add	r2,r2,r23
 200f328:	11cf883a 	add	r7,r2,r7
 200f32c:	88bfffc4 	addi	r2,r17,-1
 200f330:	b9c00d2e 	bgeu	r23,r7,200f368 <__divdf3+0x7c8>
 200f334:	39003f36 	bltu	r7,r4,200f434 <__divdf3+0x894>
 200f338:	21c06a26 	beq	r4,r7,200f4e4 <__divdf3+0x944>
 200f33c:	3909c83a 	sub	r4,r7,r4
 200f340:	1023883a 	mov	r17,r2
 200f344:	003f4f06 	br	200f084 <__divdf3+0x4e4>
 200f348:	9d7ee536 	bltu	r19,r21,200eee0 <__divdf3+0x340>
 200f34c:	982ed07a 	srli	r23,r19,1
 200f350:	880497fa 	slli	r2,r17,31
 200f354:	8810d07a 	srli	r8,r17,1
 200f358:	982c97fa 	slli	r22,r19,31
 200f35c:	b884b03a 	or	r2,r23,r2
 200f360:	d8800015 	stw	r2,0(sp)
 200f364:	003ee206 	br	200eef0 <__divdf3+0x350>
 200f368:	3dfff41e 	bne	r7,r23,200f33c <__divdf3+0x79c>
 200f36c:	d8c00117 	ldw	r3,4(sp)
 200f370:	b0fff02e 	bgeu	r22,r3,200f334 <__divdf3+0x794>
 200f374:	b909c83a 	sub	r4,r23,r4
 200f378:	1023883a 	mov	r17,r2
 200f37c:	003f4106 	br	200f084 <__divdf3+0x4e4>
 200f380:	1021883a 	mov	r16,r2
 200f384:	003f1106 	br	200efcc <__divdf3+0x42c>
 200f388:	1023883a 	mov	r17,r2
 200f38c:	003ef706 	br	200ef6c <__divdf3+0x3cc>
 200f390:	b23fe136 	bltu	r22,r8,200f318 <__divdf3+0x778>
 200f394:	0009883a 	mov	r4,zero
 200f398:	003f3a06 	br	200f084 <__divdf3+0x4e4>
 200f39c:	38802c36 	bltu	r7,r2,200f450 <__divdf3+0x8b0>
 200f3a0:	11c05326 	beq	r2,r7,200f4f0 <__divdf3+0x950>
 200f3a4:	2827883a 	mov	r19,r5
 200f3a8:	003f8d06 	br	200f1e0 <__divdf3+0x640>
 200f3ac:	04ffffc4 	movi	r19,-1
 200f3b0:	003f8c06 	br	200f1e4 <__divdf3+0x644>
 200f3b4:	1011883a 	mov	r8,r2
 200f3b8:	003f4d06 	br	200f0f0 <__divdf3+0x550>
 200f3bc:	1013883a 	mov	r9,r2
 200f3c0:	003f6406 	br	200f154 <__divdf3+0x5b4>
 200f3c4:	e029883a 	mov	r20,fp
 200f3c8:	003f8606 	br	200f1e4 <__divdf3+0x644>
 200f3cc:	008007c4 	movi	r2,31
 200f3d0:	14002a16 	blt	r2,r16,200f47c <__divdf3+0x8dc>
 200f3d4:	91410784 	addi	r5,r18,1054
 200f3d8:	9c0cd83a 	srl	r6,r19,r16
 200f3dc:	8948983a 	sll	r4,r17,r5
 200f3e0:	9944983a 	sll	r2,r19,r5
 200f3e4:	8c20d83a 	srl	r16,r17,r16
 200f3e8:	3108b03a 	or	r4,r6,r4
 200f3ec:	1004c03a 	cmpne	r2,r2,zero
 200f3f0:	2084b03a 	or	r2,r4,r2
 200f3f4:	110001cc 	andi	r4,r2,7
 200f3f8:	20000726 	beq	r4,zero,200f418 <__divdf3+0x878>
 200f3fc:	114003cc 	andi	r5,r2,15
 200f400:	01000104 	movi	r4,4
 200f404:	29000426 	beq	r5,r4,200f418 <__divdf3+0x878>
 200f408:	11000104 	addi	r4,r2,4
 200f40c:	2085803a 	cmpltu	r2,r4,r2
 200f410:	80a1883a 	add	r16,r16,r2
 200f414:	2005883a 	mov	r2,r4
 200f418:	8100202c 	andhi	r4,r16,128
 200f41c:	20002d26 	beq	r4,zero,200f4d4 <__divdf3+0x934>
 200f420:	a180004c 	andi	r6,r20,1
 200f424:	02000044 	movi	r8,1
 200f428:	000b883a 	mov	r5,zero
 200f42c:	0027883a 	mov	r19,zero
 200f430:	003e3906 	br	200ed18 <__divdf3+0x178>
 200f434:	d8c00117 	ldw	r3,4(sp)
 200f438:	8c7fff84 	addi	r17,r17,-2
 200f43c:	b0ed883a 	add	r22,r22,r3
 200f440:	b0c5803a 	cmpltu	r2,r22,r3
 200f444:	15c5883a 	add	r2,r2,r23
 200f448:	11cf883a 	add	r7,r2,r7
 200f44c:	003f0c06 	br	200f080 <__divdf3+0x4e0>
 200f450:	d8c00117 	ldw	r3,4(sp)
 200f454:	997fff84 	addi	r5,r19,-2
 200f458:	18d1883a 	add	r8,r3,r3
 200f45c:	40c7803a 	cmpltu	r3,r8,r3
 200f460:	1dcd883a 	add	r6,r3,r23
 200f464:	398f883a 	add	r7,r7,r6
 200f468:	da000115 	stw	r8,4(sp)
 200f46c:	003f8a06 	br	200f298 <__divdf3+0x6f8>
 200f470:	203f861e 	bne	r4,zero,200f28c <__divdf3+0x6ec>
 200f474:	d8000115 	stw	zero,4(sp)
 200f478:	003f8906 	br	200f2a0 <__divdf3+0x700>
 200f47c:	00bef884 	movi	r2,-1054
 200f480:	1485c83a 	sub	r2,r2,r18
 200f484:	01000804 	movi	r4,32
 200f488:	8884d83a 	srl	r2,r17,r2
 200f48c:	81001c26 	beq	r16,r4,200f500 <__divdf3+0x960>
 200f490:	91010f84 	addi	r4,r18,1086
 200f494:	8908983a 	sll	r4,r17,r4
 200f498:	24c8b03a 	or	r4,r4,r19
 200f49c:	2008c03a 	cmpne	r4,r4,zero
 200f4a0:	2084b03a 	or	r2,r4,r2
 200f4a4:	140001cc 	andi	r16,r2,7
 200f4a8:	8000061e 	bne	r16,zero,200f4c4 <__divdf3+0x924>
 200f4ac:	000b883a 	mov	r5,zero
 200f4b0:	1004d0fa 	srli	r2,r2,3
 200f4b4:	a180004c 	andi	r6,r20,1
 200f4b8:	0011883a 	mov	r8,zero
 200f4bc:	1426b03a 	or	r19,r2,r16
 200f4c0:	003e1506 	br	200ed18 <__divdf3+0x178>
 200f4c4:	114003cc 	andi	r5,r2,15
 200f4c8:	01000104 	movi	r4,4
 200f4cc:	0021883a 	mov	r16,zero
 200f4d0:	293fcd1e 	bne	r5,r4,200f408 <__divdf3+0x868>
 200f4d4:	800a927a 	slli	r5,r16,9
 200f4d8:	8020977a 	slli	r16,r16,29
 200f4dc:	280ad33a 	srli	r5,r5,12
 200f4e0:	003ff306 	br	200f4b0 <__divdf3+0x910>
 200f4e4:	b23fd336 	bltu	r22,r8,200f434 <__divdf3+0x894>
 200f4e8:	1023883a 	mov	r17,r2
 200f4ec:	003fa906 	br	200f394 <__divdf3+0x7f4>
 200f4f0:	d8c00117 	ldw	r3,4(sp)
 200f4f4:	193fd636 	bltu	r3,r4,200f450 <__divdf3+0x8b0>
 200f4f8:	2827883a 	mov	r19,r5
 200f4fc:	003f6806 	br	200f2a0 <__divdf3+0x700>
 200f500:	0009883a 	mov	r4,zero
 200f504:	003fe406 	br	200f498 <__divdf3+0x8f8>
 200f508:	00800434 	movhi	r2,16
 200f50c:	89400234 	orhi	r5,r17,8
 200f510:	10bfffc4 	addi	r2,r2,-1
 200f514:	e00d883a 	mov	r6,fp
 200f518:	288a703a 	and	r5,r5,r2
 200f51c:	003e5806 	br	200ee80 <__divdf3+0x2e0>

0200f520 <__eqdf2>:
 200f520:	2804d53a 	srli	r2,r5,20
 200f524:	3806d53a 	srli	r3,r7,20
 200f528:	02000434 	movhi	r8,16
 200f52c:	423fffc4 	addi	r8,r8,-1
 200f530:	1081ffcc 	andi	r2,r2,2047
 200f534:	0241ffc4 	movi	r9,2047
 200f538:	2a14703a 	and	r10,r5,r8
 200f53c:	18c1ffcc 	andi	r3,r3,2047
 200f540:	3a10703a 	and	r8,r7,r8
 200f544:	280ad7fa 	srli	r5,r5,31
 200f548:	380ed7fa 	srli	r7,r7,31
 200f54c:	12400f26 	beq	r2,r9,200f58c <__eqdf2+0x6c>
 200f550:	0241ffc4 	movi	r9,2047
 200f554:	1a400326 	beq	r3,r9,200f564 <__eqdf2+0x44>
 200f558:	10c00526 	beq	r2,r3,200f570 <__eqdf2+0x50>
 200f55c:	00800044 	movi	r2,1
 200f560:	f800283a 	ret
 200f564:	4192b03a 	or	r9,r8,r6
 200f568:	483ffc1e 	bne	r9,zero,200f55c <__eqdf2+0x3c>
 200f56c:	10fffb1e 	bne	r2,r3,200f55c <__eqdf2+0x3c>
 200f570:	523ffa1e 	bne	r10,r8,200f55c <__eqdf2+0x3c>
 200f574:	21bff91e 	bne	r4,r6,200f55c <__eqdf2+0x3c>
 200f578:	29c00826 	beq	r5,r7,200f59c <__eqdf2+0x7c>
 200f57c:	103ff71e 	bne	r2,zero,200f55c <__eqdf2+0x3c>
 200f580:	5104b03a 	or	r2,r10,r4
 200f584:	1004c03a 	cmpne	r2,r2,zero
 200f588:	f800283a 	ret
 200f58c:	5112b03a 	or	r9,r10,r4
 200f590:	483fef26 	beq	r9,zero,200f550 <__eqdf2+0x30>
 200f594:	00800044 	movi	r2,1
 200f598:	f800283a 	ret
 200f59c:	0005883a 	mov	r2,zero
 200f5a0:	f800283a 	ret

0200f5a4 <__gedf2>:
 200f5a4:	2804d53a 	srli	r2,r5,20
 200f5a8:	3806d53a 	srli	r3,r7,20
 200f5ac:	02000434 	movhi	r8,16
 200f5b0:	423fffc4 	addi	r8,r8,-1
 200f5b4:	0241ffc4 	movi	r9,2047
 200f5b8:	1081ffcc 	andi	r2,r2,2047
 200f5bc:	2a14703a 	and	r10,r5,r8
 200f5c0:	1a46703a 	and	r3,r3,r9
 200f5c4:	3a10703a 	and	r8,r7,r8
 200f5c8:	280ad7fa 	srli	r5,r5,31
 200f5cc:	380ed7fa 	srli	r7,r7,31
 200f5d0:	12400b26 	beq	r2,r9,200f600 <__gedf2+0x5c>
 200f5d4:	1a401626 	beq	r3,r9,200f630 <__gedf2+0x8c>
 200f5d8:	10000c1e 	bne	r2,zero,200f60c <__gedf2+0x68>
 200f5dc:	5112b03a 	or	r9,r10,r4
 200f5e0:	4813003a 	cmpeq	r9,r9,zero
 200f5e4:	4817883a 	mov	r11,r9
 200f5e8:	18000c1e 	bne	r3,zero,200f61c <__gedf2+0x78>
 200f5ec:	4198b03a 	or	r12,r8,r6
 200f5f0:	60000a1e 	bne	r12,zero,200f61c <__gedf2+0x78>
 200f5f4:	48001326 	beq	r9,zero,200f644 <__gedf2+0xa0>
 200f5f8:	0005883a 	mov	r2,zero
 200f5fc:	f800283a 	ret
 200f600:	5112b03a 	or	r9,r10,r4
 200f604:	4800191e 	bne	r9,zero,200f66c <__gedf2+0xc8>
 200f608:	18800926 	beq	r3,r2,200f630 <__gedf2+0x8c>
 200f60c:	18000b1e 	bne	r3,zero,200f63c <__gedf2+0x98>
 200f610:	4192b03a 	or	r9,r8,r6
 200f614:	0017883a 	mov	r11,zero
 200f618:	48000a26 	beq	r9,zero,200f644 <__gedf2+0xa0>
 200f61c:	39c03fcc 	andi	r7,r7,255
 200f620:	58000726 	beq	r11,zero,200f640 <__gedf2+0x9c>
 200f624:	3800081e 	bne	r7,zero,200f648 <__gedf2+0xa4>
 200f628:	00bfffc4 	movi	r2,-1
 200f62c:	f800283a 	ret
 200f630:	4192b03a 	or	r9,r8,r6
 200f634:	48000d1e 	bne	r9,zero,200f66c <__gedf2+0xc8>
 200f638:	103fe826 	beq	r2,zero,200f5dc <__gedf2+0x38>
 200f63c:	39c03fcc 	andi	r7,r7,255
 200f640:	29c00326 	beq	r5,r7,200f650 <__gedf2+0xac>
 200f644:	283ff81e 	bne	r5,zero,200f628 <__gedf2+0x84>
 200f648:	00800044 	movi	r2,1
 200f64c:	f800283a 	ret
 200f650:	18bffc16 	blt	r3,r2,200f644 <__gedf2+0xa0>
 200f654:	10c00316 	blt	r2,r3,200f664 <__gedf2+0xc0>
 200f658:	42bffa36 	bltu	r8,r10,200f644 <__gedf2+0xa0>
 200f65c:	52000526 	beq	r10,r8,200f674 <__gedf2+0xd0>
 200f660:	523fe52e 	bgeu	r10,r8,200f5f8 <__gedf2+0x54>
 200f664:	283ff026 	beq	r5,zero,200f628 <__gedf2+0x84>
 200f668:	003ff706 	br	200f648 <__gedf2+0xa4>
 200f66c:	00bfff84 	movi	r2,-2
 200f670:	f800283a 	ret
 200f674:	313ff336 	bltu	r6,r4,200f644 <__gedf2+0xa0>
 200f678:	21bfdf2e 	bgeu	r4,r6,200f5f8 <__gedf2+0x54>
 200f67c:	283fea26 	beq	r5,zero,200f628 <__gedf2+0x84>
 200f680:	003ff106 	br	200f648 <__gedf2+0xa4>

0200f684 <__ledf2>:
 200f684:	2804d53a 	srli	r2,r5,20
 200f688:	3810d53a 	srli	r8,r7,20
 200f68c:	00c00434 	movhi	r3,16
 200f690:	18ffffc4 	addi	r3,r3,-1
 200f694:	0241ffc4 	movi	r9,2047
 200f698:	1081ffcc 	andi	r2,r2,2047
 200f69c:	28d4703a 	and	r10,r5,r3
 200f6a0:	4250703a 	and	r8,r8,r9
 200f6a4:	38c6703a 	and	r3,r7,r3
 200f6a8:	280ad7fa 	srli	r5,r5,31
 200f6ac:	380ed7fa 	srli	r7,r7,31
 200f6b0:	12400b26 	beq	r2,r9,200f6e0 <__ledf2+0x5c>
 200f6b4:	42401926 	beq	r8,r9,200f71c <__ledf2+0x98>
 200f6b8:	10000c1e 	bne	r2,zero,200f6ec <__ledf2+0x68>
 200f6bc:	5112b03a 	or	r9,r10,r4
 200f6c0:	4813003a 	cmpeq	r9,r9,zero
 200f6c4:	4817883a 	mov	r11,r9
 200f6c8:	40000f26 	beq	r8,zero,200f708 <__ledf2+0x84>
 200f6cc:	39c03fcc 	andi	r7,r7,255
 200f6d0:	58001826 	beq	r11,zero,200f734 <__ledf2+0xb0>
 200f6d4:	38000a1e 	bne	r7,zero,200f700 <__ledf2+0x7c>
 200f6d8:	00bfffc4 	movi	r2,-1
 200f6dc:	f800283a 	ret
 200f6e0:	5112b03a 	or	r9,r10,r4
 200f6e4:	48000f1e 	bne	r9,zero,200f724 <__ledf2+0xa0>
 200f6e8:	40800c26 	beq	r8,r2,200f71c <__ledf2+0x98>
 200f6ec:	4000101e 	bne	r8,zero,200f730 <__ledf2+0xac>
 200f6f0:	1992b03a 	or	r9,r3,r6
 200f6f4:	0017883a 	mov	r11,zero
 200f6f8:	483ff41e 	bne	r9,zero,200f6cc <__ledf2+0x48>
 200f6fc:	283ff61e 	bne	r5,zero,200f6d8 <__ledf2+0x54>
 200f700:	00800044 	movi	r2,1
 200f704:	f800283a 	ret
 200f708:	1998b03a 	or	r12,r3,r6
 200f70c:	603fef1e 	bne	r12,zero,200f6cc <__ledf2+0x48>
 200f710:	483ffa26 	beq	r9,zero,200f6fc <__ledf2+0x78>
 200f714:	0005883a 	mov	r2,zero
 200f718:	f800283a 	ret
 200f71c:	1992b03a 	or	r9,r3,r6
 200f720:	48000226 	beq	r9,zero,200f72c <__ledf2+0xa8>
 200f724:	00800084 	movi	r2,2
 200f728:	f800283a 	ret
 200f72c:	103fe326 	beq	r2,zero,200f6bc <__ledf2+0x38>
 200f730:	39c03fcc 	andi	r7,r7,255
 200f734:	29fff11e 	bne	r5,r7,200f6fc <__ledf2+0x78>
 200f738:	40bff016 	blt	r8,r2,200f6fc <__ledf2+0x78>
 200f73c:	12000316 	blt	r2,r8,200f74c <__ledf2+0xc8>
 200f740:	1abfee36 	bltu	r3,r10,200f6fc <__ledf2+0x78>
 200f744:	50c00326 	beq	r10,r3,200f754 <__ledf2+0xd0>
 200f748:	50fff22e 	bgeu	r10,r3,200f714 <__ledf2+0x90>
 200f74c:	283fe226 	beq	r5,zero,200f6d8 <__ledf2+0x54>
 200f750:	003feb06 	br	200f700 <__ledf2+0x7c>
 200f754:	313fe936 	bltu	r6,r4,200f6fc <__ledf2+0x78>
 200f758:	21bfee2e 	bgeu	r4,r6,200f714 <__ledf2+0x90>
 200f75c:	283fde26 	beq	r5,zero,200f6d8 <__ledf2+0x54>
 200f760:	003fe706 	br	200f700 <__ledf2+0x7c>

0200f764 <__muldf3>:
 200f764:	deffee04 	addi	sp,sp,-72
 200f768:	dd000c15 	stw	r20,48(sp)
 200f76c:	2828d53a 	srli	r20,r5,20
 200f770:	dd400d15 	stw	r21,52(sp)
 200f774:	282ad7fa 	srli	r21,r5,31
 200f778:	dc000815 	stw	r16,32(sp)
 200f77c:	04000434 	movhi	r16,16
 200f780:	ddc00f15 	stw	r23,60(sp)
 200f784:	dcc00b15 	stw	r19,44(sp)
 200f788:	dc800a15 	stw	r18,40(sp)
 200f78c:	843fffc4 	addi	r16,r16,-1
 200f790:	dfc01115 	stw	ra,68(sp)
 200f794:	df001015 	stw	fp,64(sp)
 200f798:	dd800e15 	stw	r22,56(sp)
 200f79c:	dc400915 	stw	r17,36(sp)
 200f7a0:	a501ffcc 	andi	r20,r20,2047
 200f7a4:	2025883a 	mov	r18,r4
 200f7a8:	202f883a 	mov	r23,r4
 200f7ac:	2c20703a 	and	r16,r5,r16
 200f7b0:	a827883a 	mov	r19,r21
 200f7b4:	aa403fcc 	andi	r9,r21,255
 200f7b8:	a0005926 	beq	r20,zero,200f920 <__muldf3+0x1bc>
 200f7bc:	0081ffc4 	movi	r2,2047
 200f7c0:	a0803426 	beq	r20,r2,200f894 <__muldf3+0x130>
 200f7c4:	84000434 	orhi	r16,r16,16
 200f7c8:	2004d77a 	srli	r2,r4,29
 200f7cc:	802090fa 	slli	r16,r16,3
 200f7d0:	202e90fa 	slli	r23,r4,3
 200f7d4:	a53f0044 	addi	r20,r20,-1023
 200f7d8:	80a0b03a 	or	r16,r16,r2
 200f7dc:	000b883a 	mov	r5,zero
 200f7e0:	0039883a 	mov	fp,zero
 200f7e4:	3806d53a 	srli	r3,r7,20
 200f7e8:	382cd7fa 	srli	r22,r7,31
 200f7ec:	00800434 	movhi	r2,16
 200f7f0:	10bfffc4 	addi	r2,r2,-1
 200f7f4:	18c1ffcc 	andi	r3,r3,2047
 200f7f8:	3025883a 	mov	r18,r6
 200f7fc:	38a2703a 	and	r17,r7,r2
 200f800:	b2803fcc 	andi	r10,r22,255
 200f804:	18006426 	beq	r3,zero,200f998 <__muldf3+0x234>
 200f808:	0081ffc4 	movi	r2,2047
 200f80c:	18805c26 	beq	r3,r2,200f980 <__muldf3+0x21c>
 200f810:	8c400434 	orhi	r17,r17,16
 200f814:	3004d77a 	srli	r2,r6,29
 200f818:	882290fa 	slli	r17,r17,3
 200f81c:	302490fa 	slli	r18,r6,3
 200f820:	18ff0044 	addi	r3,r3,-1023
 200f824:	88a2b03a 	or	r17,r17,r2
 200f828:	000f883a 	mov	r7,zero
 200f82c:	394ab03a 	or	r5,r7,r5
 200f830:	280a90ba 	slli	r5,r5,2
 200f834:	00808074 	movhi	r2,513
 200f838:	10be1504 	addi	r2,r2,-1964
 200f83c:	288b883a 	add	r5,r5,r2
 200f840:	28800017 	ldw	r2,0(r5)
 200f844:	a0c7883a 	add	r3,r20,r3
 200f848:	b54cf03a 	xor	r6,r22,r21
 200f84c:	1a000044 	addi	r8,r3,1
 200f850:	1000683a 	jmp	r2
 200f854:	0200fa98 	cmpnei	r8,zero,1002
 200f858:	0200fa84 	movi	r8,1002
 200f85c:	0200fa84 	movi	r8,1002
 200f860:	0200fa70 	cmpltui	r8,zero,1001
 200f864:	0200f8b0 	cmpltui	r8,zero,994
 200f868:	0200f8b0 	cmpltui	r8,zero,994
 200f86c:	0200fa58 	cmpnei	r8,zero,1001
 200f870:	0200fa70 	cmpltui	r8,zero,1001
 200f874:	0200f8b0 	cmpltui	r8,zero,994
 200f878:	0200fa58 	cmpnei	r8,zero,1001
 200f87c:	0200f8b0 	cmpltui	r8,zero,994
 200f880:	0200fa70 	cmpltui	r8,zero,1001
 200f884:	0200f8b4 	movhi	r8,994
 200f888:	0200f8b4 	movhi	r8,994
 200f88c:	0200f8b4 	movhi	r8,994
 200f890:	0200fdd4 	movui	r8,1015
 200f894:	8104b03a 	or	r2,r16,r4
 200f898:	10006c1e 	bne	r2,zero,200fa4c <__muldf3+0x2e8>
 200f89c:	01400204 	movi	r5,8
 200f8a0:	0021883a 	mov	r16,zero
 200f8a4:	002f883a 	mov	r23,zero
 200f8a8:	07000084 	movi	fp,2
 200f8ac:	003fcd06 	br	200f7e4 <__muldf3+0x80>
 200f8b0:	3013883a 	mov	r9,r6
 200f8b4:	00800084 	movi	r2,2
 200f8b8:	e080501e 	bne	fp,r2,200f9fc <__muldf3+0x298>
 200f8bc:	4cc0004c 	andi	r19,r9,1
 200f8c0:	0101ffc4 	movi	r4,2047
 200f8c4:	0021883a 	mov	r16,zero
 200f8c8:	002f883a 	mov	r23,zero
 200f8cc:	2008953a 	slli	r4,r4,20
 200f8d0:	98c03fcc 	andi	r3,r19,255
 200f8d4:	04400434 	movhi	r17,16
 200f8d8:	8c7fffc4 	addi	r17,r17,-1
 200f8dc:	180697fa 	slli	r3,r3,31
 200f8e0:	8460703a 	and	r16,r16,r17
 200f8e4:	8120b03a 	or	r16,r16,r4
 200f8e8:	80c6b03a 	or	r3,r16,r3
 200f8ec:	b805883a 	mov	r2,r23
 200f8f0:	dfc01117 	ldw	ra,68(sp)
 200f8f4:	df001017 	ldw	fp,64(sp)
 200f8f8:	ddc00f17 	ldw	r23,60(sp)
 200f8fc:	dd800e17 	ldw	r22,56(sp)
 200f900:	dd400d17 	ldw	r21,52(sp)
 200f904:	dd000c17 	ldw	r20,48(sp)
 200f908:	dcc00b17 	ldw	r19,44(sp)
 200f90c:	dc800a17 	ldw	r18,40(sp)
 200f910:	dc400917 	ldw	r17,36(sp)
 200f914:	dc000817 	ldw	r16,32(sp)
 200f918:	dec01204 	addi	sp,sp,72
 200f91c:	f800283a 	ret
 200f920:	8104b03a 	or	r2,r16,r4
 200f924:	10004426 	beq	r2,zero,200fa38 <__muldf3+0x2d4>
 200f928:	80014b26 	beq	r16,zero,200fe58 <__muldf3+0x6f4>
 200f92c:	8009883a 	mov	r4,r16
 200f930:	d9800715 	stw	r6,28(sp)
 200f934:	d9c00215 	stw	r7,8(sp)
 200f938:	da400415 	stw	r9,16(sp)
 200f93c:	2010a9c0 	call	2010a9c <__clzsi2>
 200f940:	d9800717 	ldw	r6,28(sp)
 200f944:	d9c00217 	ldw	r7,8(sp)
 200f948:	da400417 	ldw	r9,16(sp)
 200f94c:	1007883a 	mov	r3,r2
 200f950:	01000a04 	movi	r4,40
 200f954:	1dfffe04 	addi	r23,r3,-8
 200f958:	20c9c83a 	sub	r4,r4,r3
 200f95c:	85e0983a 	sll	r16,r16,r23
 200f960:	9108d83a 	srl	r4,r18,r4
 200f964:	95ee983a 	sll	r23,r18,r23
 200f968:	2420b03a 	or	r16,r4,r16
 200f96c:	053f0344 	movi	r20,-1011
 200f970:	a0e9c83a 	sub	r20,r20,r3
 200f974:	000b883a 	mov	r5,zero
 200f978:	0039883a 	mov	fp,zero
 200f97c:	003f9906 	br	200f7e4 <__muldf3+0x80>
 200f980:	8984b03a 	or	r2,r17,r6
 200f984:	10002a1e 	bne	r2,zero,200fa30 <__muldf3+0x2cc>
 200f988:	0023883a 	mov	r17,zero
 200f98c:	0025883a 	mov	r18,zero
 200f990:	01c00084 	movi	r7,2
 200f994:	003fa506 	br	200f82c <__muldf3+0xc8>
 200f998:	8984b03a 	or	r2,r17,r6
 200f99c:	10002026 	beq	r2,zero,200fa20 <__muldf3+0x2bc>
 200f9a0:	88011c26 	beq	r17,zero,200fe14 <__muldf3+0x6b0>
 200f9a4:	8809883a 	mov	r4,r17
 200f9a8:	d9400215 	stw	r5,8(sp)
 200f9ac:	d9800715 	stw	r6,28(sp)
 200f9b0:	da400415 	stw	r9,16(sp)
 200f9b4:	da800315 	stw	r10,12(sp)
 200f9b8:	2010a9c0 	call	2010a9c <__clzsi2>
 200f9bc:	d9400217 	ldw	r5,8(sp)
 200f9c0:	d9800717 	ldw	r6,28(sp)
 200f9c4:	da400417 	ldw	r9,16(sp)
 200f9c8:	da800317 	ldw	r10,12(sp)
 200f9cc:	1007883a 	mov	r3,r2
 200f9d0:	01000a04 	movi	r4,40
 200f9d4:	1cbffe04 	addi	r18,r3,-8
 200f9d8:	20c9c83a 	sub	r4,r4,r3
 200f9dc:	8ca2983a 	sll	r17,r17,r18
 200f9e0:	3108d83a 	srl	r4,r6,r4
 200f9e4:	34a4983a 	sll	r18,r6,r18
 200f9e8:	2462b03a 	or	r17,r4,r17
 200f9ec:	00bf0344 	movi	r2,-1011
 200f9f0:	10c7c83a 	sub	r3,r2,r3
 200f9f4:	000f883a 	mov	r7,zero
 200f9f8:	003f8c06 	br	200f82c <__muldf3+0xc8>
 200f9fc:	008000c4 	movi	r2,3
 200fa00:	e0816d26 	beq	fp,r2,200ffb8 <__muldf3+0x854>
 200fa04:	00800044 	movi	r2,1
 200fa08:	e081321e 	bne	fp,r2,200fed4 <__muldf3+0x770>
 200fa0c:	48a6703a 	and	r19,r9,r2
 200fa10:	0009883a 	mov	r4,zero
 200fa14:	0021883a 	mov	r16,zero
 200fa18:	002f883a 	mov	r23,zero
 200fa1c:	003fab06 	br	200f8cc <__muldf3+0x168>
 200fa20:	0023883a 	mov	r17,zero
 200fa24:	0025883a 	mov	r18,zero
 200fa28:	01c00044 	movi	r7,1
 200fa2c:	003f7f06 	br	200f82c <__muldf3+0xc8>
 200fa30:	01c000c4 	movi	r7,3
 200fa34:	003f7d06 	br	200f82c <__muldf3+0xc8>
 200fa38:	01400104 	movi	r5,4
 200fa3c:	0021883a 	mov	r16,zero
 200fa40:	002f883a 	mov	r23,zero
 200fa44:	07000044 	movi	fp,1
 200fa48:	003f6606 	br	200f7e4 <__muldf3+0x80>
 200fa4c:	01400304 	movi	r5,12
 200fa50:	070000c4 	movi	fp,3
 200fa54:	003f6306 	br	200f7e4 <__muldf3+0x80>
 200fa58:	04000434 	movhi	r16,16
 200fa5c:	0027883a 	mov	r19,zero
 200fa60:	843fffc4 	addi	r16,r16,-1
 200fa64:	05ffffc4 	movi	r23,-1
 200fa68:	0101ffc4 	movi	r4,2047
 200fa6c:	003f9706 	br	200f8cc <__muldf3+0x168>
 200fa70:	8821883a 	mov	r16,r17
 200fa74:	902f883a 	mov	r23,r18
 200fa78:	5013883a 	mov	r9,r10
 200fa7c:	3839883a 	mov	fp,r7
 200fa80:	003f8c06 	br	200f8b4 <__muldf3+0x150>
 200fa84:	8821883a 	mov	r16,r17
 200fa88:	902f883a 	mov	r23,r18
 200fa8c:	3013883a 	mov	r9,r6
 200fa90:	3839883a 	mov	fp,r7
 200fa94:	003f8706 	br	200f8b4 <__muldf3+0x150>
 200fa98:	b82ad43a 	srli	r21,r23,16
 200fa9c:	9038d43a 	srli	fp,r18,16
 200faa0:	bdffffcc 	andi	r23,r23,65535
 200faa4:	94bfffcc 	andi	r18,r18,65535
 200faa8:	9009883a 	mov	r4,r18
 200faac:	b80b883a 	mov	r5,r23
 200fab0:	d8c00515 	stw	r3,20(sp)
 200fab4:	d9800715 	stw	r6,28(sp)
 200fab8:	da000615 	stw	r8,24(sp)
 200fabc:	200e2dc0 	call	200e2dc <__mulsi3>
 200fac0:	9009883a 	mov	r4,r18
 200fac4:	a80b883a 	mov	r5,r21
 200fac8:	1029883a 	mov	r20,r2
 200facc:	200e2dc0 	call	200e2dc <__mulsi3>
 200fad0:	e009883a 	mov	r4,fp
 200fad4:	a80b883a 	mov	r5,r21
 200fad8:	102d883a 	mov	r22,r2
 200fadc:	200e2dc0 	call	200e2dc <__mulsi3>
 200fae0:	e009883a 	mov	r4,fp
 200fae4:	b80b883a 	mov	r5,r23
 200fae8:	1027883a 	mov	r19,r2
 200faec:	200e2dc0 	call	200e2dc <__mulsi3>
 200faf0:	a008d43a 	srli	r4,r20,16
 200faf4:	b085883a 	add	r2,r22,r2
 200faf8:	d8c00517 	ldw	r3,20(sp)
 200fafc:	110f883a 	add	r7,r2,r4
 200fb00:	d9800717 	ldw	r6,28(sp)
 200fb04:	da000617 	ldw	r8,24(sp)
 200fb08:	3d80022e 	bgeu	r7,r22,200fb14 <__muldf3+0x3b0>
 200fb0c:	00800074 	movhi	r2,1
 200fb10:	98a7883a 	add	r19,r19,r2
 200fb14:	3804943a 	slli	r2,r7,16
 200fb18:	380ed43a 	srli	r7,r7,16
 200fb1c:	882cd43a 	srli	r22,r17,16
 200fb20:	a53fffcc 	andi	r20,r20,65535
 200fb24:	8c7fffcc 	andi	r17,r17,65535
 200fb28:	1529883a 	add	r20,r2,r20
 200fb2c:	8809883a 	mov	r4,r17
 200fb30:	b80b883a 	mov	r5,r23
 200fb34:	d8c00515 	stw	r3,20(sp)
 200fb38:	d9800715 	stw	r6,28(sp)
 200fb3c:	da000615 	stw	r8,24(sp)
 200fb40:	d9c00015 	stw	r7,0(sp)
 200fb44:	dd000115 	stw	r20,4(sp)
 200fb48:	200e2dc0 	call	200e2dc <__mulsi3>
 200fb4c:	a80b883a 	mov	r5,r21
 200fb50:	8809883a 	mov	r4,r17
 200fb54:	d8800415 	stw	r2,16(sp)
 200fb58:	200e2dc0 	call	200e2dc <__mulsi3>
 200fb5c:	a80b883a 	mov	r5,r21
 200fb60:	b009883a 	mov	r4,r22
 200fb64:	1029883a 	mov	r20,r2
 200fb68:	200e2dc0 	call	200e2dc <__mulsi3>
 200fb6c:	b009883a 	mov	r4,r22
 200fb70:	b80b883a 	mov	r5,r23
 200fb74:	102b883a 	mov	r21,r2
 200fb78:	200e2dc0 	call	200e2dc <__mulsi3>
 200fb7c:	da400417 	ldw	r9,16(sp)
 200fb80:	a085883a 	add	r2,r20,r2
 200fb84:	d8c00517 	ldw	r3,20(sp)
 200fb88:	4808d43a 	srli	r4,r9,16
 200fb8c:	d9800717 	ldw	r6,28(sp)
 200fb90:	da000617 	ldw	r8,24(sp)
 200fb94:	1109883a 	add	r4,r2,r4
 200fb98:	2500022e 	bgeu	r4,r20,200fba4 <__muldf3+0x440>
 200fb9c:	00800074 	movhi	r2,1
 200fba0:	a8ab883a 	add	r21,r21,r2
 200fba4:	200e943a 	slli	r7,r4,16
 200fba8:	2004d43a 	srli	r2,r4,16
 200fbac:	802ed43a 	srli	r23,r16,16
 200fbb0:	843fffcc 	andi	r16,r16,65535
 200fbb4:	4d3fffcc 	andi	r20,r9,65535
 200fbb8:	9009883a 	mov	r4,r18
 200fbbc:	800b883a 	mov	r5,r16
 200fbc0:	3d29883a 	add	r20,r7,r20
 200fbc4:	d8c00515 	stw	r3,20(sp)
 200fbc8:	d9800715 	stw	r6,28(sp)
 200fbcc:	da000615 	stw	r8,24(sp)
 200fbd0:	a8ab883a 	add	r21,r21,r2
 200fbd4:	200e2dc0 	call	200e2dc <__mulsi3>
 200fbd8:	9009883a 	mov	r4,r18
 200fbdc:	b80b883a 	mov	r5,r23
 200fbe0:	d8800315 	stw	r2,12(sp)
 200fbe4:	200e2dc0 	call	200e2dc <__mulsi3>
 200fbe8:	e009883a 	mov	r4,fp
 200fbec:	b80b883a 	mov	r5,r23
 200fbf0:	1025883a 	mov	r18,r2
 200fbf4:	200e2dc0 	call	200e2dc <__mulsi3>
 200fbf8:	e009883a 	mov	r4,fp
 200fbfc:	800b883a 	mov	r5,r16
 200fc00:	d8800215 	stw	r2,8(sp)
 200fc04:	200e2dc0 	call	200e2dc <__mulsi3>
 200fc08:	da800317 	ldw	r10,12(sp)
 200fc0c:	d9400017 	ldw	r5,0(sp)
 200fc10:	9085883a 	add	r2,r18,r2
 200fc14:	5008d43a 	srli	r4,r10,16
 200fc18:	a153883a 	add	r9,r20,r5
 200fc1c:	d8c00517 	ldw	r3,20(sp)
 200fc20:	1109883a 	add	r4,r2,r4
 200fc24:	d9800717 	ldw	r6,28(sp)
 200fc28:	da000617 	ldw	r8,24(sp)
 200fc2c:	dac00217 	ldw	r11,8(sp)
 200fc30:	2480022e 	bgeu	r4,r18,200fc3c <__muldf3+0x4d8>
 200fc34:	00800074 	movhi	r2,1
 200fc38:	5897883a 	add	r11,r11,r2
 200fc3c:	200e943a 	slli	r7,r4,16
 200fc40:	2038d43a 	srli	fp,r4,16
 200fc44:	52bfffcc 	andi	r10,r10,65535
 200fc48:	3a8f883a 	add	r7,r7,r10
 200fc4c:	8809883a 	mov	r4,r17
 200fc50:	800b883a 	mov	r5,r16
 200fc54:	d8c00515 	stw	r3,20(sp)
 200fc58:	d9800715 	stw	r6,28(sp)
 200fc5c:	d9c00215 	stw	r7,8(sp)
 200fc60:	da000615 	stw	r8,24(sp)
 200fc64:	da400415 	stw	r9,16(sp)
 200fc68:	5f39883a 	add	fp,r11,fp
 200fc6c:	200e2dc0 	call	200e2dc <__mulsi3>
 200fc70:	8809883a 	mov	r4,r17
 200fc74:	b80b883a 	mov	r5,r23
 200fc78:	1025883a 	mov	r18,r2
 200fc7c:	200e2dc0 	call	200e2dc <__mulsi3>
 200fc80:	b009883a 	mov	r4,r22
 200fc84:	b80b883a 	mov	r5,r23
 200fc88:	d8800315 	stw	r2,12(sp)
 200fc8c:	200e2dc0 	call	200e2dc <__mulsi3>
 200fc90:	b009883a 	mov	r4,r22
 200fc94:	800b883a 	mov	r5,r16
 200fc98:	1023883a 	mov	r17,r2
 200fc9c:	200e2dc0 	call	200e2dc <__mulsi3>
 200fca0:	da800317 	ldw	r10,12(sp)
 200fca4:	9008d43a 	srli	r4,r18,16
 200fca8:	d8c00517 	ldw	r3,20(sp)
 200fcac:	5085883a 	add	r2,r10,r2
 200fcb0:	1109883a 	add	r4,r2,r4
 200fcb4:	d9800717 	ldw	r6,28(sp)
 200fcb8:	d9c00217 	ldw	r7,8(sp)
 200fcbc:	da000617 	ldw	r8,24(sp)
 200fcc0:	da400417 	ldw	r9,16(sp)
 200fcc4:	2280022e 	bgeu	r4,r10,200fcd0 <__muldf3+0x56c>
 200fcc8:	00800074 	movhi	r2,1
 200fccc:	88a3883a 	add	r17,r17,r2
 200fcd0:	2004943a 	slli	r2,r4,16
 200fcd4:	94bfffcc 	andi	r18,r18,65535
 200fcd8:	4ce7883a 	add	r19,r9,r19
 200fcdc:	14a5883a 	add	r18,r2,r18
 200fce0:	9d29803a 	cmpltu	r20,r19,r20
 200fce4:	9565883a 	add	r18,r18,r21
 200fce8:	9505883a 	add	r2,r18,r20
 200fcec:	99e7883a 	add	r19,r19,r7
 200fcf0:	99cf803a 	cmpltu	r7,r19,r7
 200fcf4:	e08b883a 	add	r5,fp,r2
 200fcf8:	2008d43a 	srli	r4,r4,16
 200fcfc:	29ef883a 	add	r23,r5,r7
 200fd00:	1529803a 	cmpltu	r20,r2,r20
 200fd04:	956b803a 	cmpltu	r21,r18,r21
 200fd08:	b9cf803a 	cmpltu	r7,r23,r7
 200fd0c:	a564b03a 	or	r18,r20,r21
 200fd10:	2f39803a 	cmpltu	fp,r5,fp
 200fd14:	9125883a 	add	r18,r18,r4
 200fd18:	3f38b03a 	or	fp,r7,fp
 200fd1c:	9725883a 	add	r18,r18,fp
 200fd20:	9804927a 	slli	r2,r19,9
 200fd24:	9463883a 	add	r17,r18,r17
 200fd28:	d9000117 	ldw	r4,4(sp)
 200fd2c:	b820d5fa 	srli	r16,r23,23
 200fd30:	8822927a 	slli	r17,r17,9
 200fd34:	9826d5fa 	srli	r19,r19,23
 200fd38:	1104b03a 	or	r2,r2,r4
 200fd3c:	b82e927a 	slli	r23,r23,9
 200fd40:	1004c03a 	cmpne	r2,r2,zero
 200fd44:	8c20b03a 	or	r16,r17,r16
 200fd48:	14e6b03a 	or	r19,r2,r19
 200fd4c:	8080402c 	andhi	r2,r16,256
 200fd50:	9deeb03a 	or	r23,r19,r23
 200fd54:	10000726 	beq	r2,zero,200fd74 <__muldf3+0x610>
 200fd58:	b804d07a 	srli	r2,r23,1
 200fd5c:	800697fa 	slli	r3,r16,31
 200fd60:	bdc0004c 	andi	r23,r23,1
 200fd64:	8020d07a 	srli	r16,r16,1
 200fd68:	b8aeb03a 	or	r23,r23,r2
 200fd6c:	b8eeb03a 	or	r23,r23,r3
 200fd70:	4007883a 	mov	r3,r8
 200fd74:	1900ffc4 	addi	r4,r3,1023
 200fd78:	01004d0e 	bge	zero,r4,200feb0 <__muldf3+0x74c>
 200fd7c:	b88001cc 	andi	r2,r23,7
 200fd80:	10000726 	beq	r2,zero,200fda0 <__muldf3+0x63c>
 200fd84:	b94003cc 	andi	r5,r23,15
 200fd88:	00800104 	movi	r2,4
 200fd8c:	28800426 	beq	r5,r2,200fda0 <__muldf3+0x63c>
 200fd90:	b885883a 	add	r2,r23,r2
 200fd94:	15ef803a 	cmpltu	r23,r2,r23
 200fd98:	85e1883a 	add	r16,r16,r23
 200fd9c:	102f883a 	mov	r23,r2
 200fda0:	8080402c 	andhi	r2,r16,256
 200fda4:	10000426 	beq	r2,zero,200fdb8 <__muldf3+0x654>
 200fda8:	00bfc034 	movhi	r2,65280
 200fdac:	10bfffc4 	addi	r2,r2,-1
 200fdb0:	19010004 	addi	r4,r3,1024
 200fdb4:	80a0703a 	and	r16,r16,r2
 200fdb8:	0081ff84 	movi	r2,2046
 200fdbc:	1100340e 	bge	r2,r4,200fe90 <__muldf3+0x72c>
 200fdc0:	34c0004c 	andi	r19,r6,1
 200fdc4:	0101ffc4 	movi	r4,2047
 200fdc8:	0021883a 	mov	r16,zero
 200fdcc:	002f883a 	mov	r23,zero
 200fdd0:	003ebe06 	br	200f8cc <__muldf3+0x168>
 200fdd4:	8080022c 	andhi	r2,r16,8
 200fdd8:	10000926 	beq	r2,zero,200fe00 <__muldf3+0x69c>
 200fddc:	8880022c 	andhi	r2,r17,8
 200fde0:	1000071e 	bne	r2,zero,200fe00 <__muldf3+0x69c>
 200fde4:	00800434 	movhi	r2,16
 200fde8:	8c000234 	orhi	r16,r17,8
 200fdec:	10bfffc4 	addi	r2,r2,-1
 200fdf0:	b027883a 	mov	r19,r22
 200fdf4:	80a0703a 	and	r16,r16,r2
 200fdf8:	902f883a 	mov	r23,r18
 200fdfc:	003f1a06 	br	200fa68 <__muldf3+0x304>
 200fe00:	00800434 	movhi	r2,16
 200fe04:	84000234 	orhi	r16,r16,8
 200fe08:	10bfffc4 	addi	r2,r2,-1
 200fe0c:	80a0703a 	and	r16,r16,r2
 200fe10:	003f1506 	br	200fa68 <__muldf3+0x304>
 200fe14:	3009883a 	mov	r4,r6
 200fe18:	d9400215 	stw	r5,8(sp)
 200fe1c:	d9800715 	stw	r6,28(sp)
 200fe20:	da400415 	stw	r9,16(sp)
 200fe24:	da800315 	stw	r10,12(sp)
 200fe28:	2010a9c0 	call	2010a9c <__clzsi2>
 200fe2c:	10c00804 	addi	r3,r2,32
 200fe30:	010009c4 	movi	r4,39
 200fe34:	d9400217 	ldw	r5,8(sp)
 200fe38:	d9800717 	ldw	r6,28(sp)
 200fe3c:	da400417 	ldw	r9,16(sp)
 200fe40:	da800317 	ldw	r10,12(sp)
 200fe44:	20fee20e 	bge	r4,r3,200f9d0 <__muldf3+0x26c>
 200fe48:	147ffe04 	addi	r17,r2,-8
 200fe4c:	9462983a 	sll	r17,r18,r17
 200fe50:	0025883a 	mov	r18,zero
 200fe54:	003ee506 	br	200f9ec <__muldf3+0x288>
 200fe58:	d9800715 	stw	r6,28(sp)
 200fe5c:	d9c00215 	stw	r7,8(sp)
 200fe60:	da400415 	stw	r9,16(sp)
 200fe64:	2010a9c0 	call	2010a9c <__clzsi2>
 200fe68:	10c00804 	addi	r3,r2,32
 200fe6c:	010009c4 	movi	r4,39
 200fe70:	d9800717 	ldw	r6,28(sp)
 200fe74:	d9c00217 	ldw	r7,8(sp)
 200fe78:	da400417 	ldw	r9,16(sp)
 200fe7c:	20feb40e 	bge	r4,r3,200f950 <__muldf3+0x1ec>
 200fe80:	143ffe04 	addi	r16,r2,-8
 200fe84:	9420983a 	sll	r16,r18,r16
 200fe88:	002f883a 	mov	r23,zero
 200fe8c:	003eb706 	br	200f96c <__muldf3+0x208>
 200fe90:	8004977a 	slli	r2,r16,29
 200fe94:	b82ed0fa 	srli	r23,r23,3
 200fe98:	8020927a 	slli	r16,r16,9
 200fe9c:	2101ffcc 	andi	r4,r4,2047
 200fea0:	15eeb03a 	or	r23,r2,r23
 200fea4:	8020d33a 	srli	r16,r16,12
 200fea8:	34c0004c 	andi	r19,r6,1
 200feac:	003e8706 	br	200f8cc <__muldf3+0x168>
 200feb0:	00bf0084 	movi	r2,-1022
 200feb4:	10c5c83a 	sub	r2,r2,r3
 200feb8:	01000e04 	movi	r4,56
 200febc:	2080080e 	bge	r4,r2,200fee0 <__muldf3+0x77c>
 200fec0:	34c0004c 	andi	r19,r6,1
 200fec4:	0009883a 	mov	r4,zero
 200fec8:	0021883a 	mov	r16,zero
 200fecc:	002f883a 	mov	r23,zero
 200fed0:	003e7e06 	br	200f8cc <__muldf3+0x168>
 200fed4:	4007883a 	mov	r3,r8
 200fed8:	480d883a 	mov	r6,r9
 200fedc:	003fa506 	br	200fd74 <__muldf3+0x610>
 200fee0:	010007c4 	movi	r4,31
 200fee4:	20801816 	blt	r4,r2,200ff48 <__muldf3+0x7e4>
 200fee8:	18c10784 	addi	r3,r3,1054
 200feec:	80c8983a 	sll	r4,r16,r3
 200fef0:	b88ad83a 	srl	r5,r23,r2
 200fef4:	b8c6983a 	sll	r3,r23,r3
 200fef8:	80a0d83a 	srl	r16,r16,r2
 200fefc:	2908b03a 	or	r4,r5,r4
 200ff00:	1804c03a 	cmpne	r2,r3,zero
 200ff04:	2088b03a 	or	r4,r4,r2
 200ff08:	208001cc 	andi	r2,r4,7
 200ff0c:	10000726 	beq	r2,zero,200ff2c <__muldf3+0x7c8>
 200ff10:	20c003cc 	andi	r3,r4,15
 200ff14:	00800104 	movi	r2,4
 200ff18:	18800426 	beq	r3,r2,200ff2c <__muldf3+0x7c8>
 200ff1c:	20c00104 	addi	r3,r4,4
 200ff20:	1905803a 	cmpltu	r2,r3,r4
 200ff24:	80a1883a 	add	r16,r16,r2
 200ff28:	1809883a 	mov	r4,r3
 200ff2c:	8080202c 	andhi	r2,r16,128
 200ff30:	10001b26 	beq	r2,zero,200ffa0 <__muldf3+0x83c>
 200ff34:	34c0004c 	andi	r19,r6,1
 200ff38:	01000044 	movi	r4,1
 200ff3c:	0021883a 	mov	r16,zero
 200ff40:	002f883a 	mov	r23,zero
 200ff44:	003e6106 	br	200f8cc <__muldf3+0x168>
 200ff48:	013ef884 	movi	r4,-1054
 200ff4c:	20c9c83a 	sub	r4,r4,r3
 200ff50:	01400804 	movi	r5,32
 200ff54:	8108d83a 	srl	r4,r16,r4
 200ff58:	11401526 	beq	r2,r5,200ffb0 <__muldf3+0x84c>
 200ff5c:	18c10f84 	addi	r3,r3,1086
 200ff60:	80e0983a 	sll	r16,r16,r3
 200ff64:	85eeb03a 	or	r23,r16,r23
 200ff68:	b804c03a 	cmpne	r2,r23,zero
 200ff6c:	1108b03a 	or	r4,r2,r4
 200ff70:	20c001cc 	andi	r3,r4,7
 200ff74:	1800061e 	bne	r3,zero,200ff90 <__muldf3+0x82c>
 200ff78:	0021883a 	mov	r16,zero
 200ff7c:	202ed0fa 	srli	r23,r4,3
 200ff80:	34c0004c 	andi	r19,r6,1
 200ff84:	0009883a 	mov	r4,zero
 200ff88:	b8eeb03a 	or	r23,r23,r3
 200ff8c:	003e4f06 	br	200f8cc <__muldf3+0x168>
 200ff90:	20c003cc 	andi	r3,r4,15
 200ff94:	00800104 	movi	r2,4
 200ff98:	0021883a 	mov	r16,zero
 200ff9c:	18bfdf1e 	bne	r3,r2,200ff1c <__muldf3+0x7b8>
 200ffa0:	8004927a 	slli	r2,r16,9
 200ffa4:	8006977a 	slli	r3,r16,29
 200ffa8:	1020d33a 	srli	r16,r2,12
 200ffac:	003ff306 	br	200ff7c <__muldf3+0x818>
 200ffb0:	0021883a 	mov	r16,zero
 200ffb4:	003feb06 	br	200ff64 <__muldf3+0x800>
 200ffb8:	00800434 	movhi	r2,16
 200ffbc:	84000234 	orhi	r16,r16,8
 200ffc0:	10bfffc4 	addi	r2,r2,-1
 200ffc4:	4cc0004c 	andi	r19,r9,1
 200ffc8:	80a0703a 	and	r16,r16,r2
 200ffcc:	003ea606 	br	200fa68 <__muldf3+0x304>

0200ffd0 <__subdf3>:
 200ffd0:	00c00434 	movhi	r3,16
 200ffd4:	18ffffc4 	addi	r3,r3,-1
 200ffd8:	defffb04 	addi	sp,sp,-20
 200ffdc:	28d2703a 	and	r9,r5,r3
 200ffe0:	3814d53a 	srli	r10,r7,20
 200ffe4:	38c6703a 	and	r3,r7,r3
 200ffe8:	3004d77a 	srli	r2,r6,29
 200ffec:	dc800215 	stw	r18,8(sp)
 200fff0:	dc000015 	stw	r16,0(sp)
 200fff4:	2824d7fa 	srli	r18,r5,31
 200fff8:	2820d53a 	srli	r16,r5,20
 200fffc:	481290fa 	slli	r9,r9,3
 2010000:	200ad77a 	srli	r5,r4,29
 2010004:	180690fa 	slli	r3,r3,3
 2010008:	dc400115 	stw	r17,4(sp)
 201000c:	dfc00415 	stw	ra,16(sp)
 2010010:	202290fa 	slli	r17,r4,3
 2010014:	dcc00315 	stw	r19,12(sp)
 2010018:	5281ffcc 	andi	r10,r10,2047
 201001c:	0101ffc4 	movi	r4,2047
 2010020:	9011883a 	mov	r8,r18
 2010024:	8401ffcc 	andi	r16,r16,2047
 2010028:	94803fcc 	andi	r18,r18,255
 201002c:	494ab03a 	or	r5,r9,r5
 2010030:	380ed7fa 	srli	r7,r7,31
 2010034:	1886b03a 	or	r3,r3,r2
 2010038:	300c90fa 	slli	r6,r6,3
 201003c:	51009026 	beq	r10,r4,2010280 <__subdf3+0x2b0>
 2010040:	39c0005c 	xori	r7,r7,1
 2010044:	8285c83a 	sub	r2,r16,r10
 2010048:	91c06f26 	beq	r18,r7,2010208 <__subdf3+0x238>
 201004c:	0080b10e 	bge	zero,r2,2010314 <__subdf3+0x344>
 2010050:	50002a1e 	bne	r10,zero,20100fc <__subdf3+0x12c>
 2010054:	1988b03a 	or	r4,r3,r6
 2010058:	2000941e 	bne	r4,zero,20102ac <__subdf3+0x2dc>
 201005c:	888001cc 	andi	r2,r17,7
 2010060:	10005b26 	beq	r2,zero,20101d0 <__subdf3+0x200>
 2010064:	88c003cc 	andi	r3,r17,15
 2010068:	00800104 	movi	r2,4
 201006c:	18805826 	beq	r3,r2,20101d0 <__subdf3+0x200>
 2010070:	88c00104 	addi	r3,r17,4
 2010074:	1c63803a 	cmpltu	r17,r3,r17
 2010078:	2c4b883a 	add	r5,r5,r17
 201007c:	2880202c 	andhi	r2,r5,128
 2010080:	9200004c 	andi	r8,r18,1
 2010084:	1823883a 	mov	r17,r3
 2010088:	10005426 	beq	r2,zero,20101dc <__subdf3+0x20c>
 201008c:	84000044 	addi	r16,r16,1
 2010090:	0081ffc4 	movi	r2,2047
 2010094:	8080bf26 	beq	r16,r2,2010394 <__subdf3+0x3c4>
 2010098:	013fe034 	movhi	r4,65408
 201009c:	213fffc4 	addi	r4,r4,-1
 20100a0:	290a703a 	and	r5,r5,r4
 20100a4:	2804977a 	slli	r2,r5,29
 20100a8:	280a927a 	slli	r5,r5,9
 20100ac:	8822d0fa 	srli	r17,r17,3
 20100b0:	8401ffcc 	andi	r16,r16,2047
 20100b4:	2808d33a 	srli	r4,r5,12
 20100b8:	1444b03a 	or	r2,r2,r17
 20100bc:	8401ffcc 	andi	r16,r16,2047
 20100c0:	800a953a 	slli	r5,r16,20
 20100c4:	40c03fcc 	andi	r3,r8,255
 20100c8:	04000434 	movhi	r16,16
 20100cc:	180697fa 	slli	r3,r3,31
 20100d0:	843fffc4 	addi	r16,r16,-1
 20100d4:	2420703a 	and	r16,r4,r16
 20100d8:	8160b03a 	or	r16,r16,r5
 20100dc:	80c6b03a 	or	r3,r16,r3
 20100e0:	dfc00417 	ldw	ra,16(sp)
 20100e4:	dcc00317 	ldw	r19,12(sp)
 20100e8:	dc800217 	ldw	r18,8(sp)
 20100ec:	dc400117 	ldw	r17,4(sp)
 20100f0:	dc000017 	ldw	r16,0(sp)
 20100f4:	dec00504 	addi	sp,sp,20
 20100f8:	f800283a 	ret
 20100fc:	0101ffc4 	movi	r4,2047
 2010100:	813fd626 	beq	r16,r4,201005c <__subdf3+0x8c>
 2010104:	18c02034 	orhi	r3,r3,128
 2010108:	01000e04 	movi	r4,56
 201010c:	2080a416 	blt	r4,r2,20103a0 <__subdf3+0x3d0>
 2010110:	010007c4 	movi	r4,31
 2010114:	2080c716 	blt	r4,r2,2010434 <__subdf3+0x464>
 2010118:	01000804 	movi	r4,32
 201011c:	2089c83a 	sub	r4,r4,r2
 2010120:	1910983a 	sll	r8,r3,r4
 2010124:	308ed83a 	srl	r7,r6,r2
 2010128:	3108983a 	sll	r4,r6,r4
 201012c:	1884d83a 	srl	r2,r3,r2
 2010130:	41ccb03a 	or	r6,r8,r7
 2010134:	2008c03a 	cmpne	r4,r4,zero
 2010138:	310cb03a 	or	r6,r6,r4
 201013c:	898dc83a 	sub	r6,r17,r6
 2010140:	89a3803a 	cmpltu	r17,r17,r6
 2010144:	288bc83a 	sub	r5,r5,r2
 2010148:	2c4bc83a 	sub	r5,r5,r17
 201014c:	3023883a 	mov	r17,r6
 2010150:	2880202c 	andhi	r2,r5,128
 2010154:	10006b26 	beq	r2,zero,2010304 <__subdf3+0x334>
 2010158:	04c02034 	movhi	r19,128
 201015c:	9cffffc4 	addi	r19,r19,-1
 2010160:	2ce6703a 	and	r19,r5,r19
 2010164:	98007c26 	beq	r19,zero,2010358 <__subdf3+0x388>
 2010168:	9809883a 	mov	r4,r19
 201016c:	2010a9c0 	call	2010a9c <__clzsi2>
 2010170:	10fffe04 	addi	r3,r2,-8
 2010174:	010007c4 	movi	r4,31
 2010178:	20c07d16 	blt	r4,r3,2010370 <__subdf3+0x3a0>
 201017c:	01400a04 	movi	r5,40
 2010180:	2885c83a 	sub	r2,r5,r2
 2010184:	888ad83a 	srl	r5,r17,r2
 2010188:	98e6983a 	sll	r19,r19,r3
 201018c:	88e2983a 	sll	r17,r17,r3
 2010190:	2ce6b03a 	or	r19,r5,r19
 2010194:	1c007a16 	blt	r3,r16,2010380 <__subdf3+0x3b0>
 2010198:	1c21c83a 	sub	r16,r3,r16
 201019c:	81400044 	addi	r5,r16,1
 20101a0:	00c007c4 	movi	r3,31
 20101a4:	19409616 	blt	r3,r5,2010400 <__subdf3+0x430>
 20101a8:	1c21c83a 	sub	r16,r3,r16
 20101ac:	8c08983a 	sll	r4,r17,r16
 20101b0:	8946d83a 	srl	r3,r17,r5
 20101b4:	9c20983a 	sll	r16,r19,r16
 20101b8:	2008c03a 	cmpne	r4,r4,zero
 20101bc:	994ad83a 	srl	r5,r19,r5
 20101c0:	1c06b03a 	or	r3,r3,r16
 20101c4:	1922b03a 	or	r17,r3,r4
 20101c8:	0021883a 	mov	r16,zero
 20101cc:	003fa306 	br	201005c <__subdf3+0x8c>
 20101d0:	2880202c 	andhi	r2,r5,128
 20101d4:	9200004c 	andi	r8,r18,1
 20101d8:	103fac1e 	bne	r2,zero,201008c <__subdf3+0xbc>
 20101dc:	2804977a 	slli	r2,r5,29
 20101e0:	8822d0fa 	srli	r17,r17,3
 20101e4:	00c1ffc4 	movi	r3,2047
 20101e8:	280ad0fa 	srli	r5,r5,3
 20101ec:	1444b03a 	or	r2,r2,r17
 20101f0:	80c02726 	beq	r16,r3,2010290 <__subdf3+0x2c0>
 20101f4:	01000434 	movhi	r4,16
 20101f8:	213fffc4 	addi	r4,r4,-1
 20101fc:	80e0703a 	and	r16,r16,r3
 2010200:	2908703a 	and	r4,r5,r4
 2010204:	003fad06 	br	20100bc <__subdf3+0xec>
 2010208:	0080690e 	bge	zero,r2,20103b0 <__subdf3+0x3e0>
 201020c:	50002f26 	beq	r10,zero,20102cc <__subdf3+0x2fc>
 2010210:	0101ffc4 	movi	r4,2047
 2010214:	813f9126 	beq	r16,r4,201005c <__subdf3+0x8c>
 2010218:	18c02034 	orhi	r3,r3,128
 201021c:	01000e04 	movi	r4,56
 2010220:	2080b00e 	bge	r4,r2,20104e4 <__subdf3+0x514>
 2010224:	198cb03a 	or	r6,r3,r6
 2010228:	300ec03a 	cmpne	r7,r6,zero
 201022c:	0005883a 	mov	r2,zero
 2010230:	3c4f883a 	add	r7,r7,r17
 2010234:	3c63803a 	cmpltu	r17,r7,r17
 2010238:	114b883a 	add	r5,r2,r5
 201023c:	2c4b883a 	add	r5,r5,r17
 2010240:	3823883a 	mov	r17,r7
 2010244:	2880202c 	andhi	r2,r5,128
 2010248:	10002e26 	beq	r2,zero,2010304 <__subdf3+0x334>
 201024c:	84000044 	addi	r16,r16,1
 2010250:	0081ffc4 	movi	r2,2047
 2010254:	8080de26 	beq	r16,r2,20105d0 <__subdf3+0x600>
 2010258:	00bfe034 	movhi	r2,65408
 201025c:	10bfffc4 	addi	r2,r2,-1
 2010260:	288a703a 	and	r5,r5,r2
 2010264:	880cd07a 	srli	r6,r17,1
 2010268:	280897fa 	slli	r4,r5,31
 201026c:	88c0004c 	andi	r3,r17,1
 2010270:	30e2b03a 	or	r17,r6,r3
 2010274:	280ad07a 	srli	r5,r5,1
 2010278:	8922b03a 	or	r17,r17,r4
 201027c:	003f7706 	br	201005c <__subdf3+0x8c>
 2010280:	1984b03a 	or	r2,r3,r6
 2010284:	103f6e26 	beq	r2,zero,2010040 <__subdf3+0x70>
 2010288:	39c03fcc 	andi	r7,r7,255
 201028c:	003f6d06 	br	2010044 <__subdf3+0x74>
 2010290:	1146b03a 	or	r3,r2,r5
 2010294:	18003f26 	beq	r3,zero,2010394 <__subdf3+0x3c4>
 2010298:	00c00434 	movhi	r3,16
 201029c:	29000234 	orhi	r4,r5,8
 20102a0:	18ffffc4 	addi	r3,r3,-1
 20102a4:	20c8703a 	and	r4,r4,r3
 20102a8:	003f8406 	br	20100bc <__subdf3+0xec>
 20102ac:	10bfffc4 	addi	r2,r2,-1
 20102b0:	1000501e 	bne	r2,zero,20103f4 <__subdf3+0x424>
 20102b4:	898fc83a 	sub	r7,r17,r6
 20102b8:	89e3803a 	cmpltu	r17,r17,r7
 20102bc:	28cbc83a 	sub	r5,r5,r3
 20102c0:	2c4bc83a 	sub	r5,r5,r17
 20102c4:	3823883a 	mov	r17,r7
 20102c8:	003fa106 	br	2010150 <__subdf3+0x180>
 20102cc:	1988b03a 	or	r4,r3,r6
 20102d0:	203f6226 	beq	r4,zero,201005c <__subdf3+0x8c>
 20102d4:	10bfffc4 	addi	r2,r2,-1
 20102d8:	10009b1e 	bne	r2,zero,2010548 <__subdf3+0x578>
 20102dc:	344d883a 	add	r6,r6,r17
 20102e0:	3463803a 	cmpltu	r17,r6,r17
 20102e4:	194b883a 	add	r5,r3,r5
 20102e8:	2c4b883a 	add	r5,r5,r17
 20102ec:	3023883a 	mov	r17,r6
 20102f0:	003fd406 	br	2010244 <__subdf3+0x274>
 20102f4:	1106b03a 	or	r3,r2,r4
 20102f8:	1800b426 	beq	r3,zero,20105cc <__subdf3+0x5fc>
 20102fc:	100b883a 	mov	r5,r2
 2010300:	2023883a 	mov	r17,r4
 2010304:	888001cc 	andi	r2,r17,7
 2010308:	103f561e 	bne	r2,zero,2010064 <__subdf3+0x94>
 201030c:	9200004c 	andi	r8,r18,1
 2010310:	003fb206 	br	20101dc <__subdf3+0x20c>
 2010314:	1000531e 	bne	r2,zero,2010464 <__subdf3+0x494>
 2010318:	80800044 	addi	r2,r16,1
 201031c:	1081ffcc 	andi	r2,r2,2047
 2010320:	01000044 	movi	r4,1
 2010324:	2080a00e 	bge	r4,r2,20105a8 <__subdf3+0x5d8>
 2010328:	8985c83a 	sub	r2,r17,r6
 201032c:	8889803a 	cmpltu	r4,r17,r2
 2010330:	28e7c83a 	sub	r19,r5,r3
 2010334:	9927c83a 	sub	r19,r19,r4
 2010338:	9900202c 	andhi	r4,r19,128
 201033c:	20006226 	beq	r4,zero,20104c8 <__subdf3+0x4f8>
 2010340:	3463c83a 	sub	r17,r6,r17
 2010344:	194bc83a 	sub	r5,r3,r5
 2010348:	344d803a 	cmpltu	r6,r6,r17
 201034c:	29a7c83a 	sub	r19,r5,r6
 2010350:	3825883a 	mov	r18,r7
 2010354:	983f841e 	bne	r19,zero,2010168 <__subdf3+0x198>
 2010358:	8809883a 	mov	r4,r17
 201035c:	2010a9c0 	call	2010a9c <__clzsi2>
 2010360:	10800804 	addi	r2,r2,32
 2010364:	10fffe04 	addi	r3,r2,-8
 2010368:	010007c4 	movi	r4,31
 201036c:	20ff830e 	bge	r4,r3,201017c <__subdf3+0x1ac>
 2010370:	14fff604 	addi	r19,r2,-40
 2010374:	8ce6983a 	sll	r19,r17,r19
 2010378:	0023883a 	mov	r17,zero
 201037c:	1c3f860e 	bge	r3,r16,2010198 <__subdf3+0x1c8>
 2010380:	017fe034 	movhi	r5,65408
 2010384:	297fffc4 	addi	r5,r5,-1
 2010388:	80e1c83a 	sub	r16,r16,r3
 201038c:	994a703a 	and	r5,r19,r5
 2010390:	003f3206 	br	201005c <__subdf3+0x8c>
 2010394:	0009883a 	mov	r4,zero
 2010398:	0005883a 	mov	r2,zero
 201039c:	003f4706 	br	20100bc <__subdf3+0xec>
 20103a0:	198cb03a 	or	r6,r3,r6
 20103a4:	300cc03a 	cmpne	r6,r6,zero
 20103a8:	0005883a 	mov	r2,zero
 20103ac:	003f6306 	br	201013c <__subdf3+0x16c>
 20103b0:	10009d1e 	bne	r2,zero,2010628 <__subdf3+0x658>
 20103b4:	81c00044 	addi	r7,r16,1
 20103b8:	3881ffcc 	andi	r2,r7,2047
 20103bc:	02400044 	movi	r9,1
 20103c0:	4880680e 	bge	r9,r2,2010564 <__subdf3+0x594>
 20103c4:	0081ffc4 	movi	r2,2047
 20103c8:	3880ae26 	beq	r7,r2,2010684 <__subdf3+0x6b4>
 20103cc:	344d883a 	add	r6,r6,r17
 20103d0:	3463803a 	cmpltu	r17,r6,r17
 20103d4:	194b883a 	add	r5,r3,r5
 20103d8:	2c4b883a 	add	r5,r5,r17
 20103dc:	282297fa 	slli	r17,r5,31
 20103e0:	300cd07a 	srli	r6,r6,1
 20103e4:	280ad07a 	srli	r5,r5,1
 20103e8:	3821883a 	mov	r16,r7
 20103ec:	89a2b03a 	or	r17,r17,r6
 20103f0:	003f1a06 	br	201005c <__subdf3+0x8c>
 20103f4:	0101ffc4 	movi	r4,2047
 20103f8:	813f431e 	bne	r16,r4,2010108 <__subdf3+0x138>
 20103fc:	003f1706 	br	201005c <__subdf3+0x8c>
 2010400:	80bff844 	addi	r2,r16,-31
 2010404:	00c00804 	movi	r3,32
 2010408:	9884d83a 	srl	r2,r19,r2
 201040c:	28c05126 	beq	r5,r3,2010554 <__subdf3+0x584>
 2010410:	00c00fc4 	movi	r3,63
 2010414:	1c21c83a 	sub	r16,r3,r16
 2010418:	9c26983a 	sll	r19,r19,r16
 201041c:	9c62b03a 	or	r17,r19,r17
 2010420:	8822c03a 	cmpne	r17,r17,zero
 2010424:	88a2b03a 	or	r17,r17,r2
 2010428:	000b883a 	mov	r5,zero
 201042c:	0021883a 	mov	r16,zero
 2010430:	003fb406 	br	2010304 <__subdf3+0x334>
 2010434:	113ff804 	addi	r4,r2,-32
 2010438:	01c00804 	movi	r7,32
 201043c:	1908d83a 	srl	r4,r3,r4
 2010440:	11c04626 	beq	r2,r7,201055c <__subdf3+0x58c>
 2010444:	01c01004 	movi	r7,64
 2010448:	3885c83a 	sub	r2,r7,r2
 201044c:	1884983a 	sll	r2,r3,r2
 2010450:	118cb03a 	or	r6,r2,r6
 2010454:	300cc03a 	cmpne	r6,r6,zero
 2010458:	310cb03a 	or	r6,r6,r4
 201045c:	0005883a 	mov	r2,zero
 2010460:	003f3606 	br	201013c <__subdf3+0x16c>
 2010464:	80002b26 	beq	r16,zero,2010514 <__subdf3+0x544>
 2010468:	0101ffc4 	movi	r4,2047
 201046c:	51006926 	beq	r10,r4,2010614 <__subdf3+0x644>
 2010470:	0085c83a 	sub	r2,zero,r2
 2010474:	29402034 	orhi	r5,r5,128
 2010478:	01000e04 	movi	r4,56
 201047c:	20807d16 	blt	r4,r2,2010674 <__subdf3+0x6a4>
 2010480:	010007c4 	movi	r4,31
 2010484:	2080d916 	blt	r4,r2,20107ec <__subdf3+0x81c>
 2010488:	01000804 	movi	r4,32
 201048c:	2089c83a 	sub	r4,r4,r2
 2010490:	2912983a 	sll	r9,r5,r4
 2010494:	8890d83a 	srl	r8,r17,r2
 2010498:	8908983a 	sll	r4,r17,r4
 201049c:	2884d83a 	srl	r2,r5,r2
 20104a0:	4a22b03a 	or	r17,r9,r8
 20104a4:	2008c03a 	cmpne	r4,r4,zero
 20104a8:	8922b03a 	or	r17,r17,r4
 20104ac:	3463c83a 	sub	r17,r6,r17
 20104b0:	1885c83a 	sub	r2,r3,r2
 20104b4:	344d803a 	cmpltu	r6,r6,r17
 20104b8:	118bc83a 	sub	r5,r2,r6
 20104bc:	5021883a 	mov	r16,r10
 20104c0:	3825883a 	mov	r18,r7
 20104c4:	003f2206 	br	2010150 <__subdf3+0x180>
 20104c8:	9886b03a 	or	r3,r19,r2
 20104cc:	18001c1e 	bne	r3,zero,2010540 <__subdf3+0x570>
 20104d0:	0011883a 	mov	r8,zero
 20104d4:	000b883a 	mov	r5,zero
 20104d8:	0023883a 	mov	r17,zero
 20104dc:	0021883a 	mov	r16,zero
 20104e0:	003f3e06 	br	20101dc <__subdf3+0x20c>
 20104e4:	010007c4 	movi	r4,31
 20104e8:	20803c16 	blt	r4,r2,20105dc <__subdf3+0x60c>
 20104ec:	01000804 	movi	r4,32
 20104f0:	2089c83a 	sub	r4,r4,r2
 20104f4:	1912983a 	sll	r9,r3,r4
 20104f8:	308ed83a 	srl	r7,r6,r2
 20104fc:	3108983a 	sll	r4,r6,r4
 2010500:	1884d83a 	srl	r2,r3,r2
 2010504:	49ceb03a 	or	r7,r9,r7
 2010508:	2008c03a 	cmpne	r4,r4,zero
 201050c:	390eb03a 	or	r7,r7,r4
 2010510:	003f4706 	br	2010230 <__subdf3+0x260>
 2010514:	2c48b03a 	or	r4,r5,r17
 2010518:	20003e26 	beq	r4,zero,2010614 <__subdf3+0x644>
 201051c:	0084303a 	nor	r2,zero,r2
 2010520:	10003a1e 	bne	r2,zero,201060c <__subdf3+0x63c>
 2010524:	3463c83a 	sub	r17,r6,r17
 2010528:	194bc83a 	sub	r5,r3,r5
 201052c:	344d803a 	cmpltu	r6,r6,r17
 2010530:	298bc83a 	sub	r5,r5,r6
 2010534:	5021883a 	mov	r16,r10
 2010538:	3825883a 	mov	r18,r7
 201053c:	003f0406 	br	2010150 <__subdf3+0x180>
 2010540:	1023883a 	mov	r17,r2
 2010544:	003f0706 	br	2010164 <__subdf3+0x194>
 2010548:	0101ffc4 	movi	r4,2047
 201054c:	813f331e 	bne	r16,r4,201021c <__subdf3+0x24c>
 2010550:	003ec206 	br	201005c <__subdf3+0x8c>
 2010554:	0027883a 	mov	r19,zero
 2010558:	003fb006 	br	201041c <__subdf3+0x44c>
 201055c:	0005883a 	mov	r2,zero
 2010560:	003fbb06 	br	2010450 <__subdf3+0x480>
 2010564:	2c44b03a 	or	r2,r5,r17
 2010568:	80008b1e 	bne	r16,zero,2010798 <__subdf3+0x7c8>
 201056c:	1000b526 	beq	r2,zero,2010844 <__subdf3+0x874>
 2010570:	1984b03a 	or	r2,r3,r6
 2010574:	103eb926 	beq	r2,zero,201005c <__subdf3+0x8c>
 2010578:	3449883a 	add	r4,r6,r17
 201057c:	2463803a 	cmpltu	r17,r4,r17
 2010580:	194b883a 	add	r5,r3,r5
 2010584:	2c4b883a 	add	r5,r5,r17
 2010588:	2880202c 	andhi	r2,r5,128
 201058c:	2023883a 	mov	r17,r4
 2010590:	103f5c26 	beq	r2,zero,2010304 <__subdf3+0x334>
 2010594:	00bfe034 	movhi	r2,65408
 2010598:	10bfffc4 	addi	r2,r2,-1
 201059c:	4821883a 	mov	r16,r9
 20105a0:	288a703a 	and	r5,r5,r2
 20105a4:	003ead06 	br	201005c <__subdf3+0x8c>
 20105a8:	2c44b03a 	or	r2,r5,r17
 20105ac:	8000291e 	bne	r16,zero,2010654 <__subdf3+0x684>
 20105b0:	10004f1e 	bne	r2,zero,20106f0 <__subdf3+0x720>
 20105b4:	1984b03a 	or	r2,r3,r6
 20105b8:	10000426 	beq	r2,zero,20105cc <__subdf3+0x5fc>
 20105bc:	180b883a 	mov	r5,r3
 20105c0:	3023883a 	mov	r17,r6
 20105c4:	3825883a 	mov	r18,r7
 20105c8:	003ea406 	br	201005c <__subdf3+0x8c>
 20105cc:	0011883a 	mov	r8,zero
 20105d0:	000b883a 	mov	r5,zero
 20105d4:	0023883a 	mov	r17,zero
 20105d8:	003f0006 	br	20101dc <__subdf3+0x20c>
 20105dc:	11fff804 	addi	r7,r2,-32
 20105e0:	19c8d83a 	srl	r4,r3,r7
 20105e4:	01c00804 	movi	r7,32
 20105e8:	11c07e26 	beq	r2,r7,20107e4 <__subdf3+0x814>
 20105ec:	01c01004 	movi	r7,64
 20105f0:	3885c83a 	sub	r2,r7,r2
 20105f4:	1884983a 	sll	r2,r3,r2
 20105f8:	118cb03a 	or	r6,r2,r6
 20105fc:	300ec03a 	cmpne	r7,r6,zero
 2010600:	390eb03a 	or	r7,r7,r4
 2010604:	0005883a 	mov	r2,zero
 2010608:	003f0906 	br	2010230 <__subdf3+0x260>
 201060c:	0101ffc4 	movi	r4,2047
 2010610:	513f991e 	bne	r10,r4,2010478 <__subdf3+0x4a8>
 2010614:	180b883a 	mov	r5,r3
 2010618:	3023883a 	mov	r17,r6
 201061c:	5021883a 	mov	r16,r10
 2010620:	3825883a 	mov	r18,r7
 2010624:	003e8d06 	br	201005c <__subdf3+0x8c>
 2010628:	80001a1e 	bne	r16,zero,2010694 <__subdf3+0x6c4>
 201062c:	2c48b03a 	or	r4,r5,r17
 2010630:	20005526 	beq	r4,zero,2010788 <__subdf3+0x7b8>
 2010634:	0084303a 	nor	r2,zero,r2
 2010638:	1000511e 	bne	r2,zero,2010780 <__subdf3+0x7b0>
 201063c:	89a3883a 	add	r17,r17,r6
 2010640:	194b883a 	add	r5,r3,r5
 2010644:	898d803a 	cmpltu	r6,r17,r6
 2010648:	298b883a 	add	r5,r5,r6
 201064c:	5021883a 	mov	r16,r10
 2010650:	003efc06 	br	2010244 <__subdf3+0x274>
 2010654:	1000341e 	bne	r2,zero,2010728 <__subdf3+0x758>
 2010658:	1984b03a 	or	r2,r3,r6
 201065c:	10006f26 	beq	r2,zero,201081c <__subdf3+0x84c>
 2010660:	180b883a 	mov	r5,r3
 2010664:	3023883a 	mov	r17,r6
 2010668:	3825883a 	mov	r18,r7
 201066c:	0401ffc4 	movi	r16,2047
 2010670:	003e7a06 	br	201005c <__subdf3+0x8c>
 2010674:	2c62b03a 	or	r17,r5,r17
 2010678:	8822c03a 	cmpne	r17,r17,zero
 201067c:	0005883a 	mov	r2,zero
 2010680:	003f8a06 	br	20104ac <__subdf3+0x4dc>
 2010684:	3821883a 	mov	r16,r7
 2010688:	000b883a 	mov	r5,zero
 201068c:	0023883a 	mov	r17,zero
 2010690:	003ed206 	br	20101dc <__subdf3+0x20c>
 2010694:	0101ffc4 	movi	r4,2047
 2010698:	51003b26 	beq	r10,r4,2010788 <__subdf3+0x7b8>
 201069c:	0085c83a 	sub	r2,zero,r2
 20106a0:	29402034 	orhi	r5,r5,128
 20106a4:	01000e04 	movi	r4,56
 20106a8:	20806216 	blt	r4,r2,2010834 <__subdf3+0x864>
 20106ac:	010007c4 	movi	r4,31
 20106b0:	20806b16 	blt	r4,r2,2010860 <__subdf3+0x890>
 20106b4:	01000804 	movi	r4,32
 20106b8:	2089c83a 	sub	r4,r4,r2
 20106bc:	2912983a 	sll	r9,r5,r4
 20106c0:	888ed83a 	srl	r7,r17,r2
 20106c4:	8908983a 	sll	r4,r17,r4
 20106c8:	2884d83a 	srl	r2,r5,r2
 20106cc:	49e2b03a 	or	r17,r9,r7
 20106d0:	2008c03a 	cmpne	r4,r4,zero
 20106d4:	8922b03a 	or	r17,r17,r4
 20106d8:	89a3883a 	add	r17,r17,r6
 20106dc:	10c5883a 	add	r2,r2,r3
 20106e0:	898d803a 	cmpltu	r6,r17,r6
 20106e4:	118b883a 	add	r5,r2,r6
 20106e8:	5021883a 	mov	r16,r10
 20106ec:	003ed506 	br	2010244 <__subdf3+0x274>
 20106f0:	1984b03a 	or	r2,r3,r6
 20106f4:	103e5926 	beq	r2,zero,201005c <__subdf3+0x8c>
 20106f8:	8989c83a 	sub	r4,r17,r6
 20106fc:	8911803a 	cmpltu	r8,r17,r4
 2010700:	28c5c83a 	sub	r2,r5,r3
 2010704:	1205c83a 	sub	r2,r2,r8
 2010708:	1200202c 	andhi	r8,r2,128
 201070c:	403ef926 	beq	r8,zero,20102f4 <__subdf3+0x324>
 2010710:	3463c83a 	sub	r17,r6,r17
 2010714:	194bc83a 	sub	r5,r3,r5
 2010718:	344d803a 	cmpltu	r6,r6,r17
 201071c:	298bc83a 	sub	r5,r5,r6
 2010720:	3825883a 	mov	r18,r7
 2010724:	003e4d06 	br	201005c <__subdf3+0x8c>
 2010728:	1984b03a 	or	r2,r3,r6
 201072c:	10002b26 	beq	r2,zero,20107dc <__subdf3+0x80c>
 2010730:	2808d0fa 	srli	r4,r5,3
 2010734:	8822d0fa 	srli	r17,r17,3
 2010738:	280a977a 	slli	r5,r5,29
 201073c:	2080022c 	andhi	r2,r4,8
 2010740:	2c62b03a 	or	r17,r5,r17
 2010744:	10000826 	beq	r2,zero,2010768 <__subdf3+0x798>
 2010748:	1810d0fa 	srli	r8,r3,3
 201074c:	4080022c 	andhi	r2,r8,8
 2010750:	1000051e 	bne	r2,zero,2010768 <__subdf3+0x798>
 2010754:	300cd0fa 	srli	r6,r6,3
 2010758:	1804977a 	slli	r2,r3,29
 201075c:	4009883a 	mov	r4,r8
 2010760:	3825883a 	mov	r18,r7
 2010764:	11a2b03a 	or	r17,r2,r6
 2010768:	880ad77a 	srli	r5,r17,29
 201076c:	200890fa 	slli	r4,r4,3
 2010770:	882290fa 	slli	r17,r17,3
 2010774:	0401ffc4 	movi	r16,2047
 2010778:	290ab03a 	or	r5,r5,r4
 201077c:	003e3706 	br	201005c <__subdf3+0x8c>
 2010780:	0101ffc4 	movi	r4,2047
 2010784:	513fc71e 	bne	r10,r4,20106a4 <__subdf3+0x6d4>
 2010788:	180b883a 	mov	r5,r3
 201078c:	3023883a 	mov	r17,r6
 2010790:	5021883a 	mov	r16,r10
 2010794:	003e3106 	br	201005c <__subdf3+0x8c>
 2010798:	10002d26 	beq	r2,zero,2010850 <__subdf3+0x880>
 201079c:	1984b03a 	or	r2,r3,r6
 20107a0:	10000e26 	beq	r2,zero,20107dc <__subdf3+0x80c>
 20107a4:	2808d0fa 	srli	r4,r5,3
 20107a8:	8822d0fa 	srli	r17,r17,3
 20107ac:	280a977a 	slli	r5,r5,29
 20107b0:	2080022c 	andhi	r2,r4,8
 20107b4:	2c62b03a 	or	r17,r5,r17
 20107b8:	103feb26 	beq	r2,zero,2010768 <__subdf3+0x798>
 20107bc:	180ed0fa 	srli	r7,r3,3
 20107c0:	3880022c 	andhi	r2,r7,8
 20107c4:	103fe81e 	bne	r2,zero,2010768 <__subdf3+0x798>
 20107c8:	300cd0fa 	srli	r6,r6,3
 20107cc:	1804977a 	slli	r2,r3,29
 20107d0:	3809883a 	mov	r4,r7
 20107d4:	11a2b03a 	or	r17,r2,r6
 20107d8:	003fe306 	br	2010768 <__subdf3+0x798>
 20107dc:	0401ffc4 	movi	r16,2047
 20107e0:	003e1e06 	br	201005c <__subdf3+0x8c>
 20107e4:	0005883a 	mov	r2,zero
 20107e8:	003f8306 	br	20105f8 <__subdf3+0x628>
 20107ec:	113ff804 	addi	r4,r2,-32
 20107f0:	02000804 	movi	r8,32
 20107f4:	2908d83a 	srl	r4,r5,r4
 20107f8:	12002526 	beq	r2,r8,2010890 <__subdf3+0x8c0>
 20107fc:	02001004 	movi	r8,64
 2010800:	4085c83a 	sub	r2,r8,r2
 2010804:	288a983a 	sll	r5,r5,r2
 2010808:	2c62b03a 	or	r17,r5,r17
 201080c:	8822c03a 	cmpne	r17,r17,zero
 2010810:	8922b03a 	or	r17,r17,r4
 2010814:	0005883a 	mov	r2,zero
 2010818:	003f2406 	br	20104ac <__subdf3+0x4dc>
 201081c:	01402034 	movhi	r5,128
 2010820:	0011883a 	mov	r8,zero
 2010824:	297fffc4 	addi	r5,r5,-1
 2010828:	047ffe04 	movi	r17,-8
 201082c:	0401ffc4 	movi	r16,2047
 2010830:	003e6a06 	br	20101dc <__subdf3+0x20c>
 2010834:	2c62b03a 	or	r17,r5,r17
 2010838:	8822c03a 	cmpne	r17,r17,zero
 201083c:	0005883a 	mov	r2,zero
 2010840:	003fa506 	br	20106d8 <__subdf3+0x708>
 2010844:	180b883a 	mov	r5,r3
 2010848:	3023883a 	mov	r17,r6
 201084c:	003e0306 	br	201005c <__subdf3+0x8c>
 2010850:	180b883a 	mov	r5,r3
 2010854:	3023883a 	mov	r17,r6
 2010858:	0401ffc4 	movi	r16,2047
 201085c:	003dff06 	br	201005c <__subdf3+0x8c>
 2010860:	113ff804 	addi	r4,r2,-32
 2010864:	01c00804 	movi	r7,32
 2010868:	2908d83a 	srl	r4,r5,r4
 201086c:	11c00a26 	beq	r2,r7,2010898 <__subdf3+0x8c8>
 2010870:	01c01004 	movi	r7,64
 2010874:	3885c83a 	sub	r2,r7,r2
 2010878:	288a983a 	sll	r5,r5,r2
 201087c:	2c62b03a 	or	r17,r5,r17
 2010880:	8822c03a 	cmpne	r17,r17,zero
 2010884:	8922b03a 	or	r17,r17,r4
 2010888:	0005883a 	mov	r2,zero
 201088c:	003f9206 	br	20106d8 <__subdf3+0x708>
 2010890:	000b883a 	mov	r5,zero
 2010894:	003fdc06 	br	2010808 <__subdf3+0x838>
 2010898:	000b883a 	mov	r5,zero
 201089c:	003ff706 	br	201087c <__subdf3+0x8ac>

020108a0 <__fixdfsi>:
 20108a0:	2806d53a 	srli	r3,r5,20
 20108a4:	00800434 	movhi	r2,16
 20108a8:	10bfffc4 	addi	r2,r2,-1
 20108ac:	18c1ffcc 	andi	r3,r3,2047
 20108b0:	0180ff84 	movi	r6,1022
 20108b4:	2884703a 	and	r2,r5,r2
 20108b8:	280ad7fa 	srli	r5,r5,31
 20108bc:	30c0130e 	bge	r6,r3,201090c <__fixdfsi+0x6c>
 20108c0:	01810744 	movi	r6,1053
 20108c4:	30c00d16 	blt	r6,r3,20108fc <__fixdfsi+0x5c>
 20108c8:	01810cc4 	movi	r6,1075
 20108cc:	30cdc83a 	sub	r6,r6,r3
 20108d0:	01c007c4 	movi	r7,31
 20108d4:	10800434 	orhi	r2,r2,16
 20108d8:	39800e0e 	bge	r7,r6,2010914 <__fixdfsi+0x74>
 20108dc:	010104c4 	movi	r4,1043
 20108e0:	20c7c83a 	sub	r3,r4,r3
 20108e4:	10c6d83a 	srl	r3,r2,r3
 20108e8:	29403fcc 	andi	r5,r5,255
 20108ec:	0145c83a 	sub	r2,zero,r5
 20108f0:	1884f03a 	xor	r2,r3,r2
 20108f4:	1145883a 	add	r2,r2,r5
 20108f8:	f800283a 	ret
 20108fc:	00a00034 	movhi	r2,32768
 2010900:	10bfffc4 	addi	r2,r2,-1
 2010904:	2885883a 	add	r2,r5,r2
 2010908:	f800283a 	ret
 201090c:	0005883a 	mov	r2,zero
 2010910:	f800283a 	ret
 2010914:	18fefb44 	addi	r3,r3,-1043
 2010918:	2188d83a 	srl	r4,r4,r6
 201091c:	10c6983a 	sll	r3,r2,r3
 2010920:	20c6b03a 	or	r3,r4,r3
 2010924:	003ff006 	br	20108e8 <__fixdfsi+0x48>

02010928 <__floatsidf>:
 2010928:	defffd04 	addi	sp,sp,-12
 201092c:	dc400115 	stw	r17,4(sp)
 2010930:	dfc00215 	stw	ra,8(sp)
 2010934:	dc000015 	stw	r16,0(sp)
 2010938:	2023883a 	mov	r17,r4
 201093c:	20001426 	beq	r4,zero,2010990 <__floatsidf+0x68>
 2010940:	2020d7fa 	srli	r16,r4,31
 2010944:	80000126 	beq	r16,zero,201094c <__floatsidf+0x24>
 2010948:	0123c83a 	sub	r17,zero,r4
 201094c:	8809883a 	mov	r4,r17
 2010950:	2010a9c0 	call	2010a9c <__clzsi2>
 2010954:	01410784 	movi	r5,1054
 2010958:	00c00284 	movi	r3,10
 201095c:	288bc83a 	sub	r5,r5,r2
 2010960:	18801c16 	blt	r3,r2,20109d4 <__floatsidf+0xac>
 2010964:	00c002c4 	movi	r3,11
 2010968:	1887c83a 	sub	r3,r3,r2
 201096c:	88c8d83a 	srl	r4,r17,r3
 2010970:	00c00434 	movhi	r3,16
 2010974:	18ffffc4 	addi	r3,r3,-1
 2010978:	10800544 	addi	r2,r2,21
 201097c:	20c8703a 	and	r4,r4,r3
 2010980:	8884983a 	sll	r2,r17,r2
 2010984:	28c1ffcc 	andi	r3,r5,2047
 2010988:	800d883a 	mov	r6,r16
 201098c:	00000406 	br	20109a0 <__floatsidf+0x78>
 2010990:	000d883a 	mov	r6,zero
 2010994:	0007883a 	mov	r3,zero
 2010998:	0009883a 	mov	r4,zero
 201099c:	0005883a 	mov	r2,zero
 20109a0:	180a953a 	slli	r5,r3,20
 20109a4:	31803fcc 	andi	r6,r6,255
 20109a8:	00c00434 	movhi	r3,16
 20109ac:	300c97fa 	slli	r6,r6,31
 20109b0:	18ffffc4 	addi	r3,r3,-1
 20109b4:	20c6703a 	and	r3,r4,r3
 20109b8:	1946b03a 	or	r3,r3,r5
 20109bc:	1986b03a 	or	r3,r3,r6
 20109c0:	dfc00217 	ldw	ra,8(sp)
 20109c4:	dc400117 	ldw	r17,4(sp)
 20109c8:	dc000017 	ldw	r16,0(sp)
 20109cc:	dec00304 	addi	sp,sp,12
 20109d0:	f800283a 	ret
 20109d4:	10fffd44 	addi	r3,r2,-11
 20109d8:	88c8983a 	sll	r4,r17,r3
 20109dc:	00800434 	movhi	r2,16
 20109e0:	10bfffc4 	addi	r2,r2,-1
 20109e4:	2088703a 	and	r4,r4,r2
 20109e8:	28c1ffcc 	andi	r3,r5,2047
 20109ec:	800d883a 	mov	r6,r16
 20109f0:	0005883a 	mov	r2,zero
 20109f4:	003fea06 	br	20109a0 <__floatsidf+0x78>

020109f8 <__floatunsidf>:
 20109f8:	defffe04 	addi	sp,sp,-8
 20109fc:	dc000015 	stw	r16,0(sp)
 2010a00:	dfc00115 	stw	ra,4(sp)
 2010a04:	2021883a 	mov	r16,r4
 2010a08:	20001026 	beq	r4,zero,2010a4c <__floatunsidf+0x54>
 2010a0c:	2010a9c0 	call	2010a9c <__clzsi2>
 2010a10:	01410784 	movi	r5,1054
 2010a14:	100d883a 	mov	r6,r2
 2010a18:	288bc83a 	sub	r5,r5,r2
 2010a1c:	00800284 	movi	r2,10
 2010a20:	11801616 	blt	r2,r6,2010a7c <__floatunsidf+0x84>
 2010a24:	008002c4 	movi	r2,11
 2010a28:	1185c83a 	sub	r2,r2,r6
 2010a2c:	8084d83a 	srl	r2,r16,r2
 2010a30:	00c00434 	movhi	r3,16
 2010a34:	31c00544 	addi	r7,r6,21
 2010a38:	18ffffc4 	addi	r3,r3,-1
 2010a3c:	81e0983a 	sll	r16,r16,r7
 2010a40:	10cc703a 	and	r6,r2,r3
 2010a44:	2941ffcc 	andi	r5,r5,2047
 2010a48:	00000206 	br	2010a54 <__floatunsidf+0x5c>
 2010a4c:	000b883a 	mov	r5,zero
 2010a50:	000d883a 	mov	r6,zero
 2010a54:	280a953a 	slli	r5,r5,20
 2010a58:	00c00434 	movhi	r3,16
 2010a5c:	18ffffc4 	addi	r3,r3,-1
 2010a60:	30c6703a 	and	r3,r6,r3
 2010a64:	8005883a 	mov	r2,r16
 2010a68:	1946b03a 	or	r3,r3,r5
 2010a6c:	dfc00117 	ldw	ra,4(sp)
 2010a70:	dc000017 	ldw	r16,0(sp)
 2010a74:	dec00204 	addi	sp,sp,8
 2010a78:	f800283a 	ret
 2010a7c:	31bffd44 	addi	r6,r6,-11
 2010a80:	818c983a 	sll	r6,r16,r6
 2010a84:	00800434 	movhi	r2,16
 2010a88:	10bfffc4 	addi	r2,r2,-1
 2010a8c:	2941ffcc 	andi	r5,r5,2047
 2010a90:	0021883a 	mov	r16,zero
 2010a94:	308c703a 	and	r6,r6,r2
 2010a98:	003fee06 	br	2010a54 <__floatunsidf+0x5c>

02010a9c <__clzsi2>:
 2010a9c:	00bfffd4 	movui	r2,65535
 2010aa0:	11000b36 	bltu	r2,r4,2010ad0 <__clzsi2+0x34>
 2010aa4:	00803fc4 	movi	r2,255
 2010aa8:	1100122e 	bgeu	r2,r4,2010af4 <__clzsi2+0x58>
 2010aac:	00c00204 	movi	r3,8
 2010ab0:	01400604 	movi	r5,24
 2010ab4:	20c8d83a 	srl	r4,r4,r3
 2010ab8:	008080b4 	movhi	r2,514
 2010abc:	10a32b04 	addi	r2,r2,-29524
 2010ac0:	1109883a 	add	r4,r2,r4
 2010ac4:	20800003 	ldbu	r2,0(r4)
 2010ac8:	2885c83a 	sub	r2,r5,r2
 2010acc:	f800283a 	ret
 2010ad0:	00804034 	movhi	r2,256
 2010ad4:	10bfffc4 	addi	r2,r2,-1
 2010ad8:	11000336 	bltu	r2,r4,2010ae8 <__clzsi2+0x4c>
 2010adc:	00c00404 	movi	r3,16
 2010ae0:	180b883a 	mov	r5,r3
 2010ae4:	003ff306 	br	2010ab4 <__clzsi2+0x18>
 2010ae8:	00c00604 	movi	r3,24
 2010aec:	01400204 	movi	r5,8
 2010af0:	003ff006 	br	2010ab4 <__clzsi2+0x18>
 2010af4:	0007883a 	mov	r3,zero
 2010af8:	01400804 	movi	r5,32
 2010afc:	003fed06 	br	2010ab4 <__clzsi2+0x18>

02010b00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010b00:	defffe04 	addi	sp,sp,-8
 2010b04:	dfc00115 	stw	ra,4(sp)
 2010b08:	df000015 	stw	fp,0(sp)
 2010b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010b10:	008080b4 	movhi	r2,514
 2010b14:	10aa7104 	addi	r2,r2,-22076
 2010b18:	10800017 	ldw	r2,0(r2)
 2010b1c:	10000526 	beq	r2,zero,2010b34 <alt_get_errno+0x34>
 2010b20:	008080b4 	movhi	r2,514
 2010b24:	10aa7104 	addi	r2,r2,-22076
 2010b28:	10800017 	ldw	r2,0(r2)
 2010b2c:	103ee83a 	callr	r2
 2010b30:	00000206 	br	2010b3c <alt_get_errno+0x3c>
 2010b34:	008080b4 	movhi	r2,514
 2010b38:	10aa7c04 	addi	r2,r2,-22032
}
 2010b3c:	e037883a 	mov	sp,fp
 2010b40:	dfc00117 	ldw	ra,4(sp)
 2010b44:	df000017 	ldw	fp,0(sp)
 2010b48:	dec00204 	addi	sp,sp,8
 2010b4c:	f800283a 	ret

02010b50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2010b50:	defffb04 	addi	sp,sp,-20
 2010b54:	dfc00415 	stw	ra,16(sp)
 2010b58:	df000315 	stw	fp,12(sp)
 2010b5c:	df000304 	addi	fp,sp,12
 2010b60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2010b64:	e0bfff17 	ldw	r2,-4(fp)
 2010b68:	10000816 	blt	r2,zero,2010b8c <close+0x3c>
 2010b6c:	e13fff17 	ldw	r4,-4(fp)
 2010b70:	01400304 	movi	r5,12
 2010b74:	200e2dc0 	call	200e2dc <__mulsi3>
 2010b78:	1007883a 	mov	r3,r2
 2010b7c:	008080b4 	movhi	r2,514
 2010b80:	10a5b004 	addi	r2,r2,-26944
 2010b84:	1885883a 	add	r2,r3,r2
 2010b88:	00000106 	br	2010b90 <close+0x40>
 2010b8c:	0005883a 	mov	r2,zero
 2010b90:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2010b94:	e0bffd17 	ldw	r2,-12(fp)
 2010b98:	10001926 	beq	r2,zero,2010c00 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2010b9c:	e0bffd17 	ldw	r2,-12(fp)
 2010ba0:	10800017 	ldw	r2,0(r2)
 2010ba4:	10800417 	ldw	r2,16(r2)
 2010ba8:	10000626 	beq	r2,zero,2010bc4 <close+0x74>
 2010bac:	e0bffd17 	ldw	r2,-12(fp)
 2010bb0:	10800017 	ldw	r2,0(r2)
 2010bb4:	10800417 	ldw	r2,16(r2)
 2010bb8:	e13ffd17 	ldw	r4,-12(fp)
 2010bbc:	103ee83a 	callr	r2
 2010bc0:	00000106 	br	2010bc8 <close+0x78>
 2010bc4:	0005883a 	mov	r2,zero
 2010bc8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2010bcc:	e13fff17 	ldw	r4,-4(fp)
 2010bd0:	201139c0 	call	201139c <alt_release_fd>
    if (rval < 0)
 2010bd4:	e0bffe17 	ldw	r2,-8(fp)
 2010bd8:	1000070e 	bge	r2,zero,2010bf8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 2010bdc:	2010b000 	call	2010b00 <alt_get_errno>
 2010be0:	1007883a 	mov	r3,r2
 2010be4:	e0bffe17 	ldw	r2,-8(fp)
 2010be8:	0085c83a 	sub	r2,zero,r2
 2010bec:	18800015 	stw	r2,0(r3)
      return -1;
 2010bf0:	00bfffc4 	movi	r2,-1
 2010bf4:	00000706 	br	2010c14 <close+0xc4>
    }
    return 0;
 2010bf8:	0005883a 	mov	r2,zero
 2010bfc:	00000506 	br	2010c14 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2010c00:	2010b000 	call	2010b00 <alt_get_errno>
 2010c04:	1007883a 	mov	r3,r2
 2010c08:	00801444 	movi	r2,81
 2010c0c:	18800015 	stw	r2,0(r3)
    return -1;
 2010c10:	00bfffc4 	movi	r2,-1
  }
}
 2010c14:	e037883a 	mov	sp,fp
 2010c18:	dfc00117 	ldw	ra,4(sp)
 2010c1c:	df000017 	ldw	fp,0(sp)
 2010c20:	dec00204 	addi	sp,sp,8
 2010c24:	f800283a 	ret

02010c28 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2010c28:	defffc04 	addi	sp,sp,-16
 2010c2c:	df000315 	stw	fp,12(sp)
 2010c30:	df000304 	addi	fp,sp,12
 2010c34:	e13ffd15 	stw	r4,-12(fp)
 2010c38:	e17ffe15 	stw	r5,-8(fp)
 2010c3c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2010c40:	e0bfff17 	ldw	r2,-4(fp)
}
 2010c44:	e037883a 	mov	sp,fp
 2010c48:	df000017 	ldw	fp,0(sp)
 2010c4c:	dec00104 	addi	sp,sp,4
 2010c50:	f800283a 	ret

02010c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010c54:	defffe04 	addi	sp,sp,-8
 2010c58:	dfc00115 	stw	ra,4(sp)
 2010c5c:	df000015 	stw	fp,0(sp)
 2010c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010c64:	008080b4 	movhi	r2,514
 2010c68:	10aa7104 	addi	r2,r2,-22076
 2010c6c:	10800017 	ldw	r2,0(r2)
 2010c70:	10000526 	beq	r2,zero,2010c88 <alt_get_errno+0x34>
 2010c74:	008080b4 	movhi	r2,514
 2010c78:	10aa7104 	addi	r2,r2,-22076
 2010c7c:	10800017 	ldw	r2,0(r2)
 2010c80:	103ee83a 	callr	r2
 2010c84:	00000206 	br	2010c90 <alt_get_errno+0x3c>
 2010c88:	008080b4 	movhi	r2,514
 2010c8c:	10aa7c04 	addi	r2,r2,-22032
}
 2010c90:	e037883a 	mov	sp,fp
 2010c94:	dfc00117 	ldw	ra,4(sp)
 2010c98:	df000017 	ldw	fp,0(sp)
 2010c9c:	dec00204 	addi	sp,sp,8
 2010ca0:	f800283a 	ret

02010ca4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2010ca4:	defffb04 	addi	sp,sp,-20
 2010ca8:	dfc00415 	stw	ra,16(sp)
 2010cac:	df000315 	stw	fp,12(sp)
 2010cb0:	df000304 	addi	fp,sp,12
 2010cb4:	e13ffe15 	stw	r4,-8(fp)
 2010cb8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2010cbc:	e0bffe17 	ldw	r2,-8(fp)
 2010cc0:	10000816 	blt	r2,zero,2010ce4 <fstat+0x40>
 2010cc4:	e13ffe17 	ldw	r4,-8(fp)
 2010cc8:	01400304 	movi	r5,12
 2010ccc:	200e2dc0 	call	200e2dc <__mulsi3>
 2010cd0:	1007883a 	mov	r3,r2
 2010cd4:	008080b4 	movhi	r2,514
 2010cd8:	10a5b004 	addi	r2,r2,-26944
 2010cdc:	1885883a 	add	r2,r3,r2
 2010ce0:	00000106 	br	2010ce8 <fstat+0x44>
 2010ce4:	0005883a 	mov	r2,zero
 2010ce8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2010cec:	e0bffd17 	ldw	r2,-12(fp)
 2010cf0:	10001026 	beq	r2,zero,2010d34 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2010cf4:	e0bffd17 	ldw	r2,-12(fp)
 2010cf8:	10800017 	ldw	r2,0(r2)
 2010cfc:	10800817 	ldw	r2,32(r2)
 2010d00:	10000726 	beq	r2,zero,2010d20 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 2010d04:	e0bffd17 	ldw	r2,-12(fp)
 2010d08:	10800017 	ldw	r2,0(r2)
 2010d0c:	10800817 	ldw	r2,32(r2)
 2010d10:	e13ffd17 	ldw	r4,-12(fp)
 2010d14:	e17fff17 	ldw	r5,-4(fp)
 2010d18:	103ee83a 	callr	r2
 2010d1c:	00000a06 	br	2010d48 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2010d20:	e0bfff17 	ldw	r2,-4(fp)
 2010d24:	00c80004 	movi	r3,8192
 2010d28:	10c00115 	stw	r3,4(r2)
      return 0;
 2010d2c:	0005883a 	mov	r2,zero
 2010d30:	00000506 	br	2010d48 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2010d34:	2010c540 	call	2010c54 <alt_get_errno>
 2010d38:	1007883a 	mov	r3,r2
 2010d3c:	00801444 	movi	r2,81
 2010d40:	18800015 	stw	r2,0(r3)
    return -1;
 2010d44:	00bfffc4 	movi	r2,-1
  }
}
 2010d48:	e037883a 	mov	sp,fp
 2010d4c:	dfc00117 	ldw	ra,4(sp)
 2010d50:	df000017 	ldw	fp,0(sp)
 2010d54:	dec00204 	addi	sp,sp,8
 2010d58:	f800283a 	ret

02010d5c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 2010d5c:	defff404 	addi	sp,sp,-48
 2010d60:	dfc00b15 	stw	ra,44(sp)
 2010d64:	df000a15 	stw	fp,40(sp)
 2010d68:	dd000915 	stw	r20,36(sp)
 2010d6c:	dcc00815 	stw	r19,32(sp)
 2010d70:	dc800715 	stw	r18,28(sp)
 2010d74:	dc400615 	stw	r17,24(sp)
 2010d78:	dc000515 	stw	r16,20(sp)
 2010d7c:	df000a04 	addi	fp,sp,40
 2010d80:	e13ff915 	stw	r4,-28(fp)
 2010d84:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 2010d88:	e0bffa17 	ldw	r2,-24(fp)
 2010d8c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2010d90:	008080b4 	movhi	r2,514
 2010d94:	10aa8b04 	addi	r2,r2,-21972
 2010d98:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 2010d9c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2010da0:	008080b4 	movhi	r2,514
 2010da4:	10aa8a04 	addi	r2,r2,-21976
 2010da8:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 2010dac:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 2010db0:	e0bff817 	ldw	r2,-32(fp)
 2010db4:	10006126 	beq	r2,zero,2010f3c <gettimeofday+0x1e0>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 2010db8:	d0a01f17 	ldw	r2,-32644(gp)
 2010dbc:	1029883a 	mov	r20,r2
 2010dc0:	e13ff717 	ldw	r4,-36(fp)
 2010dc4:	e17ff817 	ldw	r5,-32(fp)
 2010dc8:	200e2cc0 	call	200e2cc <__udivsi3>
 2010dcc:	a085883a 	add	r2,r20,r2
 2010dd0:	1007883a 	mov	r3,r2
 2010dd4:	e0bff917 	ldw	r2,-28(fp)
 2010dd8:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2010ddc:	d0a02004 	addi	r2,gp,-32640
 2010de0:	10800017 	ldw	r2,0(r2)
 2010de4:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 2010de8:	e0bff717 	ldw	r2,-36(fp)
 2010dec:	1025883a 	mov	r18,r2
 2010df0:	0027883a 	mov	r19,zero
 2010df4:	010003f4 	movhi	r4,15
 2010df8:	21109004 	addi	r4,r4,16960
 2010dfc:	e17ff817 	ldw	r5,-32(fp)
 2010e00:	200e2cc0 	call	200e2cc <__udivsi3>
 2010e04:	1021883a 	mov	r16,r2
 2010e08:	0023883a 	mov	r17,zero
 2010e0c:	9009883a 	mov	r4,r18
 2010e10:	980b883a 	mov	r5,r19
 2010e14:	800d883a 	mov	r6,r16
 2010e18:	880f883a 	mov	r7,r17
 2010e1c:	200d4480 	call	200d448 <__muldi3>
 2010e20:	1009883a 	mov	r4,r2
 2010e24:	180b883a 	mov	r5,r3
 2010e28:	2005883a 	mov	r2,r4
 2010e2c:	2807883a 	mov	r3,r5
 2010e30:	1009883a 	mov	r4,r2
 2010e34:	180b883a 	mov	r5,r3
 2010e38:	018003f4 	movhi	r6,15
 2010e3c:	31909004 	addi	r6,r6,16960
 2010e40:	000f883a 	mov	r7,zero
 2010e44:	200db940 	call	200db94 <__umoddi3>
 2010e48:	1009883a 	mov	r4,r2
 2010e4c:	180b883a 	mov	r5,r3
 2010e50:	2005883a 	mov	r2,r4
 2010e54:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 2010e58:	a085883a 	add	r2,r20,r2
 2010e5c:	1007883a 	mov	r3,r2
 2010e60:	e0bff917 	ldw	r2,-28(fp)
 2010e64:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2010e68:	00001406 	br	2010ebc <gettimeofday+0x160>
      if (ptimeval->tv_sec <= 0)
 2010e6c:	e0bff917 	ldw	r2,-28(fp)
 2010e70:	10800017 	ldw	r2,0(r2)
 2010e74:	00800516 	blt	zero,r2,2010e8c <gettimeofday+0x130>
      {
          ptimeval->tv_sec = 0;
 2010e78:	e0bff917 	ldw	r2,-28(fp)
 2010e7c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 2010e80:	e0bff917 	ldw	r2,-28(fp)
 2010e84:	10000115 	stw	zero,4(r2)
          break;
 2010e88:	00000f06 	br	2010ec8 <gettimeofday+0x16c>
      }
      else
      {
          ptimeval->tv_sec--;
 2010e8c:	e0bff917 	ldw	r2,-28(fp)
 2010e90:	10800017 	ldw	r2,0(r2)
 2010e94:	10ffffc4 	addi	r3,r2,-1
 2010e98:	e0bff917 	ldw	r2,-28(fp)
 2010e9c:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 2010ea0:	e0bff917 	ldw	r2,-28(fp)
 2010ea4:	10c00117 	ldw	r3,4(r2)
 2010ea8:	008003f4 	movhi	r2,15
 2010eac:	10909004 	addi	r2,r2,16960
 2010eb0:	1887883a 	add	r3,r3,r2
 2010eb4:	e0bff917 	ldw	r2,-28(fp)
 2010eb8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 2010ebc:	e0bff917 	ldw	r2,-28(fp)
 2010ec0:	10800117 	ldw	r2,4(r2)
 2010ec4:	103fe916 	blt	r2,zero,2010e6c <gettimeofday+0x110>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 2010ec8:	00000c06 	br	2010efc <gettimeofday+0x1a0>
      ptimeval->tv_sec++;
 2010ecc:	e0bff917 	ldw	r2,-28(fp)
 2010ed0:	10800017 	ldw	r2,0(r2)
 2010ed4:	10c00044 	addi	r3,r2,1
 2010ed8:	e0bff917 	ldw	r2,-28(fp)
 2010edc:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 2010ee0:	e0bff917 	ldw	r2,-28(fp)
 2010ee4:	10c00117 	ldw	r3,4(r2)
 2010ee8:	00bffc74 	movhi	r2,65521
 2010eec:	10af7004 	addi	r2,r2,-16960
 2010ef0:	1887883a 	add	r3,r3,r2
 2010ef4:	e0bff917 	ldw	r2,-28(fp)
 2010ef8:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 2010efc:	e0bff917 	ldw	r2,-28(fp)
 2010f00:	10c00117 	ldw	r3,4(r2)
 2010f04:	008003f4 	movhi	r2,15
 2010f08:	10908fc4 	addi	r2,r2,16959
 2010f0c:	10ffef16 	blt	r2,r3,2010ecc <gettimeofday+0x170>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 2010f10:	e0bff617 	ldw	r2,-40(fp)
 2010f14:	10000726 	beq	r2,zero,2010f34 <gettimeofday+0x1d8>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 2010f18:	d0e01d17 	ldw	r3,-32652(gp)
 2010f1c:	e0bff617 	ldw	r2,-40(fp)
 2010f20:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 2010f24:	d0a01e04 	addi	r2,gp,-32648
 2010f28:	10c00017 	ldw	r3,0(r2)
 2010f2c:	e0bff617 	ldw	r2,-40(fp)
 2010f30:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 2010f34:	0005883a 	mov	r2,zero
 2010f38:	00000106 	br	2010f40 <gettimeofday+0x1e4>
  }

  return -ENOTSUP;
 2010f3c:	00bfde84 	movi	r2,-134
}
 2010f40:	e6fffb04 	addi	sp,fp,-20
 2010f44:	dfc00617 	ldw	ra,24(sp)
 2010f48:	df000517 	ldw	fp,20(sp)
 2010f4c:	dd000417 	ldw	r20,16(sp)
 2010f50:	dcc00317 	ldw	r19,12(sp)
 2010f54:	dc800217 	ldw	r18,8(sp)
 2010f58:	dc400117 	ldw	r17,4(sp)
 2010f5c:	dc000017 	ldw	r16,0(sp)
 2010f60:	dec00704 	addi	sp,sp,28
 2010f64:	f800283a 	ret

02010f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010f68:	defffe04 	addi	sp,sp,-8
 2010f6c:	dfc00115 	stw	ra,4(sp)
 2010f70:	df000015 	stw	fp,0(sp)
 2010f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010f78:	008080b4 	movhi	r2,514
 2010f7c:	10aa7104 	addi	r2,r2,-22076
 2010f80:	10800017 	ldw	r2,0(r2)
 2010f84:	10000526 	beq	r2,zero,2010f9c <alt_get_errno+0x34>
 2010f88:	008080b4 	movhi	r2,514
 2010f8c:	10aa7104 	addi	r2,r2,-22076
 2010f90:	10800017 	ldw	r2,0(r2)
 2010f94:	103ee83a 	callr	r2
 2010f98:	00000206 	br	2010fa4 <alt_get_errno+0x3c>
 2010f9c:	008080b4 	movhi	r2,514
 2010fa0:	10aa7c04 	addi	r2,r2,-22032
}
 2010fa4:	e037883a 	mov	sp,fp
 2010fa8:	dfc00117 	ldw	ra,4(sp)
 2010fac:	df000017 	ldw	fp,0(sp)
 2010fb0:	dec00204 	addi	sp,sp,8
 2010fb4:	f800283a 	ret

02010fb8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2010fb8:	deffed04 	addi	sp,sp,-76
 2010fbc:	dfc01215 	stw	ra,72(sp)
 2010fc0:	df001115 	stw	fp,68(sp)
 2010fc4:	df001104 	addi	fp,sp,68
 2010fc8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2010fcc:	e0bfff17 	ldw	r2,-4(fp)
 2010fd0:	10000816 	blt	r2,zero,2010ff4 <isatty+0x3c>
 2010fd4:	e13fff17 	ldw	r4,-4(fp)
 2010fd8:	01400304 	movi	r5,12
 2010fdc:	200e2dc0 	call	200e2dc <__mulsi3>
 2010fe0:	1007883a 	mov	r3,r2
 2010fe4:	008080b4 	movhi	r2,514
 2010fe8:	10a5b004 	addi	r2,r2,-26944
 2010fec:	1885883a 	add	r2,r3,r2
 2010ff0:	00000106 	br	2010ff8 <isatty+0x40>
 2010ff4:	0005883a 	mov	r2,zero
 2010ff8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2010ffc:	e0bfef17 	ldw	r2,-68(fp)
 2011000:	10000e26 	beq	r2,zero,201103c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2011004:	e0bfef17 	ldw	r2,-68(fp)
 2011008:	10800017 	ldw	r2,0(r2)
 201100c:	10800817 	ldw	r2,32(r2)
 2011010:	1000021e 	bne	r2,zero,201101c <isatty+0x64>
    {
      return 1;
 2011014:	00800044 	movi	r2,1
 2011018:	00000d06 	br	2011050 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 201101c:	e0bff004 	addi	r2,fp,-64
 2011020:	e13fff17 	ldw	r4,-4(fp)
 2011024:	100b883a 	mov	r5,r2
 2011028:	2010ca40 	call	2010ca4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 201102c:	e0bff117 	ldw	r2,-60(fp)
 2011030:	10880020 	cmpeqi	r2,r2,8192
 2011034:	10803fcc 	andi	r2,r2,255
 2011038:	00000506 	br	2011050 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 201103c:	2010f680 	call	2010f68 <alt_get_errno>
 2011040:	1007883a 	mov	r3,r2
 2011044:	00801444 	movi	r2,81
 2011048:	18800015 	stw	r2,0(r3)
    return 0;
 201104c:	0005883a 	mov	r2,zero
  }
}
 2011050:	e037883a 	mov	sp,fp
 2011054:	dfc00117 	ldw	ra,4(sp)
 2011058:	df000017 	ldw	fp,0(sp)
 201105c:	dec00204 	addi	sp,sp,8
 2011060:	f800283a 	ret

02011064 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011064:	defffe04 	addi	sp,sp,-8
 2011068:	dfc00115 	stw	ra,4(sp)
 201106c:	df000015 	stw	fp,0(sp)
 2011070:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2011074:	008080b4 	movhi	r2,514
 2011078:	10aa7104 	addi	r2,r2,-22076
 201107c:	10800017 	ldw	r2,0(r2)
 2011080:	10000526 	beq	r2,zero,2011098 <alt_get_errno+0x34>
 2011084:	008080b4 	movhi	r2,514
 2011088:	10aa7104 	addi	r2,r2,-22076
 201108c:	10800017 	ldw	r2,0(r2)
 2011090:	103ee83a 	callr	r2
 2011094:	00000206 	br	20110a0 <alt_get_errno+0x3c>
 2011098:	008080b4 	movhi	r2,514
 201109c:	10aa7c04 	addi	r2,r2,-22032
}
 20110a0:	e037883a 	mov	sp,fp
 20110a4:	dfc00117 	ldw	ra,4(sp)
 20110a8:	df000017 	ldw	fp,0(sp)
 20110ac:	dec00204 	addi	sp,sp,8
 20110b0:	f800283a 	ret

020110b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 20110b4:	defff904 	addi	sp,sp,-28
 20110b8:	dfc00615 	stw	ra,24(sp)
 20110bc:	df000515 	stw	fp,20(sp)
 20110c0:	df000504 	addi	fp,sp,20
 20110c4:	e13ffd15 	stw	r4,-12(fp)
 20110c8:	e17ffe15 	stw	r5,-8(fp)
 20110cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 20110d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20110d4:	e0bffd17 	ldw	r2,-12(fp)
 20110d8:	10000816 	blt	r2,zero,20110fc <lseek+0x48>
 20110dc:	e13ffd17 	ldw	r4,-12(fp)
 20110e0:	01400304 	movi	r5,12
 20110e4:	200e2dc0 	call	200e2dc <__mulsi3>
 20110e8:	1007883a 	mov	r3,r2
 20110ec:	008080b4 	movhi	r2,514
 20110f0:	10a5b004 	addi	r2,r2,-26944
 20110f4:	1885883a 	add	r2,r3,r2
 20110f8:	00000106 	br	2011100 <lseek+0x4c>
 20110fc:	0005883a 	mov	r2,zero
 2011100:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2011104:	e0bffc17 	ldw	r2,-16(fp)
 2011108:	10001026 	beq	r2,zero,201114c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 201110c:	e0bffc17 	ldw	r2,-16(fp)
 2011110:	10800017 	ldw	r2,0(r2)
 2011114:	10800717 	ldw	r2,28(r2)
 2011118:	10000926 	beq	r2,zero,2011140 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 201111c:	e0bffc17 	ldw	r2,-16(fp)
 2011120:	10800017 	ldw	r2,0(r2)
 2011124:	10800717 	ldw	r2,28(r2)
 2011128:	e13ffc17 	ldw	r4,-16(fp)
 201112c:	e17ffe17 	ldw	r5,-8(fp)
 2011130:	e1bfff17 	ldw	r6,-4(fp)
 2011134:	103ee83a 	callr	r2
 2011138:	e0bffb15 	stw	r2,-20(fp)
 201113c:	00000506 	br	2011154 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2011140:	00bfde84 	movi	r2,-134
 2011144:	e0bffb15 	stw	r2,-20(fp)
 2011148:	00000206 	br	2011154 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 201114c:	00bfebc4 	movi	r2,-81
 2011150:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2011154:	e0bffb17 	ldw	r2,-20(fp)
 2011158:	1000070e 	bge	r2,zero,2011178 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 201115c:	20110640 	call	2011064 <alt_get_errno>
 2011160:	1007883a 	mov	r3,r2
 2011164:	e0bffb17 	ldw	r2,-20(fp)
 2011168:	0085c83a 	sub	r2,zero,r2
 201116c:	18800015 	stw	r2,0(r3)
    rc = -1;
 2011170:	00bfffc4 	movi	r2,-1
 2011174:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2011178:	e0bffb17 	ldw	r2,-20(fp)
}
 201117c:	e037883a 	mov	sp,fp
 2011180:	dfc00117 	ldw	ra,4(sp)
 2011184:	df000017 	ldw	fp,0(sp)
 2011188:	dec00204 	addi	sp,sp,8
 201118c:	f800283a 	ret

02011190 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2011190:	defffd04 	addi	sp,sp,-12
 2011194:	dfc00215 	stw	ra,8(sp)
 2011198:	df000115 	stw	fp,4(sp)
 201119c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20111a0:	0009883a 	mov	r4,zero
 20111a4:	20118200 	call	2011820 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20111a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20111ac:	20118540 	call	2011854 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20111b0:	010080b4 	movhi	r4,514
 20111b4:	21236e04 	addi	r4,r4,-29256
 20111b8:	014080b4 	movhi	r5,514
 20111bc:	29636e04 	addi	r5,r5,-29256
 20111c0:	018080b4 	movhi	r6,514
 20111c4:	31a36e04 	addi	r6,r6,-29256
 20111c8:	2013de40 	call	2013de4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 20111cc:	20138c40 	call	20138c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 20111d0:	01008074 	movhi	r4,513
 20111d4:	210e4804 	addi	r4,r4,14624
 20111d8:	20146380 	call	2014638 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 20111dc:	d1202117 	ldw	r4,-32636(gp)
 20111e0:	d0e02217 	ldw	r3,-32632(gp)
 20111e4:	d0a02317 	ldw	r2,-32628(gp)
 20111e8:	180b883a 	mov	r5,r3
 20111ec:	100d883a 	mov	r6,r2
 20111f0:	20002640 	call	2000264 <main>
 20111f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 20111f8:	01000044 	movi	r4,1
 20111fc:	2010b500 	call	2010b50 <close>
  exit (result);
 2011200:	e13fff17 	ldw	r4,-4(fp)
 2011204:	201464c0 	call	201464c <exit>

02011208 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2011208:	defffe04 	addi	sp,sp,-8
 201120c:	df000115 	stw	fp,4(sp)
 2011210:	df000104 	addi	fp,sp,4
 2011214:	e13fff15 	stw	r4,-4(fp)
}
 2011218:	e037883a 	mov	sp,fp
 201121c:	df000017 	ldw	fp,0(sp)
 2011220:	dec00104 	addi	sp,sp,4
 2011224:	f800283a 	ret

02011228 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2011228:	defffe04 	addi	sp,sp,-8
 201122c:	df000115 	stw	fp,4(sp)
 2011230:	df000104 	addi	fp,sp,4
 2011234:	e13fff15 	stw	r4,-4(fp)
}
 2011238:	e037883a 	mov	sp,fp
 201123c:	df000017 	ldw	fp,0(sp)
 2011240:	dec00104 	addi	sp,sp,4
 2011244:	f800283a 	ret

02011248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011248:	defffe04 	addi	sp,sp,-8
 201124c:	dfc00115 	stw	ra,4(sp)
 2011250:	df000015 	stw	fp,0(sp)
 2011254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2011258:	008080b4 	movhi	r2,514
 201125c:	10aa7104 	addi	r2,r2,-22076
 2011260:	10800017 	ldw	r2,0(r2)
 2011264:	10000526 	beq	r2,zero,201127c <alt_get_errno+0x34>
 2011268:	008080b4 	movhi	r2,514
 201126c:	10aa7104 	addi	r2,r2,-22076
 2011270:	10800017 	ldw	r2,0(r2)
 2011274:	103ee83a 	callr	r2
 2011278:	00000206 	br	2011284 <alt_get_errno+0x3c>
 201127c:	008080b4 	movhi	r2,514
 2011280:	10aa7c04 	addi	r2,r2,-22032
}
 2011284:	e037883a 	mov	sp,fp
 2011288:	dfc00117 	ldw	ra,4(sp)
 201128c:	df000017 	ldw	fp,0(sp)
 2011290:	dec00204 	addi	sp,sp,8
 2011294:	f800283a 	ret

02011298 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2011298:	defff904 	addi	sp,sp,-28
 201129c:	dfc00615 	stw	ra,24(sp)
 20112a0:	df000515 	stw	fp,20(sp)
 20112a4:	df000504 	addi	fp,sp,20
 20112a8:	e13ffd15 	stw	r4,-12(fp)
 20112ac:	e17ffe15 	stw	r5,-8(fp)
 20112b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20112b4:	e0bffd17 	ldw	r2,-12(fp)
 20112b8:	10000816 	blt	r2,zero,20112dc <read+0x44>
 20112bc:	e13ffd17 	ldw	r4,-12(fp)
 20112c0:	01400304 	movi	r5,12
 20112c4:	200e2dc0 	call	200e2dc <__mulsi3>
 20112c8:	1007883a 	mov	r3,r2
 20112cc:	008080b4 	movhi	r2,514
 20112d0:	10a5b004 	addi	r2,r2,-26944
 20112d4:	1885883a 	add	r2,r3,r2
 20112d8:	00000106 	br	20112e0 <read+0x48>
 20112dc:	0005883a 	mov	r2,zero
 20112e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 20112e4:	e0bffb17 	ldw	r2,-20(fp)
 20112e8:	10002226 	beq	r2,zero,2011374 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 20112ec:	e0bffb17 	ldw	r2,-20(fp)
 20112f0:	10800217 	ldw	r2,8(r2)
 20112f4:	108000cc 	andi	r2,r2,3
 20112f8:	10800060 	cmpeqi	r2,r2,1
 20112fc:	1000181e 	bne	r2,zero,2011360 <read+0xc8>
        (fd->dev->read))
 2011300:	e0bffb17 	ldw	r2,-20(fp)
 2011304:	10800017 	ldw	r2,0(r2)
 2011308:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 201130c:	10001426 	beq	r2,zero,2011360 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2011310:	e0bffb17 	ldw	r2,-20(fp)
 2011314:	10800017 	ldw	r2,0(r2)
 2011318:	10800517 	ldw	r2,20(r2)
 201131c:	e0ffff17 	ldw	r3,-4(fp)
 2011320:	e13ffb17 	ldw	r4,-20(fp)
 2011324:	e17ffe17 	ldw	r5,-8(fp)
 2011328:	180d883a 	mov	r6,r3
 201132c:	103ee83a 	callr	r2
 2011330:	e0bffc15 	stw	r2,-16(fp)
 2011334:	e0bffc17 	ldw	r2,-16(fp)
 2011338:	1000070e 	bge	r2,zero,2011358 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 201133c:	20112480 	call	2011248 <alt_get_errno>
 2011340:	1007883a 	mov	r3,r2
 2011344:	e0bffc17 	ldw	r2,-16(fp)
 2011348:	0085c83a 	sub	r2,zero,r2
 201134c:	18800015 	stw	r2,0(r3)
          return -1;
 2011350:	00bfffc4 	movi	r2,-1
 2011354:	00000c06 	br	2011388 <read+0xf0>
        }
        return rval;
 2011358:	e0bffc17 	ldw	r2,-16(fp)
 201135c:	00000a06 	br	2011388 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2011360:	20112480 	call	2011248 <alt_get_errno>
 2011364:	1007883a 	mov	r3,r2
 2011368:	00800344 	movi	r2,13
 201136c:	18800015 	stw	r2,0(r3)
 2011370:	00000406 	br	2011384 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2011374:	20112480 	call	2011248 <alt_get_errno>
 2011378:	1007883a 	mov	r3,r2
 201137c:	00801444 	movi	r2,81
 2011380:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2011384:	00bfffc4 	movi	r2,-1
}
 2011388:	e037883a 	mov	sp,fp
 201138c:	dfc00117 	ldw	ra,4(sp)
 2011390:	df000017 	ldw	fp,0(sp)
 2011394:	dec00204 	addi	sp,sp,8
 2011398:	f800283a 	ret

0201139c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 201139c:	defffc04 	addi	sp,sp,-16
 20113a0:	dfc00315 	stw	ra,12(sp)
 20113a4:	df000215 	stw	fp,8(sp)
 20113a8:	dc000115 	stw	r16,4(sp)
 20113ac:	df000204 	addi	fp,sp,8
 20113b0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 20113b4:	e0bffe17 	ldw	r2,-8(fp)
 20113b8:	108000d0 	cmplti	r2,r2,3
 20113bc:	1000111e 	bne	r2,zero,2011404 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 20113c0:	040080b4 	movhi	r16,514
 20113c4:	8425b004 	addi	r16,r16,-26944
 20113c8:	e0bffe17 	ldw	r2,-8(fp)
 20113cc:	1009883a 	mov	r4,r2
 20113d0:	01400304 	movi	r5,12
 20113d4:	200e2dc0 	call	200e2dc <__mulsi3>
 20113d8:	10800204 	addi	r2,r2,8
 20113dc:	8085883a 	add	r2,r16,r2
 20113e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 20113e4:	040080b4 	movhi	r16,514
 20113e8:	8425b004 	addi	r16,r16,-26944
 20113ec:	e0bffe17 	ldw	r2,-8(fp)
 20113f0:	1009883a 	mov	r4,r2
 20113f4:	01400304 	movi	r5,12
 20113f8:	200e2dc0 	call	200e2dc <__mulsi3>
 20113fc:	8085883a 	add	r2,r16,r2
 2011400:	10000015 	stw	zero,0(r2)
  }
}
 2011404:	e6ffff04 	addi	sp,fp,-4
 2011408:	dfc00217 	ldw	ra,8(sp)
 201140c:	df000117 	ldw	fp,4(sp)
 2011410:	dc000017 	ldw	r16,0(sp)
 2011414:	dec00304 	addi	sp,sp,12
 2011418:	f800283a 	ret

0201141c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 201141c:	defff904 	addi	sp,sp,-28
 2011420:	df000615 	stw	fp,24(sp)
 2011424:	df000604 	addi	fp,sp,24
 2011428:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201142c:	0005303a 	rdctl	r2,status
 2011430:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011434:	e0fffc17 	ldw	r3,-16(fp)
 2011438:	00bfff84 	movi	r2,-2
 201143c:	1884703a 	and	r2,r3,r2
 2011440:	1001703a 	wrctl	status,r2
  
  return context;
 2011444:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2011448:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 201144c:	d0a00c17 	ldw	r2,-32720(gp)
 2011450:	10c000c4 	addi	r3,r2,3
 2011454:	00bfff04 	movi	r2,-4
 2011458:	1884703a 	and	r2,r3,r2
 201145c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2011460:	d0e00c17 	ldw	r3,-32720(gp)
 2011464:	e0bfff17 	ldw	r2,-4(fp)
 2011468:	1887883a 	add	r3,r3,r2
 201146c:	00810034 	movhi	r2,1024
 2011470:	10800004 	addi	r2,r2,0
 2011474:	10c0062e 	bgeu	r2,r3,2011490 <sbrk+0x74>
 2011478:	e0bffa17 	ldw	r2,-24(fp)
 201147c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011480:	e0bffd17 	ldw	r2,-12(fp)
 2011484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2011488:	00bfffc4 	movi	r2,-1
 201148c:	00000b06 	br	20114bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2011490:	d0a00c17 	ldw	r2,-32720(gp)
 2011494:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 2011498:	d0e00c17 	ldw	r3,-32720(gp)
 201149c:	e0bfff17 	ldw	r2,-4(fp)
 20114a0:	1885883a 	add	r2,r3,r2
 20114a4:	d0a00c15 	stw	r2,-32720(gp)
 20114a8:	e0bffa17 	ldw	r2,-24(fp)
 20114ac:	e0bffe15 	stw	r2,-8(fp)
 20114b0:	e0bffe17 	ldw	r2,-8(fp)
 20114b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20114b8:	e0bffb17 	ldw	r2,-20(fp)
} 
 20114bc:	e037883a 	mov	sp,fp
 20114c0:	df000017 	ldw	fp,0(sp)
 20114c4:	dec00104 	addi	sp,sp,4
 20114c8:	f800283a 	ret

020114cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20114cc:	defffa04 	addi	sp,sp,-24
 20114d0:	df000515 	stw	fp,20(sp)
 20114d4:	df000504 	addi	fp,sp,20
 20114d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20114dc:	0005303a 	rdctl	r2,status
 20114e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20114e4:	e0fffc17 	ldw	r3,-16(fp)
 20114e8:	00bfff84 	movi	r2,-2
 20114ec:	1884703a 	and	r2,r3,r2
 20114f0:	1001703a 	wrctl	status,r2
  
  return context;
 20114f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 20114f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 20114fc:	e0bfff17 	ldw	r2,-4(fp)
 2011500:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2011504:	e0bffd17 	ldw	r2,-12(fp)
 2011508:	10800017 	ldw	r2,0(r2)
 201150c:	e0fffd17 	ldw	r3,-12(fp)
 2011510:	18c00117 	ldw	r3,4(r3)
 2011514:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2011518:	e0bffd17 	ldw	r2,-12(fp)
 201151c:	10800117 	ldw	r2,4(r2)
 2011520:	e0fffd17 	ldw	r3,-12(fp)
 2011524:	18c00017 	ldw	r3,0(r3)
 2011528:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 201152c:	e0bffd17 	ldw	r2,-12(fp)
 2011530:	e0fffd17 	ldw	r3,-12(fp)
 2011534:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2011538:	e0bffd17 	ldw	r2,-12(fp)
 201153c:	e0fffd17 	ldw	r3,-12(fp)
 2011540:	10c00015 	stw	r3,0(r2)
 2011544:	e0bffb17 	ldw	r2,-20(fp)
 2011548:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201154c:	e0bffe17 	ldw	r2,-8(fp)
 2011550:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2011554:	e037883a 	mov	sp,fp
 2011558:	df000017 	ldw	fp,0(sp)
 201155c:	dec00104 	addi	sp,sp,4
 2011560:	f800283a 	ret

02011564 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2011564:	defffb04 	addi	sp,sp,-20
 2011568:	dfc00415 	stw	ra,16(sp)
 201156c:	df000315 	stw	fp,12(sp)
 2011570:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2011574:	d0a00d17 	ldw	r2,-32716(gp)
 2011578:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 201157c:	d0a02517 	ldw	r2,-32620(gp)
 2011580:	10800044 	addi	r2,r2,1
 2011584:	d0a02515 	stw	r2,-32620(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2011588:	00002e06 	br	2011644 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 201158c:	e0bffd17 	ldw	r2,-12(fp)
 2011590:	10800017 	ldw	r2,0(r2)
 2011594:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2011598:	e0bffd17 	ldw	r2,-12(fp)
 201159c:	10800403 	ldbu	r2,16(r2)
 20115a0:	10803fcc 	andi	r2,r2,255
 20115a4:	10000426 	beq	r2,zero,20115b8 <alt_tick+0x54>
 20115a8:	d0a02517 	ldw	r2,-32620(gp)
 20115ac:	1000021e 	bne	r2,zero,20115b8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 20115b0:	e0bffd17 	ldw	r2,-12(fp)
 20115b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20115b8:	e0bffd17 	ldw	r2,-12(fp)
 20115bc:	10800217 	ldw	r2,8(r2)
 20115c0:	d0e02517 	ldw	r3,-32620(gp)
 20115c4:	18801d36 	bltu	r3,r2,201163c <alt_tick+0xd8>
 20115c8:	e0bffd17 	ldw	r2,-12(fp)
 20115cc:	10800403 	ldbu	r2,16(r2)
 20115d0:	10803fcc 	andi	r2,r2,255
 20115d4:	1000191e 	bne	r2,zero,201163c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 20115d8:	e0bffd17 	ldw	r2,-12(fp)
 20115dc:	10800317 	ldw	r2,12(r2)
 20115e0:	e0fffd17 	ldw	r3,-12(fp)
 20115e4:	18c00517 	ldw	r3,20(r3)
 20115e8:	1809883a 	mov	r4,r3
 20115ec:	103ee83a 	callr	r2
 20115f0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20115f4:	e0bfff17 	ldw	r2,-4(fp)
 20115f8:	1000031e 	bne	r2,zero,2011608 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 20115fc:	e13ffd17 	ldw	r4,-12(fp)
 2011600:	20114cc0 	call	20114cc <alt_alarm_stop>
 2011604:	00000d06 	br	201163c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2011608:	e0bffd17 	ldw	r2,-12(fp)
 201160c:	10c00217 	ldw	r3,8(r2)
 2011610:	e0bfff17 	ldw	r2,-4(fp)
 2011614:	1887883a 	add	r3,r3,r2
 2011618:	e0bffd17 	ldw	r2,-12(fp)
 201161c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2011620:	e0bffd17 	ldw	r2,-12(fp)
 2011624:	10c00217 	ldw	r3,8(r2)
 2011628:	d0a02517 	ldw	r2,-32620(gp)
 201162c:	1880032e 	bgeu	r3,r2,201163c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2011630:	e0bffd17 	ldw	r2,-12(fp)
 2011634:	00c00044 	movi	r3,1
 2011638:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 201163c:	e0bffe17 	ldw	r2,-8(fp)
 2011640:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2011644:	e0fffd17 	ldw	r3,-12(fp)
 2011648:	d0a00d04 	addi	r2,gp,-32716
 201164c:	18bfcf1e 	bne	r3,r2,201158c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2011650:	0001883a 	nop
}
 2011654:	e037883a 	mov	sp,fp
 2011658:	dfc00117 	ldw	ra,4(sp)
 201165c:	df000017 	ldw	fp,0(sp)
 2011660:	dec00204 	addi	sp,sp,8
 2011664:	f800283a 	ret

02011668 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2011668:	defffd04 	addi	sp,sp,-12
 201166c:	dfc00215 	stw	ra,8(sp)
 2011670:	df000115 	stw	fp,4(sp)
 2011674:	df000104 	addi	fp,sp,4
 2011678:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 201167c:	e13fff17 	ldw	r4,-4(fp)
 2011680:	20136780 	call	2013678 <alt_busy_sleep>
}
 2011684:	e037883a 	mov	sp,fp
 2011688:	dfc00117 	ldw	ra,4(sp)
 201168c:	df000017 	ldw	fp,0(sp)
 2011690:	dec00204 	addi	sp,sp,8
 2011694:	f800283a 	ret

02011698 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011698:	defffe04 	addi	sp,sp,-8
 201169c:	dfc00115 	stw	ra,4(sp)
 20116a0:	df000015 	stw	fp,0(sp)
 20116a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20116a8:	008080b4 	movhi	r2,514
 20116ac:	10aa7104 	addi	r2,r2,-22076
 20116b0:	10800017 	ldw	r2,0(r2)
 20116b4:	10000526 	beq	r2,zero,20116cc <alt_get_errno+0x34>
 20116b8:	008080b4 	movhi	r2,514
 20116bc:	10aa7104 	addi	r2,r2,-22076
 20116c0:	10800017 	ldw	r2,0(r2)
 20116c4:	103ee83a 	callr	r2
 20116c8:	00000206 	br	20116d4 <alt_get_errno+0x3c>
 20116cc:	008080b4 	movhi	r2,514
 20116d0:	10aa7c04 	addi	r2,r2,-22032
}
 20116d4:	e037883a 	mov	sp,fp
 20116d8:	dfc00117 	ldw	ra,4(sp)
 20116dc:	df000017 	ldw	fp,0(sp)
 20116e0:	dec00204 	addi	sp,sp,8
 20116e4:	f800283a 	ret

020116e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 20116e8:	defff904 	addi	sp,sp,-28
 20116ec:	dfc00615 	stw	ra,24(sp)
 20116f0:	df000515 	stw	fp,20(sp)
 20116f4:	df000504 	addi	fp,sp,20
 20116f8:	e13ffd15 	stw	r4,-12(fp)
 20116fc:	e17ffe15 	stw	r5,-8(fp)
 2011700:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011704:	e0bffd17 	ldw	r2,-12(fp)
 2011708:	10000816 	blt	r2,zero,201172c <write+0x44>
 201170c:	e13ffd17 	ldw	r4,-12(fp)
 2011710:	01400304 	movi	r5,12
 2011714:	200e2dc0 	call	200e2dc <__mulsi3>
 2011718:	1007883a 	mov	r3,r2
 201171c:	008080b4 	movhi	r2,514
 2011720:	10a5b004 	addi	r2,r2,-26944
 2011724:	1885883a 	add	r2,r3,r2
 2011728:	00000106 	br	2011730 <write+0x48>
 201172c:	0005883a 	mov	r2,zero
 2011730:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2011734:	e0bffb17 	ldw	r2,-20(fp)
 2011738:	10002126 	beq	r2,zero,20117c0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 201173c:	e0bffb17 	ldw	r2,-20(fp)
 2011740:	10800217 	ldw	r2,8(r2)
 2011744:	108000cc 	andi	r2,r2,3
 2011748:	10001826 	beq	r2,zero,20117ac <write+0xc4>
 201174c:	e0bffb17 	ldw	r2,-20(fp)
 2011750:	10800017 	ldw	r2,0(r2)
 2011754:	10800617 	ldw	r2,24(r2)
 2011758:	10001426 	beq	r2,zero,20117ac <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 201175c:	e0bffb17 	ldw	r2,-20(fp)
 2011760:	10800017 	ldw	r2,0(r2)
 2011764:	10800617 	ldw	r2,24(r2)
 2011768:	e0ffff17 	ldw	r3,-4(fp)
 201176c:	e13ffb17 	ldw	r4,-20(fp)
 2011770:	e17ffe17 	ldw	r5,-8(fp)
 2011774:	180d883a 	mov	r6,r3
 2011778:	103ee83a 	callr	r2
 201177c:	e0bffc15 	stw	r2,-16(fp)
 2011780:	e0bffc17 	ldw	r2,-16(fp)
 2011784:	1000070e 	bge	r2,zero,20117a4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 2011788:	20116980 	call	2011698 <alt_get_errno>
 201178c:	1007883a 	mov	r3,r2
 2011790:	e0bffc17 	ldw	r2,-16(fp)
 2011794:	0085c83a 	sub	r2,zero,r2
 2011798:	18800015 	stw	r2,0(r3)
        return -1;
 201179c:	00bfffc4 	movi	r2,-1
 20117a0:	00000c06 	br	20117d4 <write+0xec>
      }
      return rval;
 20117a4:	e0bffc17 	ldw	r2,-16(fp)
 20117a8:	00000a06 	br	20117d4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20117ac:	20116980 	call	2011698 <alt_get_errno>
 20117b0:	1007883a 	mov	r3,r2
 20117b4:	00800344 	movi	r2,13
 20117b8:	18800015 	stw	r2,0(r3)
 20117bc:	00000406 	br	20117d0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20117c0:	20116980 	call	2011698 <alt_get_errno>
 20117c4:	1007883a 	mov	r3,r2
 20117c8:	00801444 	movi	r2,81
 20117cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 20117d0:	00bfffc4 	movi	r2,-1
}
 20117d4:	e037883a 	mov	sp,fp
 20117d8:	dfc00117 	ldw	ra,4(sp)
 20117dc:	df000017 	ldw	fp,0(sp)
 20117e0:	dec00204 	addi	sp,sp,8
 20117e4:	f800283a 	ret

020117e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20117e8:	defffd04 	addi	sp,sp,-12
 20117ec:	dfc00215 	stw	ra,8(sp)
 20117f0:	df000115 	stw	fp,4(sp)
 20117f4:	df000104 	addi	fp,sp,4
 20117f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20117fc:	e13fff17 	ldw	r4,-4(fp)
 2011800:	014080b4 	movhi	r5,514
 2011804:	296a6e04 	addi	r5,r5,-22088
 2011808:	20138200 	call	2013820 <alt_dev_llist_insert>
}
 201180c:	e037883a 	mov	sp,fp
 2011810:	dfc00117 	ldw	ra,4(sp)
 2011814:	df000017 	ldw	fp,0(sp)
 2011818:	dec00204 	addi	sp,sp,8
 201181c:	f800283a 	ret

02011820 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2011820:	defffd04 	addi	sp,sp,-12
 2011824:	dfc00215 	stw	ra,8(sp)
 2011828:	df000115 	stw	fp,4(sp)
 201182c:	df000104 	addi	fp,sp,4
 2011830:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 2011834:	20141000 	call	2014100 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2011838:	00800044 	movi	r2,1
 201183c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2011840:	e037883a 	mov	sp,fp
 2011844:	dfc00117 	ldw	ra,4(sp)
 2011848:	df000017 	ldw	fp,0(sp)
 201184c:	dec00204 	addi	sp,sp,8
 2011850:	f800283a 	ret

02011854 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2011854:	defffe04 	addi	sp,sp,-8
 2011858:	dfc00115 	stw	ra,4(sp)
 201185c:	df000015 	stw	fp,0(sp)
 2011860:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 2011864:	01010034 	movhi	r4,1024
 2011868:	21080004 	addi	r4,r4,8192
 201186c:	000b883a 	mov	r5,zero
 2011870:	01800044 	movi	r6,1
 2011874:	01c0fa04 	movi	r7,1000
 2011878:	2012e840 	call	2012e84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 201187c:	010080b4 	movhi	r4,514
 2011880:	21261004 	addi	r4,r4,-26560
 2011884:	20119040 	call	2011904 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 2011888:	010080b4 	movhi	r4,514
 201188c:	21264d04 	addi	r4,r4,-26316
 2011890:	000b883a 	mov	r5,zero
 2011894:	01800084 	movi	r6,2
 2011898:	20125280 	call	2012528 <altera_avalon_jtag_uart_init>
 201189c:	010080b4 	movhi	r4,514
 20118a0:	21264304 	addi	r4,r4,-26356
 20118a4:	20117e80 	call	20117e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
 20118a8:	0001883a 	nop
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
 20118ac:	010080b4 	movhi	r4,514
 20118b0:	212a5b04 	addi	r4,r4,-22164
 20118b4:	20117e80 	call	20117e8 <alt_dev_reg>
}
 20118b8:	e037883a 	mov	sp,fp
 20118bc:	dfc00117 	ldw	ra,4(sp)
 20118c0:	df000017 	ldw	fp,0(sp)
 20118c4:	dec00204 	addi	sp,sp,8
 20118c8:	f800283a 	ret

020118cc <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 20118cc:	defffd04 	addi	sp,sp,-12
 20118d0:	dfc00215 	stw	ra,8(sp)
 20118d4:	df000115 	stw	fp,4(sp)
 20118d8:	df000104 	addi	fp,sp,4
 20118dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 20118e0:	e13fff17 	ldw	r4,-4(fp)
 20118e4:	014080b4 	movhi	r5,514
 20118e8:	296a7504 	addi	r5,r5,-22060
 20118ec:	20138200 	call	2013820 <alt_dev_llist_insert>
}
 20118f0:	e037883a 	mov	sp,fp
 20118f4:	dfc00117 	ldw	ra,4(sp)
 20118f8:	df000017 	ldw	fp,0(sp)
 20118fc:	dec00204 	addi	sp,sp,8
 2011900:	f800283a 	ret

02011904 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2011904:	defffc04 	addi	sp,sp,-16
 2011908:	dfc00315 	stw	ra,12(sp)
 201190c:	df000215 	stw	fp,8(sp)
 2011910:	df000204 	addi	fp,sp,8
 2011914:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2011918:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 201191c:	e13fff17 	ldw	r4,-4(fp)
 2011920:	20119580 	call	2011958 <alt_epcs_flash_query>
 2011924:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2011928:	e0bffe17 	ldw	r2,-8(fp)
 201192c:	1000041e 	bne	r2,zero,2011940 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2011930:	e0bfff17 	ldw	r2,-4(fp)
 2011934:	1009883a 	mov	r4,r2
 2011938:	20118cc0 	call	20118cc <alt_flash_device_register>
 201193c:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2011940:	e0bffe17 	ldw	r2,-8(fp)
}
 2011944:	e037883a 	mov	sp,fp
 2011948:	dfc00117 	ldw	ra,4(sp)
 201194c:	df000017 	ldw	fp,0(sp)
 2011950:	dec00204 	addi	sp,sp,8
 2011954:	f800283a 	ret

02011958 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2011958:	defffc04 	addi	sp,sp,-16
 201195c:	dfc00315 	stw	ra,12(sp)
 2011960:	df000215 	stw	fp,8(sp)
 2011964:	df000204 	addi	fp,sp,8
 2011968:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 201196c:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2011970:	e0bfff17 	ldw	r2,-4(fp)
 2011974:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2011978:	e0bfff17 	ldw	r2,-4(fp)
 201197c:	10802e17 	ldw	r2,184(r2)
 2011980:	1009883a 	mov	r4,r2
 2011984:	20133980 	call	2013398 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2011988:	10c03fcc 	andi	r3,r2,255
 201198c:	e0bfff17 	ldw	r2,-4(fp)
 2011990:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2011994:	e0bfff17 	ldw	r2,-4(fp)
 2011998:	10803017 	ldw	r2,192(r2)
 201199c:	10800598 	cmpnei	r2,r2,22
 20119a0:	10000a1e 	bne	r2,zero,20119cc <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 20119a4:	e0bfff17 	ldw	r2,-4(fp)
 20119a8:	00c02034 	movhi	r3,128
 20119ac:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 20119b0:	e0bfff17 	ldw	r2,-4(fp)
 20119b4:	00c02004 	movi	r3,128
 20119b8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20119bc:	e0bfff17 	ldw	r2,-4(fp)
 20119c0:	00c00074 	movhi	r3,1
 20119c4:	10c01015 	stw	r3,64(r2)
 20119c8:	0000ce06 	br	2011d04 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 20119cc:	e0bfff17 	ldw	r2,-4(fp)
 20119d0:	10803017 	ldw	r2,192(r2)
 20119d4:	10800518 	cmpnei	r2,r2,20
 20119d8:	10000a1e 	bne	r2,zero,2011a04 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 20119dc:	e0bfff17 	ldw	r2,-4(fp)
 20119e0:	00c00834 	movhi	r3,32
 20119e4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 20119e8:	e0bfff17 	ldw	r2,-4(fp)
 20119ec:	00c00804 	movi	r3,32
 20119f0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20119f4:	e0bfff17 	ldw	r2,-4(fp)
 20119f8:	00c00074 	movhi	r3,1
 20119fc:	10c01015 	stw	r3,64(r2)
 2011a00:	0000c006 	br	2011d04 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2011a04:	e0bfff17 	ldw	r2,-4(fp)
 2011a08:	10803017 	ldw	r2,192(r2)
 2011a0c:	108004d8 	cmpnei	r2,r2,19
 2011a10:	10000a1e 	bne	r2,zero,2011a3c <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2011a14:	e0bfff17 	ldw	r2,-4(fp)
 2011a18:	00c00434 	movhi	r3,16
 2011a1c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 2011a20:	e0bfff17 	ldw	r2,-4(fp)
 2011a24:	00c00404 	movi	r3,16
 2011a28:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2011a2c:	e0bfff17 	ldw	r2,-4(fp)
 2011a30:	00c00074 	movhi	r3,1
 2011a34:	10c01015 	stw	r3,64(r2)
 2011a38:	0000b206 	br	2011d04 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2011a3c:	e0bfff17 	ldw	r2,-4(fp)
 2011a40:	10803017 	ldw	r2,192(r2)
 2011a44:	10800498 	cmpnei	r2,r2,18
 2011a48:	10000a1e 	bne	r2,zero,2011a74 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2011a4c:	e0bfff17 	ldw	r2,-4(fp)
 2011a50:	00c00234 	movhi	r3,8
 2011a54:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 2011a58:	e0bfff17 	ldw	r2,-4(fp)
 2011a5c:	00c00204 	movi	r3,8
 2011a60:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2011a64:	e0bfff17 	ldw	r2,-4(fp)
 2011a68:	00c00074 	movhi	r3,1
 2011a6c:	10c01015 	stw	r3,64(r2)
 2011a70:	0000a406 	br	2011d04 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2011a74:	e0bfff17 	ldw	r2,-4(fp)
 2011a78:	10803017 	ldw	r2,192(r2)
 2011a7c:	10800418 	cmpnei	r2,r2,16
 2011a80:	10000a1e 	bne	r2,zero,2011aac <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2011a84:	e0bfff17 	ldw	r2,-4(fp)
 2011a88:	00c000b4 	movhi	r3,2
 2011a8c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2011a90:	e0bfff17 	ldw	r2,-4(fp)
 2011a94:	00c00104 	movi	r3,4
 2011a98:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2011a9c:	e0bfff17 	ldw	r2,-4(fp)
 2011aa0:	00e00014 	movui	r3,32768
 2011aa4:	10c01015 	stw	r3,64(r2)
 2011aa8:	00009606 	br	2011d04 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2011aac:	e0bfff17 	ldw	r2,-4(fp)
 2011ab0:	10802e17 	ldw	r2,184(r2)
 2011ab4:	1009883a 	mov	r4,r2
 2011ab8:	20134000 	call	2013400 <epcs_read_device_id>
 2011abc:	1007883a 	mov	r3,r2
 2011ac0:	e0bfff17 	ldw	r2,-4(fp)
 2011ac4:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
 2011ac8:	e0bfff17 	ldw	r2,-4(fp)
 2011acc:	10c03017 	ldw	r3,192(r2)
 2011ad0:	00804034 	movhi	r2,256
 2011ad4:	10bfffc4 	addi	r2,r2,-1
 2011ad8:	1886703a 	and	r3,r3,r2
 2011adc:	00800874 	movhi	r2,33
 2011ae0:	10ae8544 	addi	r2,r2,-17899
 2011ae4:	18800a1e 	bne	r3,r2,2011b10 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2011ae8:	e0bfff17 	ldw	r2,-4(fp)
 2011aec:	00c00834 	movhi	r3,32
 2011af0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
 2011af4:	e0bfff17 	ldw	r2,-4(fp)
 2011af8:	00c00804 	movi	r3,32
 2011afc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011b00:	e0bfff17 	ldw	r2,-4(fp)
 2011b04:	00c00074 	movhi	r3,1
 2011b08:	10c01015 	stw	r3,64(r2)
 2011b0c:	00007d06 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
 2011b10:	e0bfff17 	ldw	r2,-4(fp)
 2011b14:	10c03017 	ldw	r3,192(r2)
 2011b18:	00804034 	movhi	r2,256
 2011b1c:	10bfffc4 	addi	r2,r2,-1
 2011b20:	1886703a 	and	r3,r3,r2
 2011b24:	00800874 	movhi	r2,33
 2011b28:	10ae8584 	addi	r2,r2,-17898
 2011b2c:	18800a1e 	bne	r3,r2,2011b58 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
 2011b30:	e0bfff17 	ldw	r2,-4(fp)
 2011b34:	00c01034 	movhi	r3,64
 2011b38:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
 2011b3c:	e0bfff17 	ldw	r2,-4(fp)
 2011b40:	00c01004 	movi	r3,64
 2011b44:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011b48:	e0bfff17 	ldw	r2,-4(fp)
 2011b4c:	00c00074 	movhi	r3,1
 2011b50:	10c01015 	stw	r3,64(r2)
 2011b54:	00006b06 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
 2011b58:	e0bfff17 	ldw	r2,-4(fp)
 2011b5c:	10c03017 	ldw	r3,192(r2)
 2011b60:	00804034 	movhi	r2,256
 2011b64:	10bfffc4 	addi	r2,r2,-1
 2011b68:	1886703a 	and	r3,r3,r2
 2011b6c:	00800874 	movhi	r2,33
 2011b70:	10ae85c4 	addi	r2,r2,-17897
 2011b74:	18800a1e 	bne	r3,r2,2011ba0 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2011b78:	e0bfff17 	ldw	r2,-4(fp)
 2011b7c:	00c02034 	movhi	r3,128
 2011b80:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
 2011b84:	e0bfff17 	ldw	r2,-4(fp)
 2011b88:	00c02004 	movi	r3,128
 2011b8c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011b90:	e0bfff17 	ldw	r2,-4(fp)
 2011b94:	00c00074 	movhi	r3,1
 2011b98:	10c01015 	stw	r3,64(r2)
 2011b9c:	00005906 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2011ba0:	e0bfff17 	ldw	r2,-4(fp)
 2011ba4:	10c03017 	ldw	r3,192(r2)
 2011ba8:	00804034 	movhi	r2,256
 2011bac:	10bfffc4 	addi	r2,r2,-1
 2011bb0:	1886703a 	and	r3,r3,r2
 2011bb4:	00800874 	movhi	r2,33
 2011bb8:	10ae8604 	addi	r2,r2,-17896
 2011bbc:	18800a1e 	bne	r3,r2,2011be8 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2011bc0:	e0bfff17 	ldw	r2,-4(fp)
 2011bc4:	00c04034 	movhi	r3,256
 2011bc8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2011bcc:	e0bfff17 	ldw	r2,-4(fp)
 2011bd0:	00c04004 	movi	r3,256
 2011bd4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011bd8:	e0bfff17 	ldw	r2,-4(fp)
 2011bdc:	00c00074 	movhi	r3,1
 2011be0:	10c01015 	stw	r3,64(r2)
 2011be4:	00004706 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2011be8:	e0bfff17 	ldw	r2,-4(fp)
 2011bec:	10803017 	ldw	r2,192(r2)
 2011bf0:	10803fcc 	andi	r2,r2,255
 2011bf4:	10800618 	cmpnei	r2,r2,24
 2011bf8:	10000a1e 	bne	r2,zero,2011c24 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2011bfc:	e0bfff17 	ldw	r2,-4(fp)
 2011c00:	00c04034 	movhi	r3,256
 2011c04:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2011c08:	e0bfff17 	ldw	r2,-4(fp)
 2011c0c:	00c01004 	movi	r3,64
 2011c10:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 2011c14:	e0bfff17 	ldw	r2,-4(fp)
 2011c18:	00c00134 	movhi	r3,4
 2011c1c:	10c01015 	stw	r3,64(r2)
 2011c20:	00003806 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2011c24:	e0bfff17 	ldw	r2,-4(fp)
 2011c28:	10803017 	ldw	r2,192(r2)
 2011c2c:	10803fcc 	andi	r2,r2,255
 2011c30:	10800658 	cmpnei	r2,r2,25
 2011c34:	10000d1e 	bne	r2,zero,2011c6c <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2011c38:	e0bfff17 	ldw	r2,-4(fp)
 2011c3c:	00c08034 	movhi	r3,512
 2011c40:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2011c44:	e0bfff17 	ldw	r2,-4(fp)
 2011c48:	00c08004 	movi	r3,512
 2011c4c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011c50:	e0bfff17 	ldw	r2,-4(fp)
 2011c54:	00c00074 	movhi	r3,1
 2011c58:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2011c5c:	e0bfff17 	ldw	r2,-4(fp)
 2011c60:	00c00044 	movi	r3,1
 2011c64:	10c03215 	stw	r3,200(r2)
 2011c68:	00002606 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
 2011c6c:	e0bfff17 	ldw	r2,-4(fp)
 2011c70:	10803017 	ldw	r2,192(r2)
 2011c74:	10803fcc 	andi	r2,r2,255
 2011c78:	10800818 	cmpnei	r2,r2,32
 2011c7c:	10000d1e 	bne	r2,zero,2011cb4 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
 2011c80:	e0bfff17 	ldw	r2,-4(fp)
 2011c84:	00c10034 	movhi	r3,1024
 2011c88:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
 2011c8c:	e0bfff17 	ldw	r2,-4(fp)
 2011c90:	00c10004 	movi	r3,1024
 2011c94:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011c98:	e0bfff17 	ldw	r2,-4(fp)
 2011c9c:	00c00074 	movhi	r3,1
 2011ca0:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2011ca4:	e0bfff17 	ldw	r2,-4(fp)
 2011ca8:	00c00044 	movi	r3,1
 2011cac:	10c03215 	stw	r3,200(r2)
 2011cb0:	00001406 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
 2011cb4:	e0bfff17 	ldw	r2,-4(fp)
 2011cb8:	10803017 	ldw	r2,192(r2)
 2011cbc:	10803fcc 	andi	r2,r2,255
 2011cc0:	10800858 	cmpnei	r2,r2,33
 2011cc4:	10000d1e 	bne	r2,zero,2011cfc <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
 2011cc8:	e0bfff17 	ldw	r2,-4(fp)
 2011ccc:	00c20034 	movhi	r3,2048
 2011cd0:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
 2011cd4:	e0bfff17 	ldw	r2,-4(fp)
 2011cd8:	00c20004 	movi	r3,2048
 2011cdc:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011ce0:	e0bfff17 	ldw	r2,-4(fp)
 2011ce4:	00c00074 	movhi	r3,1
 2011ce8:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
 2011cec:	e0bfff17 	ldw	r2,-4(fp)
 2011cf0:	00c00044 	movi	r3,1
 2011cf4:	10c03215 	stw	r3,200(r2)
 2011cf8:	00000206 	br	2011d04 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2011cfc:	00bffb44 	movi	r2,-19
 2011d00:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2011d04:	e0bfff17 	ldw	r2,-4(fp)
 2011d08:	10800e17 	ldw	r2,56(r2)
 2011d0c:	1007883a 	mov	r3,r2
 2011d10:	e0bfff17 	ldw	r2,-4(fp)
 2011d14:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
 2011d18:	e0bfff17 	ldw	r2,-4(fp)
 2011d1c:	00c00044 	movi	r3,1
 2011d20:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2011d24:	e0bfff17 	ldw	r2,-4(fp)
 2011d28:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2011d2c:	e0bfff17 	ldw	r2,-4(fp)
 2011d30:	00c04004 	movi	r3,256
 2011d34:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2011d38:	e0bffe17 	ldw	r2,-8(fp)
}
 2011d3c:	e037883a 	mov	sp,fp
 2011d40:	dfc00117 	ldw	ra,4(sp)
 2011d44:	df000017 	ldw	fp,0(sp)
 2011d48:	dec00204 	addi	sp,sp,8
 2011d4c:	f800283a 	ret

02011d50 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2011d50:	deffee04 	addi	sp,sp,-72
 2011d54:	dfc01115 	stw	ra,68(sp)
 2011d58:	df001015 	stw	fp,64(sp)
 2011d5c:	df001004 	addi	fp,sp,64
 2011d60:	e13ffc15 	stw	r4,-16(fp)
 2011d64:	e17ffd15 	stw	r5,-12(fp)
 2011d68:	e1bffe15 	stw	r6,-8(fp)
 2011d6c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2011d70:	00800804 	movi	r2,32
 2011d74:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2011d78:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2011d7c:	00002606 	br	2011e18 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2011d80:	e0bff117 	ldw	r2,-60(fp)
 2011d84:	e0ffff17 	ldw	r3,-4(fp)
 2011d88:	1880012e 	bgeu	r3,r2,2011d90 <alt_epcs_flash_memcmp+0x40>
 2011d8c:	1805883a 	mov	r2,r3
 2011d90:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2011d94:	e0fffe17 	ldw	r3,-8(fp)
 2011d98:	e0bff017 	ldw	r2,-64(fp)
 2011d9c:	1887883a 	add	r3,r3,r2
 2011da0:	e0bff404 	addi	r2,fp,-48
 2011da4:	e13ffc17 	ldw	r4,-16(fp)
 2011da8:	180b883a 	mov	r5,r3
 2011dac:	100d883a 	mov	r6,r2
 2011db0:	e1fff217 	ldw	r7,-56(fp)
 2011db4:	201232c0 	call	201232c <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2011db8:	1000020e 	bge	r2,zero,2011dc4 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2011dbc:	00bfffc4 	movi	r2,-1
 2011dc0:	00001806 	br	2011e24 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2011dc4:	e0bff017 	ldw	r2,-64(fp)
 2011dc8:	e0fffd17 	ldw	r3,-12(fp)
 2011dcc:	1889883a 	add	r4,r3,r2
 2011dd0:	e0bff217 	ldw	r2,-56(fp)
 2011dd4:	e0fff404 	addi	r3,fp,-48
 2011dd8:	180b883a 	mov	r5,r3
 2011ddc:	100d883a 	mov	r6,r2
 2011de0:	20146840 	call	2014684 <memcmp>
 2011de4:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2011de8:	e0bff317 	ldw	r2,-52(fp)
 2011dec:	10000226 	beq	r2,zero,2011df8 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 2011df0:	e0bff317 	ldw	r2,-52(fp)
 2011df4:	00000b06 	br	2011e24 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 2011df8:	e0bff217 	ldw	r2,-56(fp)
 2011dfc:	e0ffff17 	ldw	r3,-4(fp)
 2011e00:	1885c83a 	sub	r2,r3,r2
 2011e04:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2011e08:	e0fff017 	ldw	r3,-64(fp)
 2011e0c:	e0bff217 	ldw	r2,-56(fp)
 2011e10:	1885883a 	add	r2,r3,r2
 2011e14:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2011e18:	e0bfff17 	ldw	r2,-4(fp)
 2011e1c:	103fd81e 	bne	r2,zero,2011d80 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2011e20:	0005883a 	mov	r2,zero
}
 2011e24:	e037883a 	mov	sp,fp
 2011e28:	dfc00117 	ldw	ra,4(sp)
 2011e2c:	df000017 	ldw	fp,0(sp)
 2011e30:	dec00204 	addi	sp,sp,8
 2011e34:	f800283a 	ret

02011e38 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2011e38:	defff404 	addi	sp,sp,-48
 2011e3c:	dfc00b15 	stw	ra,44(sp)
 2011e40:	df000a15 	stw	fp,40(sp)
 2011e44:	df000a04 	addi	fp,sp,40
 2011e48:	e13ffc15 	stw	r4,-16(fp)
 2011e4c:	e17ffd15 	stw	r5,-12(fp)
 2011e50:	e1bffe15 	stw	r6,-8(fp)
 2011e54:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2011e58:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2011e5c:	e03ff815 	stw	zero,-32(fp)
 2011e60:	00008306 	br	2012070 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2011e64:	e0fffc17 	ldw	r3,-16(fp)
 2011e68:	e0bff817 	ldw	r2,-32(fp)
 2011e6c:	1004913a 	slli	r2,r2,4
 2011e70:	10800d04 	addi	r2,r2,52
 2011e74:	1885883a 	add	r2,r3,r2
 2011e78:	10800017 	ldw	r2,0(r2)
 2011e7c:	e0fffd17 	ldw	r3,-12(fp)
 2011e80:	18807816 	blt	r3,r2,2012064 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2011e84:	e0fffc17 	ldw	r3,-16(fp)
 2011e88:	e0bff817 	ldw	r2,-32(fp)
 2011e8c:	1004913a 	slli	r2,r2,4
 2011e90:	10800d04 	addi	r2,r2,52
 2011e94:	1885883a 	add	r2,r3,r2
 2011e98:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2011e9c:	e13ffc17 	ldw	r4,-16(fp)
 2011ea0:	e0bff817 	ldw	r2,-32(fp)
 2011ea4:	1004913a 	slli	r2,r2,4
 2011ea8:	10800e04 	addi	r2,r2,56
 2011eac:	2085883a 	add	r2,r4,r2
 2011eb0:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2011eb4:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2011eb8:	e0fffd17 	ldw	r3,-12(fp)
 2011ebc:	1880690e 	bge	r3,r2,2012064 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 2011ec0:	e0fffc17 	ldw	r3,-16(fp)
 2011ec4:	e0bff817 	ldw	r2,-32(fp)
 2011ec8:	1004913a 	slli	r2,r2,4
 2011ecc:	10800d04 	addi	r2,r2,52
 2011ed0:	1885883a 	add	r2,r3,r2
 2011ed4:	10800017 	ldw	r2,0(r2)
 2011ed8:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2011edc:	e03ff915 	stw	zero,-28(fp)
 2011ee0:	00005806 	br	2012044 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2011ee4:	e0fffd17 	ldw	r3,-12(fp)
 2011ee8:	e0bffa17 	ldw	r2,-24(fp)
 2011eec:	18804916 	blt	r3,r2,2012014 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2011ef0:	e0fffc17 	ldw	r3,-16(fp)
 2011ef4:	e0bff817 	ldw	r2,-32(fp)
 2011ef8:	10800104 	addi	r2,r2,4
 2011efc:	1004913a 	slli	r2,r2,4
 2011f00:	1885883a 	add	r2,r3,r2
 2011f04:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2011f08:	e0bffa17 	ldw	r2,-24(fp)
 2011f0c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2011f10:	e0fffd17 	ldw	r3,-12(fp)
 2011f14:	18803f0e 	bge	r3,r2,2012014 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2011f18:	e0fffc17 	ldw	r3,-16(fp)
 2011f1c:	e0bff817 	ldw	r2,-32(fp)
 2011f20:	10800104 	addi	r2,r2,4
 2011f24:	1004913a 	slli	r2,r2,4
 2011f28:	1885883a 	add	r2,r3,r2
 2011f2c:	10c00017 	ldw	r3,0(r2)
 2011f30:	e0bffa17 	ldw	r2,-24(fp)
 2011f34:	1887883a 	add	r3,r3,r2
 2011f38:	e0bffd17 	ldw	r2,-12(fp)
 2011f3c:	1885c83a 	sub	r2,r3,r2
 2011f40:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2011f44:	e0fffb17 	ldw	r3,-20(fp)
 2011f48:	e0bfff17 	ldw	r2,-4(fp)
 2011f4c:	1880010e 	bge	r3,r2,2011f54 <alt_epcs_flash_write+0x11c>
 2011f50:	1805883a 	mov	r2,r3
 2011f54:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2011f58:	e0bffb17 	ldw	r2,-20(fp)
 2011f5c:	e13ffc17 	ldw	r4,-16(fp)
 2011f60:	e17ffe17 	ldw	r5,-8(fp)
 2011f64:	e1bffd17 	ldw	r6,-12(fp)
 2011f68:	100f883a 	mov	r7,r2
 2011f6c:	2011d500 	call	2011d50 <alt_epcs_flash_memcmp>
 2011f70:	10001226 	beq	r2,zero,2011fbc <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2011f74:	e0bffc17 	ldw	r2,-16(fp)
 2011f78:	10800817 	ldw	r2,32(r2)
 2011f7c:	e13ffc17 	ldw	r4,-16(fp)
 2011f80:	e17ffa17 	ldw	r5,-24(fp)
 2011f84:	103ee83a 	callr	r2
 2011f88:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2011f8c:	e0bff717 	ldw	r2,-36(fp)
 2011f90:	10000a1e 	bne	r2,zero,2011fbc <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2011f94:	e0bffc17 	ldw	r2,-16(fp)
 2011f98:	10800917 	ldw	r2,36(r2)
 2011f9c:	e0fffb17 	ldw	r3,-20(fp)
 2011fa0:	d8c00015 	stw	r3,0(sp)
 2011fa4:	e13ffc17 	ldw	r4,-16(fp)
 2011fa8:	e17ffa17 	ldw	r5,-24(fp)
 2011fac:	e1bffd17 	ldw	r6,-12(fp)
 2011fb0:	e1fffe17 	ldw	r7,-8(fp)
 2011fb4:	103ee83a 	callr	r2
 2011fb8:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2011fbc:	e0ffff17 	ldw	r3,-4(fp)
 2011fc0:	e0bffb17 	ldw	r2,-20(fp)
 2011fc4:	18802e26 	beq	r3,r2,2012080 <alt_epcs_flash_write+0x248>
 2011fc8:	e0bff717 	ldw	r2,-36(fp)
 2011fcc:	10002c1e 	bne	r2,zero,2012080 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 2011fd0:	e0ffff17 	ldw	r3,-4(fp)
 2011fd4:	e0bffb17 	ldw	r2,-20(fp)
 2011fd8:	1885c83a 	sub	r2,r3,r2
 2011fdc:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2011fe0:	e0fffc17 	ldw	r3,-16(fp)
 2011fe4:	e0bff817 	ldw	r2,-32(fp)
 2011fe8:	10800104 	addi	r2,r2,4
 2011fec:	1004913a 	slli	r2,r2,4
 2011ff0:	1885883a 	add	r2,r3,r2
 2011ff4:	10c00017 	ldw	r3,0(r2)
 2011ff8:	e0bffa17 	ldw	r2,-24(fp)
 2011ffc:	1885883a 	add	r2,r3,r2
 2012000:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2012004:	e0bffb17 	ldw	r2,-20(fp)
 2012008:	e0fffe17 	ldw	r3,-8(fp)
 201200c:	1885883a 	add	r2,r3,r2
 2012010:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2012014:	e0fffc17 	ldw	r3,-16(fp)
 2012018:	e0bff817 	ldw	r2,-32(fp)
 201201c:	10800104 	addi	r2,r2,4
 2012020:	1004913a 	slli	r2,r2,4
 2012024:	1885883a 	add	r2,r3,r2
 2012028:	10800017 	ldw	r2,0(r2)
 201202c:	e0fffa17 	ldw	r3,-24(fp)
 2012030:	1885883a 	add	r2,r3,r2
 2012034:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2012038:	e0bff917 	ldw	r2,-28(fp)
 201203c:	10800044 	addi	r2,r2,1
 2012040:	e0bff915 	stw	r2,-28(fp)
 2012044:	e0fffc17 	ldw	r3,-16(fp)
 2012048:	e0bff817 	ldw	r2,-32(fp)
 201204c:	1004913a 	slli	r2,r2,4
 2012050:	10800f04 	addi	r2,r2,60
 2012054:	1885883a 	add	r2,r3,r2
 2012058:	10800017 	ldw	r2,0(r2)
 201205c:	e0fff917 	ldw	r3,-28(fp)
 2012060:	18bfa016 	blt	r3,r2,2011ee4 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2012064:	e0bff817 	ldw	r2,-32(fp)
 2012068:	10800044 	addi	r2,r2,1
 201206c:	e0bff815 	stw	r2,-32(fp)
 2012070:	e0bffc17 	ldw	r2,-16(fp)
 2012074:	10800c17 	ldw	r2,48(r2)
 2012078:	e0fff817 	ldw	r3,-32(fp)
 201207c:	18bf7916 	blt	r3,r2,2011e64 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2012080:	e0bff717 	ldw	r2,-36(fp)
}
 2012084:	e037883a 	mov	sp,fp
 2012088:	dfc00117 	ldw	ra,4(sp)
 201208c:	df000017 	ldw	fp,0(sp)
 2012090:	dec00204 	addi	sp,sp,8
 2012094:	f800283a 	ret

02012098 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2012098:	defffa04 	addi	sp,sp,-24
 201209c:	df000515 	stw	fp,20(sp)
 20120a0:	df000504 	addi	fp,sp,20
 20120a4:	e13ffd15 	stw	r4,-12(fp)
 20120a8:	e17ffe15 	stw	r5,-8(fp)
 20120ac:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 20120b0:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 20120b4:	e0bffd17 	ldw	r2,-12(fp)
 20120b8:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 20120bc:	e0bffc17 	ldw	r2,-16(fp)
 20120c0:	10c00c17 	ldw	r3,48(r2)
 20120c4:	e0bfff17 	ldw	r2,-4(fp)
 20120c8:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 20120cc:	e0bffc17 	ldw	r2,-16(fp)
 20120d0:	10800c17 	ldw	r2,48(r2)
 20120d4:	1000031e 	bne	r2,zero,20120e4 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 20120d8:	00bffec4 	movi	r2,-5
 20120dc:	e0bffb15 	stw	r2,-20(fp)
 20120e0:	00000b06 	br	2012110 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 20120e4:	e0bffc17 	ldw	r2,-16(fp)
 20120e8:	10800c17 	ldw	r2,48(r2)
 20120ec:	10800250 	cmplti	r2,r2,9
 20120f0:	1000031e 	bne	r2,zero,2012100 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 20120f4:	00bffd04 	movi	r2,-12
 20120f8:	e0bffb15 	stw	r2,-20(fp)
 20120fc:	00000406 	br	2012110 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2012100:	e0bffc17 	ldw	r2,-16(fp)
 2012104:	10c00d04 	addi	r3,r2,52
 2012108:	e0bffe17 	ldw	r2,-8(fp)
 201210c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2012110:	e0bffb17 	ldw	r2,-20(fp)
}
 2012114:	e037883a 	mov	sp,fp
 2012118:	df000017 	ldw	fp,0(sp)
 201211c:	dec00104 	addi	sp,sp,4
 2012120:	f800283a 	ret

02012124 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2012124:	defff904 	addi	sp,sp,-28
 2012128:	df000615 	stw	fp,24(sp)
 201212c:	df000604 	addi	fp,sp,24
 2012130:	e13ffe15 	stw	r4,-8(fp)
 2012134:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2012138:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201213c:	e0bffe17 	ldw	r2,-8(fp)
 2012140:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2012144:	e0bffb17 	ldw	r2,-20(fp)
 2012148:	10800c17 	ldw	r2,48(r2)
 201214c:	10bfffc4 	addi	r2,r2,-1
 2012150:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2012154:	e0fffb17 	ldw	r3,-20(fp)
 2012158:	e0bffc17 	ldw	r2,-16(fp)
 201215c:	1004913a 	slli	r2,r2,4
 2012160:	10800d04 	addi	r2,r2,52
 2012164:	1885883a 	add	r2,r3,r2
 2012168:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 201216c:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2012170:	e13ffb17 	ldw	r4,-20(fp)
 2012174:	e0bffc17 	ldw	r2,-16(fp)
 2012178:	1004913a 	slli	r2,r2,4
 201217c:	10800e04 	addi	r2,r2,56
 2012180:	2085883a 	add	r2,r4,r2
 2012184:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2012188:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 201218c:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 2012190:	e0bfff17 	ldw	r2,-4(fp)
 2012194:	e0fffd17 	ldw	r3,-12(fp)
 2012198:	1880022e 	bgeu	r3,r2,20121a4 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 201219c:	00bffec4 	movi	r2,-5
 20121a0:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 20121a4:	e0bffa17 	ldw	r2,-24(fp)
}
 20121a8:	e037883a 	mov	sp,fp
 20121ac:	df000017 	ldw	fp,0(sp)
 20121b0:	dec00104 	addi	sp,sp,4
 20121b4:	f800283a 	ret

020121b8 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 20121b8:	defffa04 	addi	sp,sp,-24
 20121bc:	dfc00515 	stw	ra,20(sp)
 20121c0:	df000415 	stw	fp,16(sp)
 20121c4:	df000404 	addi	fp,sp,16
 20121c8:	e13ffe15 	stw	r4,-8(fp)
 20121cc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20121d0:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20121d4:	e0bffe17 	ldw	r2,-8(fp)
 20121d8:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 20121dc:	e13ffe17 	ldw	r4,-8(fp)
 20121e0:	e17fff17 	ldw	r5,-4(fp)
 20121e4:	20121240 	call	2012124 <alt_epcs_test_address>
 20121e8:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 20121ec:	e0bffc17 	ldw	r2,-16(fp)
 20121f0:	10000816 	blt	r2,zero,2012214 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 20121f4:	e0bffd17 	ldw	r2,-12(fp)
 20121f8:	11002e17 	ldw	r4,184(r2)
 20121fc:	e0ffff17 	ldw	r3,-4(fp)
 2012200:	e0bffd17 	ldw	r2,-12(fp)
 2012204:	10803217 	ldw	r2,200(r2)
 2012208:	180b883a 	mov	r5,r3
 201220c:	100d883a 	mov	r6,r2
 2012210:	2012fd80 	call	2012fd8 <epcs_sector_erase>
  }
  return ret_code;
 2012214:	e0bffc17 	ldw	r2,-16(fp)
}
 2012218:	e037883a 	mov	sp,fp
 201221c:	dfc00117 	ldw	ra,4(sp)
 2012220:	df000017 	ldw	fp,0(sp)
 2012224:	dec00204 	addi	sp,sp,8
 2012228:	f800283a 	ret

0201222c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 201222c:	defff404 	addi	sp,sp,-48
 2012230:	dfc00b15 	stw	ra,44(sp)
 2012234:	df000a15 	stw	fp,40(sp)
 2012238:	df000a04 	addi	fp,sp,40
 201223c:	e13ffc15 	stw	r4,-16(fp)
 2012240:	e17ffd15 	stw	r5,-12(fp)
 2012244:	e1bffe15 	stw	r6,-8(fp)
 2012248:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201224c:	e0bffc17 	ldw	r2,-16(fp)
 2012250:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2012254:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2012258:	e13ffc17 	ldw	r4,-16(fp)
 201225c:	e17ffe17 	ldw	r5,-8(fp)
 2012260:	20121240 	call	2012124 <alt_epcs_test_address>
 2012264:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2012268:	e0bff917 	ldw	r2,-28(fp)
 201226c:	10002916 	blt	r2,zero,2012314 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2012270:	00002606 	br	201230c <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2012274:	e0bff817 	ldw	r2,-32(fp)
 2012278:	10c03117 	ldw	r3,196(r2)
 201227c:	e0bffe17 	ldw	r2,-8(fp)
 2012280:	1887883a 	add	r3,r3,r2
 2012284:	e0bff817 	ldw	r2,-32(fp)
 2012288:	10803117 	ldw	r2,196(r2)
 201228c:	0085c83a 	sub	r2,zero,r2
 2012290:	1884703a 	and	r2,r3,r2
 2012294:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2012298:	e0fffa17 	ldw	r3,-24(fp)
 201229c:	e0bffe17 	ldw	r2,-8(fp)
 20122a0:	1885c83a 	sub	r2,r3,r2
 20122a4:	e0c00217 	ldw	r3,8(fp)
 20122a8:	1880010e 	bge	r3,r2,20122b0 <alt_epcs_flash_write_block+0x84>
 20122ac:	1805883a 	mov	r2,r3
 20122b0:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 20122b4:	e0bff817 	ldw	r2,-32(fp)
 20122b8:	11002e17 	ldw	r4,184(r2)
 20122bc:	e0bff717 	ldw	r2,-36(fp)
 20122c0:	e0ffff17 	ldw	r3,-4(fp)
 20122c4:	1887883a 	add	r3,r3,r2
 20122c8:	e0bff817 	ldw	r2,-32(fp)
 20122cc:	10803217 	ldw	r2,200(r2)
 20122d0:	d8800015 	stw	r2,0(sp)
 20122d4:	e17ffe17 	ldw	r5,-8(fp)
 20122d8:	180d883a 	mov	r6,r3
 20122dc:	e1fffb17 	ldw	r7,-20(fp)
 20122e0:	201327c0 	call	201327c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 20122e4:	e0c00217 	ldw	r3,8(fp)
 20122e8:	e0bffb17 	ldw	r2,-20(fp)
 20122ec:	1885c83a 	sub	r2,r3,r2
 20122f0:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 20122f4:	e0fff717 	ldw	r3,-36(fp)
 20122f8:	e0bffb17 	ldw	r2,-20(fp)
 20122fc:	1885883a 	add	r2,r3,r2
 2012300:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2012304:	e0bffa17 	ldw	r2,-24(fp)
 2012308:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 201230c:	e0800217 	ldw	r2,8(fp)
 2012310:	103fd81e 	bne	r2,zero,2012274 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2012314:	e0bff917 	ldw	r2,-28(fp)
}
 2012318:	e037883a 	mov	sp,fp
 201231c:	dfc00117 	ldw	ra,4(sp)
 2012320:	df000017 	ldw	fp,0(sp)
 2012324:	dec00204 	addi	sp,sp,8
 2012328:	f800283a 	ret

0201232c <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 201232c:	defff704 	addi	sp,sp,-36
 2012330:	dfc00815 	stw	ra,32(sp)
 2012334:	df000715 	stw	fp,28(sp)
 2012338:	df000704 	addi	fp,sp,28
 201233c:	e13ffc15 	stw	r4,-16(fp)
 2012340:	e17ffd15 	stw	r5,-12(fp)
 2012344:	e1bffe15 	stw	r6,-8(fp)
 2012348:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 201234c:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2012350:	e0bffc17 	ldw	r2,-16(fp)
 2012354:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2012358:	e13ffc17 	ldw	r4,-16(fp)
 201235c:	e17ffd17 	ldw	r5,-12(fp)
 2012360:	20121240 	call	2012124 <alt_epcs_test_address>
 2012364:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 2012368:	e0bffa17 	ldw	r2,-24(fp)
 201236c:	10000f16 	blt	r2,zero,20123ac <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2012370:	e0bffb17 	ldw	r2,-20(fp)
 2012374:	10c02e17 	ldw	r3,184(r2)
 2012378:	e0bffb17 	ldw	r2,-20(fp)
 201237c:	10803217 	ldw	r2,200(r2)
 2012380:	d8800015 	stw	r2,0(sp)
 2012384:	1809883a 	mov	r4,r3
 2012388:	e17ffd17 	ldw	r5,-12(fp)
 201238c:	e1bffe17 	ldw	r6,-8(fp)
 2012390:	e1ffff17 	ldw	r7,-4(fp)
 2012394:	20130d00 	call	20130d0 <epcs_read_buffer>
 2012398:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 201239c:	e0fffa17 	ldw	r3,-24(fp)
 20123a0:	e0bfff17 	ldw	r2,-4(fp)
 20123a4:	1880011e 	bne	r3,r2,20123ac <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 20123a8:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 20123ac:	e0bffa17 	ldw	r2,-24(fp)
}
 20123b0:	e037883a 	mov	sp,fp
 20123b4:	dfc00117 	ldw	ra,4(sp)
 20123b8:	df000017 	ldw	fp,0(sp)
 20123bc:	dec00204 	addi	sp,sp,8
 20123c0:	f800283a 	ret

020123c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20123c4:	defffa04 	addi	sp,sp,-24
 20123c8:	dfc00515 	stw	ra,20(sp)
 20123cc:	df000415 	stw	fp,16(sp)
 20123d0:	df000404 	addi	fp,sp,16
 20123d4:	e13ffd15 	stw	r4,-12(fp)
 20123d8:	e17ffe15 	stw	r5,-8(fp)
 20123dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20123e0:	e0bffd17 	ldw	r2,-12(fp)
 20123e4:	10800017 	ldw	r2,0(r2)
 20123e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 20123ec:	e0bffc17 	ldw	r2,-16(fp)
 20123f0:	10c00a04 	addi	r3,r2,40
 20123f4:	e0bffd17 	ldw	r2,-12(fp)
 20123f8:	10800217 	ldw	r2,8(r2)
 20123fc:	1809883a 	mov	r4,r3
 2012400:	e17ffe17 	ldw	r5,-8(fp)
 2012404:	e1bfff17 	ldw	r6,-4(fp)
 2012408:	100f883a 	mov	r7,r2
 201240c:	20129ec0 	call	20129ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2012410:	e037883a 	mov	sp,fp
 2012414:	dfc00117 	ldw	ra,4(sp)
 2012418:	df000017 	ldw	fp,0(sp)
 201241c:	dec00204 	addi	sp,sp,8
 2012420:	f800283a 	ret

02012424 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2012424:	defffa04 	addi	sp,sp,-24
 2012428:	dfc00515 	stw	ra,20(sp)
 201242c:	df000415 	stw	fp,16(sp)
 2012430:	df000404 	addi	fp,sp,16
 2012434:	e13ffd15 	stw	r4,-12(fp)
 2012438:	e17ffe15 	stw	r5,-8(fp)
 201243c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012440:	e0bffd17 	ldw	r2,-12(fp)
 2012444:	10800017 	ldw	r2,0(r2)
 2012448:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 201244c:	e0bffc17 	ldw	r2,-16(fp)
 2012450:	10c00a04 	addi	r3,r2,40
 2012454:	e0bffd17 	ldw	r2,-12(fp)
 2012458:	10800217 	ldw	r2,8(r2)
 201245c:	1809883a 	mov	r4,r3
 2012460:	e17ffe17 	ldw	r5,-8(fp)
 2012464:	e1bfff17 	ldw	r6,-4(fp)
 2012468:	100f883a 	mov	r7,r2
 201246c:	2012bf80 	call	2012bf8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2012470:	e037883a 	mov	sp,fp
 2012474:	dfc00117 	ldw	ra,4(sp)
 2012478:	df000017 	ldw	fp,0(sp)
 201247c:	dec00204 	addi	sp,sp,8
 2012480:	f800283a 	ret

02012484 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2012484:	defffc04 	addi	sp,sp,-16
 2012488:	dfc00315 	stw	ra,12(sp)
 201248c:	df000215 	stw	fp,8(sp)
 2012490:	df000204 	addi	fp,sp,8
 2012494:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012498:	e0bfff17 	ldw	r2,-4(fp)
 201249c:	10800017 	ldw	r2,0(r2)
 20124a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20124a4:	e0bffe17 	ldw	r2,-8(fp)
 20124a8:	10c00a04 	addi	r3,r2,40
 20124ac:	e0bfff17 	ldw	r2,-4(fp)
 20124b0:	10800217 	ldw	r2,8(r2)
 20124b4:	1809883a 	mov	r4,r3
 20124b8:	100b883a 	mov	r5,r2
 20124bc:	20128980 	call	2012898 <altera_avalon_jtag_uart_close>
}
 20124c0:	e037883a 	mov	sp,fp
 20124c4:	dfc00117 	ldw	ra,4(sp)
 20124c8:	df000017 	ldw	fp,0(sp)
 20124cc:	dec00204 	addi	sp,sp,8
 20124d0:	f800283a 	ret

020124d4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20124d4:	defffa04 	addi	sp,sp,-24
 20124d8:	dfc00515 	stw	ra,20(sp)
 20124dc:	df000415 	stw	fp,16(sp)
 20124e0:	df000404 	addi	fp,sp,16
 20124e4:	e13ffd15 	stw	r4,-12(fp)
 20124e8:	e17ffe15 	stw	r5,-8(fp)
 20124ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 20124f0:	e0bffd17 	ldw	r2,-12(fp)
 20124f4:	10800017 	ldw	r2,0(r2)
 20124f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 20124fc:	e0bffc17 	ldw	r2,-16(fp)
 2012500:	10800a04 	addi	r2,r2,40
 2012504:	1009883a 	mov	r4,r2
 2012508:	e17ffe17 	ldw	r5,-8(fp)
 201250c:	e1bfff17 	ldw	r6,-4(fp)
 2012510:	20129000 	call	2012900 <altera_avalon_jtag_uart_ioctl>
}
 2012514:	e037883a 	mov	sp,fp
 2012518:	dfc00117 	ldw	ra,4(sp)
 201251c:	df000017 	ldw	fp,0(sp)
 2012520:	dec00204 	addi	sp,sp,8
 2012524:	f800283a 	ret

02012528 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2012528:	defffa04 	addi	sp,sp,-24
 201252c:	dfc00515 	stw	ra,20(sp)
 2012530:	df000415 	stw	fp,16(sp)
 2012534:	df000404 	addi	fp,sp,16
 2012538:	e13ffd15 	stw	r4,-12(fp)
 201253c:	e17ffe15 	stw	r5,-8(fp)
 2012540:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2012544:	e0bffd17 	ldw	r2,-12(fp)
 2012548:	00c00044 	movi	r3,1
 201254c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2012550:	e0bffd17 	ldw	r2,-12(fp)
 2012554:	10800017 	ldw	r2,0(r2)
 2012558:	10800104 	addi	r2,r2,4
 201255c:	1007883a 	mov	r3,r2
 2012560:	e0bffd17 	ldw	r2,-12(fp)
 2012564:	10800817 	ldw	r2,32(r2)
 2012568:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 201256c:	e0fffe17 	ldw	r3,-8(fp)
 2012570:	e0bfff17 	ldw	r2,-4(fp)
 2012574:	d8000015 	stw	zero,0(sp)
 2012578:	1809883a 	mov	r4,r3
 201257c:	100b883a 	mov	r5,r2
 2012580:	01808074 	movhi	r6,513
 2012584:	31897b04 	addi	r6,r6,9708
 2012588:	e1fffd17 	ldw	r7,-12(fp)
 201258c:	2013a340 	call	2013a34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2012590:	e0bffd17 	ldw	r2,-12(fp)
 2012594:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2012598:	e0bffd17 	ldw	r2,-12(fp)
 201259c:	10c00204 	addi	r3,r2,8
 20125a0:	008080b4 	movhi	r2,514
 20125a4:	10aa8a04 	addi	r2,r2,-21976
 20125a8:	10800017 	ldw	r2,0(r2)
 20125ac:	1809883a 	mov	r4,r3
 20125b0:	100b883a 	mov	r5,r2
 20125b4:	01808074 	movhi	r6,513
 20125b8:	3189fc04 	addi	r6,r6,10224
 20125bc:	e1fffd17 	ldw	r7,-12(fp)
 20125c0:	20135380 	call	2013538 <alt_alarm_start>
 20125c4:	1000040e 	bge	r2,zero,20125d8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 20125c8:	e0fffd17 	ldw	r3,-12(fp)
 20125cc:	00a00034 	movhi	r2,32768
 20125d0:	10bfffc4 	addi	r2,r2,-1
 20125d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 20125d8:	e037883a 	mov	sp,fp
 20125dc:	dfc00117 	ldw	ra,4(sp)
 20125e0:	df000017 	ldw	fp,0(sp)
 20125e4:	dec00204 	addi	sp,sp,8
 20125e8:	f800283a 	ret

020125ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 20125ec:	defff804 	addi	sp,sp,-32
 20125f0:	df000715 	stw	fp,28(sp)
 20125f4:	df000704 	addi	fp,sp,28
 20125f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 20125fc:	e0bfff17 	ldw	r2,-4(fp)
 2012600:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2012604:	e0bffb17 	ldw	r2,-20(fp)
 2012608:	10800017 	ldw	r2,0(r2)
 201260c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2012610:	e0bffc17 	ldw	r2,-16(fp)
 2012614:	10800104 	addi	r2,r2,4
 2012618:	10800037 	ldwio	r2,0(r2)
 201261c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2012620:	e0bffd17 	ldw	r2,-12(fp)
 2012624:	1080c00c 	andi	r2,r2,768
 2012628:	1000011e 	bne	r2,zero,2012630 <altera_avalon_jtag_uart_irq+0x44>
      break;
 201262c:	00006c06 	br	20127e0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2012630:	e0bffd17 	ldw	r2,-12(fp)
 2012634:	1080400c 	andi	r2,r2,256
 2012638:	10003426 	beq	r2,zero,201270c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 201263c:	00800074 	movhi	r2,1
 2012640:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2012644:	e0bffb17 	ldw	r2,-20(fp)
 2012648:	10800a17 	ldw	r2,40(r2)
 201264c:	10800044 	addi	r2,r2,1
 2012650:	1081ffcc 	andi	r2,r2,2047
 2012654:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2012658:	e0bffb17 	ldw	r2,-20(fp)
 201265c:	10c00b17 	ldw	r3,44(r2)
 2012660:	e0bffe17 	ldw	r2,-8(fp)
 2012664:	1880011e 	bne	r3,r2,201266c <altera_avalon_jtag_uart_irq+0x80>
          break;
 2012668:	00001606 	br	20126c4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 201266c:	e0bffc17 	ldw	r2,-16(fp)
 2012670:	10800037 	ldwio	r2,0(r2)
 2012674:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2012678:	e0bff917 	ldw	r2,-28(fp)
 201267c:	10a0000c 	andi	r2,r2,32768
 2012680:	1000011e 	bne	r2,zero,2012688 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 2012684:	00000f06 	br	20126c4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2012688:	e0bffb17 	ldw	r2,-20(fp)
 201268c:	10800a17 	ldw	r2,40(r2)
 2012690:	e0fff917 	ldw	r3,-28(fp)
 2012694:	1809883a 	mov	r4,r3
 2012698:	e0fffb17 	ldw	r3,-20(fp)
 201269c:	1885883a 	add	r2,r3,r2
 20126a0:	10800e04 	addi	r2,r2,56
 20126a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20126a8:	e0bffb17 	ldw	r2,-20(fp)
 20126ac:	10800a17 	ldw	r2,40(r2)
 20126b0:	10800044 	addi	r2,r2,1
 20126b4:	10c1ffcc 	andi	r3,r2,2047
 20126b8:	e0bffb17 	ldw	r2,-20(fp)
 20126bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 20126c0:	003fe006 	br	2012644 <altera_avalon_jtag_uart_irq+0x58>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 20126c4:	e0bff917 	ldw	r2,-28(fp)
 20126c8:	10bfffec 	andhi	r2,r2,65535
 20126cc:	10000f26 	beq	r2,zero,201270c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20126d0:	e0bffb17 	ldw	r2,-20(fp)
 20126d4:	10c00817 	ldw	r3,32(r2)
 20126d8:	00bfff84 	movi	r2,-2
 20126dc:	1886703a 	and	r3,r3,r2
 20126e0:	e0bffb17 	ldw	r2,-20(fp)
 20126e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20126e8:	e0bffc17 	ldw	r2,-16(fp)
 20126ec:	10800104 	addi	r2,r2,4
 20126f0:	1007883a 	mov	r3,r2
 20126f4:	e0bffb17 	ldw	r2,-20(fp)
 20126f8:	10800817 	ldw	r2,32(r2)
 20126fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2012700:	e0bffc17 	ldw	r2,-16(fp)
 2012704:	10800104 	addi	r2,r2,4
 2012708:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201270c:	e0bffd17 	ldw	r2,-12(fp)
 2012710:	1080800c 	andi	r2,r2,512
 2012714:	10003126 	beq	r2,zero,20127dc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2012718:	e0bffd17 	ldw	r2,-12(fp)
 201271c:	1004d43a 	srli	r2,r2,16
 2012720:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2012724:	00001406 	br	2012778 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2012728:	e0bffc17 	ldw	r2,-16(fp)
 201272c:	e0fffb17 	ldw	r3,-20(fp)
 2012730:	18c00d17 	ldw	r3,52(r3)
 2012734:	e13ffb17 	ldw	r4,-20(fp)
 2012738:	20c7883a 	add	r3,r4,r3
 201273c:	18c20e04 	addi	r3,r3,2104
 2012740:	18c00003 	ldbu	r3,0(r3)
 2012744:	18c03fcc 	andi	r3,r3,255
 2012748:	18c0201c 	xori	r3,r3,128
 201274c:	18ffe004 	addi	r3,r3,-128
 2012750:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2012754:	e0bffb17 	ldw	r2,-20(fp)
 2012758:	10800d17 	ldw	r2,52(r2)
 201275c:	10800044 	addi	r2,r2,1
 2012760:	10c1ffcc 	andi	r3,r2,2047
 2012764:	e0bffb17 	ldw	r2,-20(fp)
 2012768:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 201276c:	e0bffa17 	ldw	r2,-24(fp)
 2012770:	10bfffc4 	addi	r2,r2,-1
 2012774:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2012778:	e0bffa17 	ldw	r2,-24(fp)
 201277c:	10000526 	beq	r2,zero,2012794 <altera_avalon_jtag_uart_irq+0x1a8>
 2012780:	e0bffb17 	ldw	r2,-20(fp)
 2012784:	10c00d17 	ldw	r3,52(r2)
 2012788:	e0bffb17 	ldw	r2,-20(fp)
 201278c:	10800c17 	ldw	r2,48(r2)
 2012790:	18bfe51e 	bne	r3,r2,2012728 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2012794:	e0bffa17 	ldw	r2,-24(fp)
 2012798:	10001026 	beq	r2,zero,20127dc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201279c:	e0bffb17 	ldw	r2,-20(fp)
 20127a0:	10c00817 	ldw	r3,32(r2)
 20127a4:	00bfff44 	movi	r2,-3
 20127a8:	1886703a 	and	r3,r3,r2
 20127ac:	e0bffb17 	ldw	r2,-20(fp)
 20127b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20127b4:	e0bffb17 	ldw	r2,-20(fp)
 20127b8:	10800017 	ldw	r2,0(r2)
 20127bc:	10800104 	addi	r2,r2,4
 20127c0:	1007883a 	mov	r3,r2
 20127c4:	e0bffb17 	ldw	r2,-20(fp)
 20127c8:	10800817 	ldw	r2,32(r2)
 20127cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20127d0:	e0bffc17 	ldw	r2,-16(fp)
 20127d4:	10800104 	addi	r2,r2,4
 20127d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20127dc:	003f8c06 	br	2012610 <altera_avalon_jtag_uart_irq+0x24>
}
 20127e0:	e037883a 	mov	sp,fp
 20127e4:	df000017 	ldw	fp,0(sp)
 20127e8:	dec00104 	addi	sp,sp,4
 20127ec:	f800283a 	ret

020127f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 20127f0:	defff804 	addi	sp,sp,-32
 20127f4:	df000715 	stw	fp,28(sp)
 20127f8:	df000704 	addi	fp,sp,28
 20127fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2012800:	e0bffb17 	ldw	r2,-20(fp)
 2012804:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2012808:	e0bff917 	ldw	r2,-28(fp)
 201280c:	10800017 	ldw	r2,0(r2)
 2012810:	10800104 	addi	r2,r2,4
 2012814:	10800037 	ldwio	r2,0(r2)
 2012818:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 201281c:	e0bffa17 	ldw	r2,-24(fp)
 2012820:	1081000c 	andi	r2,r2,1024
 2012824:	10000b26 	beq	r2,zero,2012854 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2012828:	e0bff917 	ldw	r2,-28(fp)
 201282c:	10800017 	ldw	r2,0(r2)
 2012830:	10800104 	addi	r2,r2,4
 2012834:	1007883a 	mov	r3,r2
 2012838:	e0bff917 	ldw	r2,-28(fp)
 201283c:	10800817 	ldw	r2,32(r2)
 2012840:	10810014 	ori	r2,r2,1024
 2012844:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 2012848:	e0bff917 	ldw	r2,-28(fp)
 201284c:	10000915 	stw	zero,36(r2)
 2012850:	00000a06 	br	201287c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2012854:	e0bff917 	ldw	r2,-28(fp)
 2012858:	10c00917 	ldw	r3,36(r2)
 201285c:	00a00034 	movhi	r2,32768
 2012860:	10bfff04 	addi	r2,r2,-4
 2012864:	10c00536 	bltu	r2,r3,201287c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 2012868:	e0bff917 	ldw	r2,-28(fp)
 201286c:	10800917 	ldw	r2,36(r2)
 2012870:	10c00044 	addi	r3,r2,1
 2012874:	e0bff917 	ldw	r2,-28(fp)
 2012878:	10c00915 	stw	r3,36(r2)
 201287c:	008080b4 	movhi	r2,514
 2012880:	10aa8a04 	addi	r2,r2,-21976
 2012884:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2012888:	e037883a 	mov	sp,fp
 201288c:	df000017 	ldw	fp,0(sp)
 2012890:	dec00104 	addi	sp,sp,4
 2012894:	f800283a 	ret

02012898 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2012898:	defffd04 	addi	sp,sp,-12
 201289c:	df000215 	stw	fp,8(sp)
 20128a0:	df000204 	addi	fp,sp,8
 20128a4:	e13ffe15 	stw	r4,-8(fp)
 20128a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20128ac:	00000506 	br	20128c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 20128b0:	e0bfff17 	ldw	r2,-4(fp)
 20128b4:	1090000c 	andi	r2,r2,16384
 20128b8:	10000226 	beq	r2,zero,20128c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 20128bc:	00bffd44 	movi	r2,-11
 20128c0:	00000b06 	br	20128f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20128c4:	e0bffe17 	ldw	r2,-8(fp)
 20128c8:	10c00d17 	ldw	r3,52(r2)
 20128cc:	e0bffe17 	ldw	r2,-8(fp)
 20128d0:	10800c17 	ldw	r2,48(r2)
 20128d4:	18800526 	beq	r3,r2,20128ec <altera_avalon_jtag_uart_close+0x54>
 20128d8:	e0bffe17 	ldw	r2,-8(fp)
 20128dc:	10c00917 	ldw	r3,36(r2)
 20128e0:	e0bffe17 	ldw	r2,-8(fp)
 20128e4:	10800117 	ldw	r2,4(r2)
 20128e8:	18bff136 	bltu	r3,r2,20128b0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20128ec:	0005883a 	mov	r2,zero
}
 20128f0:	e037883a 	mov	sp,fp
 20128f4:	df000017 	ldw	fp,0(sp)
 20128f8:	dec00104 	addi	sp,sp,4
 20128fc:	f800283a 	ret

02012900 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2012900:	defffa04 	addi	sp,sp,-24
 2012904:	df000515 	stw	fp,20(sp)
 2012908:	df000504 	addi	fp,sp,20
 201290c:	e13ffd15 	stw	r4,-12(fp)
 2012910:	e17ffe15 	stw	r5,-8(fp)
 2012914:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2012918:	00bff9c4 	movi	r2,-25
 201291c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2012920:	e0bffe17 	ldw	r2,-8(fp)
 2012924:	10da8060 	cmpeqi	r3,r2,27137
 2012928:	1800031e 	bne	r3,zero,2012938 <altera_avalon_jtag_uart_ioctl+0x38>
 201292c:	109a80a0 	cmpeqi	r2,r2,27138
 2012930:	1000191e 	bne	r2,zero,2012998 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 2012934:	00002806 	br	20129d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2012938:	e0bffd17 	ldw	r2,-12(fp)
 201293c:	10c00117 	ldw	r3,4(r2)
 2012940:	00a00034 	movhi	r2,32768
 2012944:	10bfffc4 	addi	r2,r2,-1
 2012948:	18801226 	beq	r3,r2,2012994 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 201294c:	e0bfff17 	ldw	r2,-4(fp)
 2012950:	10800017 	ldw	r2,0(r2)
 2012954:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2012958:	e0bffc17 	ldw	r2,-16(fp)
 201295c:	10800090 	cmplti	r2,r2,2
 2012960:	1000061e 	bne	r2,zero,201297c <altera_avalon_jtag_uart_ioctl+0x7c>
 2012964:	e0fffc17 	ldw	r3,-16(fp)
 2012968:	00a00034 	movhi	r2,32768
 201296c:	10bfffc4 	addi	r2,r2,-1
 2012970:	18800226 	beq	r3,r2,201297c <altera_avalon_jtag_uart_ioctl+0x7c>
 2012974:	e0bffc17 	ldw	r2,-16(fp)
 2012978:	00000206 	br	2012984 <altera_avalon_jtag_uart_ioctl+0x84>
 201297c:	00a00034 	movhi	r2,32768
 2012980:	10bfff84 	addi	r2,r2,-2
 2012984:	e0fffd17 	ldw	r3,-12(fp)
 2012988:	18800115 	stw	r2,4(r3)
      rc = 0;
 201298c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2012990:	00001106 	br	20129d8 <altera_avalon_jtag_uart_ioctl+0xd8>
 2012994:	00001006 	br	20129d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2012998:	e0bffd17 	ldw	r2,-12(fp)
 201299c:	10c00117 	ldw	r3,4(r2)
 20129a0:	00a00034 	movhi	r2,32768
 20129a4:	10bfffc4 	addi	r2,r2,-1
 20129a8:	18800a26 	beq	r3,r2,20129d4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 20129ac:	e0bffd17 	ldw	r2,-12(fp)
 20129b0:	10c00917 	ldw	r3,36(r2)
 20129b4:	e0bffd17 	ldw	r2,-12(fp)
 20129b8:	10800117 	ldw	r2,4(r2)
 20129bc:	1885803a 	cmpltu	r2,r3,r2
 20129c0:	10c03fcc 	andi	r3,r2,255
 20129c4:	e0bfff17 	ldw	r2,-4(fp)
 20129c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 20129cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 20129d0:	00000006 	br	20129d4 <altera_avalon_jtag_uart_ioctl+0xd4>
 20129d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 20129d8:	e0bffb17 	ldw	r2,-20(fp)
}
 20129dc:	e037883a 	mov	sp,fp
 20129e0:	df000017 	ldw	fp,0(sp)
 20129e4:	dec00104 	addi	sp,sp,4
 20129e8:	f800283a 	ret

020129ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20129ec:	defff304 	addi	sp,sp,-52
 20129f0:	dfc00c15 	stw	ra,48(sp)
 20129f4:	df000b15 	stw	fp,44(sp)
 20129f8:	df000b04 	addi	fp,sp,44
 20129fc:	e13ffc15 	stw	r4,-16(fp)
 2012a00:	e17ffd15 	stw	r5,-12(fp)
 2012a04:	e1bffe15 	stw	r6,-8(fp)
 2012a08:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2012a0c:	e0bffd17 	ldw	r2,-12(fp)
 2012a10:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2012a14:	00004906 	br	2012b3c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2012a18:	e0bffc17 	ldw	r2,-16(fp)
 2012a1c:	10800a17 	ldw	r2,40(r2)
 2012a20:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2012a24:	e0bffc17 	ldw	r2,-16(fp)
 2012a28:	10800b17 	ldw	r2,44(r2)
 2012a2c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2012a30:	e0fff717 	ldw	r3,-36(fp)
 2012a34:	e0bff817 	ldw	r2,-32(fp)
 2012a38:	18800536 	bltu	r3,r2,2012a50 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2012a3c:	e0fff717 	ldw	r3,-36(fp)
 2012a40:	e0bff817 	ldw	r2,-32(fp)
 2012a44:	1885c83a 	sub	r2,r3,r2
 2012a48:	e0bff615 	stw	r2,-40(fp)
 2012a4c:	00000406 	br	2012a60 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2012a50:	00c20004 	movi	r3,2048
 2012a54:	e0bff817 	ldw	r2,-32(fp)
 2012a58:	1885c83a 	sub	r2,r3,r2
 2012a5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2012a60:	e0bff617 	ldw	r2,-40(fp)
 2012a64:	1000011e 	bne	r2,zero,2012a6c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 2012a68:	00001d06 	br	2012ae0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 2012a6c:	e0fffe17 	ldw	r3,-8(fp)
 2012a70:	e0bff617 	ldw	r2,-40(fp)
 2012a74:	1880022e 	bgeu	r3,r2,2012a80 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2012a78:	e0bffe17 	ldw	r2,-8(fp)
 2012a7c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2012a80:	e0bff817 	ldw	r2,-32(fp)
 2012a84:	10800e04 	addi	r2,r2,56
 2012a88:	e0fffc17 	ldw	r3,-16(fp)
 2012a8c:	1885883a 	add	r2,r3,r2
 2012a90:	e13ff517 	ldw	r4,-44(fp)
 2012a94:	100b883a 	mov	r5,r2
 2012a98:	e1bff617 	ldw	r6,-40(fp)
 2012a9c:	2003e380 	call	2003e38 <memcpy>
      ptr   += n;
 2012aa0:	e0fff517 	ldw	r3,-44(fp)
 2012aa4:	e0bff617 	ldw	r2,-40(fp)
 2012aa8:	1885883a 	add	r2,r3,r2
 2012aac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2012ab0:	e0fffe17 	ldw	r3,-8(fp)
 2012ab4:	e0bff617 	ldw	r2,-40(fp)
 2012ab8:	1885c83a 	sub	r2,r3,r2
 2012abc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2012ac0:	e0fff817 	ldw	r3,-32(fp)
 2012ac4:	e0bff617 	ldw	r2,-40(fp)
 2012ac8:	1885883a 	add	r2,r3,r2
 2012acc:	10c1ffcc 	andi	r3,r2,2047
 2012ad0:	e0bffc17 	ldw	r2,-16(fp)
 2012ad4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2012ad8:	e0bffe17 	ldw	r2,-8(fp)
 2012adc:	00bfce16 	blt	zero,r2,2012a18 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2012ae0:	e0fff517 	ldw	r3,-44(fp)
 2012ae4:	e0bffd17 	ldw	r2,-12(fp)
 2012ae8:	18800126 	beq	r3,r2,2012af0 <altera_avalon_jtag_uart_read+0x104>
      break;
 2012aec:	00001506 	br	2012b44 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2012af0:	e0bfff17 	ldw	r2,-4(fp)
 2012af4:	1090000c 	andi	r2,r2,16384
 2012af8:	10000126 	beq	r2,zero,2012b00 <altera_avalon_jtag_uart_read+0x114>
      break;
 2012afc:	00001106 	br	2012b44 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2012b00:	0001883a 	nop
 2012b04:	e0bffc17 	ldw	r2,-16(fp)
 2012b08:	10c00a17 	ldw	r3,40(r2)
 2012b0c:	e0bff717 	ldw	r2,-36(fp)
 2012b10:	1880051e 	bne	r3,r2,2012b28 <altera_avalon_jtag_uart_read+0x13c>
 2012b14:	e0bffc17 	ldw	r2,-16(fp)
 2012b18:	10c00917 	ldw	r3,36(r2)
 2012b1c:	e0bffc17 	ldw	r2,-16(fp)
 2012b20:	10800117 	ldw	r2,4(r2)
 2012b24:	18bff736 	bltu	r3,r2,2012b04 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2012b28:	e0bffc17 	ldw	r2,-16(fp)
 2012b2c:	10c00a17 	ldw	r3,40(r2)
 2012b30:	e0bff717 	ldw	r2,-36(fp)
 2012b34:	1880011e 	bne	r3,r2,2012b3c <altera_avalon_jtag_uart_read+0x150>
      break;
 2012b38:	00000206 	br	2012b44 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2012b3c:	e0bffe17 	ldw	r2,-8(fp)
 2012b40:	00bfb516 	blt	zero,r2,2012a18 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2012b44:	e0fff517 	ldw	r3,-44(fp)
 2012b48:	e0bffd17 	ldw	r2,-12(fp)
 2012b4c:	18801826 	beq	r3,r2,2012bb0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012b50:	0005303a 	rdctl	r2,status
 2012b54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012b58:	e0fffa17 	ldw	r3,-24(fp)
 2012b5c:	00bfff84 	movi	r2,-2
 2012b60:	1884703a 	and	r2,r3,r2
 2012b64:	1001703a 	wrctl	status,r2
  
  return context;
 2012b68:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2012b6c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2012b70:	e0bffc17 	ldw	r2,-16(fp)
 2012b74:	10800817 	ldw	r2,32(r2)
 2012b78:	10c00054 	ori	r3,r2,1
 2012b7c:	e0bffc17 	ldw	r2,-16(fp)
 2012b80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2012b84:	e0bffc17 	ldw	r2,-16(fp)
 2012b88:	10800017 	ldw	r2,0(r2)
 2012b8c:	10800104 	addi	r2,r2,4
 2012b90:	1007883a 	mov	r3,r2
 2012b94:	e0bffc17 	ldw	r2,-16(fp)
 2012b98:	10800817 	ldw	r2,32(r2)
 2012b9c:	18800035 	stwio	r2,0(r3)
 2012ba0:	e0bff917 	ldw	r2,-28(fp)
 2012ba4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012ba8:	e0bffb17 	ldw	r2,-20(fp)
 2012bac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2012bb0:	e0fff517 	ldw	r3,-44(fp)
 2012bb4:	e0bffd17 	ldw	r2,-12(fp)
 2012bb8:	18800426 	beq	r3,r2,2012bcc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 2012bbc:	e0fff517 	ldw	r3,-44(fp)
 2012bc0:	e0bffd17 	ldw	r2,-12(fp)
 2012bc4:	1885c83a 	sub	r2,r3,r2
 2012bc8:	00000606 	br	2012be4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 2012bcc:	e0bfff17 	ldw	r2,-4(fp)
 2012bd0:	1090000c 	andi	r2,r2,16384
 2012bd4:	10000226 	beq	r2,zero,2012be0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 2012bd8:	00bffd44 	movi	r2,-11
 2012bdc:	00000106 	br	2012be4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 2012be0:	00bffec4 	movi	r2,-5
}
 2012be4:	e037883a 	mov	sp,fp
 2012be8:	dfc00117 	ldw	ra,4(sp)
 2012bec:	df000017 	ldw	fp,0(sp)
 2012bf0:	dec00204 	addi	sp,sp,8
 2012bf4:	f800283a 	ret

02012bf8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2012bf8:	defff304 	addi	sp,sp,-52
 2012bfc:	dfc00c15 	stw	ra,48(sp)
 2012c00:	df000b15 	stw	fp,44(sp)
 2012c04:	df000b04 	addi	fp,sp,44
 2012c08:	e13ffc15 	stw	r4,-16(fp)
 2012c0c:	e17ffd15 	stw	r5,-12(fp)
 2012c10:	e1bffe15 	stw	r6,-8(fp)
 2012c14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2012c18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2012c1c:	e0bffd17 	ldw	r2,-12(fp)
 2012c20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2012c24:	00003806 	br	2012d08 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2012c28:	e0bffc17 	ldw	r2,-16(fp)
 2012c2c:	10800c17 	ldw	r2,48(r2)
 2012c30:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 2012c34:	e0bffc17 	ldw	r2,-16(fp)
 2012c38:	10800d17 	ldw	r2,52(r2)
 2012c3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2012c40:	e0fff817 	ldw	r3,-32(fp)
 2012c44:	e0bff517 	ldw	r2,-44(fp)
 2012c48:	1880062e 	bgeu	r3,r2,2012c64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2012c4c:	e0fff517 	ldw	r3,-44(fp)
 2012c50:	e0bff817 	ldw	r2,-32(fp)
 2012c54:	1885c83a 	sub	r2,r3,r2
 2012c58:	10bfffc4 	addi	r2,r2,-1
 2012c5c:	e0bff615 	stw	r2,-40(fp)
 2012c60:	00000b06 	br	2012c90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2012c64:	e0bff517 	ldw	r2,-44(fp)
 2012c68:	10000526 	beq	r2,zero,2012c80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2012c6c:	00c20004 	movi	r3,2048
 2012c70:	e0bff817 	ldw	r2,-32(fp)
 2012c74:	1885c83a 	sub	r2,r3,r2
 2012c78:	e0bff615 	stw	r2,-40(fp)
 2012c7c:	00000406 	br	2012c90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2012c80:	00c1ffc4 	movi	r3,2047
 2012c84:	e0bff817 	ldw	r2,-32(fp)
 2012c88:	1885c83a 	sub	r2,r3,r2
 2012c8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2012c90:	e0bff617 	ldw	r2,-40(fp)
 2012c94:	1000011e 	bne	r2,zero,2012c9c <altera_avalon_jtag_uart_write+0xa4>
        break;
 2012c98:	00001d06 	br	2012d10 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 2012c9c:	e0fffe17 	ldw	r3,-8(fp)
 2012ca0:	e0bff617 	ldw	r2,-40(fp)
 2012ca4:	1880022e 	bgeu	r3,r2,2012cb0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 2012ca8:	e0bffe17 	ldw	r2,-8(fp)
 2012cac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2012cb0:	e0bff817 	ldw	r2,-32(fp)
 2012cb4:	10820e04 	addi	r2,r2,2104
 2012cb8:	e0fffc17 	ldw	r3,-16(fp)
 2012cbc:	1885883a 	add	r2,r3,r2
 2012cc0:	1009883a 	mov	r4,r2
 2012cc4:	e17ffd17 	ldw	r5,-12(fp)
 2012cc8:	e1bff617 	ldw	r6,-40(fp)
 2012ccc:	2003e380 	call	2003e38 <memcpy>
      ptr   += n;
 2012cd0:	e0fffd17 	ldw	r3,-12(fp)
 2012cd4:	e0bff617 	ldw	r2,-40(fp)
 2012cd8:	1885883a 	add	r2,r3,r2
 2012cdc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2012ce0:	e0fffe17 	ldw	r3,-8(fp)
 2012ce4:	e0bff617 	ldw	r2,-40(fp)
 2012ce8:	1885c83a 	sub	r2,r3,r2
 2012cec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2012cf0:	e0fff817 	ldw	r3,-32(fp)
 2012cf4:	e0bff617 	ldw	r2,-40(fp)
 2012cf8:	1885883a 	add	r2,r3,r2
 2012cfc:	10c1ffcc 	andi	r3,r2,2047
 2012d00:	e0bffc17 	ldw	r2,-16(fp)
 2012d04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2012d08:	e0bffe17 	ldw	r2,-8(fp)
 2012d0c:	00bfc616 	blt	zero,r2,2012c28 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012d10:	0005303a 	rdctl	r2,status
 2012d14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012d18:	e0fffa17 	ldw	r3,-24(fp)
 2012d1c:	00bfff84 	movi	r2,-2
 2012d20:	1884703a 	and	r2,r3,r2
 2012d24:	1001703a 	wrctl	status,r2
  
  return context;
 2012d28:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2012d2c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2012d30:	e0bffc17 	ldw	r2,-16(fp)
 2012d34:	10800817 	ldw	r2,32(r2)
 2012d38:	10c00094 	ori	r3,r2,2
 2012d3c:	e0bffc17 	ldw	r2,-16(fp)
 2012d40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2012d44:	e0bffc17 	ldw	r2,-16(fp)
 2012d48:	10800017 	ldw	r2,0(r2)
 2012d4c:	10800104 	addi	r2,r2,4
 2012d50:	1007883a 	mov	r3,r2
 2012d54:	e0bffc17 	ldw	r2,-16(fp)
 2012d58:	10800817 	ldw	r2,32(r2)
 2012d5c:	18800035 	stwio	r2,0(r3)
 2012d60:	e0bff917 	ldw	r2,-28(fp)
 2012d64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012d68:	e0bffb17 	ldw	r2,-20(fp)
 2012d6c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2012d70:	e0bffe17 	ldw	r2,-8(fp)
 2012d74:	0080120e 	bge	zero,r2,2012dc0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 2012d78:	e0bfff17 	ldw	r2,-4(fp)
 2012d7c:	1090000c 	andi	r2,r2,16384
 2012d80:	10000126 	beq	r2,zero,2012d88 <altera_avalon_jtag_uart_write+0x190>
        break;
 2012d84:	00001006 	br	2012dc8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2012d88:	0001883a 	nop
 2012d8c:	e0bffc17 	ldw	r2,-16(fp)
 2012d90:	10c00d17 	ldw	r3,52(r2)
 2012d94:	e0bff517 	ldw	r2,-44(fp)
 2012d98:	1880051e 	bne	r3,r2,2012db0 <altera_avalon_jtag_uart_write+0x1b8>
 2012d9c:	e0bffc17 	ldw	r2,-16(fp)
 2012da0:	10c00917 	ldw	r3,36(r2)
 2012da4:	e0bffc17 	ldw	r2,-16(fp)
 2012da8:	10800117 	ldw	r2,4(r2)
 2012dac:	18bff736 	bltu	r3,r2,2012d8c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 2012db0:	e0bffc17 	ldw	r2,-16(fp)
 2012db4:	10800917 	ldw	r2,36(r2)
 2012db8:	10000126 	beq	r2,zero,2012dc0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 2012dbc:	00000206 	br	2012dc8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 2012dc0:	e0bffe17 	ldw	r2,-8(fp)
 2012dc4:	00bf9716 	blt	zero,r2,2012c24 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2012dc8:	e0fffd17 	ldw	r3,-12(fp)
 2012dcc:	e0bff717 	ldw	r2,-36(fp)
 2012dd0:	18800426 	beq	r3,r2,2012de4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 2012dd4:	e0fffd17 	ldw	r3,-12(fp)
 2012dd8:	e0bff717 	ldw	r2,-36(fp)
 2012ddc:	1885c83a 	sub	r2,r3,r2
 2012de0:	00000606 	br	2012dfc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 2012de4:	e0bfff17 	ldw	r2,-4(fp)
 2012de8:	1090000c 	andi	r2,r2,16384
 2012dec:	10000226 	beq	r2,zero,2012df8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 2012df0:	00bffd44 	movi	r2,-11
 2012df4:	00000106 	br	2012dfc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2012df8:	00bffec4 	movi	r2,-5
}
 2012dfc:	e037883a 	mov	sp,fp
 2012e00:	dfc00117 	ldw	ra,4(sp)
 2012e04:	df000017 	ldw	fp,0(sp)
 2012e08:	dec00204 	addi	sp,sp,8
 2012e0c:	f800283a 	ret

02012e10 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2012e10:	defffa04 	addi	sp,sp,-24
 2012e14:	dfc00515 	stw	ra,20(sp)
 2012e18:	df000415 	stw	fp,16(sp)
 2012e1c:	df000404 	addi	fp,sp,16
 2012e20:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2012e24:	0007883a 	mov	r3,zero
 2012e28:	e0bfff17 	ldw	r2,-4(fp)
 2012e2c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2012e30:	e0bfff17 	ldw	r2,-4(fp)
 2012e34:	10800104 	addi	r2,r2,4
 2012e38:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012e3c:	0005303a 	rdctl	r2,status
 2012e40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012e44:	e0fffd17 	ldw	r3,-12(fp)
 2012e48:	00bfff84 	movi	r2,-2
 2012e4c:	1884703a 	and	r2,r3,r2
 2012e50:	1001703a 	wrctl	status,r2
  
  return context;
 2012e54:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2012e58:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 2012e5c:	20115640 	call	2011564 <alt_tick>
 2012e60:	e0bffc17 	ldw	r2,-16(fp)
 2012e64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012e68:	e0bffe17 	ldw	r2,-8(fp)
 2012e6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2012e70:	e037883a 	mov	sp,fp
 2012e74:	dfc00117 	ldw	ra,4(sp)
 2012e78:	df000017 	ldw	fp,0(sp)
 2012e7c:	dec00204 	addi	sp,sp,8
 2012e80:	f800283a 	ret

02012e84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2012e84:	defff804 	addi	sp,sp,-32
 2012e88:	dfc00715 	stw	ra,28(sp)
 2012e8c:	df000615 	stw	fp,24(sp)
 2012e90:	df000604 	addi	fp,sp,24
 2012e94:	e13ffc15 	stw	r4,-16(fp)
 2012e98:	e17ffd15 	stw	r5,-12(fp)
 2012e9c:	e1bffe15 	stw	r6,-8(fp)
 2012ea0:	e1ffff15 	stw	r7,-4(fp)
 2012ea4:	e0bfff17 	ldw	r2,-4(fp)
 2012ea8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2012eac:	008080b4 	movhi	r2,514
 2012eb0:	10aa8a04 	addi	r2,r2,-21976
 2012eb4:	10800017 	ldw	r2,0(r2)
 2012eb8:	1000041e 	bne	r2,zero,2012ecc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 2012ebc:	008080b4 	movhi	r2,514
 2012ec0:	10aa8a04 	addi	r2,r2,-21976
 2012ec4:	e0fffb17 	ldw	r3,-20(fp)
 2012ec8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2012ecc:	e0bffc17 	ldw	r2,-16(fp)
 2012ed0:	10800104 	addi	r2,r2,4
 2012ed4:	00c001c4 	movi	r3,7
 2012ed8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 2012edc:	d8000015 	stw	zero,0(sp)
 2012ee0:	e13ffd17 	ldw	r4,-12(fp)
 2012ee4:	e17ffe17 	ldw	r5,-8(fp)
 2012ee8:	01808074 	movhi	r6,513
 2012eec:	318b8404 	addi	r6,r6,11792
 2012ef0:	e1fffc17 	ldw	r7,-16(fp)
 2012ef4:	2013a340 	call	2013a34 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 2012ef8:	e037883a 	mov	sp,fp
 2012efc:	dfc00117 	ldw	ra,4(sp)
 2012f00:	df000017 	ldw	fp,0(sp)
 2012f04:	dec00204 	addi	sp,sp,8
 2012f08:	f800283a 	ret

02012f0c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2012f0c:	defff904 	addi	sp,sp,-28
 2012f10:	dfc00615 	stw	ra,24(sp)
 2012f14:	df000515 	stw	fp,20(sp)
 2012f18:	df000504 	addi	fp,sp,20
 2012f1c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2012f20:	00800144 	movi	r2,5
 2012f24:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2012f28:	00800044 	movi	r2,1
 2012f2c:	d8800015 	stw	r2,0(sp)
 2012f30:	e0bffe44 	addi	r2,fp,-7
 2012f34:	d8800115 	stw	r2,4(sp)
 2012f38:	d8000215 	stw	zero,8(sp)
 2012f3c:	e13fff17 	ldw	r4,-4(fp)
 2012f40:	000b883a 	mov	r5,zero
 2012f44:	01800044 	movi	r6,1
 2012f48:	e1fffe04 	addi	r7,fp,-8
 2012f4c:	20141200 	call	2014120 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2012f50:	e0bffe43 	ldbu	r2,-7(fp)
}
 2012f54:	e037883a 	mov	sp,fp
 2012f58:	dfc00117 	ldw	ra,4(sp)
 2012f5c:	df000017 	ldw	fp,0(sp)
 2012f60:	dec00204 	addi	sp,sp,8
 2012f64:	f800283a 	ret

02012f68 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2012f68:	defffd04 	addi	sp,sp,-12
 2012f6c:	dfc00215 	stw	ra,8(sp)
 2012f70:	df000115 	stw	fp,4(sp)
 2012f74:	df000104 	addi	fp,sp,4
 2012f78:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2012f7c:	e13fff17 	ldw	r4,-4(fp)
 2012f80:	2012f0c0 	call	2012f0c <epcs_read_status_register>
 2012f84:	10803fcc 	andi	r2,r2,255
 2012f88:	1080004c 	andi	r2,r2,1
}
 2012f8c:	e037883a 	mov	sp,fp
 2012f90:	dfc00117 	ldw	ra,4(sp)
 2012f94:	df000017 	ldw	fp,0(sp)
 2012f98:	dec00204 	addi	sp,sp,8
 2012f9c:	f800283a 	ret

02012fa0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2012fa0:	defffd04 	addi	sp,sp,-12
 2012fa4:	dfc00215 	stw	ra,8(sp)
 2012fa8:	df000115 	stw	fp,4(sp)
 2012fac:	df000104 	addi	fp,sp,4
 2012fb0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2012fb4:	0001883a 	nop
 2012fb8:	e13fff17 	ldw	r4,-4(fp)
 2012fbc:	2012f680 	call	2012f68 <epcs_test_wip>
 2012fc0:	103ffd1e 	bne	r2,zero,2012fb8 <epcs_await_wip_released+0x18>
  {
  }
}
 2012fc4:	e037883a 	mov	sp,fp
 2012fc8:	dfc00117 	ldw	ra,4(sp)
 2012fcc:	df000017 	ldw	fp,0(sp)
 2012fd0:	dec00204 	addi	sp,sp,8
 2012fd4:	f800283a 	ret

02012fd8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2012fd8:	defff604 	addi	sp,sp,-40
 2012fdc:	dfc00915 	stw	ra,36(sp)
 2012fe0:	df000815 	stw	fp,32(sp)
 2012fe4:	df000804 	addi	fp,sp,32
 2012fe8:	e13ffd15 	stw	r4,-12(fp)
 2012fec:	e17ffe15 	stw	r5,-8(fp)
 2012ff0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2012ff4:	e0bfff17 	ldw	r2,-4(fp)
 2012ff8:	10001226 	beq	r2,zero,2013044 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2012ffc:	00bff604 	movi	r2,-40
 2013000:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2013004:	e0bffe17 	ldw	r2,-8(fp)
 2013008:	1004d63a 	srli	r2,r2,24
 201300c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2013010:	e0bffe17 	ldw	r2,-8(fp)
 2013014:	1004d43a 	srli	r2,r2,16
 2013018:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 201301c:	e0bffe17 	ldw	r2,-8(fp)
 2013020:	1004d23a 	srli	r2,r2,8
 2013024:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2013028:	e0bffe17 	ldw	r2,-8(fp)
 201302c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2013030:	00800144 	movi	r2,5
 2013034:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2013038:	e13ffd17 	ldw	r4,-12(fp)
 201303c:	20134800 	call	2013480 <epcs_enter_4_bytes_mode>
 2013040:	00000c06 	br	2013074 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2013044:	00bff604 	movi	r2,-40
 2013048:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 201304c:	e0bffe17 	ldw	r2,-8(fp)
 2013050:	1004d43a 	srli	r2,r2,16
 2013054:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2013058:	e0bffe17 	ldw	r2,-8(fp)
 201305c:	1004d23a 	srli	r2,r2,8
 2013060:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2013064:	e0bffe17 	ldw	r2,-8(fp)
 2013068:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 201306c:	00800104 	movi	r2,4
 2013070:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2013074:	e13ffd17 	ldw	r4,-12(fp)
 2013078:	20131c40 	call	20131c4 <epcs_write_enable>

  alt_avalon_spi_command(
 201307c:	e0fffb03 	ldbu	r3,-20(fp)
 2013080:	e0bffb44 	addi	r2,fp,-19
 2013084:	d8000015 	stw	zero,0(sp)
 2013088:	d8000115 	stw	zero,4(sp)
 201308c:	d8000215 	stw	zero,8(sp)
 2013090:	e13ffd17 	ldw	r4,-12(fp)
 2013094:	000b883a 	mov	r5,zero
 2013098:	180d883a 	mov	r6,r3
 201309c:	100f883a 	mov	r7,r2
 20130a0:	20141200 	call	2014120 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 20130a4:	e13ffd17 	ldw	r4,-12(fp)
 20130a8:	2012fa00 	call	2012fa0 <epcs_await_wip_released>

  if(four_bytes_mode)
 20130ac:	e0bfff17 	ldw	r2,-4(fp)
 20130b0:	10000226 	beq	r2,zero,20130bc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 20130b4:	e13ffd17 	ldw	r4,-12(fp)
 20130b8:	20134dc0 	call	20134dc <epcs_exit_4_bytes_mode>
  }
}
 20130bc:	e037883a 	mov	sp,fp
 20130c0:	dfc00117 	ldw	ra,4(sp)
 20130c4:	df000017 	ldw	fp,0(sp)
 20130c8:	dec00204 	addi	sp,sp,8
 20130cc:	f800283a 	ret

020130d0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 20130d0:	defff404 	addi	sp,sp,-48
 20130d4:	dfc00b15 	stw	ra,44(sp)
 20130d8:	df000a15 	stw	fp,40(sp)
 20130dc:	df000a04 	addi	fp,sp,40
 20130e0:	e13ffc15 	stw	r4,-16(fp)
 20130e4:	e17ffd15 	stw	r5,-12(fp)
 20130e8:	e1bffe15 	stw	r6,-8(fp)
 20130ec:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 20130f0:	008000c4 	movi	r2,3
 20130f4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 20130f8:	e0800217 	ldw	r2,8(fp)
 20130fc:	10001026 	beq	r2,zero,2013140 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2013100:	e0bffd17 	ldw	r2,-12(fp)
 2013104:	1004d63a 	srli	r2,r2,24
 2013108:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 201310c:	e0bffd17 	ldw	r2,-12(fp)
 2013110:	1005d43a 	srai	r2,r2,16
 2013114:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2013118:	e0bffd17 	ldw	r2,-12(fp)
 201311c:	1005d23a 	srai	r2,r2,8
 2013120:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2013124:	e0bffd17 	ldw	r2,-12(fp)
 2013128:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 201312c:	00800144 	movi	r2,5
 2013130:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2013134:	e13ffc17 	ldw	r4,-16(fp)
 2013138:	20134800 	call	2013480 <epcs_enter_4_bytes_mode>
 201313c:	00000a06 	br	2013168 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2013140:	e0bffd17 	ldw	r2,-12(fp)
 2013144:	1005d43a 	srai	r2,r2,16
 2013148:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 201314c:	e0bffd17 	ldw	r2,-12(fp)
 2013150:	1005d23a 	srai	r2,r2,8
 2013154:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2013158:	e0bffd17 	ldw	r2,-12(fp)
 201315c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2013160:	00800104 	movi	r2,4
 2013164:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2013168:	e13ffc17 	ldw	r4,-16(fp)
 201316c:	2012fa00 	call	2012fa0 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2013170:	e0bfff17 	ldw	r2,-4(fp)
 2013174:	e0fffa04 	addi	r3,fp,-24
 2013178:	d8800015 	stw	r2,0(sp)
 201317c:	e0bffe17 	ldw	r2,-8(fp)
 2013180:	d8800115 	stw	r2,4(sp)
 2013184:	d8000215 	stw	zero,8(sp)
 2013188:	e13ffc17 	ldw	r4,-16(fp)
 201318c:	000b883a 	mov	r5,zero
 2013190:	e1bff917 	ldw	r6,-28(fp)
 2013194:	180f883a 	mov	r7,r3
 2013198:	20141200 	call	2014120 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 201319c:	e0800217 	ldw	r2,8(fp)
 20131a0:	10000226 	beq	r2,zero,20131ac <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 20131a4:	e13ffc17 	ldw	r4,-16(fp)
 20131a8:	20134dc0 	call	20134dc <epcs_exit_4_bytes_mode>
  }

  return length;
 20131ac:	e0bfff17 	ldw	r2,-4(fp)
}
 20131b0:	e037883a 	mov	sp,fp
 20131b4:	dfc00117 	ldw	ra,4(sp)
 20131b8:	df000017 	ldw	fp,0(sp)
 20131bc:	dec00204 	addi	sp,sp,8
 20131c0:	f800283a 	ret

020131c4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 20131c4:	defff904 	addi	sp,sp,-28
 20131c8:	dfc00615 	stw	ra,24(sp)
 20131cc:	df000515 	stw	fp,20(sp)
 20131d0:	df000504 	addi	fp,sp,20
 20131d4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 20131d8:	00800184 	movi	r2,6
 20131dc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 20131e0:	d8000015 	stw	zero,0(sp)
 20131e4:	d8000115 	stw	zero,4(sp)
 20131e8:	d8000215 	stw	zero,8(sp)
 20131ec:	e13fff17 	ldw	r4,-4(fp)
 20131f0:	000b883a 	mov	r5,zero
 20131f4:	01800044 	movi	r6,1
 20131f8:	e1fffe04 	addi	r7,fp,-8
 20131fc:	20141200 	call	2014120 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 2013200:	e037883a 	mov	sp,fp
 2013204:	dfc00117 	ldw	ra,4(sp)
 2013208:	df000017 	ldw	fp,0(sp)
 201320c:	dec00204 	addi	sp,sp,8
 2013210:	f800283a 	ret

02013214 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2013214:	defff804 	addi	sp,sp,-32
 2013218:	dfc00715 	stw	ra,28(sp)
 201321c:	df000615 	stw	fp,24(sp)
 2013220:	df000604 	addi	fp,sp,24
 2013224:	e13ffe15 	stw	r4,-8(fp)
 2013228:	2805883a 	mov	r2,r5
 201322c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 2013230:	00800044 	movi	r2,1
 2013234:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2013238:	e0bfff03 	ldbu	r2,-4(fp)
 201323c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 2013240:	d8000015 	stw	zero,0(sp)
 2013244:	d8000115 	stw	zero,4(sp)
 2013248:	d8000215 	stw	zero,8(sp)
 201324c:	e13ffe17 	ldw	r4,-8(fp)
 2013250:	000b883a 	mov	r5,zero
 2013254:	01800084 	movi	r6,2
 2013258:	e1fffd04 	addi	r7,fp,-12
 201325c:	20141200 	call	2014120 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2013260:	e13ffe17 	ldw	r4,-8(fp)
 2013264:	2012fa00 	call	2012fa0 <epcs_await_wip_released>
}
 2013268:	e037883a 	mov	sp,fp
 201326c:	dfc00117 	ldw	ra,4(sp)
 2013270:	df000017 	ldw	fp,0(sp)
 2013274:	dec00204 	addi	sp,sp,8
 2013278:	f800283a 	ret

0201327c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 201327c:	defff404 	addi	sp,sp,-48
 2013280:	dfc00b15 	stw	ra,44(sp)
 2013284:	df000a15 	stw	fp,40(sp)
 2013288:	df000a04 	addi	fp,sp,40
 201328c:	e13ffc15 	stw	r4,-16(fp)
 2013290:	e17ffd15 	stw	r5,-12(fp)
 2013294:	e1bffe15 	stw	r6,-8(fp)
 2013298:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 201329c:	00800084 	movi	r2,2
 20132a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 20132a4:	e0800217 	ldw	r2,8(fp)
 20132a8:	10001026 	beq	r2,zero,20132ec <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 20132ac:	e0bffd17 	ldw	r2,-12(fp)
 20132b0:	1004d63a 	srli	r2,r2,24
 20132b4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 20132b8:	e0bffd17 	ldw	r2,-12(fp)
 20132bc:	1005d43a 	srai	r2,r2,16
 20132c0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 20132c4:	e0bffd17 	ldw	r2,-12(fp)
 20132c8:	1005d23a 	srai	r2,r2,8
 20132cc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 20132d0:	e0bffd17 	ldw	r2,-12(fp)
 20132d4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 20132d8:	00800144 	movi	r2,5
 20132dc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 20132e0:	e13ffc17 	ldw	r4,-16(fp)
 20132e4:	20134800 	call	2013480 <epcs_enter_4_bytes_mode>
 20132e8:	00000a06 	br	2013314 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 20132ec:	e0bffd17 	ldw	r2,-12(fp)
 20132f0:	1005d43a 	srai	r2,r2,16
 20132f4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 20132f8:	e0bffd17 	ldw	r2,-12(fp)
 20132fc:	1005d23a 	srai	r2,r2,8
 2013300:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2013304:	e0bffd17 	ldw	r2,-12(fp)
 2013308:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 201330c:	00800104 	movi	r2,4
 2013310:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2013314:	e13ffc17 	ldw	r4,-16(fp)
 2013318:	20131c40 	call	20131c4 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 201331c:	e0fffa04 	addi	r3,fp,-24
 2013320:	d8000015 	stw	zero,0(sp)
 2013324:	d8000115 	stw	zero,4(sp)
 2013328:	00800044 	movi	r2,1
 201332c:	d8800215 	stw	r2,8(sp)
 2013330:	e13ffc17 	ldw	r4,-16(fp)
 2013334:	000b883a 	mov	r5,zero
 2013338:	e1bff917 	ldw	r6,-28(fp)
 201333c:	180f883a 	mov	r7,r3
 2013340:	20141200 	call	2014120 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2013344:	e0bfff17 	ldw	r2,-4(fp)
 2013348:	d8000015 	stw	zero,0(sp)
 201334c:	d8000115 	stw	zero,4(sp)
 2013350:	d8000215 	stw	zero,8(sp)
 2013354:	e13ffc17 	ldw	r4,-16(fp)
 2013358:	000b883a 	mov	r5,zero
 201335c:	100d883a 	mov	r6,r2
 2013360:	e1fffe17 	ldw	r7,-8(fp)
 2013364:	20141200 	call	2014120 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2013368:	e13ffc17 	ldw	r4,-16(fp)
 201336c:	2012fa00 	call	2012fa0 <epcs_await_wip_released>

  if(four_bytes_mode)
 2013370:	e0800217 	ldw	r2,8(fp)
 2013374:	10000226 	beq	r2,zero,2013380 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2013378:	e13ffc17 	ldw	r4,-16(fp)
 201337c:	20134dc0 	call	20134dc <epcs_exit_4_bytes_mode>
  }

  return length;
 2013380:	e0bfff17 	ldw	r2,-4(fp)
}
 2013384:	e037883a 	mov	sp,fp
 2013388:	dfc00117 	ldw	ra,4(sp)
 201338c:	df000017 	ldw	fp,0(sp)
 2013390:	dec00204 	addi	sp,sp,8
 2013394:	f800283a 	ret

02013398 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2013398:	defff804 	addi	sp,sp,-32
 201339c:	dfc00715 	stw	ra,28(sp)
 20133a0:	df000615 	stw	fp,24(sp)
 20133a4:	df000604 	addi	fp,sp,24
 20133a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 20133ac:	00bfeac4 	movi	r2,-85
 20133b0:	e0bffd05 	stb	r2,-12(fp)
 20133b4:	e03ffd45 	stb	zero,-11(fp)
 20133b8:	e03ffd85 	stb	zero,-10(fp)
 20133bc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 20133c0:	00800044 	movi	r2,1
 20133c4:	d8800015 	stw	r2,0(sp)
 20133c8:	e0bffe04 	addi	r2,fp,-8
 20133cc:	d8800115 	stw	r2,4(sp)
 20133d0:	d8000215 	stw	zero,8(sp)
 20133d4:	e13fff17 	ldw	r4,-4(fp)
 20133d8:	000b883a 	mov	r5,zero
 20133dc:	01800104 	movi	r6,4
 20133e0:	e1fffd04 	addi	r7,fp,-12
 20133e4:	20141200 	call	2014120 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 20133e8:	e0bffe03 	ldbu	r2,-8(fp)
}
 20133ec:	e037883a 	mov	sp,fp
 20133f0:	dfc00117 	ldw	ra,4(sp)
 20133f4:	df000017 	ldw	fp,0(sp)
 20133f8:	dec00204 	addi	sp,sp,8
 20133fc:	f800283a 	ret

02013400 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 2013400:	defff904 	addi	sp,sp,-28
 2013404:	dfc00615 	stw	ra,24(sp)
 2013408:	df000515 	stw	fp,20(sp)
 201340c:	df000504 	addi	fp,sp,20
 2013410:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2013414:	00bfe7c4 	movi	r2,-97
 2013418:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 201341c:	008000c4 	movi	r2,3
 2013420:	d8800015 	stw	r2,0(sp)
 2013424:	e0bffe44 	addi	r2,fp,-7
 2013428:	d8800115 	stw	r2,4(sp)
 201342c:	d8000215 	stw	zero,8(sp)
 2013430:	e13fff17 	ldw	r4,-4(fp)
 2013434:	000b883a 	mov	r5,zero
 2013438:	01800044 	movi	r6,1
 201343c:	e1fffe04 	addi	r7,fp,-8
 2013440:	20141200 	call	2014120 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2013444:	e0bffe43 	ldbu	r2,-7(fp)
 2013448:	10803fcc 	andi	r2,r2,255
 201344c:	1006943a 	slli	r3,r2,16
 2013450:	e0bffe83 	ldbu	r2,-6(fp)
 2013454:	10803fcc 	andi	r2,r2,255
 2013458:	1004923a 	slli	r2,r2,8
 201345c:	1886b03a 	or	r3,r3,r2
 2013460:	e0bffec3 	ldbu	r2,-5(fp)
 2013464:	10803fcc 	andi	r2,r2,255
 2013468:	1884b03a 	or	r2,r3,r2
}
 201346c:	e037883a 	mov	sp,fp
 2013470:	dfc00117 	ldw	ra,4(sp)
 2013474:	df000017 	ldw	fp,0(sp)
 2013478:	dec00204 	addi	sp,sp,8
 201347c:	f800283a 	ret

02013480 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2013480:	defff904 	addi	sp,sp,-28
 2013484:	dfc00615 	stw	ra,24(sp)
 2013488:	df000515 	stw	fp,20(sp)
 201348c:	df000504 	addi	fp,sp,20
 2013490:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2013494:	00bfedc4 	movi	r2,-73
 2013498:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201349c:	e13fff17 	ldw	r4,-4(fp)
 20134a0:	20131c40 	call	20131c4 <epcs_write_enable>

  alt_avalon_spi_command(
 20134a4:	d8000015 	stw	zero,0(sp)
 20134a8:	d8000115 	stw	zero,4(sp)
 20134ac:	d8000215 	stw	zero,8(sp)
 20134b0:	e13fff17 	ldw	r4,-4(fp)
 20134b4:	000b883a 	mov	r5,zero
 20134b8:	01800044 	movi	r6,1
 20134bc:	e1fffe04 	addi	r7,fp,-8
 20134c0:	20141200 	call	2014120 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 20134c4:	0001883a 	nop
}
 20134c8:	e037883a 	mov	sp,fp
 20134cc:	dfc00117 	ldw	ra,4(sp)
 20134d0:	df000017 	ldw	fp,0(sp)
 20134d4:	dec00204 	addi	sp,sp,8
 20134d8:	f800283a 	ret

020134dc <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 20134dc:	defff904 	addi	sp,sp,-28
 20134e0:	dfc00615 	stw	ra,24(sp)
 20134e4:	df000515 	stw	fp,20(sp)
 20134e8:	df000504 	addi	fp,sp,20
 20134ec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 20134f0:	00bffa44 	movi	r2,-23
 20134f4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20134f8:	e13fff17 	ldw	r4,-4(fp)
 20134fc:	20131c40 	call	20131c4 <epcs_write_enable>

  alt_avalon_spi_command(
 2013500:	d8000015 	stw	zero,0(sp)
 2013504:	d8000115 	stw	zero,4(sp)
 2013508:	d8000215 	stw	zero,8(sp)
 201350c:	e13fff17 	ldw	r4,-4(fp)
 2013510:	000b883a 	mov	r5,zero
 2013514:	01800044 	movi	r6,1
 2013518:	e1fffe04 	addi	r7,fp,-8
 201351c:	20141200 	call	2014120 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
 2013520:	0001883a 	nop
}
 2013524:	e037883a 	mov	sp,fp
 2013528:	dfc00117 	ldw	ra,4(sp)
 201352c:	df000017 	ldw	fp,0(sp)
 2013530:	dec00204 	addi	sp,sp,8
 2013534:	f800283a 	ret

02013538 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2013538:	defff504 	addi	sp,sp,-44
 201353c:	df000a15 	stw	fp,40(sp)
 2013540:	df000a04 	addi	fp,sp,40
 2013544:	e13ffc15 	stw	r4,-16(fp)
 2013548:	e17ffd15 	stw	r5,-12(fp)
 201354c:	e1bffe15 	stw	r6,-8(fp)
 2013550:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2013554:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2013558:	008080b4 	movhi	r2,514
 201355c:	10aa8a04 	addi	r2,r2,-21976
 2013560:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2013564:	10003f26 	beq	r2,zero,2013664 <alt_alarm_start+0x12c>
  {
    if (alarm)
 2013568:	e0bffc17 	ldw	r2,-16(fp)
 201356c:	10003b26 	beq	r2,zero,201365c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 2013570:	e0bffc17 	ldw	r2,-16(fp)
 2013574:	e0fffe17 	ldw	r3,-8(fp)
 2013578:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 201357c:	e0bffc17 	ldw	r2,-16(fp)
 2013580:	e0ffff17 	ldw	r3,-4(fp)
 2013584:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013588:	0005303a 	rdctl	r2,status
 201358c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013590:	e0fff817 	ldw	r3,-32(fp)
 2013594:	00bfff84 	movi	r2,-2
 2013598:	1884703a 	and	r2,r3,r2
 201359c:	1001703a 	wrctl	status,r2
  
  return context;
 20135a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 20135a4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20135a8:	008080b4 	movhi	r2,514
 20135ac:	10aa8b04 	addi	r2,r2,-21972
 20135b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 20135b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20135b8:	e0fffd17 	ldw	r3,-12(fp)
 20135bc:	e0bff617 	ldw	r2,-40(fp)
 20135c0:	1885883a 	add	r2,r3,r2
 20135c4:	10c00044 	addi	r3,r2,1
 20135c8:	e0bffc17 	ldw	r2,-16(fp)
 20135cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 20135d0:	e0bffc17 	ldw	r2,-16(fp)
 20135d4:	10c00217 	ldw	r3,8(r2)
 20135d8:	e0bff617 	ldw	r2,-40(fp)
 20135dc:	1880042e 	bgeu	r3,r2,20135f0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 20135e0:	e0bffc17 	ldw	r2,-16(fp)
 20135e4:	00c00044 	movi	r3,1
 20135e8:	10c00405 	stb	r3,16(r2)
 20135ec:	00000206 	br	20135f8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 20135f0:	e0bffc17 	ldw	r2,-16(fp)
 20135f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 20135f8:	e0fffc17 	ldw	r3,-16(fp)
 20135fc:	008080b4 	movhi	r2,514
 2013600:	10aa7304 	addi	r2,r2,-22068
 2013604:	e0bff915 	stw	r2,-28(fp)
 2013608:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201360c:	e0bffa17 	ldw	r2,-24(fp)
 2013610:	e0fff917 	ldw	r3,-28(fp)
 2013614:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2013618:	e0bff917 	ldw	r2,-28(fp)
 201361c:	10c00017 	ldw	r3,0(r2)
 2013620:	e0bffa17 	ldw	r2,-24(fp)
 2013624:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2013628:	e0bff917 	ldw	r2,-28(fp)
 201362c:	10800017 	ldw	r2,0(r2)
 2013630:	e0fffa17 	ldw	r3,-24(fp)
 2013634:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2013638:	e0bff917 	ldw	r2,-28(fp)
 201363c:	e0fffa17 	ldw	r3,-24(fp)
 2013640:	10c00015 	stw	r3,0(r2)
 2013644:	e0bff717 	ldw	r2,-36(fp)
 2013648:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201364c:	e0bffb17 	ldw	r2,-20(fp)
 2013650:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2013654:	0005883a 	mov	r2,zero
 2013658:	00000306 	br	2013668 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 201365c:	00bffa84 	movi	r2,-22
 2013660:	00000106 	br	2013668 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 2013664:	00bfde84 	movi	r2,-134
  }
}
 2013668:	e037883a 	mov	sp,fp
 201366c:	df000017 	ldw	fp,0(sp)
 2013670:	dec00104 	addi	sp,sp,4
 2013674:	f800283a 	ret

02013678 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2013678:	defffa04 	addi	sp,sp,-24
 201367c:	dfc00515 	stw	ra,20(sp)
 2013680:	df000415 	stw	fp,16(sp)
 2013684:	df000404 	addi	fp,sp,16
 2013688:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 201368c:	00800244 	movi	r2,9
 2013690:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 2013694:	e13ffd17 	ldw	r4,-12(fp)
 2013698:	014003f4 	movhi	r5,15
 201369c:	29509004 	addi	r5,r5,16960
 20136a0:	200e2dc0 	call	200e2dc <__mulsi3>
 20136a4:	01017db4 	movhi	r4,1526
 20136a8:	21384004 	addi	r4,r4,-7936
 20136ac:	100b883a 	mov	r5,r2
 20136b0:	200e2cc0 	call	200e2cc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 20136b4:	01200034 	movhi	r4,32768
 20136b8:	213fffc4 	addi	r4,r4,-1
 20136bc:	100b883a 	mov	r5,r2
 20136c0:	200e2cc0 	call	200e2cc <__udivsi3>
 20136c4:	e13fff17 	ldw	r4,-4(fp)
 20136c8:	100b883a 	mov	r5,r2
 20136cc:	200e2cc0 	call	200e2cc <__udivsi3>
 20136d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 20136d4:	e0bffe17 	ldw	r2,-8(fp)
 20136d8:	10002a26 	beq	r2,zero,2013784 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 20136dc:	e03ffc15 	stw	zero,-16(fp)
 20136e0:	00001706 	br	2013740 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 20136e4:	00a00034 	movhi	r2,32768
 20136e8:	10bfffc4 	addi	r2,r2,-1
 20136ec:	10bfffc4 	addi	r2,r2,-1
 20136f0:	103ffe1e 	bne	r2,zero,20136ec <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 20136f4:	e13ffd17 	ldw	r4,-12(fp)
 20136f8:	014003f4 	movhi	r5,15
 20136fc:	29509004 	addi	r5,r5,16960
 2013700:	200e2dc0 	call	200e2dc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2013704:	01017db4 	movhi	r4,1526
 2013708:	21384004 	addi	r4,r4,-7936
 201370c:	100b883a 	mov	r5,r2
 2013710:	200e2cc0 	call	200e2cc <__udivsi3>
 2013714:	01200034 	movhi	r4,32768
 2013718:	213fffc4 	addi	r4,r4,-1
 201371c:	100b883a 	mov	r5,r2
 2013720:	200e2cc0 	call	200e2cc <__udivsi3>
 2013724:	1007883a 	mov	r3,r2
 2013728:	e0bfff17 	ldw	r2,-4(fp)
 201372c:	10c5c83a 	sub	r2,r2,r3
 2013730:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2013734:	e0bffc17 	ldw	r2,-16(fp)
 2013738:	10800044 	addi	r2,r2,1
 201373c:	e0bffc15 	stw	r2,-16(fp)
 2013740:	e0fffc17 	ldw	r3,-16(fp)
 2013744:	e0bffe17 	ldw	r2,-8(fp)
 2013748:	18bfe616 	blt	r3,r2,20136e4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 201374c:	e13ffd17 	ldw	r4,-12(fp)
 2013750:	014003f4 	movhi	r5,15
 2013754:	29509004 	addi	r5,r5,16960
 2013758:	200e2dc0 	call	200e2dc <__mulsi3>
 201375c:	01017db4 	movhi	r4,1526
 2013760:	21384004 	addi	r4,r4,-7936
 2013764:	100b883a 	mov	r5,r2
 2013768:	200e2cc0 	call	200e2cc <__udivsi3>
 201376c:	1009883a 	mov	r4,r2
 2013770:	e17fff17 	ldw	r5,-4(fp)
 2013774:	200e2dc0 	call	200e2dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2013778:	10bfffc4 	addi	r2,r2,-1
 201377c:	103ffe1e 	bne	r2,zero,2013778 <alt_busy_sleep+0x100>
 2013780:	00000d06 	br	20137b8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 2013784:	e13ffd17 	ldw	r4,-12(fp)
 2013788:	014003f4 	movhi	r5,15
 201378c:	29509004 	addi	r5,r5,16960
 2013790:	200e2dc0 	call	200e2dc <__mulsi3>
 2013794:	01017db4 	movhi	r4,1526
 2013798:	21384004 	addi	r4,r4,-7936
 201379c:	100b883a 	mov	r5,r2
 20137a0:	200e2cc0 	call	200e2cc <__udivsi3>
 20137a4:	1009883a 	mov	r4,r2
 20137a8:	e17fff17 	ldw	r5,-4(fp)
 20137ac:	200e2dc0 	call	200e2dc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20137b0:	10bfffc4 	addi	r2,r2,-1
 20137b4:	00bffe16 	blt	zero,r2,20137b0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 20137b8:	0005883a 	mov	r2,zero
}
 20137bc:	e037883a 	mov	sp,fp
 20137c0:	dfc00117 	ldw	ra,4(sp)
 20137c4:	df000017 	ldw	fp,0(sp)
 20137c8:	dec00204 	addi	sp,sp,8
 20137cc:	f800283a 	ret

020137d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20137d0:	defffe04 	addi	sp,sp,-8
 20137d4:	dfc00115 	stw	ra,4(sp)
 20137d8:	df000015 	stw	fp,0(sp)
 20137dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20137e0:	008080b4 	movhi	r2,514
 20137e4:	10aa7104 	addi	r2,r2,-22076
 20137e8:	10800017 	ldw	r2,0(r2)
 20137ec:	10000526 	beq	r2,zero,2013804 <alt_get_errno+0x34>
 20137f0:	008080b4 	movhi	r2,514
 20137f4:	10aa7104 	addi	r2,r2,-22076
 20137f8:	10800017 	ldw	r2,0(r2)
 20137fc:	103ee83a 	callr	r2
 2013800:	00000206 	br	201380c <alt_get_errno+0x3c>
 2013804:	008080b4 	movhi	r2,514
 2013808:	10aa7c04 	addi	r2,r2,-22032
}
 201380c:	e037883a 	mov	sp,fp
 2013810:	dfc00117 	ldw	ra,4(sp)
 2013814:	df000017 	ldw	fp,0(sp)
 2013818:	dec00204 	addi	sp,sp,8
 201381c:	f800283a 	ret

02013820 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2013820:	defffa04 	addi	sp,sp,-24
 2013824:	dfc00515 	stw	ra,20(sp)
 2013828:	df000415 	stw	fp,16(sp)
 201382c:	df000404 	addi	fp,sp,16
 2013830:	e13ffe15 	stw	r4,-8(fp)
 2013834:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2013838:	e0bffe17 	ldw	r2,-8(fp)
 201383c:	10000326 	beq	r2,zero,201384c <alt_dev_llist_insert+0x2c>
 2013840:	e0bffe17 	ldw	r2,-8(fp)
 2013844:	10800217 	ldw	r2,8(r2)
 2013848:	1000061e 	bne	r2,zero,2013864 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 201384c:	20137d00 	call	20137d0 <alt_get_errno>
 2013850:	1007883a 	mov	r3,r2
 2013854:	00800584 	movi	r2,22
 2013858:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201385c:	00bffa84 	movi	r2,-22
 2013860:	00001306 	br	20138b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2013864:	e0bffe17 	ldw	r2,-8(fp)
 2013868:	e0ffff17 	ldw	r3,-4(fp)
 201386c:	e0fffc15 	stw	r3,-16(fp)
 2013870:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2013874:	e0bffd17 	ldw	r2,-12(fp)
 2013878:	e0fffc17 	ldw	r3,-16(fp)
 201387c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2013880:	e0bffc17 	ldw	r2,-16(fp)
 2013884:	10c00017 	ldw	r3,0(r2)
 2013888:	e0bffd17 	ldw	r2,-12(fp)
 201388c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2013890:	e0bffc17 	ldw	r2,-16(fp)
 2013894:	10800017 	ldw	r2,0(r2)
 2013898:	e0fffd17 	ldw	r3,-12(fp)
 201389c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20138a0:	e0bffc17 	ldw	r2,-16(fp)
 20138a4:	e0fffd17 	ldw	r3,-12(fp)
 20138a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 20138ac:	0005883a 	mov	r2,zero
}
 20138b0:	e037883a 	mov	sp,fp
 20138b4:	dfc00117 	ldw	ra,4(sp)
 20138b8:	df000017 	ldw	fp,0(sp)
 20138bc:	dec00204 	addi	sp,sp,8
 20138c0:	f800283a 	ret

020138c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20138c4:	defffd04 	addi	sp,sp,-12
 20138c8:	dfc00215 	stw	ra,8(sp)
 20138cc:	df000115 	stw	fp,4(sp)
 20138d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20138d4:	00808074 	movhi	r2,513
 20138d8:	10927604 	addi	r2,r2,18904
 20138dc:	e0bfff15 	stw	r2,-4(fp)
 20138e0:	00000606 	br	20138fc <_do_ctors+0x38>
        (*ctor) (); 
 20138e4:	e0bfff17 	ldw	r2,-4(fp)
 20138e8:	10800017 	ldw	r2,0(r2)
 20138ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20138f0:	e0bfff17 	ldw	r2,-4(fp)
 20138f4:	10bfff04 	addi	r2,r2,-4
 20138f8:	e0bfff15 	stw	r2,-4(fp)
 20138fc:	e0ffff17 	ldw	r3,-4(fp)
 2013900:	00808074 	movhi	r2,513
 2013904:	10927704 	addi	r2,r2,18908
 2013908:	18bff62e 	bgeu	r3,r2,20138e4 <_do_ctors+0x20>
        (*ctor) (); 
}
 201390c:	e037883a 	mov	sp,fp
 2013910:	dfc00117 	ldw	ra,4(sp)
 2013914:	df000017 	ldw	fp,0(sp)
 2013918:	dec00204 	addi	sp,sp,8
 201391c:	f800283a 	ret

02013920 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2013920:	defffd04 	addi	sp,sp,-12
 2013924:	dfc00215 	stw	ra,8(sp)
 2013928:	df000115 	stw	fp,4(sp)
 201392c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2013930:	00808074 	movhi	r2,513
 2013934:	10927604 	addi	r2,r2,18904
 2013938:	e0bfff15 	stw	r2,-4(fp)
 201393c:	00000606 	br	2013958 <_do_dtors+0x38>
        (*dtor) (); 
 2013940:	e0bfff17 	ldw	r2,-4(fp)
 2013944:	10800017 	ldw	r2,0(r2)
 2013948:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201394c:	e0bfff17 	ldw	r2,-4(fp)
 2013950:	10bfff04 	addi	r2,r2,-4
 2013954:	e0bfff15 	stw	r2,-4(fp)
 2013958:	e0ffff17 	ldw	r3,-4(fp)
 201395c:	00808074 	movhi	r2,513
 2013960:	10927704 	addi	r2,r2,18908
 2013964:	18bff62e 	bgeu	r3,r2,2013940 <_do_dtors+0x20>
        (*dtor) (); 
}
 2013968:	e037883a 	mov	sp,fp
 201396c:	dfc00117 	ldw	ra,4(sp)
 2013970:	df000017 	ldw	fp,0(sp)
 2013974:	dec00204 	addi	sp,sp,8
 2013978:	f800283a 	ret

0201397c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 201397c:	defffc04 	addi	sp,sp,-16
 2013980:	dfc00315 	stw	ra,12(sp)
 2013984:	df000215 	stw	fp,8(sp)
 2013988:	df000204 	addi	fp,sp,8
 201398c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2013990:	e13fff17 	ldw	r4,-4(fp)
 2013994:	d1600f04 	addi	r5,gp,-32708
 2013998:	20143240 	call	2014324 <alt_find_dev>
 201399c:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 20139a0:	e0bffe17 	ldw	r2,-8(fp)
 20139a4:	10000926 	beq	r2,zero,20139cc <alt_flash_open_dev+0x50>
 20139a8:	e0bffe17 	ldw	r2,-8(fp)
 20139ac:	10800317 	ldw	r2,12(r2)
 20139b0:	10000626 	beq	r2,zero,20139cc <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 20139b4:	e0bffe17 	ldw	r2,-8(fp)
 20139b8:	10800317 	ldw	r2,12(r2)
 20139bc:	e13ffe17 	ldw	r4,-8(fp)
 20139c0:	e17fff17 	ldw	r5,-4(fp)
 20139c4:	103ee83a 	callr	r2
 20139c8:	00000106 	br	20139d0 <alt_flash_open_dev+0x54>
  }

  return dev;
 20139cc:	e0bffe17 	ldw	r2,-8(fp)
}
 20139d0:	e037883a 	mov	sp,fp
 20139d4:	dfc00117 	ldw	ra,4(sp)
 20139d8:	df000017 	ldw	fp,0(sp)
 20139dc:	dec00204 	addi	sp,sp,8
 20139e0:	f800283a 	ret

020139e4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 20139e4:	defffd04 	addi	sp,sp,-12
 20139e8:	dfc00215 	stw	ra,8(sp)
 20139ec:	df000115 	stw	fp,4(sp)
 20139f0:	df000104 	addi	fp,sp,4
 20139f4:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 20139f8:	e0bfff17 	ldw	r2,-4(fp)
 20139fc:	10000726 	beq	r2,zero,2013a1c <alt_flash_close_dev+0x38>
 2013a00:	e0bfff17 	ldw	r2,-4(fp)
 2013a04:	10800417 	ldw	r2,16(r2)
 2013a08:	10000426 	beq	r2,zero,2013a1c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 2013a0c:	e0bfff17 	ldw	r2,-4(fp)
 2013a10:	10800417 	ldw	r2,16(r2)
 2013a14:	e13fff17 	ldw	r4,-4(fp)
 2013a18:	103ee83a 	callr	r2
  }
  return;
 2013a1c:	0001883a 	nop
}
 2013a20:	e037883a 	mov	sp,fp
 2013a24:	dfc00117 	ldw	ra,4(sp)
 2013a28:	df000017 	ldw	fp,0(sp)
 2013a2c:	dec00204 	addi	sp,sp,8
 2013a30:	f800283a 	ret

02013a34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2013a34:	defff904 	addi	sp,sp,-28
 2013a38:	dfc00615 	stw	ra,24(sp)
 2013a3c:	df000515 	stw	fp,20(sp)
 2013a40:	df000504 	addi	fp,sp,20
 2013a44:	e13ffc15 	stw	r4,-16(fp)
 2013a48:	e17ffd15 	stw	r5,-12(fp)
 2013a4c:	e1bffe15 	stw	r6,-8(fp)
 2013a50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2013a54:	e0800217 	ldw	r2,8(fp)
 2013a58:	d8800015 	stw	r2,0(sp)
 2013a5c:	e13ffc17 	ldw	r4,-16(fp)
 2013a60:	e17ffd17 	ldw	r5,-12(fp)
 2013a64:	e1bffe17 	ldw	r6,-8(fp)
 2013a68:	e1ffff17 	ldw	r7,-4(fp)
 2013a6c:	2013c140 	call	2013c14 <alt_iic_isr_register>
}  
 2013a70:	e037883a 	mov	sp,fp
 2013a74:	dfc00117 	ldw	ra,4(sp)
 2013a78:	df000017 	ldw	fp,0(sp)
 2013a7c:	dec00204 	addi	sp,sp,8
 2013a80:	f800283a 	ret

02013a84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2013a84:	defff904 	addi	sp,sp,-28
 2013a88:	df000615 	stw	fp,24(sp)
 2013a8c:	df000604 	addi	fp,sp,24
 2013a90:	e13ffe15 	stw	r4,-8(fp)
 2013a94:	e17fff15 	stw	r5,-4(fp)
 2013a98:	e0bfff17 	ldw	r2,-4(fp)
 2013a9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013aa0:	0005303a 	rdctl	r2,status
 2013aa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013aa8:	e0fffb17 	ldw	r3,-20(fp)
 2013aac:	00bfff84 	movi	r2,-2
 2013ab0:	1884703a 	and	r2,r3,r2
 2013ab4:	1001703a 	wrctl	status,r2
  
  return context;
 2013ab8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2013abc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2013ac0:	e0bffa17 	ldw	r2,-24(fp)
 2013ac4:	00c00044 	movi	r3,1
 2013ac8:	1884983a 	sll	r2,r3,r2
 2013acc:	1007883a 	mov	r3,r2
 2013ad0:	008080b4 	movhi	r2,514
 2013ad4:	10aa8c04 	addi	r2,r2,-21968
 2013ad8:	10800017 	ldw	r2,0(r2)
 2013adc:	1886b03a 	or	r3,r3,r2
 2013ae0:	008080b4 	movhi	r2,514
 2013ae4:	10aa8c04 	addi	r2,r2,-21968
 2013ae8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2013aec:	008080b4 	movhi	r2,514
 2013af0:	10aa8c04 	addi	r2,r2,-21968
 2013af4:	10800017 	ldw	r2,0(r2)
 2013af8:	100170fa 	wrctl	ienable,r2
 2013afc:	e0bffc17 	ldw	r2,-16(fp)
 2013b00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013b04:	e0bffd17 	ldw	r2,-12(fp)
 2013b08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2013b0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2013b10:	0001883a 	nop
}
 2013b14:	e037883a 	mov	sp,fp
 2013b18:	df000017 	ldw	fp,0(sp)
 2013b1c:	dec00104 	addi	sp,sp,4
 2013b20:	f800283a 	ret

02013b24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2013b24:	defff904 	addi	sp,sp,-28
 2013b28:	df000615 	stw	fp,24(sp)
 2013b2c:	df000604 	addi	fp,sp,24
 2013b30:	e13ffe15 	stw	r4,-8(fp)
 2013b34:	e17fff15 	stw	r5,-4(fp)
 2013b38:	e0bfff17 	ldw	r2,-4(fp)
 2013b3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013b40:	0005303a 	rdctl	r2,status
 2013b44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013b48:	e0fffb17 	ldw	r3,-20(fp)
 2013b4c:	00bfff84 	movi	r2,-2
 2013b50:	1884703a 	and	r2,r3,r2
 2013b54:	1001703a 	wrctl	status,r2
  
  return context;
 2013b58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2013b5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2013b60:	e0bffa17 	ldw	r2,-24(fp)
 2013b64:	00c00044 	movi	r3,1
 2013b68:	1884983a 	sll	r2,r3,r2
 2013b6c:	0084303a 	nor	r2,zero,r2
 2013b70:	1007883a 	mov	r3,r2
 2013b74:	008080b4 	movhi	r2,514
 2013b78:	10aa8c04 	addi	r2,r2,-21968
 2013b7c:	10800017 	ldw	r2,0(r2)
 2013b80:	1886703a 	and	r3,r3,r2
 2013b84:	008080b4 	movhi	r2,514
 2013b88:	10aa8c04 	addi	r2,r2,-21968
 2013b8c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2013b90:	008080b4 	movhi	r2,514
 2013b94:	10aa8c04 	addi	r2,r2,-21968
 2013b98:	10800017 	ldw	r2,0(r2)
 2013b9c:	100170fa 	wrctl	ienable,r2
 2013ba0:	e0bffc17 	ldw	r2,-16(fp)
 2013ba4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ba8:	e0bffd17 	ldw	r2,-12(fp)
 2013bac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2013bb0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2013bb4:	0001883a 	nop
}
 2013bb8:	e037883a 	mov	sp,fp
 2013bbc:	df000017 	ldw	fp,0(sp)
 2013bc0:	dec00104 	addi	sp,sp,4
 2013bc4:	f800283a 	ret

02013bc8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2013bc8:	defffc04 	addi	sp,sp,-16
 2013bcc:	df000315 	stw	fp,12(sp)
 2013bd0:	df000304 	addi	fp,sp,12
 2013bd4:	e13ffe15 	stw	r4,-8(fp)
 2013bd8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2013bdc:	000530fa 	rdctl	r2,ienable
 2013be0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2013be4:	e0bfff17 	ldw	r2,-4(fp)
 2013be8:	00c00044 	movi	r3,1
 2013bec:	1884983a 	sll	r2,r3,r2
 2013bf0:	1007883a 	mov	r3,r2
 2013bf4:	e0bffd17 	ldw	r2,-12(fp)
 2013bf8:	1884703a 	and	r2,r3,r2
 2013bfc:	1004c03a 	cmpne	r2,r2,zero
 2013c00:	10803fcc 	andi	r2,r2,255
}
 2013c04:	e037883a 	mov	sp,fp
 2013c08:	df000017 	ldw	fp,0(sp)
 2013c0c:	dec00104 	addi	sp,sp,4
 2013c10:	f800283a 	ret

02013c14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2013c14:	defff504 	addi	sp,sp,-44
 2013c18:	dfc00a15 	stw	ra,40(sp)
 2013c1c:	df000915 	stw	fp,36(sp)
 2013c20:	df000904 	addi	fp,sp,36
 2013c24:	e13ffc15 	stw	r4,-16(fp)
 2013c28:	e17ffd15 	stw	r5,-12(fp)
 2013c2c:	e1bffe15 	stw	r6,-8(fp)
 2013c30:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2013c34:	00bffa84 	movi	r2,-22
 2013c38:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2013c3c:	e0bffd17 	ldw	r2,-12(fp)
 2013c40:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2013c44:	e0bff817 	ldw	r2,-32(fp)
 2013c48:	10800808 	cmpgei	r2,r2,32
 2013c4c:	1000271e 	bne	r2,zero,2013cec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013c50:	0005303a 	rdctl	r2,status
 2013c54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013c58:	e0fffa17 	ldw	r3,-24(fp)
 2013c5c:	00bfff84 	movi	r2,-2
 2013c60:	1884703a 	and	r2,r3,r2
 2013c64:	1001703a 	wrctl	status,r2
  
  return context;
 2013c68:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2013c6c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2013c70:	008080b4 	movhi	r2,514
 2013c74:	10aa9804 	addi	r2,r2,-21920
 2013c78:	e0fff817 	ldw	r3,-32(fp)
 2013c7c:	180690fa 	slli	r3,r3,3
 2013c80:	10c5883a 	add	r2,r2,r3
 2013c84:	e0fffe17 	ldw	r3,-8(fp)
 2013c88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2013c8c:	008080b4 	movhi	r2,514
 2013c90:	10aa9804 	addi	r2,r2,-21920
 2013c94:	e0fff817 	ldw	r3,-32(fp)
 2013c98:	180690fa 	slli	r3,r3,3
 2013c9c:	18c00104 	addi	r3,r3,4
 2013ca0:	10c5883a 	add	r2,r2,r3
 2013ca4:	e0ffff17 	ldw	r3,-4(fp)
 2013ca8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2013cac:	e0bffe17 	ldw	r2,-8(fp)
 2013cb0:	10000526 	beq	r2,zero,2013cc8 <alt_iic_isr_register+0xb4>
 2013cb4:	e0bff817 	ldw	r2,-32(fp)
 2013cb8:	e13ffc17 	ldw	r4,-16(fp)
 2013cbc:	100b883a 	mov	r5,r2
 2013cc0:	2013a840 	call	2013a84 <alt_ic_irq_enable>
 2013cc4:	00000406 	br	2013cd8 <alt_iic_isr_register+0xc4>
 2013cc8:	e0bff817 	ldw	r2,-32(fp)
 2013ccc:	e13ffc17 	ldw	r4,-16(fp)
 2013cd0:	100b883a 	mov	r5,r2
 2013cd4:	2013b240 	call	2013b24 <alt_ic_irq_disable>
 2013cd8:	e0bff715 	stw	r2,-36(fp)
 2013cdc:	e0bff917 	ldw	r2,-28(fp)
 2013ce0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013ce4:	e0bffb17 	ldw	r2,-20(fp)
 2013ce8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2013cec:	e0bff717 	ldw	r2,-36(fp)
}
 2013cf0:	e037883a 	mov	sp,fp
 2013cf4:	dfc00117 	ldw	ra,4(sp)
 2013cf8:	df000017 	ldw	fp,0(sp)
 2013cfc:	dec00204 	addi	sp,sp,8
 2013d00:	f800283a 	ret

02013d04 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2013d04:	defff804 	addi	sp,sp,-32
 2013d08:	dfc00715 	stw	ra,28(sp)
 2013d0c:	df000615 	stw	fp,24(sp)
 2013d10:	dc000515 	stw	r16,20(sp)
 2013d14:	df000604 	addi	fp,sp,24
 2013d18:	e13ffb15 	stw	r4,-20(fp)
 2013d1c:	e17ffc15 	stw	r5,-16(fp)
 2013d20:	e1bffd15 	stw	r6,-12(fp)
 2013d24:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2013d28:	e13ffc17 	ldw	r4,-16(fp)
 2013d2c:	e17ffd17 	ldw	r5,-12(fp)
 2013d30:	e1bffe17 	ldw	r6,-8(fp)
 2013d34:	2013fa00 	call	2013fa0 <open>
 2013d38:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2013d3c:	e0bffa17 	ldw	r2,-24(fp)
 2013d40:	10002216 	blt	r2,zero,2013dcc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2013d44:	040080b4 	movhi	r16,514
 2013d48:	8425b004 	addi	r16,r16,-26944
 2013d4c:	e0bffa17 	ldw	r2,-24(fp)
 2013d50:	1009883a 	mov	r4,r2
 2013d54:	01400304 	movi	r5,12
 2013d58:	200e2dc0 	call	200e2dc <__mulsi3>
 2013d5c:	8085883a 	add	r2,r16,r2
 2013d60:	10c00017 	ldw	r3,0(r2)
 2013d64:	e0bffb17 	ldw	r2,-20(fp)
 2013d68:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2013d6c:	040080b4 	movhi	r16,514
 2013d70:	8425b004 	addi	r16,r16,-26944
 2013d74:	e0bffa17 	ldw	r2,-24(fp)
 2013d78:	1009883a 	mov	r4,r2
 2013d7c:	01400304 	movi	r5,12
 2013d80:	200e2dc0 	call	200e2dc <__mulsi3>
 2013d84:	10800104 	addi	r2,r2,4
 2013d88:	8085883a 	add	r2,r16,r2
 2013d8c:	10c00017 	ldw	r3,0(r2)
 2013d90:	e0bffb17 	ldw	r2,-20(fp)
 2013d94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2013d98:	040080b4 	movhi	r16,514
 2013d9c:	8425b004 	addi	r16,r16,-26944
 2013da0:	e0bffa17 	ldw	r2,-24(fp)
 2013da4:	1009883a 	mov	r4,r2
 2013da8:	01400304 	movi	r5,12
 2013dac:	200e2dc0 	call	200e2dc <__mulsi3>
 2013db0:	10800204 	addi	r2,r2,8
 2013db4:	8085883a 	add	r2,r16,r2
 2013db8:	10c00017 	ldw	r3,0(r2)
 2013dbc:	e0bffb17 	ldw	r2,-20(fp)
 2013dc0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2013dc4:	e13ffa17 	ldw	r4,-24(fp)
 2013dc8:	201139c0 	call	201139c <alt_release_fd>
  }
} 
 2013dcc:	e6ffff04 	addi	sp,fp,-4
 2013dd0:	dfc00217 	ldw	ra,8(sp)
 2013dd4:	df000117 	ldw	fp,4(sp)
 2013dd8:	dc000017 	ldw	r16,0(sp)
 2013ddc:	dec00304 	addi	sp,sp,12
 2013de0:	f800283a 	ret

02013de4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2013de4:	defffb04 	addi	sp,sp,-20
 2013de8:	dfc00415 	stw	ra,16(sp)
 2013dec:	df000315 	stw	fp,12(sp)
 2013df0:	df000304 	addi	fp,sp,12
 2013df4:	e13ffd15 	stw	r4,-12(fp)
 2013df8:	e17ffe15 	stw	r5,-8(fp)
 2013dfc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2013e00:	010080b4 	movhi	r4,514
 2013e04:	2125b304 	addi	r4,r4,-26932
 2013e08:	e17ffd17 	ldw	r5,-12(fp)
 2013e0c:	01800044 	movi	r6,1
 2013e10:	01c07fc4 	movi	r7,511
 2013e14:	2013d040 	call	2013d04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2013e18:	010080b4 	movhi	r4,514
 2013e1c:	2125b004 	addi	r4,r4,-26944
 2013e20:	e17ffe17 	ldw	r5,-8(fp)
 2013e24:	000d883a 	mov	r6,zero
 2013e28:	01c07fc4 	movi	r7,511
 2013e2c:	2013d040 	call	2013d04 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2013e30:	010080b4 	movhi	r4,514
 2013e34:	2125b604 	addi	r4,r4,-26920
 2013e38:	e17fff17 	ldw	r5,-4(fp)
 2013e3c:	01800044 	movi	r6,1
 2013e40:	01c07fc4 	movi	r7,511
 2013e44:	2013d040 	call	2013d04 <alt_open_fd>
}  
 2013e48:	e037883a 	mov	sp,fp
 2013e4c:	dfc00117 	ldw	ra,4(sp)
 2013e50:	df000017 	ldw	fp,0(sp)
 2013e54:	dec00204 	addi	sp,sp,8
 2013e58:	f800283a 	ret

02013e5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013e5c:	defffe04 	addi	sp,sp,-8
 2013e60:	dfc00115 	stw	ra,4(sp)
 2013e64:	df000015 	stw	fp,0(sp)
 2013e68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013e6c:	008080b4 	movhi	r2,514
 2013e70:	10aa7104 	addi	r2,r2,-22076
 2013e74:	10800017 	ldw	r2,0(r2)
 2013e78:	10000526 	beq	r2,zero,2013e90 <alt_get_errno+0x34>
 2013e7c:	008080b4 	movhi	r2,514
 2013e80:	10aa7104 	addi	r2,r2,-22076
 2013e84:	10800017 	ldw	r2,0(r2)
 2013e88:	103ee83a 	callr	r2
 2013e8c:	00000206 	br	2013e98 <alt_get_errno+0x3c>
 2013e90:	008080b4 	movhi	r2,514
 2013e94:	10aa7c04 	addi	r2,r2,-22032
}
 2013e98:	e037883a 	mov	sp,fp
 2013e9c:	dfc00117 	ldw	ra,4(sp)
 2013ea0:	df000017 	ldw	fp,0(sp)
 2013ea4:	dec00204 	addi	sp,sp,8
 2013ea8:	f800283a 	ret

02013eac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2013eac:	defffb04 	addi	sp,sp,-20
 2013eb0:	dfc00415 	stw	ra,16(sp)
 2013eb4:	df000315 	stw	fp,12(sp)
 2013eb8:	dc000215 	stw	r16,8(sp)
 2013ebc:	df000304 	addi	fp,sp,12
 2013ec0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2013ec4:	e0bffe17 	ldw	r2,-8(fp)
 2013ec8:	10800217 	ldw	r2,8(r2)
 2013ecc:	10d00034 	orhi	r3,r2,16384
 2013ed0:	e0bffe17 	ldw	r2,-8(fp)
 2013ed4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2013ed8:	e03ffd15 	stw	zero,-12(fp)
 2013edc:	00002306 	br	2013f6c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2013ee0:	040080b4 	movhi	r16,514
 2013ee4:	8425b004 	addi	r16,r16,-26944
 2013ee8:	e0bffd17 	ldw	r2,-12(fp)
 2013eec:	1009883a 	mov	r4,r2
 2013ef0:	01400304 	movi	r5,12
 2013ef4:	200e2dc0 	call	200e2dc <__mulsi3>
 2013ef8:	8085883a 	add	r2,r16,r2
 2013efc:	10c00017 	ldw	r3,0(r2)
 2013f00:	e0bffe17 	ldw	r2,-8(fp)
 2013f04:	10800017 	ldw	r2,0(r2)
 2013f08:	1880151e 	bne	r3,r2,2013f60 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2013f0c:	040080b4 	movhi	r16,514
 2013f10:	8425b004 	addi	r16,r16,-26944
 2013f14:	e0bffd17 	ldw	r2,-12(fp)
 2013f18:	1009883a 	mov	r4,r2
 2013f1c:	01400304 	movi	r5,12
 2013f20:	200e2dc0 	call	200e2dc <__mulsi3>
 2013f24:	10800204 	addi	r2,r2,8
 2013f28:	8085883a 	add	r2,r16,r2
 2013f2c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2013f30:	10000b0e 	bge	r2,zero,2013f60 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2013f34:	e13ffd17 	ldw	r4,-12(fp)
 2013f38:	01400304 	movi	r5,12
 2013f3c:	200e2dc0 	call	200e2dc <__mulsi3>
 2013f40:	1007883a 	mov	r3,r2
 2013f44:	008080b4 	movhi	r2,514
 2013f48:	10a5b004 	addi	r2,r2,-26944
 2013f4c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2013f50:	e0bffe17 	ldw	r2,-8(fp)
 2013f54:	18800226 	beq	r3,r2,2013f60 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2013f58:	00bffcc4 	movi	r2,-13
 2013f5c:	00000a06 	br	2013f88 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2013f60:	e0bffd17 	ldw	r2,-12(fp)
 2013f64:	10800044 	addi	r2,r2,1
 2013f68:	e0bffd15 	stw	r2,-12(fp)
 2013f6c:	008080b4 	movhi	r2,514
 2013f70:	10aa7004 	addi	r2,r2,-22080
 2013f74:	10800017 	ldw	r2,0(r2)
 2013f78:	1007883a 	mov	r3,r2
 2013f7c:	e0bffd17 	ldw	r2,-12(fp)
 2013f80:	18bfd72e 	bgeu	r3,r2,2013ee0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2013f84:	0005883a 	mov	r2,zero
}
 2013f88:	e6ffff04 	addi	sp,fp,-4
 2013f8c:	dfc00217 	ldw	ra,8(sp)
 2013f90:	df000117 	ldw	fp,4(sp)
 2013f94:	dc000017 	ldw	r16,0(sp)
 2013f98:	dec00304 	addi	sp,sp,12
 2013f9c:	f800283a 	ret

02013fa0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2013fa0:	defff604 	addi	sp,sp,-40
 2013fa4:	dfc00915 	stw	ra,36(sp)
 2013fa8:	df000815 	stw	fp,32(sp)
 2013fac:	df000804 	addi	fp,sp,32
 2013fb0:	e13ffd15 	stw	r4,-12(fp)
 2013fb4:	e17ffe15 	stw	r5,-8(fp)
 2013fb8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2013fbc:	00bfffc4 	movi	r2,-1
 2013fc0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2013fc4:	00bffb44 	movi	r2,-19
 2013fc8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2013fcc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2013fd0:	e13ffd17 	ldw	r4,-12(fp)
 2013fd4:	014080b4 	movhi	r5,514
 2013fd8:	296a6e04 	addi	r5,r5,-22088
 2013fdc:	20143240 	call	2014324 <alt_find_dev>
 2013fe0:	e0bff815 	stw	r2,-32(fp)
 2013fe4:	e0bff817 	ldw	r2,-32(fp)
 2013fe8:	1000051e 	bne	r2,zero,2014000 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2013fec:	e13ffd17 	ldw	r4,-12(fp)
 2013ff0:	20143b40 	call	20143b4 <alt_find_file>
 2013ff4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2013ff8:	00800044 	movi	r2,1
 2013ffc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2014000:	e0bff817 	ldw	r2,-32(fp)
 2014004:	10002b26 	beq	r2,zero,20140b4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2014008:	e13ff817 	ldw	r4,-32(fp)
 201400c:	20144c80 	call	20144c8 <alt_get_fd>
 2014010:	e0bff915 	stw	r2,-28(fp)
 2014014:	e0bff917 	ldw	r2,-28(fp)
 2014018:	1000030e 	bge	r2,zero,2014028 <open+0x88>
    {
      status = index;
 201401c:	e0bff917 	ldw	r2,-28(fp)
 2014020:	e0bffa15 	stw	r2,-24(fp)
 2014024:	00002506 	br	20140bc <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2014028:	e13ff917 	ldw	r4,-28(fp)
 201402c:	01400304 	movi	r5,12
 2014030:	200e2dc0 	call	200e2dc <__mulsi3>
 2014034:	1007883a 	mov	r3,r2
 2014038:	008080b4 	movhi	r2,514
 201403c:	10a5b004 	addi	r2,r2,-26944
 2014040:	1885883a 	add	r2,r3,r2
 2014044:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2014048:	e0fffe17 	ldw	r3,-8(fp)
 201404c:	00900034 	movhi	r2,16384
 2014050:	10bfffc4 	addi	r2,r2,-1
 2014054:	1886703a 	and	r3,r3,r2
 2014058:	e0bffc17 	ldw	r2,-16(fp)
 201405c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2014060:	e0bffb17 	ldw	r2,-20(fp)
 2014064:	1000051e 	bne	r2,zero,201407c <open+0xdc>
 2014068:	e13ffc17 	ldw	r4,-16(fp)
 201406c:	2013eac0 	call	2013eac <alt_file_locked>
 2014070:	e0bffa15 	stw	r2,-24(fp)
 2014074:	e0bffa17 	ldw	r2,-24(fp)
 2014078:	10001016 	blt	r2,zero,20140bc <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201407c:	e0bff817 	ldw	r2,-32(fp)
 2014080:	10800317 	ldw	r2,12(r2)
 2014084:	10000826 	beq	r2,zero,20140a8 <open+0x108>
 2014088:	e0bff817 	ldw	r2,-32(fp)
 201408c:	10800317 	ldw	r2,12(r2)
 2014090:	e13ffc17 	ldw	r4,-16(fp)
 2014094:	e17ffd17 	ldw	r5,-12(fp)
 2014098:	e1bffe17 	ldw	r6,-8(fp)
 201409c:	e1ffff17 	ldw	r7,-4(fp)
 20140a0:	103ee83a 	callr	r2
 20140a4:	00000106 	br	20140ac <open+0x10c>
 20140a8:	0005883a 	mov	r2,zero
 20140ac:	e0bffa15 	stw	r2,-24(fp)
 20140b0:	00000206 	br	20140bc <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 20140b4:	00bffb44 	movi	r2,-19
 20140b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 20140bc:	e0bffa17 	ldw	r2,-24(fp)
 20140c0:	1000090e 	bge	r2,zero,20140e8 <open+0x148>
  {
    alt_release_fd (index);  
 20140c4:	e13ff917 	ldw	r4,-28(fp)
 20140c8:	201139c0 	call	201139c <alt_release_fd>
    ALT_ERRNO = -status;
 20140cc:	2013e5c0 	call	2013e5c <alt_get_errno>
 20140d0:	1007883a 	mov	r3,r2
 20140d4:	e0bffa17 	ldw	r2,-24(fp)
 20140d8:	0085c83a 	sub	r2,zero,r2
 20140dc:	18800015 	stw	r2,0(r3)
    return -1;
 20140e0:	00bfffc4 	movi	r2,-1
 20140e4:	00000106 	br	20140ec <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 20140e8:	e0bff917 	ldw	r2,-28(fp)
}
 20140ec:	e037883a 	mov	sp,fp
 20140f0:	dfc00117 	ldw	ra,4(sp)
 20140f4:	df000017 	ldw	fp,0(sp)
 20140f8:	dec00204 	addi	sp,sp,8
 20140fc:	f800283a 	ret

02014100 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2014100:	deffff04 	addi	sp,sp,-4
 2014104:	df000015 	stw	fp,0(sp)
 2014108:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201410c:	000170fa 	wrctl	ienable,zero
}
 2014110:	e037883a 	mov	sp,fp
 2014114:	df000017 	ldw	fp,0(sp)
 2014118:	dec00104 	addi	sp,sp,4
 201411c:	f800283a 	ret

02014120 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2014120:	defff404 	addi	sp,sp,-48
 2014124:	df000b15 	stw	fp,44(sp)
 2014128:	df000b04 	addi	fp,sp,44
 201412c:	e13ffc15 	stw	r4,-16(fp)
 2014130:	e17ffd15 	stw	r5,-12(fp)
 2014134:	e1bffe15 	stw	r6,-8(fp)
 2014138:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 201413c:	e0ffff17 	ldw	r3,-4(fp)
 2014140:	e0bffe17 	ldw	r2,-8(fp)
 2014144:	1885883a 	add	r2,r3,r2
 2014148:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 201414c:	e0c00217 	ldw	r3,8(fp)
 2014150:	e0800117 	ldw	r2,4(fp)
 2014154:	1885883a 	add	r2,r3,r2
 2014158:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 201415c:	e0800117 	ldw	r2,4(fp)
 2014160:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2014164:	e0bffe17 	ldw	r2,-8(fp)
 2014168:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 201416c:	00800044 	movi	r2,1
 2014170:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2014174:	e0bffc17 	ldw	r2,-16(fp)
 2014178:	10800504 	addi	r2,r2,20
 201417c:	1009883a 	mov	r4,r2
 2014180:	e0bffd17 	ldw	r2,-12(fp)
 2014184:	00c00044 	movi	r3,1
 2014188:	1884983a 	sll	r2,r3,r2
 201418c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2014190:	e0800317 	ldw	r2,12(fp)
 2014194:	1080008c 	andi	r2,r2,2
 2014198:	1000051e 	bne	r2,zero,20141b0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 201419c:	e0bffc17 	ldw	r2,-16(fp)
 20141a0:	10800304 	addi	r2,r2,12
 20141a4:	1007883a 	mov	r3,r2
 20141a8:	00810004 	movi	r2,1024
 20141ac:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 20141b0:	e0bffc17 	ldw	r2,-16(fp)
 20141b4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 20141b8:	e0bffc17 	ldw	r2,-16(fp)
 20141bc:	10800204 	addi	r2,r2,8
 20141c0:	10800037 	ldwio	r2,0(r2)
 20141c4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20141c8:	e0bffa17 	ldw	r2,-24(fp)
 20141cc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 20141d0:	10000226 	beq	r2,zero,20141dc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20141d4:	e0bff717 	ldw	r2,-36(fp)
 20141d8:	1000031e 	bne	r2,zero,20141e8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 20141dc:	e0bffa17 	ldw	r2,-24(fp)
 20141e0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 20141e4:	103ff426 	beq	r2,zero,20141b8 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 20141e8:	e0bffa17 	ldw	r2,-24(fp)
 20141ec:	1080100c 	andi	r2,r2,64
 20141f0:	10001e26 	beq	r2,zero,201426c <alt_avalon_spi_command+0x14c>
 20141f4:	e0bff717 	ldw	r2,-36(fp)
 20141f8:	00801c0e 	bge	zero,r2,201426c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 20141fc:	e0bff717 	ldw	r2,-36(fp)
 2014200:	10bfffc4 	addi	r2,r2,-1
 2014204:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 2014208:	e0ffff17 	ldw	r3,-4(fp)
 201420c:	e0bff817 	ldw	r2,-32(fp)
 2014210:	18800a2e 	bgeu	r3,r2,201423c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2014214:	e0bffc17 	ldw	r2,-16(fp)
 2014218:	10800104 	addi	r2,r2,4
 201421c:	1009883a 	mov	r4,r2
 2014220:	e0bfff17 	ldw	r2,-4(fp)
 2014224:	10c00044 	addi	r3,r2,1
 2014228:	e0ffff15 	stw	r3,-4(fp)
 201422c:	10800003 	ldbu	r2,0(r2)
 2014230:	10803fcc 	andi	r2,r2,255
 2014234:	20800035 	stwio	r2,0(r4)
 2014238:	00000c06 	br	201426c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 201423c:	e0bff517 	ldw	r2,-44(fp)
 2014240:	10000826 	beq	r2,zero,2014264 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2014244:	e0bff517 	ldw	r2,-44(fp)
 2014248:	10bfffc4 	addi	r2,r2,-1
 201424c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2014250:	e0bffc17 	ldw	r2,-16(fp)
 2014254:	10800104 	addi	r2,r2,4
 2014258:	0007883a 	mov	r3,zero
 201425c:	10c00035 	stwio	r3,0(r2)
 2014260:	00000206 	br	201426c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2014264:	00bf0004 	movi	r2,-1024
 2014268:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 201426c:	e0bffa17 	ldw	r2,-24(fp)
 2014270:	1080200c 	andi	r2,r2,128
 2014274:	10001726 	beq	r2,zero,20142d4 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2014278:	e0bffc17 	ldw	r2,-16(fp)
 201427c:	10800037 	ldwio	r2,0(r2)
 2014280:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2014284:	e0bff617 	ldw	r2,-40(fp)
 2014288:	10000426 	beq	r2,zero,201429c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 201428c:	e0bff617 	ldw	r2,-40(fp)
 2014290:	10bfffc4 	addi	r2,r2,-1
 2014294:	e0bff615 	stw	r2,-40(fp)
 2014298:	00000506 	br	20142b0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 201429c:	e0800217 	ldw	r2,8(fp)
 20142a0:	10c00044 	addi	r3,r2,1
 20142a4:	e0c00215 	stw	r3,8(fp)
 20142a8:	e0fffb17 	ldw	r3,-20(fp)
 20142ac:	10c00005 	stb	r3,0(r2)
      credits++;
 20142b0:	e0bff717 	ldw	r2,-36(fp)
 20142b4:	10800044 	addi	r2,r2,1
 20142b8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 20142bc:	e0bff617 	ldw	r2,-40(fp)
 20142c0:	1000041e 	bne	r2,zero,20142d4 <alt_avalon_spi_command+0x1b4>
 20142c4:	e0c00217 	ldw	r3,8(fp)
 20142c8:	e0bff917 	ldw	r2,-28(fp)
 20142cc:	1880011e 	bne	r3,r2,20142d4 <alt_avalon_spi_command+0x1b4>
        break;
 20142d0:	00000106 	br	20142d8 <alt_avalon_spi_command+0x1b8>
    }
    
  }
 20142d4:	003fb806 	br	20141b8 <alt_avalon_spi_command+0x98>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 20142d8:	e0bffc17 	ldw	r2,-16(fp)
 20142dc:	10800204 	addi	r2,r2,8
 20142e0:	10800037 	ldwio	r2,0(r2)
 20142e4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 20142e8:	e0bffa17 	ldw	r2,-24(fp)
 20142ec:	1080080c 	andi	r2,r2,32
 20142f0:	103ff926 	beq	r2,zero,20142d8 <alt_avalon_spi_command+0x1b8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 20142f4:	e0800317 	ldw	r2,12(fp)
 20142f8:	1080004c 	andi	r2,r2,1
 20142fc:	1000041e 	bne	r2,zero,2014310 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2014300:	e0bffc17 	ldw	r2,-16(fp)
 2014304:	10800304 	addi	r2,r2,12
 2014308:	0007883a 	mov	r3,zero
 201430c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2014310:	e0800117 	ldw	r2,4(fp)
}
 2014314:	e037883a 	mov	sp,fp
 2014318:	df000017 	ldw	fp,0(sp)
 201431c:	dec00104 	addi	sp,sp,4
 2014320:	f800283a 	ret

02014324 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2014324:	defffa04 	addi	sp,sp,-24
 2014328:	dfc00515 	stw	ra,20(sp)
 201432c:	df000415 	stw	fp,16(sp)
 2014330:	df000404 	addi	fp,sp,16
 2014334:	e13ffe15 	stw	r4,-8(fp)
 2014338:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201433c:	e0bfff17 	ldw	r2,-4(fp)
 2014340:	10800017 	ldw	r2,0(r2)
 2014344:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2014348:	e13ffe17 	ldw	r4,-8(fp)
 201434c:	20043a00 	call	20043a0 <strlen>
 2014350:	10800044 	addi	r2,r2,1
 2014354:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2014358:	00000d06 	br	2014390 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201435c:	e0bffc17 	ldw	r2,-16(fp)
 2014360:	10c00217 	ldw	r3,8(r2)
 2014364:	e0bffd17 	ldw	r2,-12(fp)
 2014368:	1809883a 	mov	r4,r3
 201436c:	e17ffe17 	ldw	r5,-8(fp)
 2014370:	100d883a 	mov	r6,r2
 2014374:	20146840 	call	2014684 <memcmp>
 2014378:	1000021e 	bne	r2,zero,2014384 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201437c:	e0bffc17 	ldw	r2,-16(fp)
 2014380:	00000706 	br	20143a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2014384:	e0bffc17 	ldw	r2,-16(fp)
 2014388:	10800017 	ldw	r2,0(r2)
 201438c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2014390:	e0fffc17 	ldw	r3,-16(fp)
 2014394:	e0bfff17 	ldw	r2,-4(fp)
 2014398:	18bff01e 	bne	r3,r2,201435c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201439c:	0005883a 	mov	r2,zero
}
 20143a0:	e037883a 	mov	sp,fp
 20143a4:	dfc00117 	ldw	ra,4(sp)
 20143a8:	df000017 	ldw	fp,0(sp)
 20143ac:	dec00204 	addi	sp,sp,8
 20143b0:	f800283a 	ret

020143b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20143b4:	defffb04 	addi	sp,sp,-20
 20143b8:	dfc00415 	stw	ra,16(sp)
 20143bc:	df000315 	stw	fp,12(sp)
 20143c0:	df000304 	addi	fp,sp,12
 20143c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20143c8:	008080b4 	movhi	r2,514
 20143cc:	10aa6c04 	addi	r2,r2,-22096
 20143d0:	10800017 	ldw	r2,0(r2)
 20143d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20143d8:	00003106 	br	20144a0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 20143dc:	e0bffd17 	ldw	r2,-12(fp)
 20143e0:	10800217 	ldw	r2,8(r2)
 20143e4:	1009883a 	mov	r4,r2
 20143e8:	20043a00 	call	20043a0 <strlen>
 20143ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20143f0:	e0bffd17 	ldw	r2,-12(fp)
 20143f4:	10c00217 	ldw	r3,8(r2)
 20143f8:	e0bffe17 	ldw	r2,-8(fp)
 20143fc:	10bfffc4 	addi	r2,r2,-1
 2014400:	1885883a 	add	r2,r3,r2
 2014404:	10800003 	ldbu	r2,0(r2)
 2014408:	10803fcc 	andi	r2,r2,255
 201440c:	1080201c 	xori	r2,r2,128
 2014410:	10bfe004 	addi	r2,r2,-128
 2014414:	10800bd8 	cmpnei	r2,r2,47
 2014418:	1000031e 	bne	r2,zero,2014428 <alt_find_file+0x74>
    {
      len -= 1;
 201441c:	e0bffe17 	ldw	r2,-8(fp)
 2014420:	10bfffc4 	addi	r2,r2,-1
 2014424:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2014428:	e0bffe17 	ldw	r2,-8(fp)
 201442c:	e0ffff17 	ldw	r3,-4(fp)
 2014430:	1885883a 	add	r2,r3,r2
 2014434:	10800003 	ldbu	r2,0(r2)
 2014438:	10803fcc 	andi	r2,r2,255
 201443c:	1080201c 	xori	r2,r2,128
 2014440:	10bfe004 	addi	r2,r2,-128
 2014444:	10800be0 	cmpeqi	r2,r2,47
 2014448:	1000081e 	bne	r2,zero,201446c <alt_find_file+0xb8>
 201444c:	e0bffe17 	ldw	r2,-8(fp)
 2014450:	e0ffff17 	ldw	r3,-4(fp)
 2014454:	1885883a 	add	r2,r3,r2
 2014458:	10800003 	ldbu	r2,0(r2)
 201445c:	10803fcc 	andi	r2,r2,255
 2014460:	1080201c 	xori	r2,r2,128
 2014464:	10bfe004 	addi	r2,r2,-128
 2014468:	10000a1e 	bne	r2,zero,2014494 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 201446c:	e0bffd17 	ldw	r2,-12(fp)
 2014470:	10c00217 	ldw	r3,8(r2)
 2014474:	e0bffe17 	ldw	r2,-8(fp)
 2014478:	1809883a 	mov	r4,r3
 201447c:	e17fff17 	ldw	r5,-4(fp)
 2014480:	100d883a 	mov	r6,r2
 2014484:	20146840 	call	2014684 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2014488:	1000021e 	bne	r2,zero,2014494 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201448c:	e0bffd17 	ldw	r2,-12(fp)
 2014490:	00000806 	br	20144b4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 2014494:	e0bffd17 	ldw	r2,-12(fp)
 2014498:	10800017 	ldw	r2,0(r2)
 201449c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20144a0:	e0fffd17 	ldw	r3,-12(fp)
 20144a4:	008080b4 	movhi	r2,514
 20144a8:	10aa6c04 	addi	r2,r2,-22096
 20144ac:	18bfcb1e 	bne	r3,r2,20143dc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20144b0:	0005883a 	mov	r2,zero
}
 20144b4:	e037883a 	mov	sp,fp
 20144b8:	dfc00117 	ldw	ra,4(sp)
 20144bc:	df000017 	ldw	fp,0(sp)
 20144c0:	dec00204 	addi	sp,sp,8
 20144c4:	f800283a 	ret

020144c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20144c8:	defffa04 	addi	sp,sp,-24
 20144cc:	dfc00515 	stw	ra,20(sp)
 20144d0:	df000415 	stw	fp,16(sp)
 20144d4:	dc000315 	stw	r16,12(sp)
 20144d8:	df000404 	addi	fp,sp,16
 20144dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 20144e0:	00bffa04 	movi	r2,-24
 20144e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 20144e8:	e03ffc15 	stw	zero,-16(fp)
 20144ec:	00002106 	br	2014574 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 20144f0:	040080b4 	movhi	r16,514
 20144f4:	8425b004 	addi	r16,r16,-26944
 20144f8:	e0bffc17 	ldw	r2,-16(fp)
 20144fc:	1009883a 	mov	r4,r2
 2014500:	01400304 	movi	r5,12
 2014504:	200e2dc0 	call	200e2dc <__mulsi3>
 2014508:	8085883a 	add	r2,r16,r2
 201450c:	10800017 	ldw	r2,0(r2)
 2014510:	1000151e 	bne	r2,zero,2014568 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 2014514:	040080b4 	movhi	r16,514
 2014518:	8425b004 	addi	r16,r16,-26944
 201451c:	e0bffc17 	ldw	r2,-16(fp)
 2014520:	1009883a 	mov	r4,r2
 2014524:	01400304 	movi	r5,12
 2014528:	200e2dc0 	call	200e2dc <__mulsi3>
 201452c:	8085883a 	add	r2,r16,r2
 2014530:	e0fffe17 	ldw	r3,-8(fp)
 2014534:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2014538:	008080b4 	movhi	r2,514
 201453c:	10aa7004 	addi	r2,r2,-22080
 2014540:	10c00017 	ldw	r3,0(r2)
 2014544:	e0bffc17 	ldw	r2,-16(fp)
 2014548:	1880040e 	bge	r3,r2,201455c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 201454c:	008080b4 	movhi	r2,514
 2014550:	10aa7004 	addi	r2,r2,-22080
 2014554:	e0fffc17 	ldw	r3,-16(fp)
 2014558:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 201455c:	e0bffc17 	ldw	r2,-16(fp)
 2014560:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2014564:	00000606 	br	2014580 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2014568:	e0bffc17 	ldw	r2,-16(fp)
 201456c:	10800044 	addi	r2,r2,1
 2014570:	e0bffc15 	stw	r2,-16(fp)
 2014574:	e0bffc17 	ldw	r2,-16(fp)
 2014578:	10800810 	cmplti	r2,r2,32
 201457c:	103fdc1e 	bne	r2,zero,20144f0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2014580:	e0bffd17 	ldw	r2,-12(fp)
}
 2014584:	e6ffff04 	addi	sp,fp,-4
 2014588:	dfc00217 	ldw	ra,8(sp)
 201458c:	df000117 	ldw	fp,4(sp)
 2014590:	dc000017 	ldw	r16,0(sp)
 2014594:	dec00304 	addi	sp,sp,12
 2014598:	f800283a 	ret

0201459c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 201459c:	defffe04 	addi	sp,sp,-8
 20145a0:	df000115 	stw	fp,4(sp)
 20145a4:	df000104 	addi	fp,sp,4
 20145a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 20145ac:	e0bfff17 	ldw	r2,-4(fp)
 20145b0:	10bffe84 	addi	r2,r2,-6
 20145b4:	10c00428 	cmpgeui	r3,r2,16
 20145b8:	18001a1e 	bne	r3,zero,2014624 <alt_exception_cause_generated_bad_addr+0x88>
 20145bc:	100690ba 	slli	r3,r2,2
 20145c0:	00808074 	movhi	r2,513
 20145c4:	10917504 	addi	r2,r2,17876
 20145c8:	1885883a 	add	r2,r3,r2
 20145cc:	10800017 	ldw	r2,0(r2)
 20145d0:	1000683a 	jmp	r2
 20145d4:	02014614 	movui	r8,1304
 20145d8:	02014614 	movui	r8,1304
 20145dc:	02014624 	muli	r8,zero,1304
 20145e0:	02014624 	muli	r8,zero,1304
 20145e4:	02014624 	muli	r8,zero,1304
 20145e8:	02014614 	movui	r8,1304
 20145ec:	0201461c 	xori	r8,zero,1304
 20145f0:	02014624 	muli	r8,zero,1304
 20145f4:	02014614 	movui	r8,1304
 20145f8:	02014614 	movui	r8,1304
 20145fc:	02014624 	muli	r8,zero,1304
 2014600:	02014614 	movui	r8,1304
 2014604:	0201461c 	xori	r8,zero,1304
 2014608:	02014624 	muli	r8,zero,1304
 201460c:	02014624 	muli	r8,zero,1304
 2014610:	02014614 	movui	r8,1304
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2014614:	00800044 	movi	r2,1
 2014618:	00000306 	br	2014628 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201461c:	0005883a 	mov	r2,zero
 2014620:	00000106 	br	2014628 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2014624:	0005883a 	mov	r2,zero
  }
}
 2014628:	e037883a 	mov	sp,fp
 201462c:	df000017 	ldw	fp,0(sp)
 2014630:	dec00104 	addi	sp,sp,4
 2014634:	f800283a 	ret

02014638 <atexit>:
 2014638:	200b883a 	mov	r5,r4
 201463c:	000d883a 	mov	r6,zero
 2014640:	0009883a 	mov	r4,zero
 2014644:	000f883a 	mov	r7,zero
 2014648:	20147001 	jmpi	2014700 <__register_exitproc>

0201464c <exit>:
 201464c:	defffe04 	addi	sp,sp,-8
 2014650:	000b883a 	mov	r5,zero
 2014654:	dc000015 	stw	r16,0(sp)
 2014658:	dfc00115 	stw	ra,4(sp)
 201465c:	2021883a 	mov	r16,r4
 2014660:	20148140 	call	2014814 <__call_exitprocs>
 2014664:	008080b4 	movhi	r2,514
 2014668:	10aa6604 	addi	r2,r2,-22120
 201466c:	11000017 	ldw	r4,0(r2)
 2014670:	20800f17 	ldw	r2,60(r4)
 2014674:	10000126 	beq	r2,zero,201467c <exit+0x30>
 2014678:	103ee83a 	callr	r2
 201467c:	8009883a 	mov	r4,r16
 2014680:	20149a80 	call	20149a8 <_exit>

02014684 <memcmp>:
 2014684:	01c000c4 	movi	r7,3
 2014688:	3980192e 	bgeu	r7,r6,20146f0 <memcmp+0x6c>
 201468c:	2144b03a 	or	r2,r4,r5
 2014690:	11c4703a 	and	r2,r2,r7
 2014694:	10000f26 	beq	r2,zero,20146d4 <memcmp+0x50>
 2014698:	20800003 	ldbu	r2,0(r4)
 201469c:	28c00003 	ldbu	r3,0(r5)
 20146a0:	10c0151e 	bne	r2,r3,20146f8 <memcmp+0x74>
 20146a4:	31bfff84 	addi	r6,r6,-2
 20146a8:	01ffffc4 	movi	r7,-1
 20146ac:	00000406 	br	20146c0 <memcmp+0x3c>
 20146b0:	20800003 	ldbu	r2,0(r4)
 20146b4:	28c00003 	ldbu	r3,0(r5)
 20146b8:	31bfffc4 	addi	r6,r6,-1
 20146bc:	10c00e1e 	bne	r2,r3,20146f8 <memcmp+0x74>
 20146c0:	21000044 	addi	r4,r4,1
 20146c4:	29400044 	addi	r5,r5,1
 20146c8:	31fff91e 	bne	r6,r7,20146b0 <memcmp+0x2c>
 20146cc:	0005883a 	mov	r2,zero
 20146d0:	f800283a 	ret
 20146d4:	20c00017 	ldw	r3,0(r4)
 20146d8:	28800017 	ldw	r2,0(r5)
 20146dc:	1880041e 	bne	r3,r2,20146f0 <memcmp+0x6c>
 20146e0:	31bfff04 	addi	r6,r6,-4
 20146e4:	21000104 	addi	r4,r4,4
 20146e8:	29400104 	addi	r5,r5,4
 20146ec:	39bff936 	bltu	r7,r6,20146d4 <memcmp+0x50>
 20146f0:	303fe91e 	bne	r6,zero,2014698 <memcmp+0x14>
 20146f4:	003ff506 	br	20146cc <memcmp+0x48>
 20146f8:	10c5c83a 	sub	r2,r2,r3
 20146fc:	f800283a 	ret

02014700 <__register_exitproc>:
 2014700:	008080b4 	movhi	r2,514
 2014704:	defffa04 	addi	sp,sp,-24
 2014708:	10aa6604 	addi	r2,r2,-22120
 201470c:	dc000315 	stw	r16,12(sp)
 2014710:	14000017 	ldw	r16,0(r2)
 2014714:	dc400415 	stw	r17,16(sp)
 2014718:	dfc00515 	stw	ra,20(sp)
 201471c:	80805217 	ldw	r2,328(r16)
 2014720:	2023883a 	mov	r17,r4
 2014724:	10003626 	beq	r2,zero,2014800 <__register_exitproc+0x100>
 2014728:	10c00117 	ldw	r3,4(r2)
 201472c:	010007c4 	movi	r4,31
 2014730:	20c00e16 	blt	r4,r3,201476c <__register_exitproc+0x6c>
 2014734:	1a400044 	addi	r9,r3,1
 2014738:	8800211e 	bne	r17,zero,20147c0 <__register_exitproc+0xc0>
 201473c:	18c00084 	addi	r3,r3,2
 2014740:	18c7883a 	add	r3,r3,r3
 2014744:	18c7883a 	add	r3,r3,r3
 2014748:	12400115 	stw	r9,4(r2)
 201474c:	10c7883a 	add	r3,r2,r3
 2014750:	19400015 	stw	r5,0(r3)
 2014754:	0005883a 	mov	r2,zero
 2014758:	dfc00517 	ldw	ra,20(sp)
 201475c:	dc400417 	ldw	r17,16(sp)
 2014760:	dc000317 	ldw	r16,12(sp)
 2014764:	dec00604 	addi	sp,sp,24
 2014768:	f800283a 	ret
 201476c:	00800034 	movhi	r2,0
 2014770:	10800004 	addi	r2,r2,0
 2014774:	10002526 	beq	r2,zero,201480c <__register_exitproc+0x10c>
 2014778:	01006404 	movi	r4,400
 201477c:	d9400015 	stw	r5,0(sp)
 2014780:	d9800115 	stw	r6,4(sp)
 2014784:	d9c00215 	stw	r7,8(sp)
 2014788:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 201478c:	d9400017 	ldw	r5,0(sp)
 2014790:	d9800117 	ldw	r6,4(sp)
 2014794:	d9c00217 	ldw	r7,8(sp)
 2014798:	10001c26 	beq	r2,zero,201480c <__register_exitproc+0x10c>
 201479c:	80c05217 	ldw	r3,328(r16)
 20147a0:	10000115 	stw	zero,4(r2)
 20147a4:	02400044 	movi	r9,1
 20147a8:	10c00015 	stw	r3,0(r2)
 20147ac:	80805215 	stw	r2,328(r16)
 20147b0:	10006215 	stw	zero,392(r2)
 20147b4:	10006315 	stw	zero,396(r2)
 20147b8:	0007883a 	mov	r3,zero
 20147bc:	883fdf26 	beq	r17,zero,201473c <__register_exitproc+0x3c>
 20147c0:	18d1883a 	add	r8,r3,r3
 20147c4:	4211883a 	add	r8,r8,r8
 20147c8:	1211883a 	add	r8,r2,r8
 20147cc:	41802215 	stw	r6,136(r8)
 20147d0:	01000044 	movi	r4,1
 20147d4:	11806217 	ldw	r6,392(r2)
 20147d8:	20c8983a 	sll	r4,r4,r3
 20147dc:	310cb03a 	or	r6,r6,r4
 20147e0:	11806215 	stw	r6,392(r2)
 20147e4:	41c04215 	stw	r7,264(r8)
 20147e8:	01800084 	movi	r6,2
 20147ec:	89bfd31e 	bne	r17,r6,201473c <__register_exitproc+0x3c>
 20147f0:	11806317 	ldw	r6,396(r2)
 20147f4:	3108b03a 	or	r4,r6,r4
 20147f8:	11006315 	stw	r4,396(r2)
 20147fc:	003fcf06 	br	201473c <__register_exitproc+0x3c>
 2014800:	80805304 	addi	r2,r16,332
 2014804:	80805215 	stw	r2,328(r16)
 2014808:	003fc706 	br	2014728 <__register_exitproc+0x28>
 201480c:	00bfffc4 	movi	r2,-1
 2014810:	003fd106 	br	2014758 <__register_exitproc+0x58>

02014814 <__call_exitprocs>:
 2014814:	008080b4 	movhi	r2,514
 2014818:	10aa6604 	addi	r2,r2,-22120
 201481c:	10800017 	ldw	r2,0(r2)
 2014820:	defff404 	addi	sp,sp,-48
 2014824:	dd800815 	stw	r22,32(sp)
 2014828:	d8800015 	stw	r2,0(sp)
 201482c:	10805204 	addi	r2,r2,328
 2014830:	dd000615 	stw	r20,24(sp)
 2014834:	dc800415 	stw	r18,16(sp)
 2014838:	dfc00b15 	stw	ra,44(sp)
 201483c:	df000a15 	stw	fp,40(sp)
 2014840:	ddc00915 	stw	r23,36(sp)
 2014844:	dd400715 	stw	r21,28(sp)
 2014848:	dcc00515 	stw	r19,20(sp)
 201484c:	dc400315 	stw	r17,12(sp)
 2014850:	dc000215 	stw	r16,8(sp)
 2014854:	2025883a 	mov	r18,r4
 2014858:	2829883a 	mov	r20,r5
 201485c:	d8800115 	stw	r2,4(sp)
 2014860:	05bfffc4 	movi	r22,-1
 2014864:	d8800017 	ldw	r2,0(sp)
 2014868:	14c05217 	ldw	r19,328(r2)
 201486c:	98001d26 	beq	r19,zero,20148e4 <__call_exitprocs+0xd0>
 2014870:	dd400117 	ldw	r21,4(sp)
 2014874:	98800117 	ldw	r2,4(r19)
 2014878:	173fffc4 	addi	fp,r2,-1
 201487c:	e0000d16 	blt	fp,zero,20148b4 <__call_exitprocs+0xa0>
 2014880:	14000044 	addi	r16,r2,1
 2014884:	8421883a 	add	r16,r16,r16
 2014888:	8421883a 	add	r16,r16,r16
 201488c:	84402004 	addi	r17,r16,128
 2014890:	9c63883a 	add	r17,r19,r17
 2014894:	9c21883a 	add	r16,r19,r16
 2014898:	a0001e26 	beq	r20,zero,2014914 <__call_exitprocs+0x100>
 201489c:	80804017 	ldw	r2,256(r16)
 20148a0:	15001c26 	beq	r2,r20,2014914 <__call_exitprocs+0x100>
 20148a4:	e73fffc4 	addi	fp,fp,-1
 20148a8:	843fff04 	addi	r16,r16,-4
 20148ac:	8c7fff04 	addi	r17,r17,-4
 20148b0:	e5bff91e 	bne	fp,r22,2014898 <__call_exitprocs+0x84>
 20148b4:	00800034 	movhi	r2,0
 20148b8:	10800004 	addi	r2,r2,0
 20148bc:	10000926 	beq	r2,zero,20148e4 <__call_exitprocs+0xd0>
 20148c0:	98800117 	ldw	r2,4(r19)
 20148c4:	1000311e 	bne	r2,zero,201498c <__call_exitprocs+0x178>
 20148c8:	98800017 	ldw	r2,0(r19)
 20148cc:	10003426 	beq	r2,zero,20149a0 <__call_exitprocs+0x18c>
 20148d0:	9809883a 	mov	r4,r19
 20148d4:	a8800015 	stw	r2,0(r21)
 20148d8:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 20148dc:	acc00017 	ldw	r19,0(r21)
 20148e0:	983fe41e 	bne	r19,zero,2014874 <__call_exitprocs+0x60>
 20148e4:	dfc00b17 	ldw	ra,44(sp)
 20148e8:	df000a17 	ldw	fp,40(sp)
 20148ec:	ddc00917 	ldw	r23,36(sp)
 20148f0:	dd800817 	ldw	r22,32(sp)
 20148f4:	dd400717 	ldw	r21,28(sp)
 20148f8:	dd000617 	ldw	r20,24(sp)
 20148fc:	dcc00517 	ldw	r19,20(sp)
 2014900:	dc800417 	ldw	r18,16(sp)
 2014904:	dc400317 	ldw	r17,12(sp)
 2014908:	dc000217 	ldw	r16,8(sp)
 201490c:	dec00c04 	addi	sp,sp,48
 2014910:	f800283a 	ret
 2014914:	98800117 	ldw	r2,4(r19)
 2014918:	80c00017 	ldw	r3,0(r16)
 201491c:	10bfffc4 	addi	r2,r2,-1
 2014920:	17001526 	beq	r2,fp,2014978 <__call_exitprocs+0x164>
 2014924:	80000015 	stw	zero,0(r16)
 2014928:	183fde26 	beq	r3,zero,20148a4 <__call_exitprocs+0x90>
 201492c:	00800044 	movi	r2,1
 2014930:	1708983a 	sll	r4,r2,fp
 2014934:	98806217 	ldw	r2,392(r19)
 2014938:	9dc00117 	ldw	r23,4(r19)
 201493c:	2084703a 	and	r2,r4,r2
 2014940:	1000061e 	bne	r2,zero,201495c <__call_exitprocs+0x148>
 2014944:	183ee83a 	callr	r3
 2014948:	98800117 	ldw	r2,4(r19)
 201494c:	15ffc51e 	bne	r2,r23,2014864 <__call_exitprocs+0x50>
 2014950:	a8800017 	ldw	r2,0(r21)
 2014954:	14ffd326 	beq	r2,r19,20148a4 <__call_exitprocs+0x90>
 2014958:	003fc206 	br	2014864 <__call_exitprocs+0x50>
 201495c:	98806317 	ldw	r2,396(r19)
 2014960:	2084703a 	and	r2,r4,r2
 2014964:	1000061e 	bne	r2,zero,2014980 <__call_exitprocs+0x16c>
 2014968:	89400017 	ldw	r5,0(r17)
 201496c:	9009883a 	mov	r4,r18
 2014970:	183ee83a 	callr	r3
 2014974:	003ff406 	br	2014948 <__call_exitprocs+0x134>
 2014978:	9f000115 	stw	fp,4(r19)
 201497c:	003fea06 	br	2014928 <__call_exitprocs+0x114>
 2014980:	89000017 	ldw	r4,0(r17)
 2014984:	183ee83a 	callr	r3
 2014988:	003fef06 	br	2014948 <__call_exitprocs+0x134>
 201498c:	98800017 	ldw	r2,0(r19)
 2014990:	982b883a 	mov	r21,r19
 2014994:	1027883a 	mov	r19,r2
 2014998:	983fb61e 	bne	r19,zero,2014874 <__call_exitprocs+0x60>
 201499c:	003fd106 	br	20148e4 <__call_exitprocs+0xd0>
 20149a0:	0005883a 	mov	r2,zero
 20149a4:	003ffa06 	br	2014990 <__call_exitprocs+0x17c>

020149a8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20149a8:	defffd04 	addi	sp,sp,-12
 20149ac:	df000215 	stw	fp,8(sp)
 20149b0:	df000204 	addi	fp,sp,8
 20149b4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20149b8:	0001883a 	nop
 20149bc:	e0bfff17 	ldw	r2,-4(fp)
 20149c0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20149c4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20149c8:	10000226 	beq	r2,zero,20149d4 <_exit+0x2c>
    ALT_SIM_FAIL();
 20149cc:	002af070 	cmpltui	zero,zero,43969
 20149d0:	00000106 	br	20149d8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 20149d4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20149d8:	003fff06 	br	20149d8 <_exit+0x30>
